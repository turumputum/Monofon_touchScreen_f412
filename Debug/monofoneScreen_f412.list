
monofoneScreen_f412.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000189d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003ac90  08018ba8  08018ba8  00028ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08053838  08053838  00070344  2**0
                  CONTENTS
  4 .ARM          00000008  08053838  08053838  00063838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08053840  08053840  00070344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08053840  08053840  00063840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08053844  08053844  00063844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  08053848  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b748  20000344  08053b8c  00070344  2**2
                  ALLOC
 10 ._user_heap_stack 00004204  2000ba8c  08053b8c  0007ba8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00070344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037b27  00000000  00000000  00070374  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006de1  00000000  00000000  000a7e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002408  00000000  00000000  000aec80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002bb1a  00000000  00000000  000b1088  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00025fd0  00000000  00000000  000dcba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d8d8b  00000000  00000000  00102b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000e9  00000000  00000000  001db8fd  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000020d0  00000000  00000000  001db9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000a41c  00000000  00000000  001ddab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000344 	.word	0x20000344
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018b8c 	.word	0x08018b8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000348 	.word	0x20000348
 800020c:	08018b8c 	.word	0x08018b8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000412:	f1a4 0401 	sub.w	r4, r4, #1
 8000416:	d1e9      	bne.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2f>:
 8000bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd8:	bf24      	itt	cs
 8000bda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bde:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be2:	d90d      	bls.n	8000c00 <__aeabi_d2f+0x30>
 8000be4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c04:	d121      	bne.n	8000c4a <__aeabi_d2f+0x7a>
 8000c06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0a:	bfbc      	itt	lt
 8000c0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	4770      	bxlt	lr
 8000c12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c16:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1a:	f1c2 0218 	rsb	r2, r2, #24
 8000c1e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c22:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c26:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2a:	bf18      	it	ne
 8000c2c:	f040 0001 	orrne.w	r0, r0, #1
 8000c30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c38:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c3c:	ea40 000c 	orr.w	r0, r0, ip
 8000c40:	fa23 f302 	lsr.w	r3, r3, r2
 8000c44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c48:	e7cc      	b.n	8000be4 <__aeabi_d2f+0x14>
 8000c4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4e:	d107      	bne.n	8000c60 <__aeabi_d2f+0x90>
 8000c50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c54:	bf1e      	ittt	ne
 8000c56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5e:	4770      	bxne	lr
 8000c60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b972 	b.w	8000f6c <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	9e08      	ldr	r6, [sp, #32]
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	4688      	mov	r8, r1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d14b      	bne.n	8000d46 <__udivmoddi4+0xa6>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4615      	mov	r5, r2
 8000cb2:	d967      	bls.n	8000d84 <__udivmoddi4+0xe4>
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	b14a      	cbz	r2, 8000cce <__udivmoddi4+0x2e>
 8000cba:	f1c2 0720 	rsb	r7, r2, #32
 8000cbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc2:	fa20 f707 	lsr.w	r7, r0, r7
 8000cc6:	4095      	lsls	r5, r2
 8000cc8:	ea47 0803 	orr.w	r8, r7, r3
 8000ccc:	4094      	lsls	r4, r2
 8000cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd8:	fa1f fc85 	uxth.w	ip, r5
 8000cdc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ce4:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d909      	bls.n	8000d00 <__udivmoddi4+0x60>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cf2:	f080 811b 	bcs.w	8000f2c <__udivmoddi4+0x28c>
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	f240 8118 	bls.w	8000f2c <__udivmoddi4+0x28c>
 8000cfc:	3f02      	subs	r7, #2
 8000cfe:	442b      	add	r3, r5
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d10:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d14:	45a4      	cmp	ip, r4
 8000d16:	d909      	bls.n	8000d2c <__udivmoddi4+0x8c>
 8000d18:	192c      	adds	r4, r5, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	f080 8107 	bcs.w	8000f30 <__udivmoddi4+0x290>
 8000d22:	45a4      	cmp	ip, r4
 8000d24:	f240 8104 	bls.w	8000f30 <__udivmoddi4+0x290>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	442c      	add	r4, r5
 8000d2c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d30:	eba4 040c 	sub.w	r4, r4, ip
 8000d34:	2700      	movs	r7, #0
 8000d36:	b11e      	cbz	r6, 8000d40 <__udivmoddi4+0xa0>
 8000d38:	40d4      	lsrs	r4, r2
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0xbe>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	f000 80eb 	beq.w	8000f26 <__udivmoddi4+0x286>
 8000d50:	2700      	movs	r7, #0
 8000d52:	e9c6 0100 	strd	r0, r1, [r6]
 8000d56:	4638      	mov	r0, r7
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	fab3 f783 	clz	r7, r3
 8000d62:	2f00      	cmp	r7, #0
 8000d64:	d147      	bne.n	8000df6 <__udivmoddi4+0x156>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xd0>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 80fa 	bhi.w	8000f64 <__udivmoddi4+0x2c4>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb61 0303 	sbc.w	r3, r1, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4698      	mov	r8, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d0e0      	beq.n	8000d40 <__udivmoddi4+0xa0>
 8000d7e:	e9c6 4800 	strd	r4, r8, [r6]
 8000d82:	e7dd      	b.n	8000d40 <__udivmoddi4+0xa0>
 8000d84:	b902      	cbnz	r2, 8000d88 <__udivmoddi4+0xe8>
 8000d86:	deff      	udf	#255	; 0xff
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	f040 808f 	bne.w	8000eb0 <__udivmoddi4+0x210>
 8000d92:	1b49      	subs	r1, r1, r5
 8000d94:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d98:	fa1f f885 	uxth.w	r8, r5
 8000d9c:	2701      	movs	r7, #1
 8000d9e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000da2:	0c23      	lsrs	r3, r4, #16
 8000da4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dac:	fb08 f10c 	mul.w	r1, r8, ip
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x124>
 8000db4:	18eb      	adds	r3, r5, r3
 8000db6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x122>
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2bc>
 8000dc2:	4684      	mov	ip, r0
 8000dc4:	1a59      	subs	r1, r3, r1
 8000dc6:	b2a3      	uxth	r3, r4
 8000dc8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dcc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dd4:	fb08 f800 	mul.w	r8, r8, r0
 8000dd8:	45a0      	cmp	r8, r4
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x14c>
 8000ddc:	192c      	adds	r4, r5, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x14a>
 8000de4:	45a0      	cmp	r8, r4
 8000de6:	f200 80b6 	bhi.w	8000f56 <__udivmoddi4+0x2b6>
 8000dea:	4618      	mov	r0, r3
 8000dec:	eba4 0408 	sub.w	r4, r4, r8
 8000df0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000df4:	e79f      	b.n	8000d36 <__udivmoddi4+0x96>
 8000df6:	f1c7 0c20 	rsb	ip, r7, #32
 8000dfa:	40bb      	lsls	r3, r7
 8000dfc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e00:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e04:	fa01 f407 	lsl.w	r4, r1, r7
 8000e08:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e0c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e10:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e14:	4325      	orrs	r5, r4
 8000e16:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e1a:	0c2c      	lsrs	r4, r5, #16
 8000e1c:	fb08 3319 	mls	r3, r8, r9, r3
 8000e20:	fa1f fa8e 	uxth.w	sl, lr
 8000e24:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e28:	fb09 f40a 	mul.w	r4, r9, sl
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	fa02 f207 	lsl.w	r2, r2, r7
 8000e32:	fa00 f107 	lsl.w	r1, r0, r7
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b0>
 8000e38:	eb1e 0303 	adds.w	r3, lr, r3
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	f080 8087 	bcs.w	8000f52 <__udivmoddi4+0x2b2>
 8000e44:	429c      	cmp	r4, r3
 8000e46:	f240 8084 	bls.w	8000f52 <__udivmoddi4+0x2b2>
 8000e4a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4e:	4473      	add	r3, lr
 8000e50:	1b1b      	subs	r3, r3, r4
 8000e52:	b2ad      	uxth	r5, r5
 8000e54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e58:	fb08 3310 	mls	r3, r8, r0, r3
 8000e5c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e60:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e64:	45a2      	cmp	sl, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1da>
 8000e68:	eb1e 0404 	adds.w	r4, lr, r4
 8000e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e70:	d26b      	bcs.n	8000f4a <__udivmoddi4+0x2aa>
 8000e72:	45a2      	cmp	sl, r4
 8000e74:	d969      	bls.n	8000f4a <__udivmoddi4+0x2aa>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4474      	add	r4, lr
 8000e7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	eba4 040a 	sub.w	r4, r4, sl
 8000e86:	454c      	cmp	r4, r9
 8000e88:	46c2      	mov	sl, r8
 8000e8a:	464b      	mov	r3, r9
 8000e8c:	d354      	bcc.n	8000f38 <__udivmoddi4+0x298>
 8000e8e:	d051      	beq.n	8000f34 <__udivmoddi4+0x294>
 8000e90:	2e00      	cmp	r6, #0
 8000e92:	d069      	beq.n	8000f68 <__udivmoddi4+0x2c8>
 8000e94:	ebb1 050a 	subs.w	r5, r1, sl
 8000e98:	eb64 0403 	sbc.w	r4, r4, r3
 8000e9c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea0:	40fd      	lsrs	r5, r7
 8000ea2:	40fc      	lsrs	r4, r7
 8000ea4:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea8:	e9c6 5400 	strd	r5, r4, [r6]
 8000eac:	2700      	movs	r7, #0
 8000eae:	e747      	b.n	8000d40 <__udivmoddi4+0xa0>
 8000eb0:	f1c2 0320 	rsb	r3, r2, #32
 8000eb4:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb8:	4095      	lsls	r5, r2
 8000eba:	fa01 f002 	lsl.w	r0, r1, r2
 8000ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ec6:	4338      	orrs	r0, r7
 8000ec8:	0c01      	lsrs	r1, r0, #16
 8000eca:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ece:	fa1f f885 	uxth.w	r8, r5
 8000ed2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ed6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eda:	fb07 f308 	mul.w	r3, r7, r8
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x256>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eec:	d22f      	bcs.n	8000f4e <__udivmoddi4+0x2ae>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d92d      	bls.n	8000f4e <__udivmoddi4+0x2ae>
 8000ef2:	3f02      	subs	r7, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1acb      	subs	r3, r1, r3
 8000ef8:	b281      	uxth	r1, r0
 8000efa:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f06:	fb00 f308 	mul.w	r3, r0, r8
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x27e>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f14:	d217      	bcs.n	8000f46 <__udivmoddi4+0x2a6>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d915      	bls.n	8000f46 <__udivmoddi4+0x2a6>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1ac9      	subs	r1, r1, r3
 8000f20:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f24:	e73b      	b.n	8000d9e <__udivmoddi4+0xfe>
 8000f26:	4637      	mov	r7, r6
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e709      	b.n	8000d40 <__udivmoddi4+0xa0>
 8000f2c:	4607      	mov	r7, r0
 8000f2e:	e6e7      	b.n	8000d00 <__udivmoddi4+0x60>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6fb      	b.n	8000d2c <__udivmoddi4+0x8c>
 8000f34:	4541      	cmp	r1, r8
 8000f36:	d2ab      	bcs.n	8000e90 <__udivmoddi4+0x1f0>
 8000f38:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f3c:	eb69 020e 	sbc.w	r2, r9, lr
 8000f40:	3801      	subs	r0, #1
 8000f42:	4613      	mov	r3, r2
 8000f44:	e7a4      	b.n	8000e90 <__udivmoddi4+0x1f0>
 8000f46:	4660      	mov	r0, ip
 8000f48:	e7e9      	b.n	8000f1e <__udivmoddi4+0x27e>
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	e795      	b.n	8000e7a <__udivmoddi4+0x1da>
 8000f4e:	4667      	mov	r7, ip
 8000f50:	e7d1      	b.n	8000ef6 <__udivmoddi4+0x256>
 8000f52:	4681      	mov	r9, r0
 8000f54:	e77c      	b.n	8000e50 <__udivmoddi4+0x1b0>
 8000f56:	3802      	subs	r0, #2
 8000f58:	442c      	add	r4, r5
 8000f5a:	e747      	b.n	8000dec <__udivmoddi4+0x14c>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	442b      	add	r3, r5
 8000f62:	e72f      	b.n	8000dc4 <__udivmoddi4+0x124>
 8000f64:	4638      	mov	r0, r7
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xda>
 8000f68:	4637      	mov	r7, r6
 8000f6a:	e6e9      	b.n	8000d40 <__udivmoddi4+0xa0>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <ST7789_WriteCommand>:
/**
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <ST7789_WriteCommand+0x40>)
 8000f80:	f004 feea 	bl	8005d58 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000f84:	2200      	movs	r2, #0
 8000f86:	2140      	movs	r1, #64	; 0x40
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <ST7789_WriteCommand+0x40>)
 8000f8a:	f004 fee5 	bl	8005d58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f8e:	1df9      	adds	r1, r7, #7
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	2201      	movs	r2, #1
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <ST7789_WriteCommand+0x44>)
 8000f98:	f008 fdc8 	bl	8009b2c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <ST7789_WriteCommand+0x40>)
 8000fa2:	f004 fed9 	bl	8005d58 <HAL_GPIO_WritePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	20002588 	.word	0x20002588

08000fb8 <ST7789_WriteData>:
 * @brief Write data to ST7789 controller
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	4815      	ldr	r0, [pc, #84]	; (800101c <ST7789_WriteData+0x64>)
 8000fc8:	f004 fec6 	bl	8005d58 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2140      	movs	r1, #64	; 0x40
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <ST7789_WriteData+0x64>)
 8000fd2:	f004 fec1 	bl	8005d58 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000fd6:	e015      	b.n	8001004 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	bf28      	it	cs
 8000fe2:	4613      	movcs	r3, r2
 8000fe4:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000fe6:	89fa      	ldrh	r2, [r7, #14]
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	480c      	ldr	r0, [pc, #48]	; (8001020 <ST7789_WriteData+0x68>)
 8000ff0:	f008 fd9c 	bl	8009b2c <HAL_SPI_Transmit>
		buff += chunk_size;
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1e6      	bne.n	8000fd8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 800100a:	2201      	movs	r2, #1
 800100c:	2110      	movs	r1, #16
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <ST7789_WriteData+0x64>)
 8001010:	f004 fea2 	bl	8005d58 <HAL_GPIO_WritePin>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020000 	.word	0x40020000
 8001020:	20002588 	.word	0x20002588

08001024 <ST7789_WriteSmallData>:
/**
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800102e:	2200      	movs	r2, #0
 8001030:	2110      	movs	r1, #16
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <ST7789_WriteSmallData+0x40>)
 8001034:	f004 fe90 	bl	8005d58 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001038:	2201      	movs	r2, #1
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <ST7789_WriteSmallData+0x40>)
 800103e:	f004 fe8b 	bl	8005d58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001042:	1df9      	adds	r1, r7, #7
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	2201      	movs	r2, #1
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <ST7789_WriteSmallData+0x44>)
 800104c:	f008 fd6e 	bl	8009b2c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001050:	2201      	movs	r2, #1
 8001052:	2110      	movs	r1, #16
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <ST7789_WriteSmallData+0x40>)
 8001056:	f004 fe7f 	bl	8005d58 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020000 	.word	0x40020000
 8001068:	20002588 	.word	0x20002588

0800106c <ST7789_SetRotation>:
/**
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001076:	2036      	movs	r0, #54	; 0x36
 8001078:	f7ff ff7a 	bl	8000f70 <ST7789_WriteCommand>
	switch (m) {
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d81a      	bhi.n	80010b8 <ST7789_SetRotation+0x4c>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <ST7789_SetRotation+0x1c>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001099 	.word	0x08001099
 800108c:	080010a1 	.word	0x080010a1
 8001090:	080010a9 	.word	0x080010a9
 8001094:	080010b1 	.word	0x080010b1
	case 0:
		ST7789_WriteSmallData(
 8001098:	20c0      	movs	r0, #192	; 0xc0
 800109a:	f7ff ffc3 	bl	8001024 <ST7789_WriteSmallData>
				ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
		break;
 800109e:	e00c      	b.n	80010ba <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(
 80010a0:	20a0      	movs	r0, #160	; 0xa0
 80010a2:	f7ff ffbf 	bl	8001024 <ST7789_WriteSmallData>
				ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
		break;
 80010a6:	e008      	b.n	80010ba <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ffbb 	bl	8001024 <ST7789_WriteSmallData>
		break;
 80010ae:	e004      	b.n	80010ba <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(
 80010b0:	2060      	movs	r0, #96	; 0x60
 80010b2:	f7ff ffb7 	bl	8001024 <ST7789_WriteSmallData>
				ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
		break;
 80010b6:	e000      	b.n	80010ba <ST7789_SetRotation+0x4e>
	default:
		break;
 80010b8:	bf00      	nop
	}
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop

080010c4 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4604      	mov	r4, r0
 80010cc:	4608      	mov	r0, r1
 80010ce:	4611      	mov	r1, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	4623      	mov	r3, r4
 80010d4:	80fb      	strh	r3, [r7, #6]
 80010d6:	4603      	mov	r3, r0
 80010d8:	80bb      	strh	r3, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	807b      	strh	r3, [r7, #2]
 80010de:	4613      	mov	r3, r2
 80010e0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	4825      	ldr	r0, [pc, #148]	; (800117c <ST7789_SetAddressWindow+0xb8>)
 80010e8:	f004 fe36 	bl	8005d58 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	3350      	adds	r3, #80	; 0x50
 80010f0:	82fb      	strh	r3, [r7, #22]
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	3350      	adds	r3, #80	; 0x50
 80010f6:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	827b      	strh	r3, [r7, #18]
 80010fc:	883b      	ldrh	r3, [r7, #0]
 80010fe:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 8001100:	202a      	movs	r0, #42	; 0x2a
 8001102:	f7ff ff35 	bl	8000f70 <ST7789_WriteCommand>
	{
		uint8_t data[] = { x_start >> 8, x_start & 0xFF, x_end >> 8, x_end
 8001106:	8afb      	ldrh	r3, [r7, #22]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b29b      	uxth	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	733b      	strb	r3, [r7, #12]
 8001110:	8afb      	ldrh	r3, [r7, #22]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	737b      	strb	r3, [r7, #13]
 8001116:	8abb      	ldrh	r3, [r7, #20]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29b      	uxth	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	73bb      	strb	r3, [r7, #14]
 8001120:	8abb      	ldrh	r3, [r7, #20]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
				& 0xFF };
		ST7789_WriteData(data, sizeof(data));
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2104      	movs	r1, #4
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff43 	bl	8000fb8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001132:	202b      	movs	r0, #43	; 0x2b
 8001134:	f7ff ff1c 	bl	8000f70 <ST7789_WriteCommand>
	{
		uint8_t data[] = { y_start >> 8, y_start & 0xFF, y_end >> 8, y_end
 8001138:	8a7b      	ldrh	r3, [r7, #18]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	b29b      	uxth	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	723b      	strb	r3, [r7, #8]
 8001142:	8a7b      	ldrh	r3, [r7, #18]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	727b      	strb	r3, [r7, #9]
 8001148:	8a3b      	ldrh	r3, [r7, #16]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b29b      	uxth	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	72bb      	strb	r3, [r7, #10]
 8001152:	8a3b      	ldrh	r3, [r7, #16]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	72fb      	strb	r3, [r7, #11]
				& 0xFF };
		ST7789_WriteData(data, sizeof(data));
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	2104      	movs	r1, #4
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff2a 	bl	8000fb8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001164:	202c      	movs	r0, #44	; 0x2c
 8001166:	f7ff ff03 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800116a:	2201      	movs	r2, #1
 800116c:	2110      	movs	r1, #16
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <ST7789_SetAddressWindow+0xb8>)
 8001170:	f004 fdf2 	bl	8005d58 <HAL_GPIO_WritePin>
}
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	40020000 	.word	0x40020000

08001180 <ST7789_Init>:
/**
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void) {
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 8001186:	2019      	movs	r0, #25
 8001188:	f003 f960 	bl	800444c <HAL_Delay>
	ST7789_RST_Clr();
 800118c:	2200      	movs	r2, #0
 800118e:	2110      	movs	r1, #16
 8001190:	4846      	ldr	r0, [pc, #280]	; (80012ac <ST7789_Init+0x12c>)
 8001192:	f004 fde1 	bl	8005d58 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8001196:	2019      	movs	r0, #25
 8001198:	f003 f958 	bl	800444c <HAL_Delay>
	ST7789_RST_Set();
 800119c:	2201      	movs	r2, #1
 800119e:	2110      	movs	r1, #16
 80011a0:	4842      	ldr	r0, [pc, #264]	; (80012ac <ST7789_Init+0x12c>)
 80011a2:	f004 fdd9 	bl	8005d58 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80011a6:	2032      	movs	r0, #50	; 0x32
 80011a8:	f003 f950 	bl	800444c <HAL_Delay>

	ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80011ac:	203a      	movs	r0, #58	; 0x3a
 80011ae:	f7ff fedf 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80011b2:	2055      	movs	r0, #85	; 0x55
 80011b4:	f7ff ff36 	bl	8001024 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xB2);				//	Porch control
 80011b8:	20b2      	movs	r0, #178	; 0xb2
 80011ba:	f7ff fed9 	bl	8000f70 <ST7789_WriteCommand>
	{
		uint8_t data[] = { 0x0C, 0x0C, 0x00, 0x33, 0x33 };
 80011be:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <ST7789_Init+0x130>)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c8:	6018      	str	r0, [r3, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	2105      	movs	r1, #5
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff feef 	bl	8000fb8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff ff46 	bl	800106c <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
	ST7789_WriteCommand(0XB7);				//	Gate Control
 80011e0:	20b7      	movs	r0, #183	; 0xb7
 80011e2:	f7ff fec5 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteSmallData(0x35);			//	Default value
 80011e6:	2035      	movs	r0, #53	; 0x35
 80011e8:	f7ff ff1c 	bl	8001024 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xBB);				//	VCOM setting
 80011ec:	20bb      	movs	r0, #187	; 0xbb
 80011ee:	f7ff febf 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80011f2:	2019      	movs	r0, #25
 80011f4:	f7ff ff16 	bl	8001024 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xC0);				//	LCMCTRL
 80011f8:	20c0      	movs	r0, #192	; 0xc0
 80011fa:	f7ff feb9 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteSmallData(0x2C);			//	Default value
 80011fe:	202c      	movs	r0, #44	; 0x2c
 8001200:	f7ff ff10 	bl	8001024 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8001204:	20c2      	movs	r0, #194	; 0xc2
 8001206:	f7ff feb3 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteSmallData(0x01);			//	Default value
 800120a:	2001      	movs	r0, #1
 800120c:	f7ff ff0a 	bl	8001024 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xC3);				//	VRH set
 8001210:	20c3      	movs	r0, #195	; 0xc3
 8001212:	f7ff fead 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteSmallData(0x12);		//	+-4.45v (defalut +-4.1v for 0x0B)
 8001216:	2012      	movs	r0, #18
 8001218:	f7ff ff04 	bl	8001024 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xC4);				//	VDV set
 800121c:	20c4      	movs	r0, #196	; 0xc4
 800121e:	f7ff fea7 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteSmallData(0x20);			//	Default value
 8001222:	2020      	movs	r0, #32
 8001224:	f7ff fefe 	bl	8001024 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xC6);			//	Frame rate control in normal mode
 8001228:	20c6      	movs	r0, #198	; 0xc6
 800122a:	f7ff fea1 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 800122e:	200f      	movs	r0, #15
 8001230:	f7ff fef8 	bl	8001024 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xD0);				//	Power control
 8001234:	20d0      	movs	r0, #208	; 0xd0
 8001236:	f7ff fe9b 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteSmallData(0xA4);			//	Default value
 800123a:	20a4      	movs	r0, #164	; 0xa4
 800123c:	f7ff fef2 	bl	8001024 <ST7789_WriteSmallData>
	ST7789_WriteSmallData(0xA1);			//	Default value
 8001240:	20a1      	movs	r0, #161	; 0xa1
 8001242:	f7ff feef 	bl	8001024 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001246:	20e0      	movs	r0, #224	; 0xe0
 8001248:	f7ff fe92 	bl	8000f70 <ST7789_WriteCommand>
	{
		uint8_t data[] = { 0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C,
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <ST7789_Init+0x134>)
 800124e:	f107 0410 	add.w	r4, r7, #16
 8001252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001254:	c407      	stmia	r4!, {r0, r1, r2}
 8001256:	8023      	strh	r3, [r4, #0]
				0x18, 0x0D, 0x0B, 0x1F, 0x23 };
		ST7789_WriteData(data, sizeof(data));
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	210e      	movs	r1, #14
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff feaa 	bl	8000fb8 <ST7789_WriteData>
	}

	ST7789_WriteCommand(0xE1);
 8001264:	20e1      	movs	r0, #225	; 0xe1
 8001266:	f7ff fe83 	bl	8000f70 <ST7789_WriteCommand>
	{
		uint8_t data[] = { 0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51,
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <ST7789_Init+0x138>)
 800126c:	463c      	mov	r4, r7
 800126e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001270:	c407      	stmia	r4!, {r0, r1, r2}
 8001272:	8023      	strh	r3, [r4, #0]
				0x2F, 0x1F, 0x1F, 0x20, 0x23 };
		ST7789_WriteData(data, sizeof(data));
 8001274:	463b      	mov	r3, r7
 8001276:	210e      	movs	r1, #14
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe9d 	bl	8000fb8 <ST7789_WriteData>
	}
	ST7789_WriteCommand(ST7789_INVON);		//	Inversion ON
 800127e:	2021      	movs	r0, #33	; 0x21
 8001280:	f7ff fe76 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteCommand(ST7789_SLPOUT);	//	Out of sleep mode
 8001284:	2011      	movs	r0, #17
 8001286:	f7ff fe73 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteCommand(ST7789_NORON);		//	Normal Display on
 800128a:	2013      	movs	r0, #19
 800128c:	f7ff fe70 	bl	8000f70 <ST7789_WriteCommand>
	ST7789_WriteCommand(ST7789_DISPON);	//	Main screen turned on
 8001290:	2029      	movs	r0, #41	; 0x29
 8001292:	f7ff fe6d 	bl	8000f70 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001296:	2032      	movs	r0, #50	; 0x32
 8001298:	f003 f8d8 	bl	800444c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800129c:	2000      	movs	r0, #0
 800129e:	f000 f80d 	bl	80012bc <ST7789_Fill_Color>
}
 80012a2:	bf00      	nop
 80012a4:	372c      	adds	r7, #44	; 0x2c
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020800 	.word	0x40020800
 80012b0:	08018ba8 	.word	0x08018ba8
 80012b4:	08018bb0 	.word	0x08018bb0
 80012b8:	08018bc0 	.word	0x08018bc0

080012bc <ST7789_Fill_Color>:
/**
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80012c6:	23ef      	movs	r3, #239	; 0xef
 80012c8:	22ef      	movs	r2, #239	; 0xef
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff fef9 	bl	80010c4 <ST7789_SetAddressWindow>
	ST7789_Select();
 80012d2:	2200      	movs	r2, #0
 80012d4:	2110      	movs	r1, #16
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <ST7789_Fill_Color+0x74>)
 80012d8:	f004 fd3e 	bl	8005d58 <HAL_GPIO_WritePin>
	for (i = 0; i < ST7789_WIDTH; i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	81fb      	strh	r3, [r7, #14]
 80012e0:	e019      	b.n	8001316 <ST7789_Fill_Color+0x5a>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	81bb      	strh	r3, [r7, #12]
 80012e6:	e010      	b.n	800130a <ST7789_Fill_Color+0x4e>
			uint8_t data[] = { color >> 8, color & 0xFF };
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	723b      	strb	r3, [r7, #8]
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	2102      	movs	r1, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fe5a 	bl	8000fb8 <ST7789_WriteData>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 8001304:	89bb      	ldrh	r3, [r7, #12]
 8001306:	3301      	adds	r3, #1
 8001308:	81bb      	strh	r3, [r7, #12]
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	2bef      	cmp	r3, #239	; 0xef
 800130e:	d9eb      	bls.n	80012e8 <ST7789_Fill_Color+0x2c>
	for (i = 0; i < ST7789_WIDTH; i++)
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	3301      	adds	r3, #1
 8001314:	81fb      	strh	r3, [r7, #14]
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	2bef      	cmp	r3, #239	; 0xef
 800131a:	d9e2      	bls.n	80012e2 <ST7789_Fill_Color+0x26>
		}
	ST7789_UnSelect();
 800131c:	2201      	movs	r2, #1
 800131e:	2110      	movs	r1, #16
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <ST7789_Fill_Color+0x74>)
 8001322:	f004 fd19 	bl	8005d58 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40020000 	.word	0x40020000

08001334 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		const uint16_t *data) {
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4604      	mov	r4, r0
 800133c:	4608      	mov	r0, r1
 800133e:	4611      	mov	r1, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4623      	mov	r3, r4
 8001344:	80fb      	strh	r3, [r7, #6]
 8001346:	4603      	mov	r3, r0
 8001348:	80bb      	strh	r3, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	807b      	strh	r3, [r7, #2]
 800134e:	4613      	mov	r3, r2
 8001350:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2bef      	cmp	r3, #239	; 0xef
 8001356:	d833      	bhi.n	80013c0 <ST7789_DrawImage+0x8c>
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	2bef      	cmp	r3, #239	; 0xef
 800135c:	d830      	bhi.n	80013c0 <ST7789_DrawImage+0x8c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 800135e:	88fa      	ldrh	r2, [r7, #6]
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	4413      	add	r3, r2
 8001364:	3b01      	subs	r3, #1
 8001366:	2bef      	cmp	r3, #239	; 0xef
 8001368:	dc2c      	bgt.n	80013c4 <ST7789_DrawImage+0x90>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 800136a:	88ba      	ldrh	r2, [r7, #4]
 800136c:	883b      	ldrh	r3, [r7, #0]
 800136e:	4413      	add	r3, r2
 8001370:	3b01      	subs	r3, #1
 8001372:	2bef      	cmp	r3, #239	; 0xef
 8001374:	dc28      	bgt.n	80013c8 <ST7789_DrawImage+0x94>
		return;

	ST7789_Select();
 8001376:	2200      	movs	r2, #0
 8001378:	2110      	movs	r1, #16
 800137a:	4815      	ldr	r0, [pc, #84]	; (80013d0 <ST7789_DrawImage+0x9c>)
 800137c:	f004 fcec 	bl	8005d58 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	4413      	add	r3, r2
 8001386:	b29b      	uxth	r3, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	b29c      	uxth	r4, r3
 800138c:	88ba      	ldrh	r2, [r7, #4]
 800138e:	883b      	ldrh	r3, [r7, #0]
 8001390:	4413      	add	r3, r2
 8001392:	b29b      	uxth	r3, r3
 8001394:	3b01      	subs	r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	88b9      	ldrh	r1, [r7, #4]
 800139a:	88f8      	ldrh	r0, [r7, #6]
 800139c:	4622      	mov	r2, r4
 800139e:	f7ff fe91 	bl	80010c4 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t*) data, sizeof(uint16_t) * w * h);
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	883a      	ldrh	r2, [r7, #0]
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	69b8      	ldr	r0, [r7, #24]
 80013b0:	f7ff fe02 	bl	8000fb8 <ST7789_WriteData>
	ST7789_UnSelect();
 80013b4:	2201      	movs	r2, #1
 80013b6:	2110      	movs	r1, #16
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <ST7789_DrawImage+0x9c>)
 80013ba:	f004 fccd 	bl	8005d58 <HAL_GPIO_WritePin>
 80013be:	e004      	b.n	80013ca <ST7789_DrawImage+0x96>
		return;
 80013c0:	bf00      	nop
 80013c2:	e002      	b.n	80013ca <ST7789_DrawImage+0x96>
		return;
 80013c4:	bf00      	nop
 80013c6:	e000      	b.n	80013ca <ST7789_DrawImage+0x96>
		return;
 80013c8:	bf00      	nop
}
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	40020000 	.word	0x40020000

080013d4 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font,
		uint16_t color, uint16_t bgcolor) {
 80013d4:	b082      	sub	sp, #8
 80013d6:	b590      	push	{r4, r7, lr}
 80013d8:	b089      	sub	sp, #36	; 0x24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	460b      	mov	r3, r1
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	4838      	ldr	r0, [pc, #224]	; (80014d0 <ST7789_WriteChar+0xfc>)
 80013f0:	f004 fcb2 	bl	8005d58 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80013f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4413      	add	r3, r2
 80013fe:	b29b      	uxth	r3, r3
 8001400:	3b01      	subs	r3, #1
 8001402:	b29c      	uxth	r4, r3
 8001404:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001408:	b29a      	uxth	r2, r3
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	b29b      	uxth	r3, r3
 8001410:	3b01      	subs	r3, #1
 8001412:	b29b      	uxth	r3, r3
 8001414:	88b9      	ldrh	r1, [r7, #4]
 8001416:	88f8      	ldrh	r0, [r7, #6]
 8001418:	4622      	mov	r2, r4
 800141a:	f7ff fe53 	bl	80010c4 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e043      	b.n	80014ac <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8001424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	3b20      	subs	r3, #32
 800142a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	4619      	mov	r1, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	440b      	add	r3, r1
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	e029      	b.n	800149a <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00e      	beq.n	8001474 <ST7789_WriteChar+0xa0>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8001456:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	b29b      	uxth	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	743b      	strb	r3, [r7, #16]
 8001460:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001462:	b2db      	uxtb	r3, r3
 8001464:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	2102      	movs	r1, #2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fda3 	bl	8000fb8 <ST7789_WriteData>
 8001472:	e00f      	b.n	8001494 <ST7789_WriteChar+0xc0>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001474:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	b29b      	uxth	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	733b      	strb	r3, [r7, #12]
 8001480:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001484:	b2db      	uxtb	r3, r3
 8001486:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2102      	movs	r1, #2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fd92 	bl	8000fb8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	3301      	adds	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800149e:	461a      	mov	r2, r3
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d3cf      	bcc.n	8001446 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80014b0:	461a      	mov	r2, r3
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d3b5      	bcc.n	8001424 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 80014b8:	2201      	movs	r2, #1
 80014ba:	2110      	movs	r1, #16
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <ST7789_WriteChar+0xfc>)
 80014be:	f004 fc4b 	bl	8005d58 <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014cc:	b002      	add	sp, #8
 80014ce:	4770      	bx	lr
 80014d0:	40020000 	.word	0x40020000

080014d4 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font,
		uint16_t color, uint16_t bgcolor) {
 80014d4:	b082      	sub	sp, #8
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af04      	add	r7, sp, #16
 80014dc:	603a      	str	r2, [r7, #0]
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	4603      	mov	r3, r0
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	460b      	mov	r3, r1
 80014e6:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 80014e8:	2200      	movs	r2, #0
 80014ea:	2110      	movs	r1, #16
 80014ec:	4821      	ldr	r0, [pc, #132]	; (8001574 <ST7789_WriteString+0xa0>)
 80014ee:	f004 fc33 	bl	8005d58 <HAL_GPIO_WritePin>
	while (*str) {
 80014f2:	e02d      	b.n	8001550 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	7d3a      	ldrb	r2, [r7, #20]
 80014f8:	4413      	add	r3, r2
 80014fa:	2bef      	cmp	r3, #239	; 0xef
 80014fc:	dd13      	ble.n	8001526 <ST7789_WriteString+0x52>
			x = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001502:	7d7b      	ldrb	r3, [r7, #21]
 8001504:	b29a      	uxth	r2, r3
 8001506:	88bb      	ldrh	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	7d7a      	ldrb	r2, [r7, #21]
 8001510:	4413      	add	r3, r2
 8001512:	2bef      	cmp	r3, #239	; 0xef
 8001514:	dc21      	bgt.n	800155a <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b20      	cmp	r3, #32
 800151c:	d103      	bne.n	8001526 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	603b      	str	r3, [r7, #0]
				continue;
 8001524:	e014      	b.n	8001550 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	88b9      	ldrh	r1, [r7, #4]
 800152c:	88f8      	ldrh	r0, [r7, #6]
 800152e:	8c3b      	ldrh	r3, [r7, #32]
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	8bbb      	ldrh	r3, [r7, #28]
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f7ff ff4a 	bl	80013d4 <ST7789_WriteChar>
		x += font.width;
 8001540:	7d3b      	ldrb	r3, [r7, #20]
 8001542:	b29a      	uxth	r2, r3
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	4413      	add	r3, r2
 8001548:	80fb      	strh	r3, [r7, #6]
		str++;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1cd      	bne.n	80014f4 <ST7789_WriteString+0x20>
 8001558:	e000      	b.n	800155c <ST7789_WriteString+0x88>
				break;
 800155a:	bf00      	nop
	}
	ST7789_UnSelect();
 800155c:	2201      	movs	r2, #1
 800155e:	2110      	movs	r1, #16
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <ST7789_WriteString+0xa0>)
 8001562:	f004 fbf9 	bl	8005d58 <HAL_GPIO_WritePin>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001570:	b002      	add	sp, #8
 8001572:	4770      	bx	lr
 8001574:	40020000 	.word	0x40020000

08001578 <rstrip>:
    size_t num_left;
} ini_parse_string_ctx;

/* Strip whitespace chars off end of given string, in place. Return s. */
static char* rstrip(char* s)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    char* p = s + strlen(s);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7fe fe9f 	bl	80002c4 <strlen>
 8001586:	4602      	mov	r2, r0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
    while (p > s && isspace((unsigned char)(*--p)))
 800158e:	e002      	b.n	8001596 <rstrip+0x1e>
        *p = '\0';
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
    while (p > s && isspace((unsigned char)(*--p)))
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	d90e      	bls.n	80015bc <rstrip+0x44>
 800159e:	f015 fa69 	bl	8016a74 <__locale_ctype_ptr>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e9      	bne.n	8001590 <rstrip+0x18>
    return s;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <lskip>:

/* Return pointer to first non-whitespace char in given string. */
static char* lskip(const char* s)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 80015ce:	e002      	b.n	80015d6 <lskip+0x10>
        s++;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	607b      	str	r3, [r7, #4]
    while (*s && isspace((unsigned char)(*s)))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <lskip+0x30>
 80015de:	f015 fa49 	bl	8016a74 <__locale_ctype_ptr>
 80015e2:	4602      	mov	r2, r0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ec      	bne.n	80015d0 <lskip+0xa>
    return (char*)s;
 80015f6:	687b      	ldr	r3, [r7, #4]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <find_chars_or_comment>:

/* Return pointer to first char (of chars) or inline comment in given string,
   or pointer to NUL at end of string if neither found. Inline comment must
   be prefixed by a whitespace character to register as a comment. */
static char* find_chars_or_comment(const char* s, const char* chars)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
#if INI_ALLOW_INLINE_COMMENTS
    int was_space = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
    while (*s && (!chars || !strchr(chars, *s)) &&
 800160e:	e00d      	b.n	800162c <find_chars_or_comment+0x2c>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
        was_space = isspace((unsigned char)(*s));
 8001610:	f015 fa30 	bl	8016a74 <__locale_ctype_ptr>
 8001614:	4602      	mov	r2, r0
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	60fb      	str	r3, [r7, #12]
        s++;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3301      	adds	r3, #1
 800162a:	607b      	str	r3, [r7, #4]
    while (*s && (!chars || !strchr(chars, *s)) &&
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d017      	beq.n	8001664 <find_chars_or_comment+0x64>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <find_chars_or_comment+0x4c>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f015 ff1e 	bl	8017482 <strchr>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10b      	bne.n	8001664 <find_chars_or_comment+0x64>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0de      	beq.n	8001610 <find_chars_or_comment+0x10>
           !(was_space && strchr(INI_INLINE_COMMENT_PREFIXES, *s))) {
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <find_chars_or_comment+0x70>)
 800165a:	f015 ff12 	bl	8017482 <strchr>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0d5      	beq.n	8001610 <find_chars_or_comment+0x10>
#else
    while (*s && (!chars || !strchr(chars, *s))) {
        s++;
    }
#endif
    return (char*)s;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	08018bdc 	.word	0x08018bdc

08001674 <strncpy0>:

/* Similar to strncpy, but ensures dest (size bytes) is
   NUL-terminated, and doesn't pad with NULs. */
static char* strncpy0(char* dest, const char* src, size_t size)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    /* Could use strncpy internally, but it causes gcc warnings (see issue #91) */
    size_t i;
    for (i = 0; i < size - 1 && src[i]; i++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e00a      	b.n	800169c <strncpy0+0x28>
        dest[i] = src[i];
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	441a      	add	r2, r3
 800168c:	68f9      	ldr	r1, [r7, #12]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	440b      	add	r3, r1
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size - 1 && src[i]; i++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d205      	bcs.n	80016b2 <strncpy0+0x3e>
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1e9      	bne.n	8001686 <strncpy0+0x12>
    dest[i] = '\0';
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    return dest;
 80016bc:	68fb      	ldr	r3, [r7, #12]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <ini_parse_stream>:

/* See documentation in header file. */
int ini_parse_stream(ini_reader reader, void* stream, ini_handler handler,
                     void* user)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b0d9      	sub	sp, #356	; 0x164
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	f107 040c 	add.w	r4, r7, #12
 80016d6:	6020      	str	r0, [r4, #0]
 80016d8:	f107 0008 	add.w	r0, r7, #8
 80016dc:	6001      	str	r1, [r0, #0]
 80016de:	1d39      	adds	r1, r7, #4
 80016e0:	600a      	str	r2, [r1, #0]
 80016e2:	463a      	mov	r2, r7
 80016e4:	6013      	str	r3, [r2, #0]
    /* Uses a fair bit of stack (use heap instead if you need to) */
#if INI_USE_STACK
    char line[INI_MAX_LINE];
    int max_line = INI_MAX_LINE;
 80016e6:	23c8      	movs	r3, #200	; 0xc8
 80016e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
#endif
#if INI_ALLOW_REALLOC && !INI_USE_STACK
    char* new_line;
    size_t offset;
#endif
    char section[MAX_SECTION] = "";
 80016ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	3304      	adds	r3, #4
 80016f6:	222e      	movs	r2, #46	; 0x2e
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f015 fa59 	bl	8016bb2 <memset>
    char prev_name[MAX_NAME] = "";
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	3304      	adds	r3, #4
 800170a:	222e      	movs	r2, #46	; 0x2e
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f015 fa4f 	bl	8016bb2 <memset>

    char* start;
    char* end;
    char* name;
    char* value;
    int lineno = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    int error = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#else
#define HANDLER(u, s, n, v) handler(u, s, n, v)
#endif

    /* Scan through stream line by line */
    while (reader(line, (int)max_line, stream) != NULL) {
 8001720:	e0f4      	b.n	800190c <ini_parse_stream+0x240>
                break;
            offset += strlen(line + offset);
        }
#endif

        lineno++;
 8001722:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001726:	3301      	adds	r3, #1
 8001728:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        start = line;
 800172c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001730:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
#if INI_ALLOW_BOM
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 8001734:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001738:	2b01      	cmp	r3, #1
 800173a:	d115      	bne.n	8001768 <ini_parse_stream+0x9c>
 800173c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2bef      	cmp	r3, #239	; 0xef
 8001744:	d110      	bne.n	8001768 <ini_parse_stream+0x9c>
                           (unsigned char)start[1] == 0xBB &&
 8001746:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800174a:	3301      	adds	r3, #1
 800174c:	781b      	ldrb	r3, [r3, #0]
        if (lineno == 1 && (unsigned char)start[0] == 0xEF &&
 800174e:	2bbb      	cmp	r3, #187	; 0xbb
 8001750:	d10a      	bne.n	8001768 <ini_parse_stream+0x9c>
                           (unsigned char)start[2] == 0xBF) {
 8001752:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001756:	3302      	adds	r3, #2
 8001758:	781b      	ldrb	r3, [r3, #0]
                           (unsigned char)start[1] == 0xBB &&
 800175a:	2bbf      	cmp	r3, #191	; 0xbf
 800175c:	d104      	bne.n	8001768 <ini_parse_stream+0x9c>
            start += 3;
 800175e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001762:	3303      	adds	r3, #3
 8001764:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        }
#endif
        start = lskip(rstrip(start));
 8001768:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800176c:	f7ff ff04 	bl	8001578 <rstrip>
 8001770:	4603      	mov	r3, r0
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff27 	bl	80015c6 <lskip>
 8001778:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c

        if (strchr(INI_START_COMMENT_PREFIXES, *start)) {
 800177c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	486c      	ldr	r0, [pc, #432]	; (8001938 <ini_parse_stream+0x26c>)
 8001786:	f015 fe7c 	bl	8017482 <strchr>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 80bd 	bne.w	800190c <ini_parse_stream+0x240>
            /* Start-of-line comment */
        }
#if INI_ALLOW_MULTILINE
        else if (*prev_name && *start && start > line) {
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d023      	beq.n	80017e4 <ini_parse_stream+0x118>
 800179c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01e      	beq.n	80017e4 <ini_parse_stream+0x118>
 80017a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017aa:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d918      	bls.n	80017e4 <ini_parse_stream+0x118>
            /* Non-blank line with leading whitespace, treat as continuation
               of previous name's value (as per Python configparser). */
            if (!HANDLER(user, section, prev_name, start) && !error)
 80017b2:	f107 0214 	add.w	r2, r7, #20
 80017b6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80017ba:	4638      	mov	r0, r7
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	681c      	ldr	r4, [r3, #0]
 80017c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017c4:	6800      	ldr	r0, [r0, #0]
 80017c6:	47a0      	blx	r4
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 809e 	bne.w	800190c <ini_parse_stream+0x240>
 80017d0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 8099 	bne.w	800190c <ini_parse_stream+0x240>
                error = lineno;
 80017da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            if (!HANDLER(user, section, prev_name, start) && !error)
 80017e2:	e093      	b.n	800190c <ini_parse_stream+0x240>
        }
#endif
        else if (*start == '[') {
 80017e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b5b      	cmp	r3, #91	; 0x5b
 80017ec:	d128      	bne.n	8001840 <ini_parse_stream+0x174>
            /* A "[section]" line */
            end = find_chars_or_comment(start + 1, "]");
 80017ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017f2:	3301      	adds	r3, #1
 80017f4:	4951      	ldr	r1, [pc, #324]	; (800193c <ini_parse_stream+0x270>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff02 	bl	8001600 <find_chars_or_comment>
 80017fc:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == ']') {
 8001800:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b5d      	cmp	r3, #93	; 0x5d
 8001808:	d111      	bne.n	800182e <ini_parse_stream+0x162>
                *end = '\0';
 800180a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
                strncpy0(section, start + 1, sizeof(section));
 8001812:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001816:	1c59      	adds	r1, r3, #1
 8001818:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800181c:	2232      	movs	r2, #50	; 0x32
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff28 	bl	8001674 <strncpy0>
                *prev_name = '\0';
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	e06e      	b.n	800190c <ini_parse_stream+0x240>
#if INI_CALL_HANDLER_ON_NEW_SECTION
                if (!HANDLER(user, section, NULL, NULL) && !error)
                    error = lineno;
#endif
            }
            else if (!error) {
 800182e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001832:	2b00      	cmp	r3, #0
 8001834:	d16a      	bne.n	800190c <ini_parse_stream+0x240>
                /* No ']' found on section line */
                error = lineno;
 8001836:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800183a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800183e:	e065      	b.n	800190c <ini_parse_stream+0x240>
            }
        }
        else if (*start) {
 8001840:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d060      	beq.n	800190c <ini_parse_stream+0x240>
            /* Not a comment, must be a name[=:]value pair */
            end = find_chars_or_comment(start, "=:");
 800184a:	493d      	ldr	r1, [pc, #244]	; (8001940 <ini_parse_stream+0x274>)
 800184c:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8001850:	f7ff fed6 	bl	8001600 <find_chars_or_comment>
 8001854:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            if (*end == '=' || *end == ':') {
 8001858:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b3d      	cmp	r3, #61	; 0x3d
 8001860:	d004      	beq.n	800186c <ini_parse_stream+0x1a0>
 8001862:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b3a      	cmp	r3, #58	; 0x3a
 800186a:	d147      	bne.n	80018fc <ini_parse_stream+0x230>
                *end = '\0';
 800186c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
                name = rstrip(start);
 8001874:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8001878:	f7ff fe7e 	bl	8001578 <rstrip>
 800187c:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
                value = end + 1;
 8001880:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001884:	3301      	adds	r3, #1
 8001886:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
#if INI_ALLOW_INLINE_COMMENTS
                end = find_chars_or_comment(value, NULL);
 800188a:	2100      	movs	r1, #0
 800188c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8001890:	f7ff feb6 	bl	8001600 <find_chars_or_comment>
 8001894:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
                if (*end)
 8001898:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <ini_parse_stream+0x1de>
                    *end = '\0';
 80018a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
#endif
                value = lskip(value);
 80018aa:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80018ae:	f7ff fe8a 	bl	80015c6 <lskip>
 80018b2:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
                rstrip(value);
 80018b6:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80018ba:	f7ff fe5d 	bl	8001578 <rstrip>

                /* Valid name[=:]value pair found, call handler */
                strncpy0(prev_name, name, sizeof(prev_name));
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	2232      	movs	r2, #50	; 0x32
 80018c4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fed3 	bl	8001674 <strncpy0>
                if (!HANDLER(user, section, name, value) && !error)
 80018ce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80018d2:	4638      	mov	r0, r7
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	681c      	ldr	r4, [r3, #0]
 80018d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80018dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018e0:	6800      	ldr	r0, [r0, #0]
 80018e2:	47a0      	blx	r4
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d110      	bne.n	800190c <ini_parse_stream+0x240>
 80018ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <ini_parse_stream+0x240>
                    error = lineno;
 80018f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                if (!HANDLER(user, section, name, value) && !error)
 80018fa:	e007      	b.n	800190c <ini_parse_stream+0x240>
            }
            else if (!error) {
 80018fc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <ini_parse_stream+0x240>
                *end = '\0';
                name = rstrip(start);
                if (!HANDLER(user, section, name, NULL) && !error)
                    error = lineno;
#else
                error = lineno;
 8001904:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001908:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    while (reader(line, (int)max_line, stream) != NULL) {
 800190c:	f107 0208 	add.w	r2, r7, #8
 8001910:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001920:	4798      	blx	r3
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	f47f aefc 	bne.w	8001722 <ini_parse_stream+0x56>

#if !INI_USE_STACK
    ini_free(line);
#endif

    return error;
 800192a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
}
 800192e:	4618      	mov	r0, r3
 8001930:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}
 8001938:	08018be0 	.word	0x08018be0
 800193c:	08018be4 	.word	0x08018be4
 8001940:	08018be8 	.word	0x08018be8

08001944 <ini_parse_fatfs>:
    return ini_parse_stream((ini_reader)fgets, file, handler, user);
}

/* See documentation in header file. */
int ini_parse_fatfs(const char* filename, ini_handler handler, void* user)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001952:	3b1c      	subs	r3, #28
 8001954:	6018      	str	r0, [r3, #0]
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	6019      	str	r1, [r3, #0]
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	3b04      	subs	r3, #4
 8001962:	601a      	str	r2, [r3, #0]
    FRESULT result;
    FIL file;
    int error;

    result = f_open(&file, filename, FA_OPEN_EXISTING | FA_READ);
 8001964:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001968:	3b1c      	subs	r3, #28
 800196a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800196e:	3818      	subs	r0, #24
 8001970:	2201      	movs	r2, #1
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	f011 fb50 	bl	8013018 <f_open>
 8001978:	4603      	mov	r3, r0
 800197a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800197e:	f102 0207 	add.w	r2, r2, #7
 8001982:	7013      	strb	r3, [r2, #0]
    if (result != FR_OK)
 8001984:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001988:	f103 0307 	add.w	r3, r3, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <ini_parse_fatfs+0x54>
        return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e018      	b.n	80019ca <ini_parse_fatfs+0x86>
    error = ini_parse_stream((ini_reader)f_gets, &file, handler, user);
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	3b04      	subs	r3, #4
 800199e:	f107 0208 	add.w	r2, r7, #8
 80019a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019a6:	3918      	subs	r1, #24
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <ini_parse_fatfs+0x94>)
 80019ae:	f7ff fe8d 	bl	80016cc <ini_parse_stream>
 80019b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80019b6:	6018      	str	r0, [r3, #0]
    f_close(&file);
 80019b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019bc:	3b18      	subs	r3, #24
 80019be:	4618      	mov	r0, r3
 80019c0:	f012 f867 	bl	8013a92 <f_close>
    return error;
 80019c4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80019c8:	681b      	ldr	r3, [r3, #0]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	080142c7 	.word	0x080142c7

080019dc <initLeds>:
extern configuration config;

RgbColor RGB;
HsvColor HSV;

void initLeds() {
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0

	RGB.r = config.RGB.r;
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <initLeds+0xa0>)
 80019e4:	7a1a      	ldrb	r2, [r3, #8]
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <initLeds+0xa4>)
 80019e8:	701a      	strb	r2, [r3, #0]
	RGB.g = config.RGB.g;
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <initLeds+0xa0>)
 80019ec:	7a5a      	ldrb	r2, [r3, #9]
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <initLeds+0xa4>)
 80019f0:	705a      	strb	r2, [r3, #1]
	RGB.b = config.RGB.b;
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <initLeds+0xa0>)
 80019f4:	7a9a      	ldrb	r2, [r3, #10]
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <initLeds+0xa4>)
 80019f8:	709a      	strb	r2, [r3, #2]

	HSV.h = 0;
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <initLeds+0xa8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
	HSV.s = 255;
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <initLeds+0xa8>)
 8001a02:	22ff      	movs	r2, #255	; 0xff
 8001a04:	705a      	strb	r2, [r3, #1]
	HSV.v = config.brightMax;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <initLeds+0xa0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <initLeds+0xa8>)
 8001a0e:	709a      	strb	r2, [r3, #2]

	for (int t = 0; t < LED_COUNT; t++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	e02a      	b.n	8001a6c <initLeds+0x90>
		float val = sin((float) (6.28 / LED_COUNT) * (float) t);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a20:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a88 <initLeds+0xac>
 8001a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a28:	ee17 0a90 	vmov	r0, s15
 8001a2c:	f7fe fdb6 	bl	800059c <__aeabi_f2d>
 8001a30:	4603      	mov	r3, r0
 8001a32:	460c      	mov	r4, r1
 8001a34:	ec44 3b10 	vmov	d0, r3, r4
 8001a38:	f016 f896 	bl	8017b68 <sin>
 8001a3c:	ec54 3b10 	vmov	r3, r4, d0
 8001a40:	4618      	mov	r0, r3
 8001a42:	4621      	mov	r1, r4
 8001a44:	f7ff f8c4 	bl	8000bd0 <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	603b      	str	r3, [r7, #0]
		if (val > 0) {
 8001a4c:	edd7 7a00 	vldr	s15, [r7]
 8001a50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	dd05      	ble.n	8001a66 <initLeds+0x8a>
			front[t] = val;
 8001a5a:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <initLeds+0xb0>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	601a      	str	r2, [r3, #0]
	for (int t = 0; t < LED_COUNT; t++) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b17      	cmp	r3, #23
 8001a70:	ddd1      	ble.n	8001a16 <initLeds+0x3a>
		}
	}
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20003080 	.word	0x20003080
 8001a80:	200021a4 	.word	0x200021a4
 8001a84:	200021a8 	.word	0x200021a8
 8001a88:	3e85f92c 	.word	0x3e85f92c
 8001a8c:	20002144 	.word	0x20002144

08001a90 <refreshLeds>:

void refreshLeds() {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
	if (HSV.h < 255) {
 8001a96:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <refreshLeds+0x158>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2bff      	cmp	r3, #255	; 0xff
 8001a9c:	d006      	beq.n	8001aac <refreshLeds+0x1c>
		HSV.h++;
 8001a9e:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <refreshLeds+0x158>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <refreshLeds+0x158>)
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e002      	b.n	8001ab2 <refreshLeds+0x22>
	} else {
		HSV.h = 0;
 8001aac:	4b4e      	ldr	r3, [pc, #312]	; (8001be8 <refreshLeds+0x158>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
	}
	RGB = HsvToRgb(HSV);
 8001ab2:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <refreshLeds+0x158>)
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	7859      	ldrb	r1, [r3, #1]
 8001ab8:	0209      	lsls	r1, r1, #8
 8001aba:	430a      	orrs	r2, r1
 8001abc:	789b      	ldrb	r3, [r3, #2]
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f362 0317 	bfi	r3, r2, #0, #24
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fb79 	bl	80041c0 <HsvToRgb>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b46      	ldr	r3, [pc, #280]	; (8001bec <refreshLeds+0x15c>)
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	7019      	strb	r1, [r3, #0]
 8001ad6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001ada:	7059      	strb	r1, [r3, #1]
 8001adc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001ae0:	709a      	strb	r2, [r3, #2]

	if (state.phoneUp) {
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <refreshLeds+0x160>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d065      	beq.n	8001bb6 <refreshLeds+0x126>
		for (int i = 0; i < LED_COUNT; i++) {
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e042      	b.n	8001b76 <refreshLeds+0xe6>
			ws2812_setPixel_gammaCorrection(RGB.r * front[i], RGB.g * front[i],
 8001af0:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <refreshLeds+0x15c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afc:	4a3d      	ldr	r2, [pc, #244]	; (8001bf4 <refreshLeds+0x164>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b10:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b14:	793b      	ldrb	r3, [r7, #4]
 8001b16:	b2d8      	uxtb	r0, r3
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <refreshLeds+0x15c>)
 8001b1a:	785b      	ldrb	r3, [r3, #1]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b24:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <refreshLeds+0x164>)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b38:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b3c:	793b      	ldrb	r3, [r7, #4]
 8001b3e:	b2d9      	uxtb	r1, r3
					RGB.b * front[i], i);
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <refreshLeds+0x15c>)
 8001b42:	789b      	ldrb	r3, [r3, #2]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <refreshLeds+0x164>)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ee67 7a27 	vmul.f32	s15, s14, s15
			ws2812_setPixel_gammaCorrection(RGB.r * front[i], RGB.g * front[i],
 8001b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b60:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b64:	793b      	ldrb	r3, [r7, #4]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f002 fa5e 	bl	800402c <ws2812_setPixel_gammaCorrection>
		for (int i = 0; i < LED_COUNT; i++) {
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b17      	cmp	r3, #23
 8001b7a:	ddb9      	ble.n	8001af0 <refreshLeds+0x60>
		}
		ws2812_light();
 8001b7c:	f002 fb10 	bl	80041a0 <ws2812_light>

		//shift front
		float tmp = front[0];
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <refreshLeds+0x164>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60bb      	str	r3, [r7, #8]
		for (int t = 0; t < (LED_COUNT - 1); t++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e00d      	b.n	8001ba8 <refreshLeds+0x118>
			front[t] = front[t + 1];
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <refreshLeds+0x164>)
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4916      	ldr	r1, [pc, #88]	; (8001bf4 <refreshLeds+0x164>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	601a      	str	r2, [r3, #0]
		for (int t = 0; t < (LED_COUNT - 1); t++) {
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b16      	cmp	r3, #22
 8001bac:	ddee      	ble.n	8001b8c <refreshLeds+0xfc>
		}
		front[LED_COUNT - 1] = tmp;
 8001bae:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <refreshLeds+0x164>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	65d3      	str	r3, [r2, #92]	; 0x5c
		}
		ws2812_light();

	}

}
 8001bb4:	e014      	b.n	8001be0 <refreshLeds+0x150>
		for (int i = 0; i < LED_COUNT; i++) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	e00c      	b.n	8001bd6 <refreshLeds+0x146>
			ws2812_setPixel_gammaCorrection(RGB.r, RGB.g, RGB.b, i);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <refreshLeds+0x15c>)
 8001bbe:	7818      	ldrb	r0, [r3, #0]
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <refreshLeds+0x15c>)
 8001bc2:	7859      	ldrb	r1, [r3, #1]
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <refreshLeds+0x15c>)
 8001bc6:	789a      	ldrb	r2, [r3, #2]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f002 fa2e 	bl	800402c <ws2812_setPixel_gammaCorrection>
		for (int i = 0; i < LED_COUNT; i++) {
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b17      	cmp	r3, #23
 8001bda:	ddef      	ble.n	8001bbc <refreshLeds+0x12c>
		ws2812_light();
 8001bdc:	f002 fae0 	bl	80041a0 <ws2812_light>
}
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200021a8 	.word	0x200021a8
 8001bec:	200021a4 	.word	0x200021a4
 8001bf0:	2000242c 	.word	0x2000242c
 8001bf4:	20002144 	.word	0x20002144

08001bf8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c04:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c14:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c18:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c20:	e000      	b.n	8001c24 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c22:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f9      	beq.n	8001c22 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c2e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c38:	687b      	ldr	r3, [r7, #4]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_write>:
int usbPcConnected = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]

	int i = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e009      	b.n	8001c70 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	60ba      	str	r2, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ffc7 	bl	8001bf8 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf1      	blt.n	8001c5c <_write+0x16>
	return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <HAL_ADCEx_InjectedConvCpltCallback+0xc0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d152      	bne.n	8001d3c <HAL_ADCEx_InjectedConvCpltCallback+0xb8>
	{

		rawMagVal1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001c96:	2101      	movs	r1, #1
 8001c98:	482b      	ldr	r0, [pc, #172]	; (8001d48 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8001c9a:	f003 f87f 	bl	8004d9c <HAL_ADCEx_InjectedGetValue>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_ADCEx_InjectedConvCpltCallback+0xc8>)
 8001ca4:	601a      	str	r2, [r3, #0]
		rawMagVal2 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4827      	ldr	r0, [pc, #156]	; (8001d48 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8001caa:	f003 f877 	bl	8004d9c <HAL_ADCEx_InjectedGetValue>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_ADCEx_InjectedConvCpltCallback+0xcc>)
 8001cb4:	601a      	str	r2, [r3, #0]

		vol = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	4823      	ldr	r0, [pc, #140]	; (8001d48 <HAL_ADCEx_InjectedConvCpltCallback+0xc4>)
 8001cba:	f003 f86f 	bl	8004d9c <HAL_ADCEx_InjectedGetValue>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 8001cc4:	601a      	str	r2, [r3, #0]

		sns1 = HAL_GPIO_ReadPin(SNS_1_GPIO_Port, SNS_1_Pin);
 8001cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cca:	4823      	ldr	r0, [pc, #140]	; (8001d58 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 8001ccc:	f004 f82c 	bl	8005d28 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_ADCEx_InjectedConvCpltCallback+0xd8>)
 8001cd6:	601a      	str	r2, [r3, #0]
		if (sns1) {
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_ADCEx_InjectedConvCpltCallback+0xd8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_ADCEx_InjectedConvCpltCallback+0x68>
			snsTick++;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e004      	b.n	8001cf6 <HAL_ADCEx_InjectedConvCpltCallback+0x72>
		} else {
			snsTick--;
 8001cec:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001cf4:	6013      	str	r3, [r2, #0]
		}

		if (snsTick > 2) {
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	dd05      	ble.n	8001d0a <HAL_ADCEx_InjectedConvCpltCallback+0x86>
			snsTick = 2;
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001d00:	2202      	movs	r2, #2
 8001d02:	601a      	str	r2, [r3, #0]
			snsState = 1;
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
		}
		if (snsTick < 0) {
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da05      	bge.n	8001d1e <HAL_ADCEx_InjectedConvCpltCallback+0x9a>
			snsTick = 0;
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
			snsState = 0;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
		}

		if ((prev_snsState == 0) && (snsState == 1)) {
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_ADCEx_InjectedConvCpltCallback+0xb0>
			state.changeLang = 1;
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_ADCEx_InjectedConvCpltCallback+0xe8>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
		}
		prev_snsState = snsState;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 8001d3a:	6013      	str	r3, [r2, #0]
	}
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40012000 	.word	0x40012000
 8001d48:	20002464 	.word	0x20002464
 8001d4c:	20002584 	.word	0x20002584
 8001d50:	200024ac 	.word	0x200024ac
 8001d54:	200024f8 	.word	0x200024f8
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	200023ec 	.word	0x200023ec
 8001d60:	200024fc 	.word	0x200024fc
 8001d64:	200021ac 	.word	0x200021ac
 8001d68:	20003094 	.word	0x20003094
 8001d6c:	2000242c 	.word	0x2000242c

08001d70 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM8) //check if the interrupt comes from TIM3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d102      	bne.n	8001d88 <HAL_TIM_OC_DelayElapsedCallback+0x18>
	{
		state.ledRefresh = 1;
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	615a      	str	r2, [r3, #20]
	}
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40010400 	.word	0x40010400
 8001d98:	2000242c 	.word	0x2000242c

08001d9c <handler>:

static int handler(void *user, const char *section, const char *name,
		const char *value) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
	configuration *pconfig = (configuration*) user;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	617b      	str	r3, [r7, #20]

#define MATCH(s, n) strcmp(section, s) == 0 && strcmp(name, n) == 0
	if (MATCH("led", "r")) {
 8001dae:	495a      	ldr	r1, [pc, #360]	; (8001f18 <handler+0x17c>)
 8001db0:	68b8      	ldr	r0, [r7, #8]
 8001db2:	f7fe fa7d 	bl	80002b0 <strcmp>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10e      	bne.n	8001dda <handler+0x3e>
 8001dbc:	4957      	ldr	r1, [pc, #348]	; (8001f1c <handler+0x180>)
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fa76 	bl	80002b0 <strcmp>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d107      	bne.n	8001dda <handler+0x3e>
		pconfig->RGB.r = atoi(value);
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f014 fca6 	bl	801671c <atoi>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	721a      	strb	r2, [r3, #8]
 8001dd8:	e098      	b.n	8001f0c <handler+0x170>
	} else if (MATCH("led", "g")) {
 8001dda:	494f      	ldr	r1, [pc, #316]	; (8001f18 <handler+0x17c>)
 8001ddc:	68b8      	ldr	r0, [r7, #8]
 8001dde:	f7fe fa67 	bl	80002b0 <strcmp>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10e      	bne.n	8001e06 <handler+0x6a>
 8001de8:	494d      	ldr	r1, [pc, #308]	; (8001f20 <handler+0x184>)
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fa60 	bl	80002b0 <strcmp>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d107      	bne.n	8001e06 <handler+0x6a>
		pconfig->RGB.g = atoi(value);
 8001df6:	6838      	ldr	r0, [r7, #0]
 8001df8:	f014 fc90 	bl	801671c <atoi>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	725a      	strb	r2, [r3, #9]
 8001e04:	e082      	b.n	8001f0c <handler+0x170>
	} else if (MATCH("led", "b")) {
 8001e06:	4944      	ldr	r1, [pc, #272]	; (8001f18 <handler+0x17c>)
 8001e08:	68b8      	ldr	r0, [r7, #8]
 8001e0a:	f7fe fa51 	bl	80002b0 <strcmp>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10e      	bne.n	8001e32 <handler+0x96>
 8001e14:	4943      	ldr	r1, [pc, #268]	; (8001f24 <handler+0x188>)
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fa4a 	bl	80002b0 <strcmp>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d107      	bne.n	8001e32 <handler+0x96>
		pconfig->RGB.b = atoi(value);
 8001e22:	6838      	ldr	r0, [r7, #0]
 8001e24:	f014 fc7a 	bl	801671c <atoi>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	729a      	strb	r2, [r3, #10]
 8001e30:	e06c      	b.n	8001f0c <handler+0x170>
	} else if (MATCH("led", "animate")) {
 8001e32:	4939      	ldr	r1, [pc, #228]	; (8001f18 <handler+0x17c>)
 8001e34:	68b8      	ldr	r0, [r7, #8]
 8001e36:	f7fe fa3b 	bl	80002b0 <strcmp>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10e      	bne.n	8001e5e <handler+0xc2>
 8001e40:	4939      	ldr	r1, [pc, #228]	; (8001f28 <handler+0x18c>)
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fa34 	bl	80002b0 <strcmp>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <handler+0xc2>
		pconfig->animate = atoi(value);
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f014 fc64 	bl	801671c <atoi>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	741a      	strb	r2, [r3, #16]
 8001e5c:	e056      	b.n	8001f0c <handler+0x170>
	} else if (MATCH("led", "rainbow")) {
 8001e5e:	492e      	ldr	r1, [pc, #184]	; (8001f18 <handler+0x17c>)
 8001e60:	68b8      	ldr	r0, [r7, #8]
 8001e62:	f7fe fa25 	bl	80002b0 <strcmp>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10e      	bne.n	8001e8a <handler+0xee>
 8001e6c:	492f      	ldr	r1, [pc, #188]	; (8001f2c <handler+0x190>)
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fa1e 	bl	80002b0 <strcmp>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d107      	bne.n	8001e8a <handler+0xee>
		pconfig->rainbow = atoi(value);
 8001e7a:	6838      	ldr	r0, [r7, #0]
 8001e7c:	f014 fc4e 	bl	801671c <atoi>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	745a      	strb	r2, [r3, #17]
 8001e88:	e040      	b.n	8001f0c <handler+0x170>
	} else if (MATCH("led", "brightMax")) {
 8001e8a:	4923      	ldr	r1, [pc, #140]	; (8001f18 <handler+0x17c>)
 8001e8c:	68b8      	ldr	r0, [r7, #8]
 8001e8e:	f7fe fa0f 	bl	80002b0 <strcmp>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <handler+0x118>
 8001e98:	4925      	ldr	r1, [pc, #148]	; (8001f30 <handler+0x194>)
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fa08 	bl	80002b0 <strcmp>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <handler+0x118>
		pconfig->brightMax = atoi(value);
 8001ea6:	6838      	ldr	r0, [r7, #0]
 8001ea8:	f014 fc38 	bl	801671c <atoi>
 8001eac:	4602      	mov	r2, r0
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e02b      	b.n	8001f0c <handler+0x170>
	} else if (MATCH("led", "brightMin")) {
 8001eb4:	4918      	ldr	r1, [pc, #96]	; (8001f18 <handler+0x17c>)
 8001eb6:	68b8      	ldr	r0, [r7, #8]
 8001eb8:	f7fe f9fa 	bl	80002b0 <strcmp>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <handler+0x142>
 8001ec2:	491c      	ldr	r1, [pc, #112]	; (8001f34 <handler+0x198>)
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7fe f9f3 	bl	80002b0 <strcmp>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <handler+0x142>
		pconfig->brightMin = atoi(value);
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	f014 fc23 	bl	801671c <atoi>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	e016      	b.n	8001f0c <handler+0x170>
	} else if (MATCH("sound", "volume")) {
 8001ede:	4916      	ldr	r1, [pc, #88]	; (8001f38 <handler+0x19c>)
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe f9e5 	bl	80002b0 <strcmp>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <handler+0x16c>
 8001eec:	4913      	ldr	r1, [pc, #76]	; (8001f3c <handler+0x1a0>)
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe f9de 	bl	80002b0 <strcmp>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <handler+0x16c>
		pconfig->volume = atoi(value);
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f014 fc0e 	bl	801671c <atoi>
 8001f00:	4602      	mov	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	e001      	b.n	8001f0c <handler+0x170>
	} else {
		return 0; /* unknown section/name, error */
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e000      	b.n	8001f0e <handler+0x172>
	}
	return 1;
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	08018bf0 	.word	0x08018bf0
 8001f1c:	08018bf4 	.word	0x08018bf4
 8001f20:	08018bf8 	.word	0x08018bf8
 8001f24:	08018bfc 	.word	0x08018bfc
 8001f28:	08018c00 	.word	0x08018c00
 8001f2c:	08018c08 	.word	0x08018c08
 8001f30:	08018c10 	.word	0x08018c10
 8001f34:	08018c1c 	.word	0x08018c1c
 8001f38:	08018c28 	.word	0x08018c28
 8001f3c:	08018c30 	.word	0x08018c30

08001f40 <scan_files>:

FRESULT scan_files(char *path /* Start node to be scanned (***also used as work area***) */
) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0a0      	sub	sp, #128	; 0x80
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	static FILINFO fno;

	res = f_opendir(&dir, path); /* Open the directory */
 8001f48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f011 ffed 	bl	8013f2e <f_opendir>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK) {
 8001f5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d172      	bne.n	8002048 <scan_files+0x108>
		for (;;) {
			res = f_readdir(&dir, &fno); /* Read a directory item */
 8001f62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f66:	493b      	ldr	r1, [pc, #236]	; (8002054 <scan_files+0x114>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f012 f879 	bl	8014060 <f_readdir>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK || fno.fname[0] == 0)
 8001f74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d160      	bne.n	800203e <scan_files+0xfe>
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <scan_files+0x114>)
 8001f7e:	7d9b      	ldrb	r3, [r3, #22]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d05c      	beq.n	800203e <scan_files+0xfe>
				break; /* Break on error or end of dir */
			if (fno.fattrib & AM_DIR) { /* It is a directory */
 8001f84:	4b33      	ldr	r3, [pc, #204]	; (8002054 <scan_files+0x114>)
 8001f86:	7a1b      	ldrb	r3, [r3, #8]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0e8      	beq.n	8001f62 <scan_files+0x22>
				DIR subDir;
				static FILINFO subFno;

				res = f_opendir(&subDir, fno.fname);
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	4930      	ldr	r1, [pc, #192]	; (8002058 <scan_files+0x118>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f011 ffc9 	bl	8013f2e <f_opendir>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

				res = f_findfirst(&subDir, &subFno, fno.fname, "*.wav"); /* Start to search for wav files */
 8001fa2:	f107 000c 	add.w	r0, r7, #12
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	; (800205c <scan_files+0x11c>)
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <scan_files+0x118>)
 8001faa:	492d      	ldr	r1, [pc, #180]	; (8002060 <scan_files+0x120>)
 8001fac:	f012 f8bd 	bl	801412a <f_findfirst>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && subFno.fname[0]) {
 8001fb6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <scan_files+0xaa>
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <scan_files+0x120>)
 8001fc0:	7d9b      	ldrb	r3, [r3, #22]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d011      	beq.n	8001fea <scan_files+0xaa>
					state.numOfLang++;
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <scan_files+0x124>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a25      	ldr	r2, [pc, #148]	; (8002064 <scan_files+0x124>)
 8001fce:	6093      	str	r3, [r2, #8]
					sprintf(lang[state.numOfLang].wavFile, "/%s/%s", fno.fname,
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <scan_files+0x124>)
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4a22      	ldr	r2, [pc, #136]	; (8002068 <scan_files+0x128>)
 8001fde:	1898      	adds	r0, r3, r2
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <scan_files+0x12c>)
 8001fe2:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <scan_files+0x118>)
 8001fe4:	4922      	ldr	r1, [pc, #136]	; (8002070 <scan_files+0x130>)
 8001fe6:	f015 f9e9 	bl	80173bc <siprintf>
							subFno.fname);
				}

				res = f_findfirst(&subDir, &subFno, fno.fname, "*.bmp"); /* Start to search for wav files */
 8001fea:	f107 000c 	add.w	r0, r7, #12
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <scan_files+0x134>)
 8001ff0:	4a19      	ldr	r2, [pc, #100]	; (8002058 <scan_files+0x118>)
 8001ff2:	491b      	ldr	r1, [pc, #108]	; (8002060 <scan_files+0x120>)
 8001ff4:	f012 f899 	bl	801412a <f_findfirst>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && subFno.fname[0]) {
 8001ffe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002002:	2b00      	cmp	r3, #0
 8002004:	d112      	bne.n	800202c <scan_files+0xec>
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <scan_files+0x120>)
 8002008:	7d9b      	ldrb	r3, [r3, #22]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00e      	beq.n	800202c <scan_files+0xec>
					sprintf(lang[state.numOfLang].icoFile, "/%s/%s", fno.fname,
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <scan_files+0x124>)
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	33f8      	adds	r3, #248	; 0xf8
 800201c:	4a12      	ldr	r2, [pc, #72]	; (8002068 <scan_files+0x128>)
 800201e:	4413      	add	r3, r2
 8002020:	1dd8      	adds	r0, r3, #7
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <scan_files+0x12c>)
 8002024:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <scan_files+0x118>)
 8002026:	4912      	ldr	r1, [pc, #72]	; (8002070 <scan_files+0x130>)
 8002028:	f015 f9c8 	bl	80173bc <siprintf>
							subFno.fname);
				}

				res = f_closedir(&subDir);
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4618      	mov	r0, r3
 8002032:	f011 ffef 	bl	8014014 <f_closedir>
 8002036:	4603      	mov	r3, r0
 8002038:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			res = f_readdir(&dir, &fno); /* Read a directory item */
 800203c:	e791      	b.n	8001f62 <scan_files+0x22>

			}
		}
		f_closedir(&dir);
 800203e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002042:	4618      	mov	r0, r3
 8002044:	f011 ffe6 	bl	8014014 <f_closedir>
	}

	return res;
 8002048:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800204c:	4618      	mov	r0, r3
 800204e:	3780      	adds	r7, #128	; 0x80
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000368 	.word	0x20000368
 8002058:	2000037e 	.word	0x2000037e
 800205c:	08018c38 	.word	0x08018c38
 8002060:	20000480 	.word	0x20000480
 8002064:	2000242c 	.word	0x2000242c
 8002068:	20002640 	.word	0x20002640
 800206c:	20000496 	.word	0x20000496
 8002070:	08018c40 	.word	0x08018c40
 8002074:	08018c48 	.word	0x08018c48

08002078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b0c6      	sub	sp, #280	; 0x118
 800207c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800207e:	f002 f973 	bl	8004368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002082:	f000 fa85 	bl	8002590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002086:	f000 fde9 	bl	8002c5c <MX_GPIO_Init>
  MX_DMA_Init();
 800208a:	f000 fdb1 	bl	8002bf0 <MX_DMA_Init>
  MX_ADC1_Init();
 800208e:	f000 fb11 	bl	80026b4 <MX_ADC1_Init>
  MX_I2S2_Init();
 8002092:	f000 fba3 	bl	80027dc <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8002096:	f000 fbcf 	bl	8002838 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800209a:	f000 fbed 	bl	8002878 <MX_SPI1_Init>
  MX_FATFS_Init();
 800209e:	f00b fba1 	bl	800d7e4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80020a2:	f012 fa6f 	bl	8014584 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80020a6:	f000 fd79 	bl	8002b9c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80020aa:	f000 fc1b 	bl	80028e4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80020ae:	f000 fc9b 	bl	80029e8 <MX_TIM4_Init>
  MX_TIM8_Init();
 80020b2:	f000 fcf1 	bl	8002a98 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_3);
 80020b6:	2108      	movs	r1, #8
 80020b8:	4881      	ldr	r0, [pc, #516]	; (80022c0 <main+0x248>)
 80020ba:	f007 ff43 	bl	8009f44 <HAL_TIM_OC_Start>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 80020be:	4881      	ldr	r0, [pc, #516]	; (80022c4 <main+0x24c>)
 80020c0:	f002 fda6 	bl	8004c10 <HAL_ADCEx_InjectedStart_IT>
	HAL_TIM_OC_Start_IT(&htim8, TIM_CHANNEL_1);
 80020c4:	2100      	movs	r1, #0
 80020c6:	4880      	ldr	r0, [pc, #512]	; (80022c8 <main+0x250>)
 80020c8:	f007 ff7a 	bl	8009fc0 <HAL_TIM_OC_Start_IT>

	ws2812_init();
 80020cc:	f001 ff94 	bl	8003ff8 <ws2812_init>
	//----------Screen_INIT-----------
	ST7789_Init();
 80020d0:	f7ff f856 	bl	8001180 <ST7789_Init>
	ST7789_Fill_Color(BLACK);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff f8f1 	bl	80012bc <ST7789_Fill_Color>

	//-----------------init SDcard--------------------
	if (init_FAT_FS() == 0) {
 80020da:	f001 fa45 	bl	8003568 <init_FAT_FS>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d144      	bne.n	800216e <main+0xf6>
		ST7789_WriteString(64, 30, "MONOFON", Font_16x26, WHITE, BLACK);
 80020e4:	4b79      	ldr	r3, [pc, #484]	; (80022cc <main+0x254>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	9202      	str	r2, [sp, #8]
 80020ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ee:	9201      	str	r2, [sp, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	9200      	str	r2, [sp, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a76      	ldr	r2, [pc, #472]	; (80022d0 <main+0x258>)
 80020f8:	211e      	movs	r1, #30
 80020fa:	2040      	movs	r0, #64	; 0x40
 80020fc:	f7ff f9ea 	bl	80014d4 <ST7789_WriteString>
		ST7789_WriteString(72, 60, "SD card", Font_16x26, WHITE, BLACK);
 8002100:	4b72      	ldr	r3, [pc, #456]	; (80022cc <main+0x254>)
 8002102:	2200      	movs	r2, #0
 8002104:	9202      	str	r2, [sp, #8]
 8002106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800210a:	9201      	str	r2, [sp, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	9200      	str	r2, [sp, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a70      	ldr	r2, [pc, #448]	; (80022d4 <main+0x25c>)
 8002114:	213c      	movs	r1, #60	; 0x3c
 8002116:	2048      	movs	r0, #72	; 0x48
 8002118:	f7ff f9dc 	bl	80014d4 <ST7789_WriteString>
		ST7789_WriteString(72, 90, "Error!", Font_16x26, WHITE, BLACK);
 800211c:	4b6b      	ldr	r3, [pc, #428]	; (80022cc <main+0x254>)
 800211e:	2200      	movs	r2, #0
 8002120:	9202      	str	r2, [sp, #8]
 8002122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002126:	9201      	str	r2, [sp, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	9200      	str	r2, [sp, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6a      	ldr	r2, [pc, #424]	; (80022d8 <main+0x260>)
 8002130:	215a      	movs	r1, #90	; 0x5a
 8002132:	2048      	movs	r0, #72	; 0x48
 8002134:	f7ff f9ce 	bl	80014d4 <ST7789_WriteString>

		for (int i = 0; i < LED_COUNT; i++) {
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800213e:	e00c      	b.n	800215a <main+0xe2>
			ws2812_setPixel_gammaCorrection(MAX_BRIGHT, 0, 0, i);
 8002140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002144:	b29b      	uxth	r3, r3
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	20c8      	movs	r0, #200	; 0xc8
 800214c:	f001 ff6e 	bl	800402c <ws2812_setPixel_gammaCorrection>
		for (int i = 0; i < LED_COUNT; i++) {
 8002150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002154:	3301      	adds	r3, #1
 8002156:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800215a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800215e:	2b17      	cmp	r3, #23
 8002160:	ddee      	ble.n	8002140 <main+0xc8>
		}
		ws2812_light();
 8002162:	f002 f81d 	bl	80041a0 <ws2812_light>
		while (1) {
			HAL_Delay(10);
 8002166:	200a      	movs	r0, #10
 8002168:	f002 f970 	bl	800444c <HAL_Delay>
 800216c:	e7fb      	b.n	8002166 <main+0xee>
		}
	}

	state.changeLang = 0;
 800216e:	4b5b      	ldr	r3, [pc, #364]	; (80022dc <main+0x264>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	state.currentLang = 1;
 8002174:	4b59      	ldr	r3, [pc, #356]	; (80022dc <main+0x264>)
 8002176:	2201      	movs	r2, #1
 8002178:	605a      	str	r2, [r3, #4]
	state.numOfLang = 0;
 800217a:	4b58      	ldr	r3, [pc, #352]	; (80022dc <main+0x264>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
	state.phoneUp = 0;
 8002180:	4b56      	ldr	r3, [pc, #344]	; (80022dc <main+0x264>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
	state.prevPhoneUp = 2;
 8002186:	4b55      	ldr	r3, [pc, #340]	; (80022dc <main+0x264>)
 8002188:	2202      	movs	r2, #2
 800218a:	611a      	str	r2, [r3, #16]
	state.ledRefresh = 1;
 800218c:	4b53      	ldr	r3, [pc, #332]	; (80022dc <main+0x264>)
 800218e:	2201      	movs	r2, #1
 8002190:	615a      	str	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//------------------------CHEK PC CONNECTION----------------------------------
	if (usbPcConnected) {
 8002192:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <main+0x268>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d060      	beq.n	800225c <main+0x1e4>
		ST7789_WriteString(96, 50, "USB", Font_16x26, WHITE, BLACK);
 800219a:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <main+0x254>)
 800219c:	2200      	movs	r2, #0
 800219e:	9202      	str	r2, [sp, #8]
 80021a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a4:	9201      	str	r2, [sp, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	9200      	str	r2, [sp, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4d      	ldr	r2, [pc, #308]	; (80022e4 <main+0x26c>)
 80021ae:	2132      	movs	r1, #50	; 0x32
 80021b0:	2060      	movs	r0, #96	; 0x60
 80021b2:	f7ff f98f 	bl	80014d4 <ST7789_WriteString>
		ST7789_WriteString(88, 80, "Mass", Font_16x26, WHITE, BLACK);
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <main+0x254>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	9202      	str	r2, [sp, #8]
 80021bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c0:	9201      	str	r2, [sp, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a47      	ldr	r2, [pc, #284]	; (80022e8 <main+0x270>)
 80021ca:	2150      	movs	r1, #80	; 0x50
 80021cc:	2058      	movs	r0, #88	; 0x58
 80021ce:	f7ff f981 	bl	80014d4 <ST7789_WriteString>
		ST7789_WriteString(64, 110, "Storage", Font_16x26, WHITE, BLACK);
 80021d2:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <main+0x254>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	9202      	str	r2, [sp, #8]
 80021d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021dc:	9201      	str	r2, [sp, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	9200      	str	r2, [sp, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a41      	ldr	r2, [pc, #260]	; (80022ec <main+0x274>)
 80021e6:	216e      	movs	r1, #110	; 0x6e
 80021e8:	2040      	movs	r0, #64	; 0x40
 80021ea:	f7ff f973 	bl	80014d4 <ST7789_WriteString>
		ST7789_WriteString(72, 140, "Device", Font_16x26, WHITE, BLACK);
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <main+0x254>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	9202      	str	r2, [sp, #8]
 80021f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f8:	9201      	str	r2, [sp, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	9200      	str	r2, [sp, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a3b      	ldr	r2, [pc, #236]	; (80022f0 <main+0x278>)
 8002202:	218c      	movs	r1, #140	; 0x8c
 8002204:	2048      	movs	r0, #72	; 0x48
 8002206:	f7ff f965 	bl	80014d4 <ST7789_WriteString>
		ST7789_WriteString(48, 170, "Connected", Font_16x26, WHITE, BLACK);
 800220a:	4b30      	ldr	r3, [pc, #192]	; (80022cc <main+0x254>)
 800220c:	2200      	movs	r2, #0
 800220e:	9202      	str	r2, [sp, #8]
 8002210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002214:	9201      	str	r2, [sp, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	9200      	str	r2, [sp, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a35      	ldr	r2, [pc, #212]	; (80022f4 <main+0x27c>)
 800221e:	21aa      	movs	r1, #170	; 0xaa
 8002220:	2030      	movs	r0, #48	; 0x30
 8002222:	f7ff f957 	bl	80014d4 <ST7789_WriteString>

		for (int i = 0; i < LED_COUNT; i++) {
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800222c:	e00c      	b.n	8002248 <main+0x1d0>
			ws2812_setPixel_gammaCorrection(0, MAX_BRIGHT, 0, i);
 800222e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002232:	b29b      	uxth	r3, r3
 8002234:	2200      	movs	r2, #0
 8002236:	21c8      	movs	r1, #200	; 0xc8
 8002238:	2000      	movs	r0, #0
 800223a:	f001 fef7 	bl	800402c <ws2812_setPixel_gammaCorrection>
		for (int i = 0; i < LED_COUNT; i++) {
 800223e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002242:	3301      	adds	r3, #1
 8002244:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002248:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800224c:	2b17      	cmp	r3, #23
 800224e:	ddee      	ble.n	800222e <main+0x1b6>
		}
		ws2812_light();
 8002250:	f001 ffa6 	bl	80041a0 <ws2812_light>
		while (1) {
			HAL_Delay(100);
 8002254:	2064      	movs	r0, #100	; 0x64
 8002256:	f002 f8f9 	bl	800444c <HAL_Delay>
 800225a:	e7fb      	b.n	8002254 <main+0x1dc>
		}

	} else {
		if (USBD_Stop(&hUsbDeviceFS) != USBD_OK) {
 800225c:	4826      	ldr	r0, [pc, #152]	; (80022f8 <main+0x280>)
 800225e:	f00d f943 	bl	800f4e8 <USBD_Stop>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <main+0x1f6>
			HAL_Delay(100);
 8002268:	2064      	movs	r0, #100	; 0x64
 800226a:	f002 f8ef 	bl	800444c <HAL_Delay>
		}
	}

	f_unlink("error.txt"); // delelet error file
 800226e:	4823      	ldr	r0, [pc, #140]	; (80022fc <main+0x284>)
 8002270:	f011 ff79 	bl	8014166 <f_unlink>

	if (ini_parse_fatfs("config.ini", handler, &config) < 0) {
 8002274:	4a22      	ldr	r2, [pc, #136]	; (8002300 <main+0x288>)
 8002276:	4923      	ldr	r1, [pc, #140]	; (8002304 <main+0x28c>)
 8002278:	4823      	ldr	r0, [pc, #140]	; (8002308 <main+0x290>)
 800227a:	f7ff fb63 	bl	8001944 <ini_parse_fatfs>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	da45      	bge.n	8002310 <main+0x298>
		printf("Can't load 'config.ini', set default\n");
 8002284:	4821      	ldr	r0, [pc, #132]	; (800230c <main+0x294>)
 8002286:	f015 f881 	bl	801738c <puts>
		//writeErrorTxt("Can't load 'config.ini', set default\n");
		config.brightMax = 200;
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <main+0x288>)
 800228c:	22c8      	movs	r2, #200	; 0xc8
 800228e:	601a      	str	r2, [r3, #0]
		config.brightMin = 0;
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <main+0x288>)
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]
		config.RGB.r = 0;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <main+0x288>)
 8002298:	2200      	movs	r2, #0
 800229a:	721a      	strb	r2, [r3, #8]
		config.RGB.g = 0;
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <main+0x288>)
 800229e:	2200      	movs	r2, #0
 80022a0:	725a      	strb	r2, [r3, #9]
		config.RGB.b = 200;
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <main+0x288>)
 80022a4:	22c8      	movs	r2, #200	; 0xc8
 80022a6:	729a      	strb	r2, [r3, #10]
		config.animate = 1;
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <main+0x288>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	741a      	strb	r2, [r3, #16]
		config.rainbow = 0;
 80022ae:	4b14      	ldr	r3, [pc, #80]	; (8002300 <main+0x288>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	745a      	strb	r2, [r3, #17]
		config.volume = 60;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <main+0x288>)
 80022b6:	223c      	movs	r2, #60	; 0x3c
 80022b8:	60da      	str	r2, [r3, #12]
		return 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e138      	b.n	8002530 <main+0x4b8>
 80022be:	bf00      	nop
 80022c0:	200021f4 	.word	0x200021f4
 80022c4:	20002464 	.word	0x20002464
 80022c8:	200021b4 	.word	0x200021b4
 80022cc:	20000000 	.word	0x20000000
 80022d0:	08018c50 	.word	0x08018c50
 80022d4:	08018c58 	.word	0x08018c58
 80022d8:	08018c60 	.word	0x08018c60
 80022dc:	2000242c 	.word	0x2000242c
 80022e0:	20000364 	.word	0x20000364
 80022e4:	08018c68 	.word	0x08018c68
 80022e8:	08018c6c 	.word	0x08018c6c
 80022ec:	08018c74 	.word	0x08018c74
 80022f0:	08018c7c 	.word	0x08018c7c
 80022f4:	08018c84 	.word	0x08018c84
 80022f8:	2000b1b0 	.word	0x2000b1b0
 80022fc:	08018c90 	.word	0x08018c90
 8002300:	20003080 	.word	0x20003080
 8002304:	08001d9d 	.word	0x08001d9d
 8002308:	08018c9c 	.word	0x08018c9c
 800230c:	08018ca8 	.word	0x08018ca8
	}

	//---------LED_INIT---------------
	initLeds();
 8002310:	f7ff fb64 	bl	80019dc <initLeds>

	//----------INIT-FILE-SYSTEM------------------------
	char buff[256];
	strcpy(buff, "/");
 8002314:	463b      	mov	r3, r7
 8002316:	222f      	movs	r2, #47	; 0x2f
 8002318:	801a      	strh	r2, [r3, #0]
	fr = scan_files(buff);
 800231a:	463b      	mov	r3, r7
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fe0f 	bl	8001f40 <scan_files>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	4b8a      	ldr	r3, [pc, #552]	; (8002550 <main+0x4d8>)
 8002328:	701a      	strb	r2, [r3, #0]

	printf("Start loop\n");
 800232a:	488a      	ldr	r0, [pc, #552]	; (8002554 <main+0x4dc>)
 800232c:	f015 f82e 	bl	801738c <puts>
	ST7789_Fill_Color(BLACK);
 8002330:	2000      	movs	r0, #0
 8002332:	f7fe ffc3 	bl	80012bc <ST7789_Fill_Color>
	while (1) {

		magVal1 = magVal1 * 0.9 + 0.1 * rawMagVal1;
 8002336:	4b88      	ldr	r3, [pc, #544]	; (8002558 <main+0x4e0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f91c 	bl	8000578 <__aeabi_i2d>
 8002340:	a37f      	add	r3, pc, #508	; (adr r3, 8002540 <main+0x4c8>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fe f981 	bl	800064c <__aeabi_dmul>
 800234a:	4603      	mov	r3, r0
 800234c:	460c      	mov	r4, r1
 800234e:	4625      	mov	r5, r4
 8002350:	461c      	mov	r4, r3
 8002352:	4b82      	ldr	r3, [pc, #520]	; (800255c <main+0x4e4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f90e 	bl	8000578 <__aeabi_i2d>
 800235c:	a37a      	add	r3, pc, #488	; (adr r3, 8002548 <main+0x4d0>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe f973 	bl	800064c <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4620      	mov	r0, r4
 800236c:	4629      	mov	r1, r5
 800236e:	f7fd ffb7 	bl	80002e0 <__adddf3>
 8002372:	4603      	mov	r3, r0
 8002374:	460c      	mov	r4, r1
 8002376:	4618      	mov	r0, r3
 8002378:	4621      	mov	r1, r4
 800237a:	f7fe fc01 	bl	8000b80 <__aeabi_d2iz>
 800237e:	4602      	mov	r2, r0
 8002380:	4b75      	ldr	r3, [pc, #468]	; (8002558 <main+0x4e0>)
 8002382:	601a      	str	r2, [r3, #0]
		magVal2 = magVal2 * 0.9 + 0.1 * rawMagVal2;
 8002384:	4b76      	ldr	r3, [pc, #472]	; (8002560 <main+0x4e8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8f5 	bl	8000578 <__aeabi_i2d>
 800238e:	a36c      	add	r3, pc, #432	; (adr r3, 8002540 <main+0x4c8>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fe f95a 	bl	800064c <__aeabi_dmul>
 8002398:	4603      	mov	r3, r0
 800239a:	460c      	mov	r4, r1
 800239c:	4625      	mov	r5, r4
 800239e:	461c      	mov	r4, r3
 80023a0:	4b70      	ldr	r3, [pc, #448]	; (8002564 <main+0x4ec>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8e7 	bl	8000578 <__aeabi_i2d>
 80023aa:	a367      	add	r3, pc, #412	; (adr r3, 8002548 <main+0x4d0>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe f94c 	bl	800064c <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fd ff90 	bl	80002e0 <__adddf3>
 80023c0:	4603      	mov	r3, r0
 80023c2:	460c      	mov	r4, r1
 80023c4:	4618      	mov	r0, r3
 80023c6:	4621      	mov	r1, r4
 80023c8:	f7fe fbda 	bl	8000b80 <__aeabi_d2iz>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b64      	ldr	r3, [pc, #400]	; (8002560 <main+0x4e8>)
 80023d0:	601a      	str	r2, [r3, #0]

		magValSum = magVal1 + magVal2;
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <main+0x4e0>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b62      	ldr	r3, [pc, #392]	; (8002560 <main+0x4e8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a62      	ldr	r2, [pc, #392]	; (8002568 <main+0x4f0>)
 80023de:	6013      	str	r3, [r2, #0]

		//if ((magVal1 < MAG_VAL) || (magVal2 < MAG_VAL)) {
		if (magValSum < MAG_VAL) {
 80023e0:	4b61      	ldr	r3, [pc, #388]	; (8002568 <main+0x4f0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f241 02b7 	movw	r2, #4279	; 0x10b7
 80023e8:	4293      	cmp	r3, r2
 80023ea:	dc03      	bgt.n	80023f4 <main+0x37c>
			state.phoneUp = 1;
 80023ec:	4b5f      	ldr	r3, [pc, #380]	; (800256c <main+0x4f4>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	e002      	b.n	80023fa <main+0x382>
		} else {
			state.phoneUp = 0;
 80023f4:	4b5d      	ldr	r3, [pc, #372]	; (800256c <main+0x4f4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
		}

		//---IF CHENGE LANG---------------------------
		if (state.changeLang) {
 80023fa:	4b5c      	ldr	r3, [pc, #368]	; (800256c <main+0x4f4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d036      	beq.n	8002470 <main+0x3f8>
			AUDIO_PLAYER_Stop();
 8002402:	f001 f8f7 	bl	80035f4 <AUDIO_PLAYER_Stop>
			state.currentLang++;
 8002406:	4b59      	ldr	r3, [pc, #356]	; (800256c <main+0x4f4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	3301      	adds	r3, #1
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <main+0x4f4>)
 800240e:	6053      	str	r3, [r2, #4]
			if ((state.currentLang) > state.numOfLang) {
 8002410:	4b56      	ldr	r3, [pc, #344]	; (800256c <main+0x4f4>)
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4b55      	ldr	r3, [pc, #340]	; (800256c <main+0x4f4>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	dd02      	ble.n	8002422 <main+0x3aa>
				state.currentLang = 1;
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <main+0x4f4>)
 800241e:	2201      	movs	r2, #1
 8002420:	605a      	str	r2, [r3, #4]
			}
			playWavFile(lang[state.currentLang].wavFile);
 8002422:	4b52      	ldr	r3, [pc, #328]	; (800256c <main+0x4f4>)
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4a50      	ldr	r2, [pc, #320]	; (8002570 <main+0x4f8>)
 8002430:	4413      	add	r3, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fe7c 	bl	8003130 <playWavFile>
			if (state.currentLang == 1) {
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <main+0x4f4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d108      	bne.n	8002452 <main+0x3da>
				ST7789_DrawImage(0, 0, 240, 240, rus_ico);
 8002440:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <main+0x4fc>)
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	23f0      	movs	r3, #240	; 0xf0
 8002446:	22f0      	movs	r2, #240	; 0xf0
 8002448:	2100      	movs	r1, #0
 800244a:	2000      	movs	r0, #0
 800244c:	f7fe ff72 	bl	8001334 <ST7789_DrawImage>
 8002450:	e00b      	b.n	800246a <main+0x3f2>
			} else if (state.currentLang == 2) {
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <main+0x4f4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d107      	bne.n	800246a <main+0x3f2>
				ST7789_DrawImage(0, 0, 240, 240, eng_ico);
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <main+0x500>)
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	23f0      	movs	r3, #240	; 0xf0
 8002460:	22f0      	movs	r2, #240	; 0xf0
 8002462:	2100      	movs	r1, #0
 8002464:	2000      	movs	r0, #0
 8002466:	f7fe ff65 	bl	8001334 <ST7789_DrawImage>
			}
			//ST7789_Fill_Color(BLACK);
			state.changeLang = 0;
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <main+0x4f4>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
		}

		//---CHEK MAGNET SENSOR----------------------
		if (state.phoneUp != state.prevPhoneUp) {
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <main+0x4f4>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	4b3d      	ldr	r3, [pc, #244]	; (800256c <main+0x4f4>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d03b      	beq.n	80024f4 <main+0x47c>
			if (state.phoneUp) {
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <main+0x4f4>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02b      	beq.n	80024dc <main+0x464>

				//hid_send_start();
				printf("phoneUp, statePlay \n");
 8002484:	483d      	ldr	r0, [pc, #244]	; (800257c <main+0x504>)
 8002486:	f014 ff81 	bl	801738c <puts>

				if (state.currentLang == 1) {
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <main+0x4f4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d108      	bne.n	80024a4 <main+0x42c>
					ST7789_DrawImage(0, 0, 240, 240, rus_ico);
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <main+0x4fc>)
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	23f0      	movs	r3, #240	; 0xf0
 8002498:	22f0      	movs	r2, #240	; 0xf0
 800249a:	2100      	movs	r1, #0
 800249c:	2000      	movs	r0, #0
 800249e:	f7fe ff49 	bl	8001334 <ST7789_DrawImage>
 80024a2:	e00b      	b.n	80024bc <main+0x444>
				} else if (state.currentLang == 2) {
 80024a4:	4b31      	ldr	r3, [pc, #196]	; (800256c <main+0x4f4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d107      	bne.n	80024bc <main+0x444>
					ST7789_DrawImage(0, 0, 240, 240, eng_ico);
 80024ac:	4b32      	ldr	r3, [pc, #200]	; (8002578 <main+0x500>)
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	23f0      	movs	r3, #240	; 0xf0
 80024b2:	22f0      	movs	r2, #240	; 0xf0
 80024b4:	2100      	movs	r1, #0
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7fe ff3c 	bl	8001334 <ST7789_DrawImage>
				}

				HAL_Delay(300);
 80024bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024c0:	f001 ffc4 	bl	800444c <HAL_Delay>
				playWavFile(lang[state.currentLang].wavFile);
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <main+0x4f4>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4a27      	ldr	r2, [pc, #156]	; (8002570 <main+0x4f8>)
 80024d2:	4413      	add	r3, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fe2b 	bl	8003130 <playWavFile>
 80024da:	e007      	b.n	80024ec <main+0x474>
				//free(data); // free allocated memory when you don't need
			} else {

				AUDIO_PLAYER_Stop();
 80024dc:	f001 f88a 	bl	80035f4 <AUDIO_PLAYER_Stop>
				printf("phoneDown, stateStop \n");
 80024e0:	4827      	ldr	r0, [pc, #156]	; (8002580 <main+0x508>)
 80024e2:	f014 ff53 	bl	801738c <puts>
				state.currentLang = 1;
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <main+0x4f4>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	605a      	str	r2, [r3, #4]
				//hid_send_stop();
			}
			state.prevPhoneUp = state.phoneUp;
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <main+0x4f4>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <main+0x4f4>)
 80024f2:	6113      	str	r3, [r2, #16]
		}

		//---PROCESS SOUND----------------------
		audio_error = AUDIO_PLAYER_Process();
 80024f4:	f000 fd5c 	bl	8002fb0 <AUDIO_PLAYER_Process>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <main+0x50c>)
 80024fe:	701a      	strb	r2, [r3, #0]
		if (audio_error != AUDIO_ERROR_NONE) {
 8002500:	4b20      	ldr	r3, [pc, #128]	; (8002584 <main+0x50c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <main+0x4a2>
			printf("Audio player error: %d \n", audio_error);
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <main+0x50c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	481e      	ldr	r0, [pc, #120]	; (8002588 <main+0x510>)
 8002510:	f014 fec8 	bl	80172a4 <iprintf>
			AudioState = AUDIO_STATE_STOP;
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <main+0x514>)
 8002516:	2204      	movs	r2, #4
 8002518:	701a      	strb	r2, [r3, #0]
		}

		//---led_effect----------------------
		if (state.ledRefresh) {
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <main+0x4f4>)
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f43f af09 	beq.w	8002336 <main+0x2be>
			refreshLeds();
 8002524:	f7ff fab4 	bl	8001a90 <refreshLeds>
			state.ledRefresh = 0;
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <main+0x4f4>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
		magVal1 = magVal1 * 0.9 + 0.1 * rawMagVal1;
 800252e:	e702      	b.n	8002336 <main+0x2be>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8002530:	4618      	mov	r0, r3
 8002532:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002536:	46bd      	mov	sp, r7
 8002538:	bdb0      	pop	{r4, r5, r7, pc}
 800253a:	bf00      	nop
 800253c:	f3af 8000 	nop.w
 8002540:	cccccccd 	.word	0xcccccccd
 8002544:	3feccccc 	.word	0x3feccccc
 8002548:	9999999a 	.word	0x9999999a
 800254c:	3fb99999 	.word	0x3fb99999
 8002550:	200024f0 	.word	0x200024f0
 8002554:	08018cd0 	.word	0x08018cd0
 8002558:	20002428 	.word	0x20002428
 800255c:	20002584 	.word	0x20002584
 8002560:	200024f4 	.word	0x200024f4
 8002564:	200024ac 	.word	0x200024ac
 8002568:	200021b0 	.word	0x200021b0
 800256c:	2000242c 	.word	0x2000242c
 8002570:	20002640 	.word	0x20002640
 8002574:	0801ab24 	.word	0x0801ab24
 8002578:	08036d24 	.word	0x08036d24
 800257c:	08018cdc 	.word	0x08018cdc
 8002580:	08018cf0 	.word	0x08018cf0
 8002584:	20000360 	.word	0x20000360
 8002588:	08018d08 	.word	0x08018d08
 800258c:	20003098 	.word	0x20003098

08002590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b0a4      	sub	sp, #144	; 0x90
 8002594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002596:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800259a:	2234      	movs	r2, #52	; 0x34
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f014 fb07 	bl	8016bb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	223c      	movs	r2, #60	; 0x3c
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f014 faf8 	bl	8016bb2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b39      	ldr	r3, [pc, #228]	; (80026ac <SystemClock_Config+0x11c>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a38      	ldr	r2, [pc, #224]	; (80026ac <SystemClock_Config+0x11c>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <SystemClock_Config+0x11c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <SystemClock_Config+0x120>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a32      	ldr	r2, [pc, #200]	; (80026b0 <SystemClock_Config+0x120>)
 80025e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <SystemClock_Config+0x120>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002602:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002604:	2302      	movs	r3, #2
 8002606:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800260c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800260e:	2308      	movs	r3, #8
 8002610:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 125;
 8002612:	237d      	movs	r3, #125	; 0x7d
 8002614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800261e:	2304      	movs	r3, #4
 8002620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002624:	2302      	movs	r3, #2
 8002626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800262a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800262e:	4618      	mov	r0, r3
 8002630:	f006 f83a 	bl	80086a8 <HAL_RCC_OscConfig>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800263a:	f000 fbcb 	bl	8002dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800263e:	230f      	movs	r3, #15
 8002640:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002642:	2302      	movs	r3, #2
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002646:	2300      	movs	r3, #0
 8002648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800264a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002650:	2300      	movs	r3, #0
 8002652:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002654:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002658:	2103      	movs	r1, #3
 800265a:	4618      	mov	r0, r3
 800265c:	f005 fb0c 	bl	8007c78 <HAL_RCC_ClockConfig>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002666:	f000 fbb5 	bl	8002dd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_SDIO
 800266a:	2361      	movs	r3, #97	; 0x61
 800266c:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 144;
 800266e:	2390      	movs	r3, #144	; 0x90
 8002670:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 6;
 8002672:	2306      	movs	r3, #6
 8002674:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002676:	2302      	movs	r3, #2
 8002678:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800267a:	2302      	movs	r3, #2
 800267c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002682:	2300      	movs	r3, #0
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8002686:	2300      	movs	r3, #0
 8002688:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800268e:	f107 030c 	add.w	r3, r7, #12
 8002692:	4618      	mov	r0, r3
 8002694:	f005 fcec 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <SystemClock_Config+0x112>
  {
    Error_Handler();
 800269e:	f000 fb99 	bl	8002dd4 <Error_Handler>
  }
}
 80026a2:	bf00      	nop
 80026a4:	3790      	adds	r7, #144	; 0x90
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40007000 	.word	0x40007000

080026b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026ba:	f107 0320 	add.w	r3, r7, #32
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80026c8:	463b      	mov	r3, r7
 80026ca:	2220      	movs	r2, #32
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f014 fa6f 	bl	8016bb2 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026d4:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <MX_ADC1_Init+0x11c>)
 80026d6:	4a3f      	ldr	r2, [pc, #252]	; (80027d4 <MX_ADC1_Init+0x120>)
 80026d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <MX_ADC1_Init+0x11c>)
 80026dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <MX_ADC1_Init+0x11c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <MX_ADC1_Init+0x11c>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026ee:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <MX_ADC1_Init+0x11c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <MX_ADC1_Init+0x11c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026fc:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <MX_ADC1_Init+0x11c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <MX_ADC1_Init+0x11c>)
 8002704:	4a34      	ldr	r2, [pc, #208]	; (80027d8 <MX_ADC1_Init+0x124>)
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <MX_ADC1_Init+0x11c>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <MX_ADC1_Init+0x11c>)
 8002710:	2201      	movs	r2, #1
 8002712:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002714:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <MX_ADC1_Init+0x11c>)
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800271c:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <MX_ADC1_Init+0x11c>)
 800271e:	2201      	movs	r2, #1
 8002720:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002722:	482b      	ldr	r0, [pc, #172]	; (80027d0 <MX_ADC1_Init+0x11c>)
 8002724:	f001 feb4 	bl	8004490 <HAL_ADC_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800272e:	f000 fb51 	bl	8002dd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002732:	2308      	movs	r3, #8
 8002734:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800273a:	2300      	movs	r3, #0
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800273e:	f107 0320 	add.w	r3, r7, #32
 8002742:	4619      	mov	r1, r3
 8002744:	4822      	ldr	r0, [pc, #136]	; (80027d0 <MX_ADC1_Init+0x11c>)
 8002746:	f002 f845 	bl	80047d4 <HAL_ADC_ConfigChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002750:	f000 fb40 	bl	8002dd4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8002754:	2308      	movs	r3, #8
 8002756:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8002758:	2301      	movs	r3, #1
 800275a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800275c:	2303      	movs	r3, #3
 800275e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8002764:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002768:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T4_CC3;
 800276a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800276e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800277c:	463b      	mov	r3, r7
 800277e:	4619      	mov	r1, r3
 8002780:	4813      	ldr	r0, [pc, #76]	; (80027d0 <MX_ADC1_Init+0x11c>)
 8002782:	f002 fb43 	bl	8004e0c <HAL_ADCEx_InjectedConfigChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800278c:	f000 fb22 	bl	8002dd4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 8002790:	2309      	movs	r3, #9
 8002792:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8002794:	2302      	movs	r3, #2
 8002796:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002798:	463b      	mov	r3, r7
 800279a:	4619      	mov	r1, r3
 800279c:	480c      	ldr	r0, [pc, #48]	; (80027d0 <MX_ADC1_Init+0x11c>)
 800279e:	f002 fb35 	bl	8004e0c <HAL_ADCEx_InjectedConfigChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80027a8:	f000 fb14 	bl	8002dd4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80027ac:	230d      	movs	r3, #13
 80027ae:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80027b0:	2303      	movs	r3, #3
 80027b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80027b4:	463b      	mov	r3, r7
 80027b6:	4619      	mov	r1, r3
 80027b8:	4805      	ldr	r0, [pc, #20]	; (80027d0 <MX_ADC1_Init+0x11c>)
 80027ba:	f002 fb27 	bl	8004e0c <HAL_ADCEx_InjectedConfigChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80027c4:	f000 fb06 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027c8:	bf00      	nop
 80027ca:	3730      	adds	r7, #48	; 0x30
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20002464 	.word	0x20002464
 80027d4:	40012000 	.word	0x40012000
 80027d8:	0f000001 	.word	0x0f000001

080027dc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <MX_I2S2_Init+0x54>)
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <MX_I2S2_Init+0x58>)
 80027e4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <MX_I2S2_Init+0x54>)
 80027e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <MX_I2S2_Init+0x54>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <MX_I2S2_Init+0x54>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <MX_I2S2_Init+0x54>)
 80027fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002800:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <MX_I2S2_Init+0x54>)
 8002804:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002808:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_I2S2_Init+0x54>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <MX_I2S2_Init+0x54>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <MX_I2S2_Init+0x54>)
 8002818:	2200      	movs	r2, #0
 800281a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <MX_I2S2_Init+0x54>)
 800281e:	f003 fab5 	bl	8005d8c <HAL_I2S_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8002828:	f000 fad4 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20003038 	.word	0x20003038
 8002834:	40003800 	.word	0x40003800

08002838 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <MX_SDIO_SD_Init+0x38>)
 800283e:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <MX_SDIO_SD_Init+0x3c>)
 8002840:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <MX_SDIO_SD_Init+0x38>)
 8002844:	2200      	movs	r2, #0
 8002846:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <MX_SDIO_SD_Init+0x38>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <MX_SDIO_SD_Init+0x38>)
 8002850:	2200      	movs	r2, #0
 8002852:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <MX_SDIO_SD_Init+0x38>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <MX_SDIO_SD_Init+0x38>)
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 6;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <MX_SDIO_SD_Init+0x38>)
 8002862:	2206      	movs	r2, #6
 8002864:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20002500 	.word	0x20002500
 8002874:	40012c00 	.word	0x40012c00

08002878 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <MX_SPI1_Init+0x64>)
 800287e:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <MX_SPI1_Init+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_SPI1_Init+0x64>)
 8002884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <MX_SPI1_Init+0x64>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <MX_SPI1_Init+0x64>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_SPI1_Init+0x64>)
 8002898:	2202      	movs	r2, #2
 800289a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <MX_SPI1_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_SPI1_Init+0x64>)
 80028a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_SPI1_Init+0x64>)
 80028ac:	2208      	movs	r2, #8
 80028ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <MX_SPI1_Init+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_SPI1_Init+0x64>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <MX_SPI1_Init+0x64>)
 80028be:	2200      	movs	r2, #0
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_SPI1_Init+0x64>)
 80028c4:	220a      	movs	r2, #10
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028c8:	4804      	ldr	r0, [pc, #16]	; (80028dc <MX_SPI1_Init+0x64>)
 80028ca:	f007 f8cb 	bl	8009a64 <HAL_SPI_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028d4:	f000 fa7e 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20002588 	.word	0x20002588
 80028e0:	40013000 	.word	0x40013000

080028e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b092      	sub	sp, #72	; 0x48
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
 8002904:	615a      	str	r2, [r3, #20]
 8002906:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	2220      	movs	r2, #32
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f014 f94f 	bl	8016bb2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <MX_TIM1_Init+0xfc>)
 8002916:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <MX_TIM1_Init+0x100>)
 8002918:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800291a:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <MX_TIM1_Init+0xfc>)
 800291c:	2200      	movs	r2, #0
 800291e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002920:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <MX_TIM1_Init+0xfc>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 120;
 8002926:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <MX_TIM1_Init+0xfc>)
 8002928:	2278      	movs	r2, #120	; 0x78
 800292a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292c:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <MX_TIM1_Init+0xfc>)
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <MX_TIM1_Init+0xfc>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002938:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <MX_TIM1_Init+0xfc>)
 800293a:	2200      	movs	r2, #0
 800293c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800293e:	4828      	ldr	r0, [pc, #160]	; (80029e0 <MX_TIM1_Init+0xfc>)
 8002940:	f007 fbc2 	bl	800a0c8 <HAL_TIM_PWM_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800294a:	f000 fa43 	bl	8002dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002956:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800295a:	4619      	mov	r1, r3
 800295c:	4820      	ldr	r0, [pc, #128]	; (80029e0 <MX_TIM1_Init+0xfc>)
 800295e:	f008 fa53 	bl	800ae08 <HAL_TIMEx_MasterConfigSynchronization>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002968:	f000 fa34 	bl	8002dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800296c:	2360      	movs	r3, #96	; 0x60
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002974:	2302      	movs	r3, #2
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298c:	2208      	movs	r2, #8
 800298e:	4619      	mov	r1, r3
 8002990:	4813      	ldr	r0, [pc, #76]	; (80029e0 <MX_TIM1_Init+0xfc>)
 8002992:	f007 fe3f 	bl	800a614 <HAL_TIM_PWM_ConfigChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800299c:	f000 fa1a 	bl	8002dd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4807      	ldr	r0, [pc, #28]	; (80029e0 <MX_TIM1_Init+0xfc>)
 80029c4:	f008 fa9c 	bl	800af00 <HAL_TIMEx_ConfigBreakDeadTime>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80029ce:	f000 fa01 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029d2:	4803      	ldr	r0, [pc, #12]	; (80029e0 <MX_TIM1_Init+0xfc>)
 80029d4:	f001 f95a 	bl	8003c8c <HAL_TIM_MspPostInit>

}
 80029d8:	bf00      	nop
 80029da:	3748      	adds	r7, #72	; 0x48
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200024b0 	.word	0x200024b0
 80029e4:	40010000 	.word	0x40010000

080029e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ee:	f107 0320 	add.w	r3, r7, #32
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
 8002a04:	611a      	str	r2, [r3, #16]
 8002a06:	615a      	str	r2, [r3, #20]
 8002a08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <MX_TIM4_Init+0xa8>)
 8002a0c:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <MX_TIM4_Init+0xac>)
 8002a0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4800;
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <MX_TIM4_Init+0xa8>)
 8002a12:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002a16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <MX_TIM4_Init+0xa8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <MX_TIM4_Init+0xa8>)
 8002a20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <MX_TIM4_Init+0xa8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <MX_TIM4_Init+0xa8>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002a32:	4817      	ldr	r0, [pc, #92]	; (8002a90 <MX_TIM4_Init+0xa8>)
 8002a34:	f007 fa5a 	bl	8009eec <HAL_TIM_OC_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002a3e:	f000 f9c9 	bl	8002dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a4a:	f107 0320 	add.w	r3, r7, #32
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480f      	ldr	r0, [pc, #60]	; (8002a90 <MX_TIM4_Init+0xa8>)
 8002a52:	f008 f9d9 	bl	800ae08 <HAL_TIMEx_MasterConfigSynchronization>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002a5c:	f000 f9ba 	bl	8002dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002a60:	2330      	movs	r3, #48	; 0x30
 8002a62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	2208      	movs	r2, #8
 8002a74:	4619      	mov	r1, r3
 8002a76:	4806      	ldr	r0, [pc, #24]	; (8002a90 <MX_TIM4_Init+0xa8>)
 8002a78:	f007 fd6c 	bl	800a554 <HAL_TIM_OC_ConfigChannel>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002a82:	f000 f9a7 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	3728      	adds	r7, #40	; 0x28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200021f4 	.word	0x200021f4
 8002a94:	40000800 	.word	0x40000800

08002a98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b092      	sub	sp, #72	; 0x48
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
 8002ab8:	615a      	str	r2, [r3, #20]
 8002aba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2220      	movs	r2, #32
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f014 f875 	bl	8016bb2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002aca:	4a33      	ldr	r2, [pc, #204]	; (8002b98 <MX_TIM8_Init+0x100>)
 8002acc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9600;
 8002ace:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002ad0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ad4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 600;
 8002adc:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002ade:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002ae2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002af6:	4827      	ldr	r0, [pc, #156]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002af8:	f007 f9f8 	bl	8009eec <HAL_TIM_OC_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8002b02:	f000 f967 	bl	8002dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b12:	4619      	mov	r1, r3
 8002b14:	481f      	ldr	r0, [pc, #124]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002b16:	f008 f977 	bl	800ae08 <HAL_TIMEx_MasterConfigSynchronization>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8002b20:	f000 f958 	bl	8002dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b30:	2300      	movs	r3, #0
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b44:	2200      	movs	r2, #0
 8002b46:	4619      	mov	r1, r3
 8002b48:	4812      	ldr	r0, [pc, #72]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002b4a:	f007 fd03 	bl	800a554 <HAL_TIM_OC_ConfigChannel>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8002b54:	f000 f93e 	bl	8002dd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4806      	ldr	r0, [pc, #24]	; (8002b94 <MX_TIM8_Init+0xfc>)
 8002b7c:	f008 f9c0 	bl	800af00 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8002b86:	f000 f925 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	3748      	adds	r7, #72	; 0x48
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200021b4 	.word	0x200021b4
 8002b98:	40010400 	.word	0x40010400

08002b9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <MX_USART3_UART_Init+0x4c>)
 8002ba2:	4a12      	ldr	r2, [pc, #72]	; (8002bec <MX_USART3_UART_Init+0x50>)
 8002ba4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <MX_USART3_UART_Init+0x4c>)
 8002ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <MX_USART3_UART_Init+0x4c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <MX_USART3_UART_Init+0x4c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <MX_USART3_UART_Init+0x4c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <MX_USART3_UART_Init+0x4c>)
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <MX_USART3_UART_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <MX_USART3_UART_Init+0x4c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bd2:	4805      	ldr	r0, [pc, #20]	; (8002be8 <MX_USART3_UART_Init+0x4c>)
 8002bd4:	f008 f9fa 	bl	800afcc <HAL_UART_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002bde:	f000 f8f9 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20002234 	.word	0x20002234
 8002bec:	40004800 	.word	0x40004800

08002bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <MX_DMA_Init+0x68>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <MX_DMA_Init+0x68>)
 8002c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <MX_DMA_Init+0x68>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <MX_DMA_Init+0x68>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <MX_DMA_Init+0x68>)
 8002c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <MX_DMA_Init+0x68>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	200f      	movs	r0, #15
 8002c34:	f002 fb59 	bl	80052ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c38:	200f      	movs	r0, #15
 8002c3a:	f002 fb72 	bl	8005322 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 1, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2101      	movs	r1, #1
 8002c42:	2045      	movs	r0, #69	; 0x45
 8002c44:	f002 fb51 	bl	80052ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002c48:	2045      	movs	r0, #69	; 0x45
 8002c4a:	f002 fb6a 	bl	8005322 <HAL_NVIC_EnableIRQ>

}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800

08002c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a4b      	ldr	r2, [pc, #300]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a44      	ldr	r2, [pc, #272]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a3d      	ldr	r2, [pc, #244]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a36      	ldr	r2, [pc, #216]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002cec:	f043 0308 	orr.w	r3, r3, #8
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_CS_Pin|ST7789_DC_Pin, GPIO_PIN_RESET);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2150      	movs	r1, #80	; 0x50
 8002d02:	4831      	ldr	r0, [pc, #196]	; (8002dc8 <MX_GPIO_Init+0x16c>)
 8002d04:	f003 f828 	bl	8005d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ST7789_RST_Pin|ST7789_BLK_Pin, GPIO_PIN_RESET);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2130      	movs	r1, #48	; 0x30
 8002d0c:	482f      	ldr	r0, [pc, #188]	; (8002dcc <MX_GPIO_Init+0x170>)
 8002d0e:	f003 f823 	bl	8005d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_2_Pin|GPIO_1_Pin, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	21c0      	movs	r1, #192	; 0xc0
 8002d16:	482e      	ldr	r0, [pc, #184]	; (8002dd0 <MX_GPIO_Init+0x174>)
 8002d18:	f003 f81e 	bl	8005d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SNS_3_Pin SNS_4_Pin */
  GPIO_InitStruct.Pin = SNS_3_Pin|SNS_4_Pin;
 8002d1c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4826      	ldr	r0, [pc, #152]	; (8002dcc <MX_GPIO_Init+0x170>)
 8002d32:	f002 fe7f 	bl	8005a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_CS_Pin ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin|ST7789_DC_Pin;
 8002d36:	2350      	movs	r3, #80	; 0x50
 8002d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	481e      	ldr	r0, [pc, #120]	; (8002dc8 <MX_GPIO_Init+0x16c>)
 8002d4e:	f002 fe71 	bl	8005a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_RST_Pin ST7789_BLK_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin|ST7789_BLK_Pin;
 8002d52:	2330      	movs	r3, #48	; 0x30
 8002d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d56:	2301      	movs	r3, #1
 8002d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	4619      	mov	r1, r3
 8002d68:	4818      	ldr	r0, [pc, #96]	; (8002dcc <MX_GPIO_Init+0x170>)
 8002d6a:	f002 fe63 	bl	8005a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d76:	2301      	movs	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4812      	ldr	r0, [pc, #72]	; (8002dcc <MX_GPIO_Init+0x170>)
 8002d82:	f002 fe57 	bl	8005a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_2_Pin GPIO_1_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_1_Pin;
 8002d86:	23c0      	movs	r3, #192	; 0xc0
 8002d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <MX_GPIO_Init+0x174>)
 8002d9e:	f002 fe49 	bl	8005a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SNS_1_Pin SNS_2_Pin */
  GPIO_InitStruct.Pin = SNS_1_Pin|SNS_2_Pin;
 8002da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4619      	mov	r1, r3
 8002db6:	4806      	ldr	r0, [pc, #24]	; (8002dd0 <MX_GPIO_Init+0x174>)
 8002db8:	f002 fe3c 	bl	8005a34 <HAL_GPIO_Init>

}
 8002dbc:	bf00      	nop
 8002dbe:	3728      	adds	r7, #40	; 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	40020400 	.word	0x40020400

08002dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <GetFileInfo>:
volatile int adccnt = 0;
int32_t error = GAM_ERROR_NONE;

extern configuration config;

static AUDIO_ErrorTypeDef GetFileInfo(char *file_name, WAVE_FormatTypeDef *info) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
	uint32_t bytesread;
	f_close(&WavFile);
 8002dee:	4819      	ldr	r0, [pc, #100]	; (8002e54 <GetFileInfo+0x70>)
 8002df0:	f010 fe4f 	bl	8013a92 <f_close>
	if (f_open(&WavFile, file_name, FA_OPEN_EXISTING | FA_READ) == FR_OK) {
 8002df4:	2201      	movs	r2, #1
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4816      	ldr	r0, [pc, #88]	; (8002e54 <GetFileInfo+0x70>)
 8002dfa:	f010 f90d 	bl	8013018 <f_open>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d122      	bne.n	8002e4a <GetFileInfo+0x66>
		/* Fill the buffer to Send */
		if (f_read(&WavFile, info, sizeof(WaveFormat), (void*) &bytesread)
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	222c      	movs	r2, #44	; 0x2c
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	4811      	ldr	r0, [pc, #68]	; (8002e54 <GetFileInfo+0x70>)
 8002e0e:	f010 facf 	bl	80133b0 <f_read>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d118      	bne.n	8002e4a <GetFileInfo+0x66>
				== FR_OK) {
			printf("Going to play file: %s \n", file_name);
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	480f      	ldr	r0, [pc, #60]	; (8002e58 <GetFileInfo+0x74>)
 8002e1c:	f014 fa42 	bl	80172a4 <iprintf>
			printf("Sample rate : %d Hz \n", (int) (info->SampleRate));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4619      	mov	r1, r3
 8002e26:	480d      	ldr	r0, [pc, #52]	; (8002e5c <GetFileInfo+0x78>)
 8002e28:	f014 fa3c 	bl	80172a4 <iprintf>
			printf("Channels number : %d \n", info->NbrChannels);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	8adb      	ldrh	r3, [r3, #22]
 8002e30:	4619      	mov	r1, r3
 8002e32:	480b      	ldr	r0, [pc, #44]	; (8002e60 <GetFileInfo+0x7c>)
 8002e34:	f014 fa36 	bl	80172a4 <iprintf>
			printf("File Size : %d KB \n", (int) (info->FileSize / 1024));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0a9b      	lsrs	r3, r3, #10
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4808      	ldr	r0, [pc, #32]	; (8002e64 <GetFileInfo+0x80>)
 8002e42:	f014 fa2f 	bl	80172a4 <iprintf>

			return AUDIO_ERROR_NONE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e000      	b.n	8002e4c <GetFileInfo+0x68>
		}
		//f_close(&WavFile);
	}
	return AUDIO_ERROR_IO;
 8002e4a:	2301      	movs	r3, #1
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	2000810c 	.word	0x2000810c
 8002e58:	08018d24 	.word	0x08018d24
 8002e5c:	08018d40 	.word	0x08018d40
 8002e60:	08018d58 	.word	0x08018d58
 8002e64:	08018d70 	.word	0x08018d70

08002e68 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf>:

static AUDIO_ErrorTypeDef AUDIO_PLAYER_FromUsbToSrcToCodecBuf(uint16_t offset) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80fb      	strh	r3, [r7, #6]
	uint32_t bytesread;
	uint32_t src_error;
	uint16_t i;

	if (SrcTypeSelected == SELECT_SRC_NONE) {
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x118>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d119      	bne.n	8002eae <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x46>
		FRESULT tmp;
		tmp = f_read(&WavFile, &BufferCtl.buff[offset],
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	4a41      	ldr	r2, [pc, #260]	; (8002f84 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x11c>)
 8002e7e:	1899      	adds	r1, r3, r2
 8002e80:	f107 0308 	add.w	r3, r7, #8
 8002e84:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002e88:	483f      	ldr	r0, [pc, #252]	; (8002f88 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x120>)
 8002e8a:	f010 fa91 	bl	80133b0 <f_read>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]
		AUDIO_OUT_BUFFER_SIZE / 2, (void*) &bytesread);
		if (tmp != FR_OK) {
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x34>
			return (AUDIO_ERROR_IO);
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e06d      	b.n	8002f78 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x110>
		}
		BufferCtl.fptr += bytesread;
 8002e9c:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x11c>)
 8002e9e:	f8d3 2f04 	ldr.w	r2, [r3, #3844]	; 0xf04
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4a37      	ldr	r2, [pc, #220]	; (8002f84 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x11c>)
 8002ea8:	f8c2 3f04 	str.w	r3, [r2, #3844]	; 0xf04
 8002eac:	e055      	b.n	8002f5a <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0xf2>
	} else /* SrcTypeSelected != NONE */
	{
		for (i = 0; i < SrcIterations; ++i) {
 8002eae:	2300      	movs	r3, #0
 8002eb0:	82fb      	strh	r3, [r7, #22]
 8002eb2:	e04c      	b.n	8002f4e <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0xe6>
			if (f_read(&WavFile, &WavToSrcTmpBuffer, WavReadSize,
 8002eb4:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x124>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	f107 0308 	add.w	r3, r7, #8
 8002ebc:	4934      	ldr	r1, [pc, #208]	; (8002f90 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x128>)
 8002ebe:	4832      	ldr	r0, [pc, #200]	; (8002f88 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x120>)
 8002ec0:	f010 fa76 	bl	80133b0 <f_read>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d13c      	bne.n	8002f44 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0xdc>
					(void*) &bytesread) == FR_OK) {
				BufferCtl.fptr += bytesread;
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x11c>)
 8002ecc:	f8d3 2f04 	ldr.w	r2, [r3, #3844]	; 0xf04
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	4a2b      	ldr	r2, [pc, #172]	; (8002f84 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x11c>)
 8002ed6:	f8c2 3f04 	str.w	r3, [r2, #3844]	; 0xf04
				OutputBuffer.data_ptr = &BufferCtl.buff[offset
						+ i * AUDIO_OUT_BUFFER_SIZE / (2 * SrcIterations)];
 8002eda:	88f9      	ldrh	r1, [r7, #6]
 8002edc:	8afa      	ldrh	r2, [r7, #22]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x12c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ef2:	440b      	add	r3, r1
				OutputBuffer.data_ptr = &BufferCtl.buff[offset
 8002ef4:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x11c>)
 8002ef6:	4413      	add	r3, r2
 8002ef8:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x130>)
 8002efa:	6093      	str	r3, [r2, #8]
				if (SrcTypeSelected == SELECT_SRC_236) {
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x118>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10f      	bne.n	8002f24 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0xbc>
					src_error = src236_process(pInputBuffer, pOutputBuffer,
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x134>)
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x138>)
 8002f0a:	6819      	ldr	r1, [r3, #0]
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x13c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	f012 f849 	bl	8014fa8 <src236_process>
 8002f16:	4603      	mov	r3, r0
 8002f18:	613b      	str	r3, [r7, #16]
							pSrc236PersistentMem);
					if (src_error != SRC236_ERROR_NONE) {
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0xe0>
						return (AUDIO_ERROR_SRC);
 8002f20:	2305      	movs	r3, #5
 8002f22:	e029      	b.n	8002f78 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x110>
					}
				} else /* SrcTypeSelected == 441 */
				{
					src_error = src441_process(pInputBuffer, pOutputBuffer,
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x134>)
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x138>)
 8002f2a:	6819      	ldr	r1, [r3, #0]
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x140>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	f012 fa6f 	bl	8015414 <src441_process>
 8002f36:	4603      	mov	r3, r0
 8002f38:	613b      	str	r3, [r7, #16]
							pSrc441PersistentMem);
					if (src_error != SRC441_ERROR_NONE) {
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0xe0>
						return (AUDIO_ERROR_SRC);
 8002f40:	2305      	movs	r3, #5
 8002f42:	e019      	b.n	8002f78 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x110>
					}
				}
			} else {
				return (AUDIO_ERROR_IO);
 8002f44:	2301      	movs	r3, #1
 8002f46:	e017      	b.n	8002f78 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x110>
		for (i = 0; i < SrcIterations; ++i) {
 8002f48:	8afb      	ldrh	r3, [r7, #22]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	82fb      	strh	r3, [r7, #22]
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x12c>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	8afa      	ldrh	r2, [r7, #22]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d3ac      	bcc.n	8002eb4 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x4c>
			}
		}
	}


	OutputBuffer.data_ptr = &BufferCtl.buff[offset];
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x11c>)
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x130>)
 8002f62:	6093      	str	r3, [r2, #8]
	gam_process(pOutputBuffer, pOutputBuffer, pGamPersistentMem);
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x138>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x138>)
 8002f6a:	6819      	ldr	r1, [r3, #0]
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <AUDIO_PLAYER_FromUsbToSrcToCodecBuf+0x144>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f013 f9e9 	bl	8016348 <gam_process>


	return AUDIO_ERROR_NONE;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20001864 	.word	0x20001864
 8002f84:	20000598 	.word	0x20000598
 8002f88:	2000810c 	.word	0x2000810c
 8002f8c:	20001868 	.word	0x20001868
 8002f90:	200014a4 	.word	0x200014a4
 8002f94:	20001865 	.word	0x20001865
 8002f98:	20001888 	.word	0x20001888
 8002f9c:	20000008 	.word	0x20000008
 8002fa0:	2000000c 	.word	0x2000000c
 8002fa4:	20006100 	.word	0x20006100
 8002fa8:	20006108 	.word	0x20006108
 8002fac:	2000186c 	.word	0x2000186c

08002fb0 <AUDIO_PLAYER_Process>:

AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(void) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
	//uint32_t elapsed_time;
	AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	71fb      	strb	r3, [r7, #7]
	//static uint32_t prev_elapsed_time = 0xFFFFFFFF;
	//uint8_t str[10];

	switch (AudioState) {
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <AUDIO_PLAYER_Process+0xc8>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	3b02      	subs	r3, #2
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d851      	bhi.n	8003068 <AUDIO_PLAYER_Process+0xb8>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <AUDIO_PLAYER_Process+0x1c>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08003063 	.word	0x08003063
 8002fd0:	08003045 	.word	0x08003045
 8002fd4:	08003057 	.word	0x08003057
 8002fd8:	08002fdd 	.word	0x08002fdd
	case AUDIO_STATE_PLAY:
		if (BufferCtl.fptr + 44 >= WaveFormat.FileSize) {
 8002fdc:	4b27      	ldr	r3, [pc, #156]	; (800307c <AUDIO_PLAYER_Process+0xcc>)
 8002fde:	f8d3 3f04 	ldr.w	r3, [r3, #3844]	; 0xf04
 8002fe2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002fe6:	4b26      	ldr	r3, [pc, #152]	; (8003080 <AUDIO_PLAYER_Process+0xd0>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <AUDIO_PLAYER_Process+0x44>
			//BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
			AudioState = AUDIO_STATE_STOP;
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <AUDIO_PLAYER_Process+0xc8>)
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	701a      	strb	r2, [r3, #0]
		}

		if (BufferCtl.state == BUFFER_OFFSET_HALF) {
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <AUDIO_PLAYER_Process+0xcc>)
 8002ff6:	f893 3f00 	ldrb.w	r3, [r3, #3840]	; 0xf00
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10d      	bne.n	800301a <AUDIO_PLAYER_Process+0x6a>
			audio_error = AUDIO_PLAYER_FromUsbToSrcToCodecBuf(0);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7ff ff32 	bl	8002e68 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf>
 8003004:	4603      	mov	r3, r0
 8003006:	71fb      	strb	r3, [r7, #7]
			if (audio_error != AUDIO_ERROR_NONE) {
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <AUDIO_PLAYER_Process+0x62>
				return audio_error;
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	e02e      	b.n	8003070 <AUDIO_PLAYER_Process+0xc0>
			}
			/* Dynamic change done when switching buffer */
			/* Related display processing takes sometime hence better to do it just after a buffer is refilled */
			//AUDIO_PLAYER_Dynamic_Cfg();
			BufferCtl.state = BUFFER_OFFSET_NONE;
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <AUDIO_PLAYER_Process+0xcc>)
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2f00 	strb.w	r2, [r3, #3840]	; 0xf00
		}

		if (BufferCtl.state == BUFFER_OFFSET_FULL) {
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <AUDIO_PLAYER_Process+0xcc>)
 800301c:	f893 3f00 	ldrb.w	r3, [r3, #3840]	; 0xf00
 8003020:	2b02      	cmp	r3, #2
 8003022:	d123      	bne.n	800306c <AUDIO_PLAYER_Process+0xbc>
			audio_error = AUDIO_PLAYER_FromUsbToSrcToCodecBuf(
 8003024:	f44f 60f0 	mov.w	r0, #1920	; 0x780
 8003028:	f7ff ff1e 	bl	8002e68 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf>
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
			AUDIO_OUT_BUFFER_SIZE / 2);
			if (audio_error != AUDIO_ERROR_NONE) {
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <AUDIO_PLAYER_Process+0x8a>
				return audio_error;
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	e01a      	b.n	8003070 <AUDIO_PLAYER_Process+0xc0>
			}
			/* Dynamic change done when switching buffer */
			/* Related dispay processing takes sometime hence better to do it just after a buffer is refilled */
			//AUDIO_PLAYER_Dynamic_Cfg();
			BufferCtl.state = BUFFER_OFFSET_NONE;
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <AUDIO_PLAYER_Process+0xcc>)
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2f00 	strb.w	r2, [r3, #3840]	; 0xf00
		}

		break;
 8003042:	e013      	b.n	800306c <AUDIO_PLAYER_Process+0xbc>

	case AUDIO_STATE_START:
		//audio_error = AUDIO_PLAYER_Start(FilePos);
		if (audio_error != AUDIO_ERROR_NONE) {
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <AUDIO_PLAYER_Process+0x9e>
			return audio_error;
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	e010      	b.n	8003070 <AUDIO_PLAYER_Process+0xc0>
		}
		AudioState = AUDIO_STATE_PLAY;
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <AUDIO_PLAYER_Process+0xc8>)
 8003050:	2205      	movs	r2, #5
 8003052:	701a      	strb	r2, [r3, #0]
		break;
 8003054:	e00b      	b.n	800306e <AUDIO_PLAYER_Process+0xbe>

	case AUDIO_STATE_STOP:
		//BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
		AUDIO_PLAYER_Stop();
 8003056:	f000 facd 	bl	80035f4 <AUDIO_PLAYER_Stop>
		AudioState = AUDIO_STATE_WAIT;
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <AUDIO_PLAYER_Process+0xc8>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
		break;
 8003060:	e005      	b.n	800306e <AUDIO_PLAYER_Process+0xbe>

	case AUDIO_STATE_INIT:
		AudioState = AUDIO_STATE_STOP;
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <AUDIO_PLAYER_Process+0xc8>)
 8003064:	2204      	movs	r2, #4
 8003066:	701a      	strb	r2, [r3, #0]
	case AUDIO_STATE_WAIT:
	case AUDIO_STATE_IDLE:
	default:

		break;
 8003068:	bf00      	nop
 800306a:	e000      	b.n	800306e <AUDIO_PLAYER_Process+0xbe>
		break;
 800306c:	bf00      	nop
	}
	return audio_error;
 800306e:	79fb      	ldrb	r3, [r7, #7]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20003098 	.word	0x20003098
 800307c:	20000598 	.word	0x20000598
 8003080:	2000309c 	.word	0x2000309c

08003084 <src_init>:

int src_init(void) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
	uint32_t src_scratch_mem_size;

	/* Allocate mem for SRC236 and SRC411 */
	pSrc236PersistentMem = malloc(src236_persistent_mem_size); /* 0x1EC  */
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <src_init+0x80>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f013 fd62 	bl	8016b58 <malloc>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <src_init+0x84>)
 800309a:	601a      	str	r2, [r3, #0]
	pSrc441PersistentMem = malloc(src441_persistent_mem_size); /* 0x0E8  */
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <src_init+0x88>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f013 fd59 	bl	8016b58 <malloc>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b19      	ldr	r3, [pc, #100]	; (8003110 <src_init+0x8c>)
 80030ac:	601a      	str	r2, [r3, #0]
	pGamPersistentMem = malloc(gam_persistent_mem_size); /* gam_persistent_mem_size  0x078 */
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <src_init+0x90>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f013 fd50 	bl	8016b58 <malloc>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b16      	ldr	r3, [pc, #88]	; (8003118 <src_init+0x94>)
 80030be:	601a      	str	r2, [r3, #0]
	pGamScratchMem = malloc(gam_scratch_mem_size); /* gam_scratch_mem_size  0x01 */
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <src_init+0x98>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f013 fd47 	bl	8016b58 <malloc>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <src_init+0x9c>)
 80030d0:	601a      	str	r2, [r3, #0]

	if (src236_scratch_mem_size > src441_scratch_mem_size) {
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <src_init+0xa0>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <src_init+0xa4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d903      	bls.n	80030e6 <src_init+0x62>
		src_scratch_mem_size = src236_scratch_mem_size; /* 0x784 */
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <src_init+0xa0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	e002      	b.n	80030ec <src_init+0x68>
	} else {
		src_scratch_mem_size = src441_scratch_mem_size; /* 0xC9C */
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <src_init+0xa4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	607b      	str	r3, [r7, #4]
	}
	pSrcScratchMem = malloc(src_scratch_mem_size); /* 0xC9C */
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f013 fd33 	bl	8016b58 <malloc>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <src_init+0xa8>)
 80030f8:	601a      	str	r2, [r3, #0]

	return 0;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	08019254 	.word	0x08019254
 8003108:	20006100 	.word	0x20006100
 800310c:	08019548 	.word	0x08019548
 8003110:	20006108 	.word	0x20006108
 8003114:	080197d0 	.word	0x080197d0
 8003118:	2000186c 	.word	0x2000186c
 800311c:	080197d4 	.word	0x080197d4
 8003120:	20001870 	.word	0x20001870
 8003124:	08019258 	.word	0x08019258
 8003128:	08019544 	.word	0x08019544
 800312c:	20006104 	.word	0x20006104

08003130 <playWavFile>:
int playWavFile(char *fname) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	AUDIO_ErrorTypeDef error = AUDIO_ERROR_NONE;
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	src236_static_param_t src236_static_param;
	src441_static_param_t src441_static_param;
	uint32_t src_input_frame_size;
	uint32_t src_error;

	f_close(&WavFile); // WTF???
 800313e:	48b1      	ldr	r0, [pc, #708]	; (8003404 <playWavFile+0x2d4>)
 8003140:	f010 fca7 	bl	8013a92 <f_close>

	GetFileInfo(fname, &WaveFormat);
 8003144:	49b0      	ldr	r1, [pc, #704]	; (8003408 <playWavFile+0x2d8>)
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff fe4c 	bl	8002de4 <GetFileInfo>
	if (WaveFormat.NbrChannels != 2) {
 800314c:	4bae      	ldr	r3, [pc, #696]	; (8003408 <playWavFile+0x2d8>)
 800314e:	8adb      	ldrh	r3, [r3, #22]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d00d      	beq.n	8003170 <playWavFile+0x40>

		printf("Error: only stereo audio input is supported.\n");
 8003154:	48ad      	ldr	r0, [pc, #692]	; (800340c <playWavFile+0x2dc>)
 8003156:	f014 f919 	bl	801738c <puts>
		writeErrorTxt("Error: only stereo audio input is supported.\n");
 800315a:	48ad      	ldr	r0, [pc, #692]	; (8003410 <playWavFile+0x2e0>)
 800315c:	f000 fa92 	bl	8003684 <writeErrorTxt>

		f_close(&WavFile);
 8003160:	48a8      	ldr	r0, [pc, #672]	; (8003404 <playWavFile+0x2d4>)
 8003162:	f010 fc96 	bl	8013a92 <f_close>
		AudioState = AUDIO_STATE_STOP;
 8003166:	4bab      	ldr	r3, [pc, #684]	; (8003414 <playWavFile+0x2e4>)
 8003168:	2204      	movs	r2, #4
 800316a:	701a      	strb	r2, [r3, #0]
		return (AUDIO_ERROR_INVALID_VALUE);
 800316c:	2303      	movs	r3, #3
 800316e:	e1e2      	b.n	8003536 <playWavFile+0x406>
	}

	/* Enables and resets CRC-32 from STM32 HW */
	__HAL_RCC_CRC_CLK_ENABLE();
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	4ba8      	ldr	r3, [pc, #672]	; (8003418 <playWavFile+0x2e8>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4aa7      	ldr	r2, [pc, #668]	; (8003418 <playWavFile+0x2e8>)
 800317a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800317e:	6313      	str	r3, [r2, #48]	; 0x30
 8003180:	4ba5      	ldr	r3, [pc, #660]	; (8003418 <playWavFile+0x2e8>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
	CRC->CR = CRC_CR_RESET;
 800318c:	4ba3      	ldr	r3, [pc, #652]	; (800341c <playWavFile+0x2ec>)
 800318e:	2201      	movs	r2, #1
 8003190:	609a      	str	r2, [r3, #8]

	switch (WaveFormat.SampleRate) {
 8003192:	4b9d      	ldr	r3, [pc, #628]	; (8003408 <playWavFile+0x2d8>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800319a:	d056      	beq.n	800324a <playWavFile+0x11a>
 800319c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80031a0:	d80a      	bhi.n	80031b8 <playWavFile+0x88>
 80031a2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80031a6:	d029      	beq.n	80031fc <playWavFile+0xcc>
 80031a8:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d03b      	beq.n	8003228 <playWavFile+0xf8>
 80031b0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80031b4:	d00c      	beq.n	80031d0 <playWavFile+0xa0>
 80031b6:	e094      	b.n	80032e2 <playWavFile+0x1b2>
 80031b8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80031bc:	4293      	cmp	r3, r2
 80031be:	d06c      	beq.n	800329a <playWavFile+0x16a>
 80031c0:	4a97      	ldr	r2, [pc, #604]	; (8003420 <playWavFile+0x2f0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d078      	beq.n	80032b8 <playWavFile+0x188>
 80031c6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d056      	beq.n	800327c <playWavFile+0x14c>
 80031ce:	e088      	b.n	80032e2 <playWavFile+0x1b2>
	case 8000:
		src236_static_param.src_mode = SRC236_RATIO_6;
 80031d0:	2302      	movs	r3, #2
 80031d2:	617b      	str	r3, [r7, #20]
		SrcTypeSelected = SELECT_SRC_236;
 80031d4:	4b93      	ldr	r3, [pc, #588]	; (8003424 <playWavFile+0x2f4>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
		SrcIterations = 1;
 80031da:	4b93      	ldr	r3, [pc, #588]	; (8003428 <playWavFile+0x2f8>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
		src_input_frame_size = AUDIO_OUT_BUFFER_SIZE / (8 * SrcIterations * 6);
 80031e0:	4b91      	ldr	r3, [pc, #580]	; (8003428 <playWavFile+0x2f8>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	461a      	mov	r2, r3
 80031f0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80031f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80031f8:	623b      	str	r3, [r7, #32]
		break;
 80031fa:	e080      	b.n	80032fe <playWavFile+0x1ce>
	case 16000:
		src236_static_param.src_mode = SRC236_RATIO_3;
 80031fc:	2301      	movs	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
		SrcTypeSelected = SELECT_SRC_236;
 8003200:	4b88      	ldr	r3, [pc, #544]	; (8003424 <playWavFile+0x2f4>)
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
		SrcIterations = 1;
 8003206:	4b88      	ldr	r3, [pc, #544]	; (8003428 <playWavFile+0x2f8>)
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
		src_input_frame_size = AUDIO_OUT_BUFFER_SIZE / (8 * SrcIterations * 3);
 800320c:	4b86      	ldr	r3, [pc, #536]	; (8003428 <playWavFile+0x2f8>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	461a      	mov	r2, r3
 800321c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003220:	fb93 f3f2 	sdiv	r3, r3, r2
 8003224:	623b      	str	r3, [r7, #32]
		break;
 8003226:	e06a      	b.n	80032fe <playWavFile+0x1ce>
	case 24000:
		src236_static_param.src_mode = SRC236_RATIO_2;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
		SrcTypeSelected = SELECT_SRC_236;
 800322c:	4b7d      	ldr	r3, [pc, #500]	; (8003424 <playWavFile+0x2f4>)
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
		SrcIterations = 1;
 8003232:	4b7d      	ldr	r3, [pc, #500]	; (8003428 <playWavFile+0x2f8>)
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
		src_input_frame_size = AUDIO_OUT_BUFFER_SIZE / (8 * SrcIterations * 2);
 8003238:	4b7b      	ldr	r3, [pc, #492]	; (8003428 <playWavFile+0x2f8>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8003242:	fb92 f3f3 	sdiv	r3, r2, r3
 8003246:	623b      	str	r3, [r7, #32]
		break;
 8003248:	e059      	b.n	80032fe <playWavFile+0x1ce>
	case 32000:
		src236_static_param.src_mode = SRC236_RATIO_3_2;
 800324a:	2306      	movs	r3, #6
 800324c:	617b      	str	r3, [r7, #20]
		SrcTypeSelected = SELECT_SRC_236;
 800324e:	4b75      	ldr	r3, [pc, #468]	; (8003424 <playWavFile+0x2f4>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
		SrcIterations = 2; //frame size smaller but processing repeated 2
 8003254:	4b74      	ldr	r3, [pc, #464]	; (8003428 <playWavFile+0x2f8>)
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
		src_input_frame_size = AUDIO_OUT_BUFFER_SIZE
				/ (8 * SrcIterations * 3 / 2);
 800325a:	4b73      	ldr	r3, [pc, #460]	; (8003428 <playWavFile+0x2f8>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	0fda      	lsrs	r2, r3, #31
 800326a:	4413      	add	r3, r2
 800326c:	105b      	asrs	r3, r3, #1
 800326e:	461a      	mov	r2, r3
 8003270:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003274:	fb93 f3f2 	sdiv	r3, r3, r2
		src_input_frame_size = AUDIO_OUT_BUFFER_SIZE
 8003278:	623b      	str	r3, [r7, #32]
		break;
 800327a:	e040      	b.n	80032fe <playWavFile+0x1ce>
	case 44100:
		// src441_static_param does not have params to be configured
		SrcTypeSelected = SELECT_SRC_441;
 800327c:	4b69      	ldr	r3, [pc, #420]	; (8003424 <playWavFile+0x2f4>)
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
		SrcIterations = 3; // frame size smaller but processing repeated 3 times
 8003282:	4b69      	ldr	r3, [pc, #420]	; (8003428 <playWavFile+0x2f8>)
 8003284:	2203      	movs	r2, #3
 8003286:	701a      	strb	r2, [r3, #0]
		src_input_frame_size = (AUDIO_OUT_BUFFER_SIZE / 480) * 441
				/ (8 * SrcIterations);
 8003288:	4b67      	ldr	r3, [pc, #412]	; (8003428 <playWavFile+0x2f8>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	f640 52c8 	movw	r2, #3528	; 0xdc8
 8003292:	fb92 f3f3 	sdiv	r3, r2, r3
		src_input_frame_size = (AUDIO_OUT_BUFFER_SIZE / 480) * 441
 8003296:	623b      	str	r3, [r7, #32]
		break;
 8003298:	e031      	b.n	80032fe <playWavFile+0x1ce>
	case 48000:
		SrcTypeSelected = SELECT_SRC_NONE;
 800329a:	4b62      	ldr	r3, [pc, #392]	; (8003424 <playWavFile+0x2f4>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
		SrcIterations = 2; /* frame size smaller but processing repeated 2 times considering SRC236 input req.*/
 80032a0:	4b61      	ldr	r3, [pc, #388]	; (8003428 <playWavFile+0x2f8>)
 80032a2:	2202      	movs	r2, #2
 80032a4:	701a      	strb	r2, [r3, #0]
		src_input_frame_size = AUDIO_OUT_BUFFER_SIZE / (8 * SrcIterations); /* half buff, stereo, byte x sample */
 80032a6:	4b60      	ldr	r3, [pc, #384]	; (8003428 <playWavFile+0x2f8>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80032b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80032b4:	623b      	str	r3, [r7, #32]
		break;
 80032b6:	e022      	b.n	80032fe <playWavFile+0x1ce>
	case 96000:
		src236_static_param.src_mode = SRC236_RATIO_1_2;
 80032b8:	2303      	movs	r3, #3
 80032ba:	617b      	str	r3, [r7, #20]
		SrcTypeSelected = SELECT_SRC_236;
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <playWavFile+0x2f4>)
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
		SrcIterations = 4; // frame size smaller but processing repeated 4 times
 80032c2:	4b59      	ldr	r3, [pc, #356]	; (8003428 <playWavFile+0x2f8>)
 80032c4:	2204      	movs	r2, #4
 80032c6:	701a      	strb	r2, [r3, #0]
		src_input_frame_size = AUDIO_OUT_BUFFER_SIZE
				/ (8 * SrcIterations * 1 / 2);
 80032c8:	4b57      	ldr	r3, [pc, #348]	; (8003428 <playWavFile+0x2f8>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	0fda      	lsrs	r2, r3, #31
 80032d0:	4413      	add	r3, r2
 80032d2:	105b      	asrs	r3, r3, #1
 80032d4:	461a      	mov	r2, r3
 80032d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80032da:	fb93 f3f2 	sdiv	r3, r3, r2
		src_input_frame_size = AUDIO_OUT_BUFFER_SIZE
 80032de:	623b      	str	r3, [r7, #32]
		break;
 80032e0:	e00d      	b.n	80032fe <playWavFile+0x1ce>
	default:
		printf("Error: This sample frequency is not supported.\r\n");
 80032e2:	4852      	ldr	r0, [pc, #328]	; (800342c <playWavFile+0x2fc>)
 80032e4:	f014 f852 	bl	801738c <puts>
		writeErrorTxt(
 80032e8:	4851      	ldr	r0, [pc, #324]	; (8003430 <playWavFile+0x300>)
 80032ea:	f000 f9cb 	bl	8003684 <writeErrorTxt>
				"Error: This sample frequency is not supported. 16 bytesPerSample, stereo, with sample rate 48000Hz recommend\r\n");

		f_close(&WavFile);
 80032ee:	4845      	ldr	r0, [pc, #276]	; (8003404 <playWavFile+0x2d4>)
 80032f0:	f010 fbcf 	bl	8013a92 <f_close>
		AudioState = AUDIO_STATE_STOP;
 80032f4:	4b47      	ldr	r3, [pc, #284]	; (8003414 <playWavFile+0x2e4>)
 80032f6:	2204      	movs	r2, #4
 80032f8:	701a      	strb	r2, [r3, #0]
		return (AUDIO_ERROR_INVALID_VALUE);
 80032fa:	2303      	movs	r3, #3
 80032fc:	e11b      	b.n	8003536 <playWavFile+0x406>
	}

	/* GAM effect reset */
	error = gam_reset(pGamPersistentMem, pGamScratchMem);
 80032fe:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <playWavFile+0x304>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <playWavFile+0x308>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f012 fe3f 	bl	8015f8c <gam_reset>
 800330e:	4603      	mov	r3, r0
 8003310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (error != GAM_ERROR_NONE) {
 8003314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <playWavFile+0x1f2>
		return (-1);
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
 8003320:	e109      	b.n	8003536 <playWavFile+0x406>
	}

	/* GAM dynamic parameters that can be updated here every frame if required */

	gam_dynamic_param.target_volume_dB[0] = ((float)config.volume*80/100)-80;
 8003322:	4b46      	ldr	r3, [pc, #280]	; (800343c <playWavFile+0x30c>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800332e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003440 <playWavFile+0x310>
 8003332:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003336:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003444 <playWavFile+0x314>
 800333a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800333e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003440 <playWavFile+0x310>
 8003342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800334a:	ee17 3a90 	vmov	r3, s15
 800334e:	b21a      	sxth	r2, r3
 8003350:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <playWavFile+0x318>)
 8003352:	801a      	strh	r2, [r3, #0]

	error = gam_setConfig(&gam_dynamic_param, pGamPersistentMem);
 8003354:	4b37      	ldr	r3, [pc, #220]	; (8003434 <playWavFile+0x304>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4619      	mov	r1, r3
 800335a:	483b      	ldr	r0, [pc, #236]	; (8003448 <playWavFile+0x318>)
 800335c:	f012 fe86 	bl	801606c <gam_setConfig>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (error != GAM_ERROR_NONE) {
 8003366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <playWavFile+0x244>
		return (-1);
 800336e:	f04f 33ff 	mov.w	r3, #4294967295
 8003372:	e0e0      	b.n	8003536 <playWavFile+0x406>
	}

	WavReadSize = src_input_frame_size * 4; /* stereo & byte x sample */
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4a34      	ldr	r2, [pc, #208]	; (800344c <playWavFile+0x31c>)
 800337a:	6013      	str	r3, [r2, #0]

	if (SrcTypeSelected == SELECT_SRC_236) {
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <playWavFile+0x2f4>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d11d      	bne.n	80033c0 <playWavFile+0x290>
		/* SRC236 effect reset */
		src_error = src236_reset(pSrc236PersistentMem, pSrcScratchMem);
 8003384:	4b32      	ldr	r3, [pc, #200]	; (8003450 <playWavFile+0x320>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b32      	ldr	r3, [pc, #200]	; (8003454 <playWavFile+0x324>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f011 fdfa 	bl	8014f88 <src236_reset>
 8003394:	4603      	mov	r3, r0
 8003396:	61fb      	str	r3, [r7, #28]
		if (src_error != SRC236_ERROR_NONE) {
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <playWavFile+0x272>
			return (AUDIO_ERROR_SRC);
 800339e:	2305      	movs	r3, #5
 80033a0:	e0c9      	b.n	8003536 <playWavFile+0x406>
		}
		/* SRC236 effect static parameters setting */
		src_error = src236_setParam(&src236_static_param, pSrc236PersistentMem);
 80033a2:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <playWavFile+0x320>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f011 fdf7 	bl	8014fa0 <src236_setParam>
 80033b2:	4603      	mov	r3, r0
 80033b4:	61fb      	str	r3, [r7, #28]
		if (src_error != SRC236_ERROR_NONE) {
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <playWavFile+0x290>
			return (AUDIO_ERROR_SRC);
 80033bc:	2305      	movs	r3, #5
 80033be:	e0ba      	b.n	8003536 <playWavFile+0x406>
		}
	}

	if (SrcTypeSelected == SELECT_SRC_441) {
 80033c0:	4b18      	ldr	r3, [pc, #96]	; (8003424 <playWavFile+0x2f4>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d149      	bne.n	800345c <playWavFile+0x32c>
		/* SRC236 effect reset */
		src_error = src441_reset(pSrc441PersistentMem, pSrcScratchMem);
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <playWavFile+0x328>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b21      	ldr	r3, [pc, #132]	; (8003454 <playWavFile+0x324>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f012 f80c 	bl	80153f0 <src441_reset>
 80033d8:	4603      	mov	r3, r0
 80033da:	61fb      	str	r3, [r7, #28]
		if (src_error != SRC441_ERROR_NONE) {
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <playWavFile+0x2b6>
			return (AUDIO_ERROR_SRC);
 80033e2:	2305      	movs	r3, #5
 80033e4:	e0a7      	b.n	8003536 <playWavFile+0x406>
		}
		/* SRC236 effect static parameters setting */
		src_error = src441_setParam(&src441_static_param, pSrc441PersistentMem);
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <playWavFile+0x328>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	f107 0310 	add.w	r3, r7, #16
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f012 f80d 	bl	8015410 <src441_setParam>
 80033f6:	4603      	mov	r3, r0
 80033f8:	61fb      	str	r3, [r7, #28]
		if (src_error != SRC441_ERROR_NONE) {
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02d      	beq.n	800345c <playWavFile+0x32c>
			return (AUDIO_ERROR_SRC);
 8003400:	2305      	movs	r3, #5
 8003402:	e098      	b.n	8003536 <playWavFile+0x406>
 8003404:	2000810c 	.word	0x2000810c
 8003408:	2000309c 	.word	0x2000309c
 800340c:	08018d84 	.word	0x08018d84
 8003410:	08018db4 	.word	0x08018db4
 8003414:	20003098 	.word	0x20003098
 8003418:	40023800 	.word	0x40023800
 800341c:	40023000 	.word	0x40023000
 8003420:	00017700 	.word	0x00017700
 8003424:	20001864 	.word	0x20001864
 8003428:	20001865 	.word	0x20001865
 800342c:	08018de4 	.word	0x08018de4
 8003430:	08018e14 	.word	0x08018e14
 8003434:	2000186c 	.word	0x2000186c
 8003438:	20001870 	.word	0x20001870
 800343c:	20003080 	.word	0x20003080
 8003440:	42a00000 	.word	0x42a00000
 8003444:	42c80000 	.word	0x42c80000
 8003448:	2000189c 	.word	0x2000189c
 800344c:	20001868 	.word	0x20001868
 8003450:	20006100 	.word	0x20006100
 8003454:	20006104 	.word	0x20006104
 8003458:	20006108 	.word	0x20006108
		}
	}
	InputBuffer.data_ptr = &WavToSrcTmpBuffer;
 800345c:	4b38      	ldr	r3, [pc, #224]	; (8003540 <playWavFile+0x410>)
 800345e:	4a39      	ldr	r2, [pc, #228]	; (8003544 <playWavFile+0x414>)
 8003460:	609a      	str	r2, [r3, #8]
	InputBuffer.nb_bytes_per_Sample = WaveFormat.BitPerSample / 8; /* 8 bits in 0ne byte */
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <playWavFile+0x418>)
 8003464:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003466:	08db      	lsrs	r3, r3, #3
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	4b34      	ldr	r3, [pc, #208]	; (8003540 <playWavFile+0x410>)
 800346e:	605a      	str	r2, [r3, #4]
	InputBuffer.nb_channels = WaveFormat.NbrChannels;
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <playWavFile+0x418>)
 8003472:	8adb      	ldrh	r3, [r3, #22]
 8003474:	461a      	mov	r2, r3
 8003476:	4b32      	ldr	r3, [pc, #200]	; (8003540 <playWavFile+0x410>)
 8003478:	601a      	str	r2, [r3, #0]
	InputBuffer.mode = INTERLEAVED;
 800347a:	4b31      	ldr	r3, [pc, #196]	; (8003540 <playWavFile+0x410>)
 800347c:	2201      	movs	r2, #1
 800347e:	611a      	str	r2, [r3, #16]
	InputBuffer.buffer_size = src_input_frame_size;
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <playWavFile+0x410>)
 8003484:	60d3      	str	r3, [r2, #12]

	OutputBuffer.nb_bytes_per_Sample = WaveFormat.BitPerSample / 8; /* 8 bits in 0ne byte */
 8003486:	4b30      	ldr	r3, [pc, #192]	; (8003548 <playWavFile+0x418>)
 8003488:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800348a:	08db      	lsrs	r3, r3, #3
 800348c:	b29b      	uxth	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	4b2e      	ldr	r3, [pc, #184]	; (800354c <playWavFile+0x41c>)
 8003492:	605a      	str	r2, [r3, #4]
	OutputBuffer.nb_channels = WaveFormat.NbrChannels;
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <playWavFile+0x418>)
 8003496:	8adb      	ldrh	r3, [r3, #22]
 8003498:	461a      	mov	r2, r3
 800349a:	4b2c      	ldr	r3, [pc, #176]	; (800354c <playWavFile+0x41c>)
 800349c:	601a      	str	r2, [r3, #0]
	OutputBuffer.mode = INTERLEAVED;
 800349e:	4b2b      	ldr	r3, [pc, #172]	; (800354c <playWavFile+0x41c>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	611a      	str	r2, [r3, #16]
	OutputBuffer.buffer_size = AUDIO_OUT_BUFFER_SIZE / 8; /* half buff, stereo, bytes x sample */
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <playWavFile+0x41c>)
 80034a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034aa:	60da      	str	r2, [r3, #12]

	BufferCtl.state = BUFFER_OFFSET_NONE;
 80034ac:	4b28      	ldr	r3, [pc, #160]	; (8003550 <playWavFile+0x420>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2f00 	strb.w	r2, [r3, #3840]	; 0xf00
	BufferCtl.fptr = 0;
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <playWavFile+0x420>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8c3 2f04 	str.w	r2, [r3, #3844]	; 0xf04

	/* Get Data from Disk and Remove Wave format header */
	f_lseek(&WavFile, 44);
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	4825      	ldr	r0, [pc, #148]	; (8003554 <playWavFile+0x424>)
 80034c0:	f010 fb11 	bl	8013ae6 <f_lseek>

	/* Fill whole buffer at first time (480+480 stereo samples) */
	error = AUDIO_PLAYER_FromUsbToSrcToCodecBuf(0);
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7ff fccf 	bl	8002e68 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (error == AUDIO_ERROR_NONE) {
 80034d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <playWavFile+0x3b6>
		error = AUDIO_PLAYER_FromUsbToSrcToCodecBuf(AUDIO_OUT_BUFFER_SIZE / 2);
 80034d8:	f44f 60f0 	mov.w	r0, #1920	; 0x780
 80034dc:	f7ff fcc4 	bl	8002e68 <AUDIO_PLAYER_FromUsbToSrcToCodecBuf>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Sent to codec whole buffer at first time */
	if (error == AUDIO_ERROR_NONE) {
 80034e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d122      	bne.n	8003534 <playWavFile+0x404>
		AudioState = AUDIO_STATE_PLAY;
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <playWavFile+0x428>)
 80034f0:	2205      	movs	r2, #5
 80034f2:	701a      	strb	r2, [r3, #0]
		//AUDIO_PlaybackDisplayButtons();
		printf("play\r\n");
 80034f4:	4819      	ldr	r0, [pc, #100]	; (800355c <playWavFile+0x42c>)
 80034f6:	f013 ff49 	bl	801738c <puts>
		if (BufferCtl.fptr != 0) {
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <playWavFile+0x420>)
 80034fc:	f8d3 3f04 	ldr.w	r3, [r3, #3844]	; 0xf04
 8003500:	2b00      	cmp	r3, #0
 8003502:	d017      	beq.n	8003534 <playWavFile+0x404>
			HAL_StatusTypeDef hal_res;
			//int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);

			//gam_process(pInputBuffer,pOutputBuffer, pGamPersistentMem);

			hal_res = HAL_I2S_Transmit_IT(&hi2s2,
 8003504:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8003508:	4911      	ldr	r1, [pc, #68]	; (8003550 <playWavFile+0x420>)
 800350a:	4815      	ldr	r0, [pc, #84]	; (8003560 <playWavFile+0x430>)
 800350c:	f002 fda0 	bl	8006050 <HAL_I2S_Transmit_IT>
 8003510:	4603      	mov	r3, r0
 8003512:	76fb      	strb	r3, [r7, #27]
					(uint16_t*) &BufferCtl.buff[0],
					AUDIO_OUT_BUFFER_SIZE / AUDIODATA_SIZE);
			if (hal_res != HAL_OK) {
 8003514:	7efb      	ldrb	r3, [r7, #27]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <playWavFile+0x400>
				printf("I2S - HAL_I2S_Transmit failed, "
 800351a:	7efb      	ldrb	r3, [r7, #27]
 800351c:	4619      	mov	r1, r3
 800351e:	4811      	ldr	r0, [pc, #68]	; (8003564 <playWavFile+0x434>)
 8003520:	f013 fec0 	bl	80172a4 <iprintf>
						"hal_res = %d!\r\n", hal_res);
				f_close(&WavFile);
 8003524:	480b      	ldr	r0, [pc, #44]	; (8003554 <playWavFile+0x424>)
 8003526:	f010 fab4 	bl	8013a92 <f_close>
				return -12;
 800352a:	f06f 030b 	mvn.w	r3, #11
 800352e:	e002      	b.n	8003536 <playWavFile+0x406>
			}
			return AUDIO_ERROR_NONE;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <playWavFile+0x406>
		}
	}

	return AUDIO_ERROR_IO;
 8003534:	2301      	movs	r3, #1
}
 8003536:	4618      	mov	r0, r3
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20001874 	.word	0x20001874
 8003544:	200014a4 	.word	0x200014a4
 8003548:	2000309c 	.word	0x2000309c
 800354c:	20001888 	.word	0x20001888
 8003550:	20000598 	.word	0x20000598
 8003554:	2000810c 	.word	0x2000810c
 8003558:	20003098 	.word	0x20003098
 800355c:	08018e84 	.word	0x08018e84
 8003560:	20003038 	.word	0x20003038
 8003564:	08018e8c 	.word	0x08018e8c

08003568 <init_FAT_FS>:
int init_FAT_FS() {
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
	if (src_init() != 0)
 800356e:	f7ff fd89 	bl	8003084 <src_init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <init_FAT_FS+0x16>
		printf("SRC init error");
 8003578:	4816      	ldr	r0, [pc, #88]	; (80035d4 <init_FAT_FS+0x6c>)
 800357a:	f013 fe93 	bl	80172a4 <iprintf>
	FRESULT res;
	printf("Init SDIO\n");
 800357e:	4816      	ldr	r0, [pc, #88]	; (80035d8 <init_FAT_FS+0x70>)
 8003580:	f013 ff04 	bl	801738c <puts>

	printf("CardDetect : %d!\r\n",
			!HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin));
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	4815      	ldr	r0, [pc, #84]	; (80035dc <init_FAT_FS+0x74>)
 8003588:	f002 fbce 	bl	8005d28 <HAL_GPIO_ReadPin>
 800358c:	4603      	mov	r3, r0
	printf("CardDetect : %d!\r\n",
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4619      	mov	r1, r3
 800359a:	4811      	ldr	r0, [pc, #68]	; (80035e0 <init_FAT_FS+0x78>)
 800359c:	f013 fe82 	bl	80172a4 <iprintf>
	res = f_mount(&fs, "", 1);
 80035a0:	2201      	movs	r2, #1
 80035a2:	4910      	ldr	r1, [pc, #64]	; (80035e4 <init_FAT_FS+0x7c>)
 80035a4:	4810      	ldr	r0, [pc, #64]	; (80035e8 <init_FAT_FS+0x80>)
 80035a6:	f00f fcf1 	bl	8012f8c <f_mount>
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
	if (res != FR_OK) {
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <init_FAT_FS+0x5a>
		printf("f_mount() failed, res = %d\r\n", res);
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	4619      	mov	r1, r3
 80035b8:	480c      	ldr	r0, [pc, #48]	; (80035ec <init_FAT_FS+0x84>)
 80035ba:	f013 fe73 	bl	80172a4 <iprintf>
		return 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	e003      	b.n	80035ca <init_FAT_FS+0x62>
	}
	printf("f_mount() done!\r\n");
 80035c2:	480b      	ldr	r0, [pc, #44]	; (80035f0 <init_FAT_FS+0x88>)
 80035c4:	f013 fee2 	bl	801738c <puts>
	return 1;
 80035c8:	2301      	movs	r3, #1

}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	08018ebc 	.word	0x08018ebc
 80035d8:	08018ecc 	.word	0x08018ecc
 80035dc:	40020800 	.word	0x40020800
 80035e0:	08018ed8 	.word	0x08018ed8
 80035e4:	08018eec 	.word	0x08018eec
 80035e8:	200050c8 	.word	0x200050c8
 80035ec:	08018ef0 	.word	0x08018ef0
 80035f0:	08018f10 	.word	0x08018f10

080035f4 <AUDIO_PLAYER_Stop>:

AUDIO_ErrorTypeDef AUDIO_PLAYER_Stop(void) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
	AudioState = AUDIO_STATE_STOP;
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <AUDIO_PLAYER_Stop+0x18>)
 80035fa:	2204      	movs	r2, #4
 80035fc:	701a      	strb	r2, [r3, #0]
	//FilePos = 0;

	//BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
	f_close(&WavFile);
 80035fe:	4804      	ldr	r0, [pc, #16]	; (8003610 <AUDIO_PLAYER_Stop+0x1c>)
 8003600:	f010 fa47 	bl	8013a92 <f_close>
	return AUDIO_ERROR_NONE;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20003098 	.word	0x20003098
 8003610:	2000810c 	.word	0x2000810c

08003614 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	/*if (end_of_file_reached) {
	 return;
	 }*/

	if (AudioState == AUDIO_STATE_PLAY) {
 800361c:	4b14      	ldr	r3, [pc, #80]	; (8003670 <HAL_I2S_TxCpltCallback+0x5c>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b05      	cmp	r3, #5
 8003622:	d122      	bne.n	800366a <HAL_I2S_TxCpltCallback+0x56>
		//BufferCtl.state = BUFFER_OFFSET_FULL;

		if (bufPlayCtrl == 1) // BufferCtl.state == BUFFER_OFFSET_HALF  )
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_I2S_TxCpltCallback+0x60>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10d      	bne.n	8003648 <HAL_I2S_TxCpltCallback+0x34>
				{
			BufferCtl.state = BUFFER_OFFSET_FULL;
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_I2S_TxCpltCallback+0x64>)
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2f00 	strb.w	r2, [r3, #3840]	; 0xf00
			bufPlayCtrl = 0;
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <HAL_I2S_TxCpltCallback+0x60>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]

			HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*) &BufferCtl.buff[0],
 800363a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800363e:	490e      	ldr	r1, [pc, #56]	; (8003678 <HAL_I2S_TxCpltCallback+0x64>)
 8003640:	480e      	ldr	r0, [pc, #56]	; (800367c <HAL_I2S_TxCpltCallback+0x68>)
 8003642:	f002 fd05 	bl	8006050 <HAL_I2S_Transmit_IT>
					(AUDIO_OUT_BUFFER_SIZE / AUDIODATA_SIZE) / 2);
			return;
 8003646:	e010      	b.n	800366a <HAL_I2S_TxCpltCallback+0x56>
		}
		if (bufPlayCtrl == 0) //BufferCtl.state == BUFFER_OFFSET_FULL ||BufferCtl.state == BUFFER_OFFSET_NONE)
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_I2S_TxCpltCallback+0x60>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10c      	bne.n	800366a <HAL_I2S_TxCpltCallback+0x56>
				{
			bufPlayCtrl = 1;
 8003650:	4b08      	ldr	r3, [pc, #32]	; (8003674 <HAL_I2S_TxCpltCallback+0x60>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]
			BufferCtl.state = BUFFER_OFFSET_HALF;
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <HAL_I2S_TxCpltCallback+0x64>)
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2f00 	strb.w	r2, [r3, #3840]	; 0xf00

			HAL_I2S_Transmit_IT(&hi2s2,
 800365e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8003662:	4907      	ldr	r1, [pc, #28]	; (8003680 <HAL_I2S_TxCpltCallback+0x6c>)
 8003664:	4805      	ldr	r0, [pc, #20]	; (800367c <HAL_I2S_TxCpltCallback+0x68>)
 8003666:	f002 fcf3 	bl	8006050 <HAL_I2S_Transmit_IT>

	 int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
	 HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*) signal_play_buff, nsamples);
	 //read_next_chunk = true;
	 */
}
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20003098 	.word	0x20003098
 8003674:	200014a0 	.word	0x200014a0
 8003678:	20000598 	.word	0x20000598
 800367c:	20003038 	.word	0x20003038
 8003680:	20000d18 	.word	0x20000d18

08003684 <writeErrorTxt>:
		}
	}

}

void writeErrorTxt(const char *buff) {
 8003684:	b580      	push	{r7, lr}
 8003686:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800368a:	af00      	add	r7, sp, #0
 800368c:	f107 0320 	add.w	r3, r7, #32
 8003690:	3b1c      	subs	r3, #28
 8003692:	6018      	str	r0, [r3, #0]

	FRESULT fr;
	FIL errFile;
	fr = f_open(&errFile, "error.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8003694:	f107 0320 	add.w	r3, r7, #32
 8003698:	3b14      	subs	r3, #20
 800369a:	220a      	movs	r2, #10
 800369c:	4932      	ldr	r1, [pc, #200]	; (8003768 <writeErrorTxt+0xe4>)
 800369e:	4618      	mov	r0, r3
 80036a0:	f00f fcba 	bl	8013018 <f_open>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036aa:	f102 021f 	add.w	r2, r2, #31
 80036ae:	7013      	strb	r3, [r2, #0]
	if (fr != FR_OK) {
 80036b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80036b4:	f103 031f 	add.w	r3, r3, #31
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <writeErrorTxt+0x4e>
		printf("f_open() failed, res = %d\r\n", fr);
 80036be:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80036c2:	f103 031f 	add.w	r3, r3, #31
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	4828      	ldr	r0, [pc, #160]	; (800376c <writeErrorTxt+0xe8>)
 80036cc:	f013 fdea 	bl	80172a4 <iprintf>
		return;
 80036d0:	e046      	b.n	8003760 <writeErrorTxt+0xdc>
	}

	unsigned int bytesWritten;
	fr = f_write(&errFile, buff, strlen(buff), &bytesWritten);
 80036d2:	f107 0320 	add.w	r3, r7, #32
 80036d6:	3b1c      	subs	r3, #28
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	f7fc fdf3 	bl	80002c4 <strlen>
 80036de:	4602      	mov	r2, r0
 80036e0:	f107 0320 	add.w	r3, r7, #32
 80036e4:	3b18      	subs	r3, #24
 80036e6:	f107 0120 	add.w	r1, r7, #32
 80036ea:	391c      	subs	r1, #28
 80036ec:	f107 0020 	add.w	r0, r7, #32
 80036f0:	3814      	subs	r0, #20
 80036f2:	6809      	ldr	r1, [r1, #0]
 80036f4:	f00f ffbb 	bl	801366e <f_write>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036fe:	f102 021f 	add.w	r2, r2, #31
 8003702:	7013      	strb	r3, [r2, #0]
	if (fr != FR_OK) {
 8003704:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003708:	f103 031f 	add.w	r3, r3, #31
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <writeErrorTxt+0xa2>
		printf("f_write() failed, res = %d\r\n", fr);
 8003712:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003716:	f103 031f 	add.w	r3, r3, #31
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	4814      	ldr	r0, [pc, #80]	; (8003770 <writeErrorTxt+0xec>)
 8003720:	f013 fdc0 	bl	80172a4 <iprintf>
		return;
 8003724:	e01c      	b.n	8003760 <writeErrorTxt+0xdc>
	}

	fr = f_close(&errFile);
 8003726:	f107 0320 	add.w	r3, r7, #32
 800372a:	3b14      	subs	r3, #20
 800372c:	4618      	mov	r0, r3
 800372e:	f010 f9b0 	bl	8013a92 <f_close>
 8003732:	4603      	mov	r3, r0
 8003734:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003738:	f102 021f 	add.w	r2, r2, #31
 800373c:	7013      	strb	r3, [r2, #0]
	if (fr != FR_OK) {
 800373e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003742:	f103 031f 	add.w	r3, r3, #31
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d009      	beq.n	8003760 <writeErrorTxt+0xdc>
		printf("f_close() failed, res = %d\r\n", fr);
 800374c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003750:	f103 031f 	add.w	r3, r3, #31
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	4806      	ldr	r0, [pc, #24]	; (8003774 <writeErrorTxt+0xf0>)
 800375a:	f013 fda3 	bl	80172a4 <iprintf>
		return;
 800375e:	bf00      	nop
	}

}
 8003760:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08018f58 	.word	0x08018f58
 800376c:	08018f64 	.word	0x08018f64
 8003770:	08018f80 	.word	0x08018f80
 8003774:	08018fa0 	.word	0x08018fa0

08003778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_MspInit+0x4c>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_MspInit+0x4c>)
 8003788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378c:	6453      	str	r3, [r2, #68]	; 0x44
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_MspInit+0x4c>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_MspInit+0x4c>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <HAL_MspInit+0x4c>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_MspInit+0x4c>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800

080037c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a28      	ldr	r2, [pc, #160]	; (8003888 <HAL_ADC_MspInit+0xc0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d149      	bne.n	800387e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_ADC_MspInit+0xc4>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a26      	ldr	r2, [pc, #152]	; (800388c <HAL_ADC_MspInit+0xc4>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_ADC_MspInit+0xc4>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <HAL_ADC_MspInit+0xc4>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a1f      	ldr	r2, [pc, #124]	; (800388c <HAL_ADC_MspInit+0xc4>)
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_ADC_MspInit+0xc4>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_ADC_MspInit+0xc4>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a18      	ldr	r2, [pc, #96]	; (800388c <HAL_ADC_MspInit+0xc4>)
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <HAL_ADC_MspInit+0xc4>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_Pin;
 800383e:	2308      	movs	r3, #8
 8003840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003842:	2303      	movs	r3, #3
 8003844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOL_GPIO_Port, &GPIO_InitStruct);
 800384a:	f107 0314 	add.w	r3, r7, #20
 800384e:	4619      	mov	r1, r3
 8003850:	480f      	ldr	r0, [pc, #60]	; (8003890 <HAL_ADC_MspInit+0xc8>)
 8003852:	f002 f8ef 	bl	8005a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_SENS1_Pin|ADC_SENS1B1_Pin;
 8003856:	2303      	movs	r3, #3
 8003858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800385a:	2303      	movs	r3, #3
 800385c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	480a      	ldr	r0, [pc, #40]	; (8003894 <HAL_ADC_MspInit+0xcc>)
 800386a:	f002 f8e3 	bl	8005a34 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	2012      	movs	r0, #18
 8003874:	f001 fd39 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003878:	2012      	movs	r0, #18
 800387a:	f001 fd52 	bl	8005322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800387e:	bf00      	nop
 8003880:	3728      	adds	r7, #40	; 0x28
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40012000 	.word	0x40012000
 800388c:	40023800 	.word	0x40023800
 8003890:	40020800 	.word	0x40020800
 8003894:	40020400 	.word	0x40020400

08003898 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a0:	f107 0314 	add.w	r3, r7, #20
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <HAL_I2S_MspInit+0x148>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	f040 808d 	bne.w	80039d6 <HAL_I2S_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	4b48      	ldr	r3, [pc, #288]	; (80039e4 <HAL_I2S_MspInit+0x14c>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	4a47      	ldr	r2, [pc, #284]	; (80039e4 <HAL_I2S_MspInit+0x14c>)
 80038c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ca:	6413      	str	r3, [r2, #64]	; 0x40
 80038cc:	4b45      	ldr	r3, [pc, #276]	; (80039e4 <HAL_I2S_MspInit+0x14c>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <HAL_I2S_MspInit+0x14c>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	4a40      	ldr	r2, [pc, #256]	; (80039e4 <HAL_I2S_MspInit+0x14c>)
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	6313      	str	r3, [r2, #48]	; 0x30
 80038e8:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <HAL_I2S_MspInit+0x14c>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <HAL_I2S_MspInit+0x14c>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	4a39      	ldr	r2, [pc, #228]	; (80039e4 <HAL_I2S_MspInit+0x14c>)
 80038fe:	f043 0304 	orr.w	r3, r3, #4
 8003902:	6313      	str	r3, [r2, #48]	; 0x30
 8003904:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <HAL_I2S_MspInit+0x14c>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003910:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391e:	2300      	movs	r3, #0
 8003920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003922:	2305      	movs	r3, #5
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4619      	mov	r1, r3
 800392c:	482e      	ldr	r0, [pc, #184]	; (80039e8 <HAL_I2S_MspInit+0x150>)
 800392e:	f002 f881 	bl	8005a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003932:	2340      	movs	r3, #64	; 0x40
 8003934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003942:	2305      	movs	r3, #5
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	4619      	mov	r1, r3
 800394c:	4827      	ldr	r0, [pc, #156]	; (80039ec <HAL_I2S_MspInit+0x154>)
 800394e:	f002 f871 	bl	8005a34 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003952:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 8003954:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <HAL_I2S_MspInit+0x15c>)
 8003956:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 800395a:	2200      	movs	r2, #0
 800395c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 8003960:	2240      	movs	r2, #64	; 0x40
 8003962:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003964:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 8003966:	2200      	movs	r2, #0
 8003968:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 800396c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003970:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003972:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 8003974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003978:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 800397c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003980:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003982:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 8003984:	2200      	movs	r2, #0
 8003986:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 800398a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800398e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003990:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 8003992:	2204      	movs	r2, #4
 8003994:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 8003998:	2203      	movs	r2, #3
 800399a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_INC4;
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 800399e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80039aa:	4811      	ldr	r0, [pc, #68]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 80039ac:	f001 fcd4 	bl	8005358 <HAL_DMA_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2S_MspInit+0x122>
    {
      Error_Handler();
 80039b6:	f7ff fa0d 	bl	8002dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
 80039c0:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <HAL_I2S_MspInit+0x158>)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2101      	movs	r1, #1
 80039ca:	2024      	movs	r0, #36	; 0x24
 80039cc:	f001 fc8d 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80039d0:	2024      	movs	r0, #36	; 0x24
 80039d2:	f001 fca6 	bl	8005322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80039d6:	bf00      	nop
 80039d8:	3728      	adds	r7, #40	; 0x28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40003800 	.word	0x40003800
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40020800 	.word	0x40020800
 80039f0:	200025e0 	.word	0x200025e0
 80039f4:	40026070 	.word	0x40026070

080039f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <HAL_SD_MspInit+0xc0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d14a      	bne.n	8003ab0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_SD_MspInit+0xc4>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <HAL_SD_MspInit+0xc4>)
 8003a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a28:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <HAL_SD_MspInit+0xc4>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <HAL_SD_MspInit+0xc4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <HAL_SD_MspInit+0xc4>)
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_SD_MspInit+0xc4>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	4b19      	ldr	r3, [pc, #100]	; (8003abc <HAL_SD_MspInit+0xc4>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <HAL_SD_MspInit+0xc4>)
 8003a5c:	f043 0308 	orr.w	r3, r3, #8
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <HAL_SD_MspInit+0xc4>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003a6e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003a80:	230c      	movs	r3, #12
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	4619      	mov	r1, r3
 8003a8a:	480d      	ldr	r0, [pc, #52]	; (8003ac0 <HAL_SD_MspInit+0xc8>)
 8003a8c:	f001 ffd2 	bl	8005a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a90:	2304      	movs	r3, #4
 8003a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4806      	ldr	r0, [pc, #24]	; (8003ac4 <HAL_SD_MspInit+0xcc>)
 8003aac:	f001 ffc2 	bl	8005a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003ab0:	bf00      	nop
 8003ab2:	3728      	adds	r7, #40	; 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40020800 	.word	0x40020800
 8003ac4:	40020c00 	.word	0x40020c00

08003ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <HAL_SPI_MspInit+0x84>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d12b      	bne.n	8003b42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <HAL_SPI_MspInit+0x88>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <HAL_SPI_MspInit+0x88>)
 8003af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003af8:	6453      	str	r3, [r2, #68]	; 0x44
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_SPI_MspInit+0x88>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_SPI_MspInit+0x88>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	4a10      	ldr	r2, [pc, #64]	; (8003b50 <HAL_SPI_MspInit+0x88>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6313      	str	r3, [r2, #48]	; 0x30
 8003b16:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <HAL_SPI_MspInit+0x88>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST7789_SCK_Pin|ST7789_SDA_Pin;
 8003b22:	23a0      	movs	r3, #160	; 0xa0
 8003b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b26:	2302      	movs	r3, #2
 8003b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b32:	2305      	movs	r3, #5
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4805      	ldr	r0, [pc, #20]	; (8003b54 <HAL_SPI_MspInit+0x8c>)
 8003b3e:	f001 ff79 	bl	8005a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b42:	bf00      	nop
 8003b44:	3728      	adds	r7, #40	; 0x28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40013000 	.word	0x40013000
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40020000 	.word	0x40020000

08003b58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <HAL_TIM_PWM_MspInit+0xa8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d145      	bne.n	8003bf6 <HAL_TIM_PWM_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <HAL_TIM_PWM_MspInit+0xac>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	4a24      	ldr	r2, [pc, #144]	; (8003c04 <HAL_TIM_PWM_MspInit+0xac>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_TIM_PWM_MspInit+0xac>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <HAL_TIM_PWM_MspInit+0xb4>)
 8003b8a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8003b8c:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b8e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003b92:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ba6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bae:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bb6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bc4:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8003bca:	480f      	ldr	r0, [pc, #60]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003bcc:	f001 fbc4 	bl	8005358 <HAL_DMA_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8003bd6:	f7ff f8fd 	bl	8002dd4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
 8003be0:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <HAL_TIM_PWM_MspInit+0xb0>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	201b      	movs	r0, #27
 8003bec:	f001 fb7d 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003bf0:	201b      	movs	r0, #27
 8003bf2:	f001 fb96 	bl	8005322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40023800 	.word	0x40023800
 8003c08:	20002274 	.word	0x20002274
 8003c0c:	400264a0 	.word	0x400264a0

08003c10 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <HAL_TIM_OC_MspInit+0x70>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10e      	bne.n	8003c40 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <HAL_TIM_OC_MspInit+0x74>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <HAL_TIM_OC_MspInit+0x74>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	6413      	str	r3, [r2, #64]	; 0x40
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_TIM_OC_MspInit+0x74>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c3e:	e01a      	b.n	8003c76 <HAL_TIM_OC_MspInit+0x66>
  else if(htim_oc->Instance==TIM8)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <HAL_TIM_OC_MspInit+0x78>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d115      	bne.n	8003c76 <HAL_TIM_OC_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_TIM_OC_MspInit+0x74>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <HAL_TIM_OC_MspInit+0x74>)
 8003c54:	f043 0302 	orr.w	r3, r3, #2
 8003c58:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_TIM_OC_MspInit+0x74>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003c66:	2200      	movs	r2, #0
 8003c68:	2100      	movs	r1, #0
 8003c6a:	202e      	movs	r0, #46	; 0x2e
 8003c6c:	f001 fb3d 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003c70:	202e      	movs	r0, #46	; 0x2e
 8003c72:	f001 fb56 	bl	8005322 <HAL_NVIC_EnableIRQ>
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40010400 	.word	0x40010400

08003c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	f107 030c 	add.w	r3, r7, #12
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <HAL_TIM_MspPostInit+0x68>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d11e      	bne.n	8003cec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <HAL_TIM_MspPostInit+0x6c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <HAL_TIM_MspPostInit+0x6c>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <HAL_TIM_MspPostInit+0x6c>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4805      	ldr	r0, [pc, #20]	; (8003cfc <HAL_TIM_MspPostInit+0x70>)
 8003ce8:	f001 fea4 	bl	8005a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003cec:	bf00      	nop
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40020000 	.word	0x40020000

08003d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	; 0x28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <HAL_UART_MspInit+0xc4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d14b      	bne.n	8003dba <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <HAL_UART_MspInit+0xc8>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a27      	ldr	r2, [pc, #156]	; (8003dc8 <HAL_UART_MspInit+0xc8>)
 8003d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
 8003d32:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_UART_MspInit+0xc8>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_UART_MspInit+0xc8>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <HAL_UART_MspInit+0xc8>)
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <HAL_UART_MspInit+0xc8>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_UART_MspInit+0xc8>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_UART_MspInit+0xc8>)
 8003d64:	f043 0304 	orr.w	r3, r3, #4
 8003d68:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <HAL_UART_MspInit+0xc8>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d84:	2303      	movs	r3, #3
 8003d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d88:	2307      	movs	r3, #7
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d8c:	f107 0314 	add.w	r3, r7, #20
 8003d90:	4619      	mov	r1, r3
 8003d92:	480e      	ldr	r0, [pc, #56]	; (8003dcc <HAL_UART_MspInit+0xcc>)
 8003d94:	f001 fe4e 	bl	8005a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da6:	2303      	movs	r3, #3
 8003da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003daa:	2307      	movs	r3, #7
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dae:	f107 0314 	add.w	r3, r7, #20
 8003db2:	4619      	mov	r1, r3
 8003db4:	4806      	ldr	r0, [pc, #24]	; (8003dd0 <HAL_UART_MspInit+0xd0>)
 8003db6:	f001 fe3d 	bl	8005a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003dba:	bf00      	nop
 8003dbc:	3728      	adds	r7, #40	; 0x28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40004800 	.word	0x40004800
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40020400 	.word	0x40020400
 8003dd0:	40020800 	.word	0x40020800

08003dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003de6:	e7fe      	b.n	8003de6 <HardFault_Handler+0x4>

08003de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dec:	e7fe      	b.n	8003dec <MemManage_Handler+0x4>

08003dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003df2:	e7fe      	b.n	8003df2 <BusFault_Handler+0x4>

08003df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003df8:	e7fe      	b.n	8003df8 <UsageFault_Handler+0x4>

08003dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e28:	f000 faf0 	bl	800440c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e2c:	bf00      	nop
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003e34:	4802      	ldr	r0, [pc, #8]	; (8003e40 <DMA1_Stream4_IRQHandler+0x10>)
 8003e36:	f001 fb95 	bl	8005564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200025e0 	.word	0x200025e0

08003e44 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e48:	4802      	ldr	r0, [pc, #8]	; (8003e54 <ADC_IRQHandler+0x10>)
 8003e4a:	f000 fb64 	bl	8004516 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20002464 	.word	0x20002464

08003e58 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e5c:	4802      	ldr	r0, [pc, #8]	; (8003e68 <TIM1_CC_IRQHandler+0x10>)
 8003e5e:	f006 fa71 	bl	800a344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200024b0 	.word	0x200024b0

08003e6c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8003e70:	4802      	ldr	r0, [pc, #8]	; (8003e7c <SPI2_IRQHandler+0x10>)
 8003e72:	f002 f95e 	bl	8006132 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20003038 	.word	0x20003038

08003e80 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <TIM8_CC_IRQHandler+0x10>)
 8003e86:	f006 fa5d 	bl	800a344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */
  //ledRefresh=1;
  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	200021b4 	.word	0x200021b4

08003e94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e98:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <OTG_FS_IRQHandler+0x10>)
 8003e9a:	f002 fe3b 	bl	8006b14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	2000b680 	.word	0x2000b680

08003ea8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8003eac:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <DMA2_Stream6_IRQHandler+0x10>)
 8003eae:	f001 fb59 	bl	8005564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20002274 	.word	0x20002274

08003ebc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e00a      	b.n	8003ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ece:	f3af 8000 	nop.w
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	60ba      	str	r2, [r7, #8]
 8003eda:	b2ca      	uxtb	r2, r1
 8003edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	dbf0      	blt.n	8003ece <_read+0x12>
	}

return len;
 8003eec:	687b      	ldr	r3, [r7, #4]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
	return -1;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <_isatty>:

int _isatty(int file)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
	return 1;
 8003f36:	2301      	movs	r3, #1
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
	return 0;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <_sbrk+0x5c>)
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <_sbrk+0x60>)
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <_sbrk+0x64>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <_sbrk+0x64>)
 8003f7e:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <_sbrk+0x68>)
 8003f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <_sbrk+0x64>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d207      	bcs.n	8003fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f90:	f012 fbc8 	bl	8016724 <__errno>
 8003f94:	4602      	mov	r2, r0
 8003f96:	230c      	movs	r3, #12
 8003f98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9e:	e009      	b.n	8003fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <_sbrk+0x64>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fa6:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <_sbrk+0x64>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <_sbrk+0x64>)
 8003fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20040000 	.word	0x20040000
 8003fc0:	00001200 	.word	0x00001200
 8003fc4:	200018bc 	.word	0x200018bc
 8003fc8:	2000ba90 	.word	0x2000ba90

08003fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <SystemInit+0x28>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <SystemInit+0x28>)
 8003fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <SystemInit+0x28>)
 8003fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fe6:	609a      	str	r2, [r3, #8]
#endif
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <ws2812_init>:
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
//------------------------------------------------------------------


void ws2812_init(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 8003ffe:	2350      	movs	r3, #80	; 0x50
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	e007      	b.n	8004014 <ws2812_init+0x1c>
	  BUF_DMA[i] = LOW;
 8004004:	4a08      	ldr	r2, [pc, #32]	; (8004028 <ws2812_init+0x30>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2123      	movs	r1, #35	; 0x23
 800400a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<LED_COUNT*24;i++){
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3301      	adds	r3, #1
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800401a:	dbf3      	blt.n	8004004 <ws2812_init+0xc>

  }
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	200018c0 	.word	0x200018c0

0800402c <ws2812_setPixel_gammaCorrection>:
	for( int i=0; i<LED_COUNT; i++){
		ws2812_pixel_rgb_to_buf_dma(0,0,0,i);
	}
}

void ws2812_setPixel_gammaCorrection(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t pos){
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4604      	mov	r4, r0
 8004034:	4608      	mov	r0, r1
 8004036:	4611      	mov	r1, r2
 8004038:	461a      	mov	r2, r3
 800403a:	4623      	mov	r3, r4
 800403c:	71fb      	strb	r3, [r7, #7]
 800403e:	4603      	mov	r3, r0
 8004040:	71bb      	strb	r3, [r7, #6]
 8004042:	460b      	mov	r3, r1
 8004044:	717b      	strb	r3, [r7, #5]
 8004046:	4613      	mov	r3, r2
 8004048:	807b      	strh	r3, [r7, #2]
	ws2812_pixel_rgb_to_buf_dma(gamma8[Rpixel],gamma8[Gpixel],gamma8[Bpixel],pos);
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	4a07      	ldr	r2, [pc, #28]	; (800406c <ws2812_setPixel_gammaCorrection+0x40>)
 800404e:	5cd0      	ldrb	r0, [r2, r3]
 8004050:	79bb      	ldrb	r3, [r7, #6]
 8004052:	4a06      	ldr	r2, [pc, #24]	; (800406c <ws2812_setPixel_gammaCorrection+0x40>)
 8004054:	5cd1      	ldrb	r1, [r2, r3]
 8004056:	797b      	ldrb	r3, [r7, #5]
 8004058:	4a04      	ldr	r2, [pc, #16]	; (800406c <ws2812_setPixel_gammaCorrection+0x40>)
 800405a:	5cd2      	ldrb	r2, [r2, r3]
 800405c:	887b      	ldrh	r3, [r7, #2]
 800405e:	f000 f807 	bl	8004070 <ws2812_pixel_rgb_to_buf_dma>
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bd90      	pop	{r4, r7, pc}
 800406a:	bf00      	nop
 800406c:	08052f3c 	.word	0x08052f3c

08004070 <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8004070:	b490      	push	{r4, r7}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	4604      	mov	r4, r0
 8004078:	4608      	mov	r0, r1
 800407a:	4611      	mov	r1, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4623      	mov	r3, r4
 8004080:	71fb      	strb	r3, [r7, #7]
 8004082:	4603      	mov	r3, r0
 8004084:	71bb      	strb	r3, [r7, #6]
 8004086:	460b      	mov	r3, r1
 8004088:	717b      	strb	r3, [r7, #5]
 800408a:	4613      	mov	r3, r2
 800408c:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 800408e:	2300      	movs	r3, #0
 8004090:	81fb      	strh	r3, [r7, #14]
 8004092:	e07a      	b.n	800418a <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 8004094:	79fa      	ldrb	r2, [r7, #7]
 8004096:	89fb      	ldrh	r3, [r7, #14]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f1c3 0307 	rsb	r3, r3, #7
 800409e:	fa42 f303 	asr.w	r3, r2, r3
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00e      	beq.n	80040c8 <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 80040aa:	887a      	ldrh	r2, [r7, #2]
 80040ac:	4613      	mov	r3, r2
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	4413      	add	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	3350      	adds	r3, #80	; 0x50
 80040b6:	89fa      	ldrh	r2, [r7, #14]
 80040b8:	b292      	uxth	r2, r2
 80040ba:	4413      	add	r3, r2
 80040bc:	3308      	adds	r3, #8
 80040be:	4a37      	ldr	r2, [pc, #220]	; (800419c <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 80040c0:	2146      	movs	r1, #70	; 0x46
 80040c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80040c6:	e00d      	b.n	80040e4 <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 80040c8:	887a      	ldrh	r2, [r7, #2]
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	3350      	adds	r3, #80	; 0x50
 80040d4:	89fa      	ldrh	r2, [r7, #14]
 80040d6:	b292      	uxth	r2, r2
 80040d8:	4413      	add	r3, r2
 80040da:	3308      	adds	r3, #8
 80040dc:	4a2f      	ldr	r2, [pc, #188]	; (800419c <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 80040de:	2123      	movs	r1, #35	; 0x23
 80040e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 80040e4:	79ba      	ldrb	r2, [r7, #6]
 80040e6:	89fb      	ldrh	r3, [r7, #14]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f1c3 0307 	rsb	r3, r3, #7
 80040ee:	fa42 f303 	asr.w	r3, r2, r3
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	3350      	adds	r3, #80	; 0x50
 8004106:	89fa      	ldrh	r2, [r7, #14]
 8004108:	b292      	uxth	r2, r2
 800410a:	4413      	add	r3, r2
 800410c:	4a23      	ldr	r2, [pc, #140]	; (800419c <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800410e:	2146      	movs	r1, #70	; 0x46
 8004110:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004114:	e00c      	b.n	8004130 <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	3350      	adds	r3, #80	; 0x50
 8004122:	89fa      	ldrh	r2, [r7, #14]
 8004124:	b292      	uxth	r2, r2
 8004126:	4413      	add	r3, r2
 8004128:	4a1c      	ldr	r2, [pc, #112]	; (800419c <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800412a:	2123      	movs	r1, #35	; 0x23
 800412c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 8004130:	797a      	ldrb	r2, [r7, #5]
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f1c3 0307 	rsb	r3, r3, #7
 800413a:	fa42 f303 	asr.w	r3, r2, r3
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00e      	beq.n	8004164 <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	3350      	adds	r3, #80	; 0x50
 8004152:	89fa      	ldrh	r2, [r7, #14]
 8004154:	b292      	uxth	r2, r2
 8004156:	4413      	add	r3, r2
 8004158:	3310      	adds	r3, #16
 800415a:	4a10      	ldr	r2, [pc, #64]	; (800419c <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800415c:	2146      	movs	r1, #70	; 0x46
 800415e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004162:	e00d      	b.n	8004180 <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 8004164:	887a      	ldrh	r2, [r7, #2]
 8004166:	4613      	mov	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	3350      	adds	r3, #80	; 0x50
 8004170:	89fa      	ldrh	r2, [r7, #14]
 8004172:	b292      	uxth	r2, r2
 8004174:	4413      	add	r3, r2
 8004176:	3310      	adds	r3, #16
 8004178:	4a08      	ldr	r2, [pc, #32]	; (800419c <ws2812_pixel_rgb_to_buf_dma+0x12c>)
 800417a:	2123      	movs	r1, #35	; 0x23
 800417c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 8004180:	89fb      	ldrh	r3, [r7, #14]
 8004182:	b29b      	uxth	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	b29b      	uxth	r3, r3
 8004188:	81fb      	strh	r3, [r7, #14]
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b07      	cmp	r3, #7
 8004190:	d980      	bls.n	8004094 <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bc90      	pop	{r4, r7}
 800419a:	4770      	bx	lr
 800419c:	200018c0 	.word	0x200018c0

080041a0 <ws2812_light>:



//------------------------------------------------------------------
void ws2812_light(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_3,(uint32_t*)&BUF_DMA,ARRAY_LEN+30);
 80041a4:	f240 23fe 	movw	r3, #766	; 0x2fe
 80041a8:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <ws2812_light+0x18>)
 80041aa:	2108      	movs	r1, #8
 80041ac:	4803      	ldr	r0, [pc, #12]	; (80041bc <ws2812_light+0x1c>)
 80041ae:	f005 ffb7 	bl	800a120 <HAL_TIM_PWM_Start_DMA>
}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200018c0 	.word	0x200018c0
 80041bc:	200024b0 	.word	0x200024b0

080041c0 <HsvToRgb>:

RgbColor HsvToRgb(HsvColor hsv) {
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	RgbColor rgb;
	unsigned char region, remainder, p, q, t;

	if (hsv.s == 0) {
 80041c8:	797b      	ldrb	r3, [r7, #5]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d110      	bne.n	80041f0 <HsvToRgb+0x30>
		rgb.r = hsv.v;
 80041ce:	79bb      	ldrb	r3, [r7, #6]
 80041d0:	733b      	strb	r3, [r7, #12]
		rgb.g = hsv.v;
 80041d2:	79bb      	ldrb	r3, [r7, #6]
 80041d4:	737b      	strb	r3, [r7, #13]
		rgb.b = hsv.v;
 80041d6:	79bb      	ldrb	r3, [r7, #6]
 80041d8:	73bb      	strb	r3, [r7, #14]
		return rgb;
 80041da:	f107 0310 	add.w	r3, r7, #16
 80041de:	f107 020c 	add.w	r2, r7, #12
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	4611      	mov	r1, r2
 80041e6:	8019      	strh	r1, [r3, #0]
 80041e8:	3302      	adds	r3, #2
 80041ea:	0c12      	lsrs	r2, r2, #16
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e07f      	b.n	80042f0 <HsvToRgb+0x130>
	}

	region = hsv.h / 43;
 80041f0:	793b      	ldrb	r3, [r7, #4]
 80041f2:	4a47      	ldr	r2, [pc, #284]	; (8004310 <HsvToRgb+0x150>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	08db      	lsrs	r3, r3, #3
 80041fa:	75fb      	strb	r3, [r7, #23]
	remainder = (hsv.h - (region * 43)) * 6;
 80041fc:	793b      	ldrb	r3, [r7, #4]
 80041fe:	4619      	mov	r1, r3
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	f06f 022a 	mvn.w	r2, #42	; 0x2a
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	440b      	add	r3, r1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	0052      	lsls	r2, r2, #1
 8004212:	4413      	add	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	75bb      	strb	r3, [r7, #22]

	p = (hsv.v * (255 - hsv.s)) >> 8;
 8004218:	79bb      	ldrb	r3, [r7, #6]
 800421a:	461a      	mov	r2, r3
 800421c:	797b      	ldrb	r3, [r7, #5]
 800421e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004222:	fb03 f302 	mul.w	r3, r3, r2
 8004226:	121b      	asrs	r3, r3, #8
 8004228:	757b      	strb	r3, [r7, #21]
	q = (hsv.v * (255 - ((hsv.s * remainder) >> 8))) >> 8;
 800422a:	79bb      	ldrb	r3, [r7, #6]
 800422c:	461a      	mov	r2, r3
 800422e:	797b      	ldrb	r3, [r7, #5]
 8004230:	4619      	mov	r1, r3
 8004232:	7dbb      	ldrb	r3, [r7, #22]
 8004234:	fb03 f301 	mul.w	r3, r3, r1
 8004238:	121b      	asrs	r3, r3, #8
 800423a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800423e:	fb03 f302 	mul.w	r3, r3, r2
 8004242:	121b      	asrs	r3, r3, #8
 8004244:	753b      	strb	r3, [r7, #20]
	t = (hsv.v * (255 - ((hsv.s * (255 - remainder)) >> 8))) >> 8;
 8004246:	79bb      	ldrb	r3, [r7, #6]
 8004248:	461a      	mov	r2, r3
 800424a:	797b      	ldrb	r3, [r7, #5]
 800424c:	4619      	mov	r1, r3
 800424e:	7dbb      	ldrb	r3, [r7, #22]
 8004250:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004254:	fb03 f301 	mul.w	r3, r3, r1
 8004258:	121b      	asrs	r3, r3, #8
 800425a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800425e:	fb03 f302 	mul.w	r3, r3, r2
 8004262:	121b      	asrs	r3, r3, #8
 8004264:	74fb      	strb	r3, [r7, #19]

	switch (region) {
 8004266:	7dfb      	ldrb	r3, [r7, #23]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d830      	bhi.n	80042ce <HsvToRgb+0x10e>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <HsvToRgb+0xb4>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004289 	.word	0x08004289
 8004278:	08004297 	.word	0x08004297
 800427c:	080042a5 	.word	0x080042a5
 8004280:	080042b3 	.word	0x080042b3
 8004284:	080042c1 	.word	0x080042c1
	case 0:
		rgb.r = hsv.v;
 8004288:	79bb      	ldrb	r3, [r7, #6]
 800428a:	733b      	strb	r3, [r7, #12]
		rgb.g = t;
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	737b      	strb	r3, [r7, #13]
		rgb.b = p;
 8004290:	7d7b      	ldrb	r3, [r7, #21]
 8004292:	73bb      	strb	r3, [r7, #14]
		break;
 8004294:	e022      	b.n	80042dc <HsvToRgb+0x11c>
	case 1:
		rgb.r = q;
 8004296:	7d3b      	ldrb	r3, [r7, #20]
 8004298:	733b      	strb	r3, [r7, #12]
		rgb.g = hsv.v;
 800429a:	79bb      	ldrb	r3, [r7, #6]
 800429c:	737b      	strb	r3, [r7, #13]
		rgb.b = p;
 800429e:	7d7b      	ldrb	r3, [r7, #21]
 80042a0:	73bb      	strb	r3, [r7, #14]
		break;
 80042a2:	e01b      	b.n	80042dc <HsvToRgb+0x11c>
	case 2:
		rgb.r = p;
 80042a4:	7d7b      	ldrb	r3, [r7, #21]
 80042a6:	733b      	strb	r3, [r7, #12]
		rgb.g = hsv.v;
 80042a8:	79bb      	ldrb	r3, [r7, #6]
 80042aa:	737b      	strb	r3, [r7, #13]
		rgb.b = t;
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	73bb      	strb	r3, [r7, #14]
		break;
 80042b0:	e014      	b.n	80042dc <HsvToRgb+0x11c>
	case 3:
		rgb.r = p;
 80042b2:	7d7b      	ldrb	r3, [r7, #21]
 80042b4:	733b      	strb	r3, [r7, #12]
		rgb.g = q;
 80042b6:	7d3b      	ldrb	r3, [r7, #20]
 80042b8:	737b      	strb	r3, [r7, #13]
		rgb.b = hsv.v;
 80042ba:	79bb      	ldrb	r3, [r7, #6]
 80042bc:	73bb      	strb	r3, [r7, #14]
		break;
 80042be:	e00d      	b.n	80042dc <HsvToRgb+0x11c>
	case 4:
		rgb.r = t;
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	733b      	strb	r3, [r7, #12]
		rgb.g = p;
 80042c4:	7d7b      	ldrb	r3, [r7, #21]
 80042c6:	737b      	strb	r3, [r7, #13]
		rgb.b = hsv.v;
 80042c8:	79bb      	ldrb	r3, [r7, #6]
 80042ca:	73bb      	strb	r3, [r7, #14]
		break;
 80042cc:	e006      	b.n	80042dc <HsvToRgb+0x11c>
	default:
		rgb.r = hsv.v;
 80042ce:	79bb      	ldrb	r3, [r7, #6]
 80042d0:	733b      	strb	r3, [r7, #12]
		rgb.g = p;
 80042d2:	7d7b      	ldrb	r3, [r7, #21]
 80042d4:	737b      	strb	r3, [r7, #13]
		rgb.b = q;
 80042d6:	7d3b      	ldrb	r3, [r7, #20]
 80042d8:	73bb      	strb	r3, [r7, #14]
		break;
 80042da:	bf00      	nop
	}

	return rgb;
 80042dc:	f107 0310 	add.w	r3, r7, #16
 80042e0:	f107 020c 	add.w	r2, r7, #12
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	4611      	mov	r1, r2
 80042e8:	8019      	strh	r1, [r3, #0]
 80042ea:	3302      	adds	r3, #2
 80042ec:	0c12      	lsrs	r2, r2, #16
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	7c3a      	ldrb	r2, [r7, #16]
 80042f4:	f362 0307 	bfi	r3, r2, #0, #8
 80042f8:	7c7a      	ldrb	r2, [r7, #17]
 80042fa:	f362 230f 	bfi	r3, r2, #8, #8
 80042fe:	7cba      	ldrb	r2, [r7, #18]
 8004300:	f362 4317 	bfi	r3, r2, #16, #8
}
 8004304:	4618      	mov	r0, r3
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	2fa0be83 	.word	0x2fa0be83

08004314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8004314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800434c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004318:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800431a:	e003      	b.n	8004324 <LoopCopyDataInit>

0800431c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800431e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004320:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004322:	3104      	adds	r1, #4

08004324 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004324:	480b      	ldr	r0, [pc, #44]	; (8004354 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004328:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800432a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800432c:	d3f6      	bcc.n	800431c <CopyDataInit>
  ldr  r2, =_sbss
 800432e:	4a0b      	ldr	r2, [pc, #44]	; (800435c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004330:	e002      	b.n	8004338 <LoopFillZerobss>

08004332 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004332:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004334:	f842 3b04 	str.w	r3, [r2], #4

08004338 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800433a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800433c:	d3f9      	bcc.n	8004332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800433e:	f7ff fe45 	bl	8003fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004342:	f012 fb6f 	bl	8016a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004346:	f7fd fe97 	bl	8002078 <main>
  bx  lr    
 800434a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800434c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8004350:	08053848 	.word	0x08053848
  ldr  r0, =_sdata
 8004354:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004358:	20000344 	.word	0x20000344
  ldr  r2, =_sbss
 800435c:	20000344 	.word	0x20000344
  ldr  r3, = _ebss
 8004360:	2000ba8c 	.word	0x2000ba8c

08004364 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004364:	e7fe      	b.n	8004364 <CAN1_RX0_IRQHandler>
	...

08004368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800436c:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_Init+0x40>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0d      	ldr	r2, [pc, #52]	; (80043a8 <HAL_Init+0x40>)
 8004372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_Init+0x40>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <HAL_Init+0x40>)
 800437e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <HAL_Init+0x40>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <HAL_Init+0x40>)
 800438a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004390:	2003      	movs	r0, #3
 8004392:	f000 ff9f 	bl	80052d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004396:	2000      	movs	r0, #0
 8004398:	f000 f808 	bl	80043ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800439c:	f7ff f9ec 	bl	8003778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023c00 	.word	0x40023c00

080043ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043b4:	4b12      	ldr	r3, [pc, #72]	; (8004400 <HAL_InitTick+0x54>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_InitTick+0x58>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	4619      	mov	r1, r3
 80043be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 ffb7 	bl	800533e <HAL_SYSTICK_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e00e      	b.n	80043f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b0f      	cmp	r3, #15
 80043de:	d80a      	bhi.n	80043f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043e0:	2200      	movs	r2, #0
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	f000 ff7f 	bl	80052ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043ec:	4a06      	ldr	r2, [pc, #24]	; (8004408 <HAL_InitTick+0x5c>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000010 	.word	0x20000010
 8004404:	20000018 	.word	0x20000018
 8004408:	20000014 	.word	0x20000014

0800440c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_IncTick+0x20>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_IncTick+0x24>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4413      	add	r3, r2
 800441c:	4a04      	ldr	r2, [pc, #16]	; (8004430 <HAL_IncTick+0x24>)
 800441e:	6013      	str	r3, [r2, #0]
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000018 	.word	0x20000018
 8004430:	2000913c 	.word	0x2000913c

08004434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return uwTick;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_GetTick+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	2000913c 	.word	0x2000913c

0800444c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004454:	f7ff ffee 	bl	8004434 <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d005      	beq.n	8004472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_Delay+0x40>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004472:	bf00      	nop
 8004474:	f7ff ffde 	bl	8004434 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	429a      	cmp	r2, r3
 8004482:	d8f7      	bhi.n	8004474 <HAL_Delay+0x28>
  {
  }
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000018 	.word	0x20000018

08004490 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e033      	b.n	800450e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff f98a 	bl	80037c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d118      	bne.n	8004500 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044d6:	f023 0302 	bic.w	r3, r3, #2
 80044da:	f043 0202 	orr.w	r2, r3, #2
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa98 	bl	8004a18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
 80044fe:	e001      	b.n	8004504 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b20      	cmp	r3, #32
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d049      	beq.n	80045ec <HAL_ADC_IRQHandler+0xd6>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d046      	beq.n	80045ec <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b00      	cmp	r3, #0
 8004568:	d105      	bne.n	8004576 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d12b      	bne.n	80045dc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004588:	2b00      	cmp	r3, #0
 800458a:	d127      	bne.n	80045dc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004596:	2b00      	cmp	r3, #0
 8004598:	d006      	beq.n	80045a8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d119      	bne.n	80045dc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0220 	bic.w	r2, r2, #32
 80045b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8db 	bl	8004798 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0212 	mvn.w	r2, #18
 80045ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460c:	2b80      	cmp	r3, #128	; 0x80
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d057      	beq.n	80046ce <HAL_ADC_IRQHandler+0x1b8>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d054      	beq.n	80046ce <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d139      	bne.n	80046be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004662:	2b00      	cmp	r3, #0
 8004664:	d12b      	bne.n	80046be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004670:	2b00      	cmp	r3, #0
 8004672:	d124      	bne.n	80046be <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800467e:	2b00      	cmp	r3, #0
 8004680:	d11d      	bne.n	80046be <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004686:	2b00      	cmp	r3, #0
 8004688:	d119      	bne.n	80046be <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004698:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f043 0201 	orr.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd fae0 	bl	8001c84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 020c 	mvn.w	r2, #12
 80046cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	bf0c      	ite	eq
 80046f2:	2301      	moveq	r3, #1
 80046f4:	2300      	movne	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d017      	beq.n	8004730 <HAL_ADC_IRQHandler+0x21a>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d014      	beq.n	8004730 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d10d      	bne.n	8004730 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f843 	bl	80047ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f06f 0201 	mvn.w	r2, #1
 800472e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b20      	cmp	r3, #32
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d015      	beq.n	8004790 <HAL_ADC_IRQHandler+0x27a>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d012      	beq.n	8004790 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	f043 0202 	orr.w	r2, r3, #2
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f06f 0220 	mvn.w	r2, #32
 800477e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f81d 	bl	80047c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f06f 0220 	mvn.w	r2, #32
 800478e:	601a      	str	r2, [r3, #0]
  }
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x1c>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e105      	b.n	80049fc <HAL_ADC_ConfigChannel+0x228>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b09      	cmp	r3, #9
 80047fe:	d925      	bls.n	800484c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68d9      	ldr	r1, [r3, #12]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	4613      	mov	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	4413      	add	r3, r2
 8004814:	3b1e      	subs	r3, #30
 8004816:	2207      	movs	r2, #7
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43da      	mvns	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	400a      	ands	r2, r1
 8004824:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68d9      	ldr	r1, [r3, #12]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	4618      	mov	r0, r3
 8004838:	4603      	mov	r3, r0
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4403      	add	r3, r0
 800483e:	3b1e      	subs	r3, #30
 8004840:	409a      	lsls	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	e022      	b.n	8004892 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6919      	ldr	r1, [r3, #16]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	b29b      	uxth	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	4613      	mov	r3, r2
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4413      	add	r3, r2
 8004860:	2207      	movs	r2, #7
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43da      	mvns	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	400a      	ands	r2, r1
 800486e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6919      	ldr	r1, [r3, #16]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	4618      	mov	r0, r3
 8004882:	4603      	mov	r3, r0
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4403      	add	r3, r0
 8004888:	409a      	lsls	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b06      	cmp	r3, #6
 8004898:	d824      	bhi.n	80048e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	3b05      	subs	r3, #5
 80048ac:	221f      	movs	r2, #31
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43da      	mvns	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	400a      	ands	r2, r1
 80048ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	4618      	mov	r0, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	3b05      	subs	r3, #5
 80048d6:	fa00 f203 	lsl.w	r2, r0, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	635a      	str	r2, [r3, #52]	; 0x34
 80048e2:	e04c      	b.n	800497e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d824      	bhi.n	8004936 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	3b23      	subs	r3, #35	; 0x23
 80048fe:	221f      	movs	r2, #31
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43da      	mvns	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	400a      	ands	r2, r1
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	4618      	mov	r0, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	3b23      	subs	r3, #35	; 0x23
 8004928:	fa00 f203 	lsl.w	r2, r0, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
 8004934:	e023      	b.n	800497e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	3b41      	subs	r3, #65	; 0x41
 8004948:	221f      	movs	r2, #31
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43da      	mvns	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	400a      	ands	r2, r1
 8004956:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	4618      	mov	r0, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	3b41      	subs	r3, #65	; 0x41
 8004972:	fa00 f203 	lsl.w	r2, r0, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <HAL_ADC_ConfigChannel+0x234>)
 8004980:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <HAL_ADC_ConfigChannel+0x238>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d109      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x1cc>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b12      	cmp	r3, #18
 8004992:	d105      	bne.n	80049a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <HAL_ADC_ConfigChannel+0x238>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d123      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x21e>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d003      	beq.n	80049ba <HAL_ADC_ConfigChannel+0x1e6>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b11      	cmp	r3, #17
 80049b8:	d11b      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b10      	cmp	r3, #16
 80049cc:	d111      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049ce:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <HAL_ADC_ConfigChannel+0x23c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <HAL_ADC_ConfigChannel+0x240>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	0c9a      	lsrs	r2, r3, #18
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049e4:	e002      	b.n	80049ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f9      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40012300 	.word	0x40012300
 8004a0c:	40012000 	.word	0x40012000
 8004a10:	20000010 	.word	0x20000010
 8004a14:	431bde83 	.word	0x431bde83

08004a18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a20:	4b79      	ldr	r3, [pc, #484]	; (8004c08 <ADC_Init+0x1f0>)
 8004a22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	021a      	lsls	r2, r3, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	4a58      	ldr	r2, [pc, #352]	; (8004c0c <ADC_Init+0x1f4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d022      	beq.n	8004af6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004abe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	e00f      	b.n	8004b16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0202 	bic.w	r2, r2, #2
 8004b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6899      	ldr	r1, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7e1b      	ldrb	r3, [r3, #24]
 8004b30:	005a      	lsls	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6859      	ldr	r1, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	035a      	lsls	r2, r3, #13
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	e007      	b.n	8004b8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	051a      	lsls	r2, r3, #20
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6899      	ldr	r1, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bce:	025a      	lsls	r2, r3, #9
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6899      	ldr	r1, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	029a      	lsls	r2, r3, #10
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40012300 	.word	0x40012300
 8004c0c:	0f000001 	.word	0x0f000001

08004c10 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADCEx_InjectedStart_IT+0x22>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e0a5      	b.n	8004d7e <HAL_ADCEx_InjectedStart_IT+0x16e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d018      	beq.n	8004c7a <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c58:	4b4c      	ldr	r3, [pc, #304]	; (8004d8c <HAL_ADCEx_InjectedStart_IT+0x17c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	; (8004d90 <HAL_ADCEx_InjectedStart_IT+0x180>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	0c9a      	lsrs	r2, r3, #18
 8004c64:	4613      	mov	r3, r2
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4413      	add	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004c6c:	e002      	b.n	8004c74 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f9      	bne.n	8004c6e <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d179      	bne.n	8004d7c <HAL_ADCEx_InjectedStart_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f06f 0204 	mvn.w	r2, #4
 8004cbe:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cce:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cd0:	4b30      	ldr	r3, [pc, #192]	; (8004d94 <HAL_ADCEx_InjectedStart_IT+0x184>)
 8004cd2:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d124      	bne.n	8004d2a <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d034      	beq.n	8004d7c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d031      	beq.n	8004d7c <HAL_ADCEx_InjectedStart_IT+0x16c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	e028      	b.n	8004d7c <HAL_ADCEx_InjectedStart_IT+0x16c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <HAL_ADCEx_InjectedStart_IT+0x188>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10d      	bne.n	8004d7c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_ADCEx_InjectedStart_IT+0x16c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004d7a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20000010 	.word	0x20000010
 8004d90:	431bde83 	.word	0x431bde83
 8004d94:	40012300 	.word	0x40012300
 8004d98:	40012000 	.word	0x40012000

08004d9c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f06f 0204 	mvn.w	r2, #4
 8004db2:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d81f      	bhi.n	8004dfc <HAL_ADCEx_InjectedGetValue+0x60>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <HAL_ADCEx_InjectedGetValue+0x28>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004df3 	.word	0x08004df3
 8004dc8:	08004de9 	.word	0x08004de9
 8004dcc:	08004ddf 	.word	0x08004ddf
 8004dd0:	08004dd5 	.word	0x08004dd5
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dda:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004ddc:	e00f      	b.n	8004dfe <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004de6:	e00a      	b.n	8004dfe <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004df0:	e005      	b.n	8004dfe <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004dfa:	e000      	b.n	8004dfe <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8004dfc:	bf00      	nop
  }
  return tmp;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e17a      	b.n	800511a <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b09      	cmp	r3, #9
 8004e32:	d925      	bls.n	8004e80 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	4613      	mov	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	4413      	add	r3, r2
 8004e48:	3b1e      	subs	r3, #30
 8004e4a:	2207      	movs	r2, #7
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	43da      	mvns	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	400a      	ands	r2, r1
 8004e58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68d9      	ldr	r1, [r3, #12]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4403      	add	r3, r0
 8004e72:	3b1e      	subs	r3, #30
 8004e74:	409a      	lsls	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	e022      	b.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6919      	ldr	r1, [r3, #16]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4613      	mov	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	2207      	movs	r2, #7
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	400a      	ands	r2, r1
 8004ea2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6919      	ldr	r1, [r3, #16]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4403      	add	r3, r0
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	051a      	lsls	r2, r3, #20
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	3303      	adds	r3, #3
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	221f      	movs	r2, #31
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43da      	mvns	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	3303      	adds	r3, #3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	fa00 f203 	lsl.w	r2, r0, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	4a73      	ldr	r2, [pc, #460]	; (8005128 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d022      	beq.n	8004fa4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6899      	ldr	r1, [r3, #8]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	699a      	ldr	r2, [r3, #24]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004f8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6899      	ldr	r1, [r3, #8]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	69da      	ldr	r2, [r3, #28]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]
 8004fa2:	e00f      	b.n	8004fc4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004fb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004fc2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	7d5b      	ldrb	r3, [r3, #21]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	e007      	b.n	8004fee <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fec:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	7d1b      	ldrb	r3, [r3, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	e007      	b.n	8005018 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005016:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d017      	beq.n	8005050 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8005020:	2b03      	cmp	r3, #3
 8005022:	d029      	beq.n	8005078 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8005024:	2b01      	cmp	r3, #1
 8005026:	d13b      	bne.n	80050a0 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005036:	f023 030f 	bic.w	r3, r3, #15
 800503a:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6959      	ldr	r1, [r3, #20]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	615a      	str	r2, [r3, #20]
      break;
 800504e:	e03b      	b.n	80050c8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800505e:	f023 030f 	bic.w	r3, r3, #15
 8005062:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6999      	ldr	r1, [r3, #24]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	619a      	str	r2, [r3, #24]
      break;
 8005076:	e027      	b.n	80050c8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005086:	f023 030f 	bic.w	r3, r3, #15
 800508a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69d9      	ldr	r1, [r3, #28]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	61da      	str	r2, [r3, #28]
      break;
 800509e:	e013      	b.n	80050c8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80050ae:	f023 030f 	bic.w	r3, r3, #15
 80050b2:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6a19      	ldr	r1, [r3, #32]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	621a      	str	r2, [r3, #32]
      break;
 80050c6:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80050ca:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a17      	ldr	r2, [pc, #92]	; (8005130 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d109      	bne.n	80050ea <HAL_ADCEx_InjectedConfigChannel+0x2de>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b12      	cmp	r3, #18
 80050dc:	d105      	bne.n	80050ea <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a10      	ldr	r2, [pc, #64]	; (8005130 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d10d      	bne.n	8005110 <HAL_ADCEx_InjectedConfigChannel+0x304>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b10      	cmp	r3, #16
 80050fa:	d003      	beq.n	8005104 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b11      	cmp	r3, #17
 8005102:	d105      	bne.n	8005110 <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	000f0001 	.word	0x000f0001
 800512c:	40012300 	.word	0x40012300
 8005130:	40012000 	.word	0x40012000

08005134 <__NVIC_SetPriorityGrouping>:
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <__NVIC_SetPriorityGrouping+0x44>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005150:	4013      	ands	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800515c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005166:	4a04      	ldr	r2, [pc, #16]	; (8005178 <__NVIC_SetPriorityGrouping+0x44>)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	60d3      	str	r3, [r2, #12]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	e000ed00 	.word	0xe000ed00

0800517c <__NVIC_GetPriorityGrouping>:
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <__NVIC_GetPriorityGrouping+0x18>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	f003 0307 	and.w	r3, r3, #7
}
 800518a:	4618      	mov	r0, r3
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	e000ed00 	.word	0xe000ed00

08005198 <__NVIC_EnableIRQ>:
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	db0b      	blt.n	80051c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	f003 021f 	and.w	r2, r3, #31
 80051b0:	4907      	ldr	r1, [pc, #28]	; (80051d0 <__NVIC_EnableIRQ+0x38>)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	2001      	movs	r0, #1
 80051ba:	fa00 f202 	lsl.w	r2, r0, r2
 80051be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e100 	.word	0xe000e100

080051d4 <__NVIC_SetPriority>:
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	6039      	str	r1, [r7, #0]
 80051de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	db0a      	blt.n	80051fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	490c      	ldr	r1, [pc, #48]	; (8005220 <__NVIC_SetPriority+0x4c>)
 80051ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f2:	0112      	lsls	r2, r2, #4
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	440b      	add	r3, r1
 80051f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80051fc:	e00a      	b.n	8005214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4908      	ldr	r1, [pc, #32]	; (8005224 <__NVIC_SetPriority+0x50>)
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	3b04      	subs	r3, #4
 800520c:	0112      	lsls	r2, r2, #4
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	440b      	add	r3, r1
 8005212:	761a      	strb	r2, [r3, #24]
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	e000e100 	.word	0xe000e100
 8005224:	e000ed00 	.word	0xe000ed00

08005228 <NVIC_EncodePriority>:
{
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f1c3 0307 	rsb	r3, r3, #7
 8005242:	2b04      	cmp	r3, #4
 8005244:	bf28      	it	cs
 8005246:	2304      	movcs	r3, #4
 8005248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3304      	adds	r3, #4
 800524e:	2b06      	cmp	r3, #6
 8005250:	d902      	bls.n	8005258 <NVIC_EncodePriority+0x30>
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	3b03      	subs	r3, #3
 8005256:	e000      	b.n	800525a <NVIC_EncodePriority+0x32>
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525c:	f04f 32ff 	mov.w	r2, #4294967295
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43da      	mvns	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	401a      	ands	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005270:	f04f 31ff 	mov.w	r1, #4294967295
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	43d9      	mvns	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005280:	4313      	orrs	r3, r2
}
 8005282:	4618      	mov	r0, r3
 8005284:	3724      	adds	r7, #36	; 0x24
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <SysTick_Config>:
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3b01      	subs	r3, #1
 800529c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052a0:	d301      	bcc.n	80052a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80052a2:	2301      	movs	r3, #1
 80052a4:	e00f      	b.n	80052c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052a6:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <SysTick_Config+0x40>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052ae:	210f      	movs	r1, #15
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	f7ff ff8e 	bl	80051d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <SysTick_Config+0x40>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <SysTick_Config+0x40>)
 80052c0:	2207      	movs	r2, #7
 80052c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	e000e010 	.word	0xe000e010

080052d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff ff29 	bl	8005134 <__NVIC_SetPriorityGrouping>
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b086      	sub	sp, #24
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	4603      	mov	r3, r0
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
 80052f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052fc:	f7ff ff3e 	bl	800517c <__NVIC_GetPriorityGrouping>
 8005300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	6978      	ldr	r0, [r7, #20]
 8005308:	f7ff ff8e 	bl	8005228 <NVIC_EncodePriority>
 800530c:	4602      	mov	r2, r0
 800530e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005312:	4611      	mov	r1, r2
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff ff5d 	bl	80051d4 <__NVIC_SetPriority>
}
 800531a:	bf00      	nop
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	4603      	mov	r3, r0
 800532a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800532c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff ff31 	bl	8005198 <__NVIC_EnableIRQ>
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff ffa2 	bl	8005290 <SysTick_Config>
 800534c:	4603      	mov	r3, r0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005364:	f7ff f866 	bl	8004434 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e099      	b.n	80054a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005394:	e00f      	b.n	80053b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005396:	f7ff f84d 	bl	8004434 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b05      	cmp	r3, #5
 80053a2:	d908      	bls.n	80053b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2203      	movs	r2, #3
 80053ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e078      	b.n	80054a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e8      	bne.n	8005396 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <HAL_DMA_Init+0x158>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	2b04      	cmp	r3, #4
 800540e:	d107      	bne.n	8005420 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	4313      	orrs	r3, r2
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0307 	bic.w	r3, r3, #7
 8005436:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b04      	cmp	r3, #4
 8005448:	d117      	bne.n	800547a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00e      	beq.n	800547a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fa6f 	bl	8005940 <DMA_CheckFifoParam>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2240      	movs	r2, #64	; 0x40
 800546c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005476:	2301      	movs	r3, #1
 8005478:	e016      	b.n	80054a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa26 	bl	80058d4 <DMA_CalcBaseAndBitshift>
 8005488:	4603      	mov	r3, r0
 800548a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005490:	223f      	movs	r2, #63	; 0x3f
 8005492:	409a      	lsls	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	f010803f 	.word	0xf010803f

080054b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_DMA_Start_IT+0x26>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e040      	b.n	800555c <HAL_DMA_Start_IT+0xa8>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d12f      	bne.n	800554e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f9b8 	bl	8005878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550c:	223f      	movs	r2, #63	; 0x3f
 800550e:	409a      	lsls	r2, r3
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0216 	orr.w	r2, r2, #22
 8005522:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d007      	beq.n	800553c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0208 	orr.w	r2, r2, #8
 800553a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e005      	b.n	800555a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005556:	2302      	movs	r3, #2
 8005558:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800555a:	7dfb      	ldrb	r3, [r7, #23]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005570:	4b92      	ldr	r3, [pc, #584]	; (80057bc <HAL_DMA_IRQHandler+0x258>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a92      	ldr	r2, [pc, #584]	; (80057c0 <HAL_DMA_IRQHandler+0x25c>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	0a9b      	lsrs	r3, r3, #10
 800557c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558e:	2208      	movs	r2, #8
 8005590:	409a      	lsls	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01a      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d013      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0204 	bic.w	r2, r2, #4
 80055b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055bc:	2208      	movs	r2, #8
 80055be:	409a      	lsls	r2, r3
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	f043 0201 	orr.w	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d4:	2201      	movs	r2, #1
 80055d6:	409a      	lsls	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d012      	beq.n	8005606 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00b      	beq.n	8005606 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f2:	2201      	movs	r2, #1
 80055f4:	409a      	lsls	r2, r3
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f043 0202 	orr.w	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560a:	2204      	movs	r2, #4
 800560c:	409a      	lsls	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4013      	ands	r3, r2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d012      	beq.n	800563c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00b      	beq.n	800563c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005628:	2204      	movs	r2, #4
 800562a:	409a      	lsls	r2, r3
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f043 0204 	orr.w	r2, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005640:	2210      	movs	r2, #16
 8005642:	409a      	lsls	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4013      	ands	r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d043      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d03c      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565e:	2210      	movs	r2, #16
 8005660:	409a      	lsls	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d018      	beq.n	80056a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d108      	bne.n	8005694 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d024      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
 8005692:	e01f      	b.n	80056d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4798      	blx	r3
 80056a4:	e016      	b.n	80056d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d107      	bne.n	80056c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0208 	bic.w	r2, r2, #8
 80056c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d8:	2220      	movs	r2, #32
 80056da:	409a      	lsls	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4013      	ands	r3, r2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 808e 	beq.w	8005802 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8086 	beq.w	8005802 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	2220      	movs	r2, #32
 80056fc:	409a      	lsls	r2, r3
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b05      	cmp	r3, #5
 800570c:	d136      	bne.n	800577c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0216 	bic.w	r2, r2, #22
 800571c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800572c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d103      	bne.n	800573e <HAL_DMA_IRQHandler+0x1da>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0208 	bic.w	r2, r2, #8
 800574c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005752:	223f      	movs	r2, #63	; 0x3f
 8005754:	409a      	lsls	r2, r3
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576e:	2b00      	cmp	r3, #0
 8005770:	d07d      	beq.n	800586e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
        }
        return;
 800577a:	e078      	b.n	800586e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01c      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579c:	2b00      	cmp	r3, #0
 800579e:	d030      	beq.n	8005802 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
 80057a8:	e02b      	b.n	8005802 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d027      	beq.n	8005802 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
 80057ba:	e022      	b.n	8005802 <HAL_DMA_IRQHandler+0x29e>
 80057bc:	20000010 	.word	0x20000010
 80057c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10f      	bne.n	80057f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0210 	bic.w	r2, r2, #16
 80057e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	2b00      	cmp	r3, #0
 8005808:	d032      	beq.n	8005870 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d022      	beq.n	800585c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2205      	movs	r2, #5
 800581a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0201 	bic.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3301      	adds	r3, #1
 8005832:	60bb      	str	r3, [r7, #8]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	429a      	cmp	r2, r3
 8005838:	d307      	bcc.n	800584a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f2      	bne.n	800582e <HAL_DMA_IRQHandler+0x2ca>
 8005848:	e000      	b.n	800584c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800584a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
 800586c:	e000      	b.n	8005870 <HAL_DMA_IRQHandler+0x30c>
        return;
 800586e:	bf00      	nop
    }
  }
}
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop

08005878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d108      	bne.n	80058b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058b6:	e007      	b.n	80058c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	3b10      	subs	r3, #16
 80058e4:	4a14      	ldr	r2, [pc, #80]	; (8005938 <DMA_CalcBaseAndBitshift+0x64>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058ee:	4a13      	ldr	r2, [pc, #76]	; (800593c <DMA_CalcBaseAndBitshift+0x68>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d909      	bls.n	8005916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	1d1a      	adds	r2, r3, #4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	659a      	str	r2, [r3, #88]	; 0x58
 8005914:	e007      	b.n	8005926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	aaaaaaab 	.word	0xaaaaaaab
 800593c:	0805303c 	.word	0x0805303c

08005940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d11f      	bne.n	800599a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d855      	bhi.n	8005a0c <DMA_CheckFifoParam+0xcc>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <DMA_CheckFifoParam+0x28>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005979 	.word	0x08005979
 800596c:	0800598b 	.word	0x0800598b
 8005970:	08005979 	.word	0x08005979
 8005974:	08005a0d 	.word	0x08005a0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d045      	beq.n	8005a10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005988:	e042      	b.n	8005a10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005992:	d13f      	bne.n	8005a14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005998:	e03c      	b.n	8005a14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a2:	d121      	bne.n	80059e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d836      	bhi.n	8005a18 <DMA_CheckFifoParam+0xd8>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <DMA_CheckFifoParam+0x70>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059c7 	.word	0x080059c7
 80059b8:	080059c1 	.word	0x080059c1
 80059bc:	080059d9 	.word	0x080059d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
      break;
 80059c4:	e02f      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d024      	beq.n	8005a1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d6:	e021      	b.n	8005a1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059e0:	d11e      	bne.n	8005a20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059e6:	e01b      	b.n	8005a20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d902      	bls.n	80059f4 <DMA_CheckFifoParam+0xb4>
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d003      	beq.n	80059fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059f2:	e018      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	73fb      	strb	r3, [r7, #15]
      break;
 80059f8:	e015      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
      break;
 8005a0a:	e00b      	b.n	8005a24 <DMA_CheckFifoParam+0xe4>
      break;
 8005a0c:	bf00      	nop
 8005a0e:	e00a      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      break;
 8005a10:	bf00      	nop
 8005a12:	e008      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      break;
 8005a14:	bf00      	nop
 8005a16:	e006      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      break;
 8005a18:	bf00      	nop
 8005a1a:	e004      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      break;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      break;   
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      break;
 8005a24:	bf00      	nop
    }
  } 
  
  return status; 
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b089      	sub	sp, #36	; 0x24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	e153      	b.n	8005cf8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a50:	2201      	movs	r2, #1
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4013      	ands	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	f040 8142 	bne.w	8005cf2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d00b      	beq.n	8005a8e <HAL_GPIO_Init+0x5a>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d007      	beq.n	8005a8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a82:	2b11      	cmp	r3, #17
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b12      	cmp	r3, #18
 8005a8c:	d130      	bne.n	8005af0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	2203      	movs	r2, #3
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 0201 	and.w	r2, r3, #1
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	2203      	movs	r2, #3
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4013      	ands	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0xfc>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b12      	cmp	r3, #18
 8005b2e:	d123      	bne.n	8005b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	08da      	lsrs	r2, r3, #3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3208      	adds	r2, #8
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	220f      	movs	r2, #15
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4013      	ands	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	08da      	lsrs	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3208      	adds	r2, #8
 8005b72:	69b9      	ldr	r1, [r7, #24]
 8005b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	2203      	movs	r2, #3
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f003 0203 	and.w	r2, r3, #3
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 809c 	beq.w	8005cf2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	4b53      	ldr	r3, [pc, #332]	; (8005d0c <HAL_GPIO_Init+0x2d8>)
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	4a52      	ldr	r2, [pc, #328]	; (8005d0c <HAL_GPIO_Init+0x2d8>)
 8005bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bca:	4b50      	ldr	r3, [pc, #320]	; (8005d0c <HAL_GPIO_Init+0x2d8>)
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bd6:	4a4e      	ldr	r2, [pc, #312]	; (8005d10 <HAL_GPIO_Init+0x2dc>)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	3302      	adds	r3, #2
 8005bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	220f      	movs	r2, #15
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a45      	ldr	r2, [pc, #276]	; (8005d14 <HAL_GPIO_Init+0x2e0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <HAL_GPIO_Init+0x1f6>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a44      	ldr	r2, [pc, #272]	; (8005d18 <HAL_GPIO_Init+0x2e4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00d      	beq.n	8005c26 <HAL_GPIO_Init+0x1f2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a43      	ldr	r2, [pc, #268]	; (8005d1c <HAL_GPIO_Init+0x2e8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d007      	beq.n	8005c22 <HAL_GPIO_Init+0x1ee>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a42      	ldr	r2, [pc, #264]	; (8005d20 <HAL_GPIO_Init+0x2ec>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d101      	bne.n	8005c1e <HAL_GPIO_Init+0x1ea>
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e006      	b.n	8005c2c <HAL_GPIO_Init+0x1f8>
 8005c1e:	2307      	movs	r3, #7
 8005c20:	e004      	b.n	8005c2c <HAL_GPIO_Init+0x1f8>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e002      	b.n	8005c2c <HAL_GPIO_Init+0x1f8>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <HAL_GPIO_Init+0x1f8>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	f002 0203 	and.w	r2, r2, #3
 8005c32:	0092      	lsls	r2, r2, #2
 8005c34:	4093      	lsls	r3, r2
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c3c:	4934      	ldr	r1, [pc, #208]	; (8005d10 <HAL_GPIO_Init+0x2dc>)
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	089b      	lsrs	r3, r3, #2
 8005c42:	3302      	adds	r3, #2
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c4a:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <HAL_GPIO_Init+0x2f0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4013      	ands	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c6e:	4a2d      	ldr	r2, [pc, #180]	; (8005d24 <HAL_GPIO_Init+0x2f0>)
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c74:	4b2b      	ldr	r3, [pc, #172]	; (8005d24 <HAL_GPIO_Init+0x2f0>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4013      	ands	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c98:	4a22      	ldr	r2, [pc, #136]	; (8005d24 <HAL_GPIO_Init+0x2f0>)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c9e:	4b21      	ldr	r3, [pc, #132]	; (8005d24 <HAL_GPIO_Init+0x2f0>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cc2:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <HAL_GPIO_Init+0x2f0>)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cc8:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <HAL_GPIO_Init+0x2f0>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cec:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <HAL_GPIO_Init+0x2f0>)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	2b0f      	cmp	r3, #15
 8005cfc:	f67f aea8 	bls.w	8005a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d00:	bf00      	nop
 8005d02:	3724      	adds	r7, #36	; 0x24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40013800 	.word	0x40013800
 8005d14:	40020000 	.word	0x40020000
 8005d18:	40020400 	.word	0x40020400
 8005d1c:	40020800 	.word	0x40020800
 8005d20:	40020c00 	.word	0x40020c00
 8005d24:	40013c00 	.word	0x40013c00

08005d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	887b      	ldrh	r3, [r7, #2]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e001      	b.n	8005d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	807b      	strh	r3, [r7, #2]
 8005d64:	4613      	mov	r3, r2
 8005d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d68:	787b      	ldrb	r3, [r7, #1]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d6e:	887a      	ldrh	r2, [r7, #2]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d74:	e003      	b.n	8005d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d76:	887b      	ldrh	r3, [r7, #2]
 8005d78:	041a      	lsls	r2, r3, #16
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	619a      	str	r2, [r3, #24]
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
	...

08005d8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e154      	b.n	8006048 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a98      	ldr	r2, [pc, #608]	; (8006018 <HAL_I2S_Init+0x28c>)
 8005db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7fd fd6d 	bl	8003898 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005dd4:	f023 030f 	bic.w	r3, r3, #15
 8005dd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2202      	movs	r2, #2
 8005de0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d06f      	beq.n	8005eca <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005df2:	2310      	movs	r3, #16
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	e001      	b.n	8005dfc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005df8:	2320      	movs	r3, #32
 8005dfa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d802      	bhi.n	8005e0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a83      	ldr	r2, [pc, #524]	; (800601c <HAL_I2S_Init+0x290>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d004      	beq.n	8005e1e <HAL_I2S_Init+0x92>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a81      	ldr	r2, [pc, #516]	; (8006020 <HAL_I2S_Init+0x294>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d104      	bne.n	8005e28 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8005e1e:	2001      	movs	r0, #1
 8005e20:	f002 faf4 	bl	800840c <HAL_RCCEx_GetPeriphCLKFreq>
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	e003      	b.n	8005e30 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005e28:	2002      	movs	r0, #2
 8005e2a:	f002 faef 	bl	800840c <HAL_RCCEx_GetPeriphCLKFreq>
 8005e2e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d125      	bne.n	8005e86 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d010      	beq.n	8005e64 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	461a      	mov	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5e:	3305      	adds	r3, #5
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	e01f      	b.n	8005ea4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	461a      	mov	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	3305      	adds	r3, #5
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	e00e      	b.n	8005ea4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	461a      	mov	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea0:	3305      	adds	r3, #5
 8005ea2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4a5f      	ldr	r2, [pc, #380]	; (8006024 <HAL_I2S_Init+0x298>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	08db      	lsrs	r3, r3, #3
 8005eae:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	e003      	b.n	8005ed2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d902      	bls.n	8005ede <HAL_I2S_Init+0x152>
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2bff      	cmp	r3, #255	; 0xff
 8005edc:	d907      	bls.n	8005eee <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	f043 0210 	orr.w	r2, r3, #16
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e0ac      	b.n	8006048 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	ea42 0103 	orr.w	r1, r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f0c:	f023 030f 	bic.w	r3, r3, #15
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6851      	ldr	r1, [r2, #4]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6892      	ldr	r2, [r2, #8]
 8005f18:	4311      	orrs	r1, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68d2      	ldr	r2, [r2, #12]
 8005f1e:	4311      	orrs	r1, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6992      	ldr	r2, [r2, #24]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f30:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b30      	cmp	r3, #48	; 0x30
 8005f38:	d003      	beq.n	8005f42 <HAL_I2S_Init+0x1b6>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2bb0      	cmp	r3, #176	; 0xb0
 8005f40:	d107      	bne.n	8005f52 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f50:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d16e      	bne.n	8006038 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a32      	ldr	r2, [pc, #200]	; (8006028 <HAL_I2S_Init+0x29c>)
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2d      	ldr	r2, [pc, #180]	; (800601c <HAL_I2S_Init+0x290>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d101      	bne.n	8005f6e <HAL_I2S_Init+0x1e2>
 8005f6a:	4b30      	ldr	r3, [pc, #192]	; (800602c <HAL_I2S_Init+0x2a0>)
 8005f6c:	e001      	b.n	8005f72 <HAL_I2S_Init+0x1e6>
 8005f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	4928      	ldr	r1, [pc, #160]	; (800601c <HAL_I2S_Init+0x290>)
 8005f7a:	428a      	cmp	r2, r1
 8005f7c:	d101      	bne.n	8005f82 <HAL_I2S_Init+0x1f6>
 8005f7e:	4a2b      	ldr	r2, [pc, #172]	; (800602c <HAL_I2S_Init+0x2a0>)
 8005f80:	e001      	b.n	8005f86 <HAL_I2S_Init+0x1fa>
 8005f82:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005f86:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f8a:	f023 030f 	bic.w	r3, r3, #15
 8005f8e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a21      	ldr	r2, [pc, #132]	; (800601c <HAL_I2S_Init+0x290>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <HAL_I2S_Init+0x212>
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <HAL_I2S_Init+0x2a0>)
 8005f9c:	e001      	b.n	8005fa2 <HAL_I2S_Init+0x216>
 8005f9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1c      	ldr	r2, [pc, #112]	; (800601c <HAL_I2S_Init+0x290>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d101      	bne.n	8005fb4 <HAL_I2S_Init+0x228>
 8005fb0:	4b1e      	ldr	r3, [pc, #120]	; (800602c <HAL_I2S_Init+0x2a0>)
 8005fb2:	e001      	b.n	8005fb8 <HAL_I2S_Init+0x22c>
 8005fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc4:	d003      	beq.n	8005fce <HAL_I2S_Init+0x242>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	e001      	b.n	8005fda <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	b299      	uxth	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005ff0:	4303      	orrs	r3, r0
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	897b      	ldrh	r3, [r7, #10]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	b29b      	uxth	r3, r3
 8006002:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006006:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a03      	ldr	r2, [pc, #12]	; (800601c <HAL_I2S_Init+0x290>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d10e      	bne.n	8006030 <HAL_I2S_Init+0x2a4>
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_I2S_Init+0x2a0>)
 8006014:	e00e      	b.n	8006034 <HAL_I2S_Init+0x2a8>
 8006016:	bf00      	nop
 8006018:	0800622d 	.word	0x0800622d
 800601c:	40003800 	.word	0x40003800
 8006020:	40003c00 	.word	0x40003c00
 8006024:	cccccccd 	.word	0xcccccccd
 8006028:	08006341 	.word	0x08006341
 800602c:	40003400 	.word	0x40003400
 8006030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006034:	897a      	ldrh	r2, [r7, #10]
 8006036:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3720      	adds	r7, #32
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <HAL_I2S_Transmit_IT+0x1a>
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_I2S_Transmit_IT+0x1e>
  {
    return  HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e05b      	b.n	8006126 <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d101      	bne.n	800607e <HAL_I2S_Transmit_IT+0x2e>
 800607a:	2302      	movs	r3, #2
 800607c:	e053      	b.n	8006126 <HAL_I2S_Transmit_IT+0xd6>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	d005      	beq.n	800609e <HAL_I2S_Transmit_IT+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
 800609c:	e043      	b.n	8006126 <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2203      	movs	r2, #3
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d002      	beq.n	80060ca <HAL_I2S_Transmit_IT+0x7a>
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d10a      	bne.n	80060e0 <HAL_I2S_Transmit_IT+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060de:	e005      	b.n	80060ec <HAL_I2S_Transmit_IT+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	88fa      	ldrh	r2, [r7, #6]
 80060e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	88fa      	ldrh	r2, [r7, #6]
 80060ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80060fa:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	d007      	beq.n	800611c <HAL_I2S_Transmit_IT+0xcc>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69da      	ldr	r2, [r3, #28]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800611a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	881a      	ldrh	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	1c9a      	adds	r2, r3, #2
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10e      	bne.n	80061c6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7fd fa27 	bl	8003614 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	b292      	uxth	r2, r2
 80061e2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	1c9a      	adds	r2, r3, #2
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10e      	bne.n	8006224 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006214:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ff93 	bl	800614a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b04      	cmp	r3, #4
 8006246:	d13a      	bne.n	80062be <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b01      	cmp	r3, #1
 8006250:	d109      	bne.n	8006266 <I2S_IRQHandler+0x3a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d102      	bne.n	8006266 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ffb4 	bl	80061ce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	d126      	bne.n	80062be <I2S_IRQHandler+0x92>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b20      	cmp	r3, #32
 800627c:	d11f      	bne.n	80062be <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800628c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b0:	f043 0202 	orr.w	r2, r3, #2
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ff50 	bl	800615e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d136      	bne.n	8006338 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d109      	bne.n	80062e8 <I2S_IRQHandler+0xbc>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b80      	cmp	r3, #128	; 0x80
 80062e0:	d102      	bne.n	80062e8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff ff45 	bl	8006172 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d122      	bne.n	8006338 <I2S_IRQHandler+0x10c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d11b      	bne.n	8006338 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800630e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	f043 0204 	orr.w	r2, r3, #4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff ff13 	bl	800615e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006338:	bf00      	nop
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4aa2      	ldr	r2, [pc, #648]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800635a:	4ba2      	ldr	r3, [pc, #648]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800635c:	e001      	b.n	8006362 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800635e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a9b      	ldr	r2, [pc, #620]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d101      	bne.n	800637c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006378:	4b9a      	ldr	r3, [pc, #616]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800637a:	e001      	b.n	8006380 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800637c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800638c:	d004      	beq.n	8006398 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 8099 	bne.w	80064ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d107      	bne.n	80063b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f925 	bl	80065fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d107      	bne.n	80063cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f9c8 	bl	800675c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d13a      	bne.n	800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d035      	beq.n	800644c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a7e      	ldr	r2, [pc, #504]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d101      	bne.n	80063ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063ea:	4b7e      	ldr	r3, [pc, #504]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063ec:	e001      	b.n	80063f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80063ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4979      	ldr	r1, [pc, #484]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063fa:	428b      	cmp	r3, r1
 80063fc:	d101      	bne.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80063fe:	4b79      	ldr	r3, [pc, #484]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006400:	e001      	b.n	8006406 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006406:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800640a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800641a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	f043 0202 	orr.w	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fe89 	bl	800615e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b08      	cmp	r3, #8
 8006454:	f040 80be 	bne.w	80065d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80b8 	beq.w	80065d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006472:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a59      	ldr	r2, [pc, #356]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d101      	bne.n	8006482 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800647e:	4b59      	ldr	r3, [pc, #356]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006480:	e001      	b.n	8006486 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4954      	ldr	r1, [pc, #336]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800648e:	428b      	cmp	r3, r1
 8006490:	d101      	bne.n	8006496 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006492:	4b54      	ldr	r3, [pc, #336]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006494:	e001      	b.n	800649a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800649a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800649e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064a0:	2300      	movs	r3, #0
 80064a2:	60bb      	str	r3, [r7, #8]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	60bb      	str	r3, [r7, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	f043 0204 	orr.w	r2, r3, #4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fe4b 	bl	800615e <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064c8:	e084      	b.n	80065d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d107      	bne.n	80064e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f8be 	bl	8006660 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d107      	bne.n	80064fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f8fd 	bl	80066f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d12f      	bne.n	8006568 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d02a      	beq.n	8006568 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006520:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2e      	ldr	r2, [pc, #184]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d101      	bne.n	8006530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800652c:	4b2d      	ldr	r3, [pc, #180]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800652e:	e001      	b.n	8006534 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4929      	ldr	r1, [pc, #164]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800653c:	428b      	cmp	r3, r1
 800653e:	d101      	bne.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006540:	4b28      	ldr	r3, [pc, #160]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006542:	e001      	b.n	8006548 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006548:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800654c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655a:	f043 0202 	orr.w	r2, r3, #2
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fdfb 	bl	800615e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b08      	cmp	r3, #8
 8006570:	d131      	bne.n	80065d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d02c      	beq.n	80065d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a17      	ldr	r2, [pc, #92]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d101      	bne.n	800658a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006586:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006588:	e001      	b.n	800658e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800658a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4912      	ldr	r1, [pc, #72]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006596:	428b      	cmp	r3, r1
 8006598:	d101      	bne.n	800659e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800659a:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800659c:	e001      	b.n	80065a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800659e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065b6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c4:	f043 0204 	orr.w	r2, r3, #4
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff fdc6 	bl	800615e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065d2:	e000      	b.n	80065d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065d4:	bf00      	nop
}
 80065d6:	bf00      	nop
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40003800 	.word	0x40003800
 80065e4:	40003400 	.word	0x40003400

080065e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	1c99      	adds	r1, r3, #2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6251      	str	r1, [r2, #36]	; 0x24
 800660e:	881a      	ldrh	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d113      	bne.n	8006656 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800663c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff ffc9 	bl	80065e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	1c99      	adds	r1, r3, #2
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6251      	str	r1, [r2, #36]	; 0x24
 8006672:	8819      	ldrh	r1, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1d      	ldr	r2, [pc, #116]	; (80066f0 <I2SEx_TxISR_I2SExt+0x90>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <I2SEx_TxISR_I2SExt+0x22>
 800667e:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <I2SEx_TxISR_I2SExt+0x94>)
 8006680:	e001      	b.n	8006686 <I2SEx_TxISR_I2SExt+0x26>
 8006682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006686:	460a      	mov	r2, r1
 8006688:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d121      	bne.n	80066e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <I2SEx_TxISR_I2SExt+0x90>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d101      	bne.n	80066b0 <I2SEx_TxISR_I2SExt+0x50>
 80066ac:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <I2SEx_TxISR_I2SExt+0x94>)
 80066ae:	e001      	b.n	80066b4 <I2SEx_TxISR_I2SExt+0x54>
 80066b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	490d      	ldr	r1, [pc, #52]	; (80066f0 <I2SEx_TxISR_I2SExt+0x90>)
 80066bc:	428b      	cmp	r3, r1
 80066be:	d101      	bne.n	80066c4 <I2SEx_TxISR_I2SExt+0x64>
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <I2SEx_TxISR_I2SExt+0x94>)
 80066c2:	e001      	b.n	80066c8 <I2SEx_TxISR_I2SExt+0x68>
 80066c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff ff81 	bl	80065e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	40003800 	.word	0x40003800
 80066f4:	40003400 	.word	0x40003400

080066f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68d8      	ldr	r0, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	1c99      	adds	r1, r3, #2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006710:	b282      	uxth	r2, r0
 8006712:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d113      	bne.n	8006754 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800673a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff ff4a 	bl	80065e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a20      	ldr	r2, [pc, #128]	; (80067ec <I2SEx_RxISR_I2SExt+0x90>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d101      	bne.n	8006772 <I2SEx_RxISR_I2SExt+0x16>
 800676e:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <I2SEx_RxISR_I2SExt+0x94>)
 8006770:	e001      	b.n	8006776 <I2SEx_RxISR_I2SExt+0x1a>
 8006772:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006776:	68d8      	ldr	r0, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	1c99      	adds	r1, r3, #2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006782:	b282      	uxth	r2, r0
 8006784:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d121      	bne.n	80067e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a12      	ldr	r2, [pc, #72]	; (80067ec <I2SEx_RxISR_I2SExt+0x90>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d101      	bne.n	80067ac <I2SEx_RxISR_I2SExt+0x50>
 80067a8:	4b11      	ldr	r3, [pc, #68]	; (80067f0 <I2SEx_RxISR_I2SExt+0x94>)
 80067aa:	e001      	b.n	80067b0 <I2SEx_RxISR_I2SExt+0x54>
 80067ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	490d      	ldr	r1, [pc, #52]	; (80067ec <I2SEx_RxISR_I2SExt+0x90>)
 80067b8:	428b      	cmp	r3, r1
 80067ba:	d101      	bne.n	80067c0 <I2SEx_RxISR_I2SExt+0x64>
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <I2SEx_RxISR_I2SExt+0x94>)
 80067be:	e001      	b.n	80067c4 <I2SEx_RxISR_I2SExt+0x68>
 80067c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff03 	bl	80065e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	40003800 	.word	0x40003800
 80067f0:	40003400 	.word	0x40003400

080067f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f6:	b08f      	sub	sp, #60	; 0x3c
 80067f8:	af0a      	add	r7, sp, #40	; 0x28
 80067fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e116      	b.n	8006a34 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d106      	bne.n	8006826 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f00e f881 	bl	8014928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2203      	movs	r2, #3
 800682a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4618      	mov	r0, r3
 8006846:	f005 fdc2 	bl	800c3ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	687e      	ldr	r6, [r7, #4]
 8006852:	466d      	mov	r5, sp
 8006854:	f106 0410 	add.w	r4, r6, #16
 8006858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800685a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800685c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800685e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006860:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006864:	e885 0003 	stmia.w	r5, {r0, r1}
 8006868:	1d33      	adds	r3, r6, #4
 800686a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800686c:	6838      	ldr	r0, [r7, #0]
 800686e:	f005 fc99 	bl	800c1a4 <USB_CoreInit>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e0d7      	b.n	8006a34 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f005 fdb0 	bl	800c3f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]
 8006894:	e04a      	b.n	800692c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	333d      	adds	r3, #61	; 0x3d
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068aa:	7bfa      	ldrb	r2, [r7, #15]
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	333c      	adds	r3, #60	; 0x3c
 80068ba:	7bfa      	ldrb	r2, [r7, #15]
 80068bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068be:	7bfa      	ldrb	r2, [r7, #15]
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	b298      	uxth	r0, r3
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	3342      	adds	r3, #66	; 0x42
 80068d2:	4602      	mov	r2, r0
 80068d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068d6:	7bfa      	ldrb	r2, [r7, #15]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	333f      	adds	r3, #63	; 0x3f
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068ea:	7bfa      	ldrb	r2, [r7, #15]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	3344      	adds	r3, #68	; 0x44
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068fe:	7bfa      	ldrb	r2, [r7, #15]
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	3348      	adds	r3, #72	; 0x48
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006912:	7bfa      	ldrb	r2, [r7, #15]
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	1a9b      	subs	r3, r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	3350      	adds	r3, #80	; 0x50
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	3301      	adds	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	7bfa      	ldrb	r2, [r7, #15]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d3af      	bcc.n	8006896 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
 800693a:	e044      	b.n	80069c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800693c:	7bfa      	ldrb	r2, [r7, #15]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006952:	7bfa      	ldrb	r2, [r7, #15]
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	440b      	add	r3, r1
 8006960:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006964:	7bfa      	ldrb	r2, [r7, #15]
 8006966:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006968:	7bfa      	ldrb	r2, [r7, #15]
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800697e:	7bfa      	ldrb	r2, [r7, #15]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006994:	7bfa      	ldrb	r2, [r7, #15]
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069aa:	7bfa      	ldrb	r2, [r7, #15]
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	3301      	adds	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d3b5      	bcc.n	800693c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	687e      	ldr	r6, [r7, #4]
 80069d8:	466d      	mov	r5, sp
 80069da:	f106 0410 	add.w	r4, r6, #16
 80069de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80069ee:	1d33      	adds	r3, r6, #4
 80069f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069f2:	6838      	ldr	r0, [r7, #0]
 80069f4:	f005 fd26 	bl	800c444 <USB_DevInit>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e014      	b.n	8006a34 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d102      	bne.n	8006a28 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f8f8 	bl	8007c18 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f006 fd61 	bl	800d4f4 <USB_DevDisconnect>

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_PCD_Start+0x1c>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e020      	b.n	8006a9a <HAL_PCD_Start+0x5e>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d109      	bne.n	8006a7c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d005      	beq.n	8006a7c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f005 fc93 	bl	800c3ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f006 fd11 	bl	800d4b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_PCD_Stop+0x1c>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e026      	b.n	8006b0c <HAL_PCD_Stop+0x6a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f005 fc7f 	bl	800c3ce <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f006 fd0d 	bl	800d4f4 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2110      	movs	r1, #16
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f005 fe0d 	bl	800c700 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d109      	bne.n	8006b02 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d005      	beq.n	8006b02 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b08d      	sub	sp, #52	; 0x34
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f006 fd96 	bl	800d65c <USB_GetMode>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 83ca 	bne.w	80072cc <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f006 fcfa 	bl	800d536 <USB_ReadInterrupts>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 83c0 	beq.w	80072ca <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f006 fcf1 	bl	800d536 <USB_ReadInterrupts>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d107      	bne.n	8006b6e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f002 0202 	and.w	r2, r2, #2
 8006b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f006 fcdf 	bl	800d536 <USB_ReadInterrupts>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f003 0310 	and.w	r3, r3, #16
 8006b7e:	2b10      	cmp	r3, #16
 8006b80:	d161      	bne.n	8006c46 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0210 	bic.w	r2, r2, #16
 8006b90:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	4413      	add	r3, r2
 8006bae:	3304      	adds	r3, #4
 8006bb0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	0c5b      	lsrs	r3, r3, #17
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d124      	bne.n	8006c08 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d035      	beq.n	8006c36 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	091b      	lsrs	r3, r3, #4
 8006bd2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6a38      	ldr	r0, [r7, #32]
 8006bde:	f006 fb45 	bl	800d26c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	091b      	lsrs	r3, r3, #4
 8006bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bee:	441a      	add	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	091b      	lsrs	r3, r3, #4
 8006bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c00:	441a      	add	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	619a      	str	r2, [r3, #24]
 8006c06:	e016      	b.n	8006c36 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	0c5b      	lsrs	r3, r3, #17
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	2b06      	cmp	r3, #6
 8006c12:	d110      	bne.n	8006c36 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c1a:	2208      	movs	r2, #8
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6a38      	ldr	r0, [r7, #32]
 8006c20:	f006 fb24 	bl	800d26c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	091b      	lsrs	r3, r3, #4
 8006c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c30:	441a      	add	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0210 	orr.w	r2, r2, #16
 8006c44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f006 fc73 	bl	800d536 <USB_ReadInterrupts>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c5a:	d16e      	bne.n	8006d3a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f006 fc79 	bl	800d55c <USB_ReadDevAllOutEpInterrupt>
 8006c6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006c6c:	e062      	b.n	8006d34 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d057      	beq.n	8006d28 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f006 fc9e 	bl	800d5c4 <USB_ReadDevOutEPInterrupt>
 8006c88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00c      	beq.n	8006cae <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fe0b 	bl	80078c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f003 0308 	and.w	r3, r3, #8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00c      	beq.n	8006cd2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 ff05 	bl	8007adc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f003 0310 	and.w	r3, r3, #16
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	461a      	mov	r2, r3
 8006cea:	2310      	movs	r3, #16
 8006cec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	461a      	mov	r2, r3
 8006d06:	2320      	movs	r3, #32
 8006d08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d20:	461a      	mov	r2, r3
 8006d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d199      	bne.n	8006c6e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f006 fbf9 	bl	800d536 <USB_ReadInterrupts>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d4e:	f040 80c0 	bne.w	8006ed2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f006 fc1a 	bl	800d590 <USB_ReadDevAllInEpInterrupt>
 8006d5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006d62:	e0b2      	b.n	8006eca <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80a7 	beq.w	8006ebe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	4611      	mov	r1, r2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f006 fc40 	bl	800d600 <USB_ReadDevInEPInterrupt>
 8006d80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d057      	beq.n	8006e3c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	2201      	movs	r2, #1
 8006d94:	fa02 f303 	lsl.w	r3, r2, r3
 8006d98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	69f9      	ldr	r1, [r7, #28]
 8006da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dac:	4013      	ands	r3, r2
 8006dae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d132      	bne.n	8006e30 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3348      	adds	r3, #72	; 0x48
 8006dda:	6819      	ldr	r1, [r3, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de0:	4613      	mov	r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4403      	add	r3, r0
 8006dea:	3344      	adds	r3, #68	; 0x44
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4419      	add	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df4:	4613      	mov	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4403      	add	r3, r0
 8006dfe:	3348      	adds	r3, #72	; 0x48
 8006e00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d113      	bne.n	8006e30 <HAL_PCD_IRQHandler+0x31c>
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	3350      	adds	r3, #80	; 0x50
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e28:	461a      	mov	r2, r3
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	f006 fc48 	bl	800d6c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f00d fdf7 	bl	8014a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d008      	beq.n	8006e58 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e52:	461a      	mov	r2, r3
 8006e54:	2308      	movs	r3, #8
 8006e56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6e:	461a      	mov	r2, r3
 8006e70:	2310      	movs	r3, #16
 8006e72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fc75 	bl	80077a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f47f af49 	bne.w	8006d64 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f006 fb2d 	bl	800d536 <USB_ReadInterrupts>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee6:	d122      	bne.n	8006f2e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d108      	bne.n	8006f18 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f0e:	2100      	movs	r1, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fea5 	bl	8007c60 <HAL_PCDEx_LPM_Callback>
 8006f16:	e002      	b.n	8006f1e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f00d fdf3 	bl	8014b04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695a      	ldr	r2, [r3, #20]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f006 faff 	bl	800d536 <USB_ReadInterrupts>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f42:	d112      	bne.n	8006f6a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d102      	bne.n	8006f5a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f00d fdaf 	bl	8014ab8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695a      	ldr	r2, [r3, #20]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006f68:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f006 fae1 	bl	800d536 <USB_ReadInterrupts>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f7e:	d121      	bne.n	8006fc4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006f8e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d111      	bne.n	8006fbe <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	089b      	lsrs	r3, r3, #2
 8006faa:	f003 020f 	and.w	r2, r3, #15
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fe52 	bl	8007c60 <HAL_PCDEx_LPM_Callback>
 8006fbc:	e002      	b.n	8006fc4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f00d fd7a 	bl	8014ab8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f006 fab4 	bl	800d536 <USB_ReadInterrupts>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd8:	f040 80c7 	bne.w	800716a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2110      	movs	r1, #16
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f005 fb82 	bl	800c700 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007000:	e056      	b.n	80070b0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	461a      	mov	r2, r3
 8007010:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007014:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007030:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007034:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007046:	0151      	lsls	r1, r2, #5
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	440a      	add	r2, r1
 800704c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007050:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007054:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	4413      	add	r3, r2
 800705e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007062:	461a      	mov	r2, r3
 8007064:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007068:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007088:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800709a:	0151      	lsls	r1, r2, #5
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	440a      	add	r2, r1
 80070a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	3301      	adds	r3, #1
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d3a3      	bcc.n	8007002 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80070cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d016      	beq.n	8007104 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e6:	f043 030b 	orr.w	r3, r3, #11
 80070ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070fc:	f043 030b 	orr.w	r3, r3, #11
 8007100:	6453      	str	r3, [r2, #68]	; 0x44
 8007102:	e015      	b.n	8007130 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007112:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007116:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800711a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800712a:	f043 030b 	orr.w	r3, r3, #11
 800712e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007142:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007154:	461a      	mov	r2, r3
 8007156:	f006 fab3 	bl	800d6c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695a      	ldr	r2, [r3, #20]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f006 f9e1 	bl	800d536 <USB_ReadInterrupts>
 8007174:	4603      	mov	r3, r0
 8007176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800717a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717e:	d124      	bne.n	80071ca <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	f006 fa77 	bl	800d678 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4618      	mov	r0, r3
 8007190:	f005 fb17 	bl	800c7c2 <USB_GetDevSpeed>
 8007194:	4603      	mov	r3, r0
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681c      	ldr	r4, [r3, #0]
 80071a0:	f000 ff32 	bl	8008008 <HAL_RCC_GetHCLKFreq>
 80071a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	4620      	mov	r0, r4
 80071b0:	f005 f85a 	bl	800c268 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f00d fc60 	bl	8014a7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695a      	ldr	r2, [r3, #20]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80071c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f006 f9b1 	bl	800d536 <USB_ReadInterrupts>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d10a      	bne.n	80071f4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f00d fc3d 	bl	8014a5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695a      	ldr	r2, [r3, #20]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f002 0208 	and.w	r2, r2, #8
 80071f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f006 f99c 	bl	800d536 <USB_ReadInterrupts>
 80071fe:	4603      	mov	r3, r0
 8007200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007208:	d10f      	bne.n	800722a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	b2db      	uxtb	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f00d fc95 	bl	8014b44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695a      	ldr	r2, [r3, #20]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f006 f981 	bl	800d536 <USB_ReadInterrupts>
 8007234:	4603      	mov	r3, r0
 8007236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800723a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800723e:	d10f      	bne.n	8007260 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	b2db      	uxtb	r3, r3
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f00d fc68 	bl	8014b20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800725e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f006 f966 	bl	800d536 <USB_ReadInterrupts>
 800726a:	4603      	mov	r3, r0
 800726c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007274:	d10a      	bne.n	800728c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f00d fc76 	bl	8014b68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695a      	ldr	r2, [r3, #20]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800728a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f006 f950 	bl	800d536 <USB_ReadInterrupts>
 8007296:	4603      	mov	r3, r0
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b04      	cmp	r3, #4
 800729e:	d115      	bne.n	80072cc <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f00d fc66 	bl	8014b84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6859      	ldr	r1, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	605a      	str	r2, [r3, #4]
 80072c8:	e000      	b.n	80072cc <HAL_PCD_IRQHandler+0x7b8>
      return;
 80072ca:	bf00      	nop
    }
  }
}
 80072cc:	3734      	adds	r7, #52	; 0x34
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd90      	pop	{r4, r7, pc}

080072d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	460b      	mov	r3, r1
 80072dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_PCD_SetAddress+0x1a>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e013      	b.n	8007314 <HAL_PCD_SetAddress+0x42>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	78fa      	ldrb	r2, [r7, #3]
 80072f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	78fa      	ldrb	r2, [r7, #3]
 8007302:	4611      	mov	r1, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f006 f8ae 	bl	800d466 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	461a      	mov	r2, r3
 800732a:	4603      	mov	r3, r0
 800732c:	70fb      	strb	r3, [r7, #3]
 800732e:	460b      	mov	r3, r1
 8007330:	803b      	strh	r3, [r7, #0]
 8007332:	4613      	mov	r3, r2
 8007334:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800733a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800733e:	2b00      	cmp	r3, #0
 8007340:	da0f      	bge.n	8007362 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	f003 020f 	and.w	r2, r3, #15
 8007348:	4613      	mov	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	3338      	adds	r3, #56	; 0x38
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	4413      	add	r3, r2
 8007356:	3304      	adds	r3, #4
 8007358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	705a      	strb	r2, [r3, #1]
 8007360:	e00f      	b.n	8007382 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	f003 020f 	and.w	r2, r3, #15
 8007368:	4613      	mov	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	3304      	adds	r3, #4
 800737a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	b2da      	uxtb	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800738e:	883a      	ldrh	r2, [r7, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	78ba      	ldrb	r2, [r7, #2]
 8007398:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	785b      	ldrb	r3, [r3, #1]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d004      	beq.n	80073ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80073ac:	78bb      	ldrb	r3, [r7, #2]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d102      	bne.n	80073b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_PCD_EP_Open+0xaa>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e00e      	b.n	80073e4 <HAL_PCD_EP_Open+0xc8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f005 fa19 	bl	800c80c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80073e2:	7afb      	ldrb	r3, [r7, #11]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80073f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da0f      	bge.n	8007420 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	f003 020f 	and.w	r2, r3, #15
 8007406:	4613      	mov	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	3338      	adds	r3, #56	; 0x38
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	4413      	add	r3, r2
 8007414:	3304      	adds	r3, #4
 8007416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	705a      	strb	r2, [r3, #1]
 800741e:	e00f      	b.n	8007440 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	f003 020f 	and.w	r2, r3, #15
 8007426:	4613      	mov	r3, r2
 8007428:	00db      	lsls	r3, r3, #3
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	4413      	add	r3, r2
 8007436:	3304      	adds	r3, #4
 8007438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	b2da      	uxtb	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_PCD_EP_Close+0x6e>
 8007456:	2302      	movs	r3, #2
 8007458:	e00e      	b.n	8007478 <HAL_PCD_EP_Close+0x8c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	4618      	mov	r0, r3
 800746a:	f005 fa57 	bl	800c91c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	460b      	mov	r3, r1
 800748e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007490:	7afb      	ldrb	r3, [r7, #11]
 8007492:	f003 020f 	and.w	r2, r3, #15
 8007496:	4613      	mov	r3, r2
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	3304      	adds	r3, #4
 80074a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2200      	movs	r2, #0
 80074c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074c2:	7afb      	ldrb	r3, [r7, #11]
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d102      	bne.n	80074dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074dc:	7afb      	ldrb	r3, [r7, #11]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	f005 fd32 	bl	800cf5c <USB_EP0StartXfer>
 80074f8:	e008      	b.n	800750c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	f005 fae4 	bl	800cad4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	460b      	mov	r3, r1
 8007520:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	f003 020f 	and.w	r2, r3, #15
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	1a9b      	subs	r3, r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007538:	681b      	ldr	r3, [r3, #0]
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b086      	sub	sp, #24
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
 8007552:	460b      	mov	r3, r1
 8007554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007556:	7afb      	ldrb	r3, [r7, #11]
 8007558:	f003 020f 	and.w	r2, r3, #15
 800755c:	4613      	mov	r3, r2
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	1a9b      	subs	r3, r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	3338      	adds	r3, #56	; 0x38
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	3304      	adds	r3, #4
 800756c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2200      	movs	r2, #0
 800757e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2201      	movs	r2, #1
 8007584:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007586:	7afb      	ldrb	r3, [r7, #11]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	b2da      	uxtb	r2, r3
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d102      	bne.n	80075a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	6979      	ldr	r1, [r7, #20]
 80075b8:	f005 fcd0 	bl	800cf5c <USB_EP0StartXfer>
 80075bc:	e008      	b.n	80075d0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	6979      	ldr	r1, [r7, #20]
 80075cc:	f005 fa82 	bl	800cad4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075e6:	78fb      	ldrb	r3, [r7, #3]
 80075e8:	f003 020f 	and.w	r2, r3, #15
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d901      	bls.n	80075f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e050      	b.n	800769a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da0f      	bge.n	8007620 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	4613      	mov	r3, r2
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	1a9b      	subs	r3, r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	3338      	adds	r3, #56	; 0x38
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	4413      	add	r3, r2
 8007614:	3304      	adds	r3, #4
 8007616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	705a      	strb	r2, [r3, #1]
 800761e:	e00d      	b.n	800763c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	4613      	mov	r3, r2
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	4413      	add	r3, r2
 8007632:	3304      	adds	r3, #4
 8007634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2201      	movs	r2, #1
 8007640:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	f003 030f 	and.w	r3, r3, #15
 8007648:	b2da      	uxtb	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_PCD_EP_SetStall+0x82>
 8007658:	2302      	movs	r3, #2
 800765a:	e01e      	b.n	800769a <HAL_PCD_EP_SetStall+0xc0>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68f9      	ldr	r1, [r7, #12]
 800766a:	4618      	mov	r0, r3
 800766c:	f005 fe27 	bl	800d2be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	f003 030f 	and.w	r3, r3, #15
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	b2d9      	uxtb	r1, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800768a:	461a      	mov	r2, r3
 800768c:	f006 f818 	bl	800d6c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	f003 020f 	and.w	r2, r3, #15
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d901      	bls.n	80076c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e042      	b.n	8007746 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	da0f      	bge.n	80076e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	f003 020f 	and.w	r2, r3, #15
 80076ce:	4613      	mov	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	1a9b      	subs	r3, r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	3338      	adds	r3, #56	; 0x38
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	3304      	adds	r3, #4
 80076de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	705a      	strb	r2, [r3, #1]
 80076e6:	e00f      	b.n	8007708 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	f003 020f 	and.w	r2, r3, #15
 80076ee:	4613      	mov	r3, r2
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	3304      	adds	r3, #4
 8007700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	b2da      	uxtb	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_PCD_EP_ClrStall+0x86>
 8007724:	2302      	movs	r3, #2
 8007726:	e00e      	b.n	8007746 <HAL_PCD_EP_ClrStall+0xa4>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68f9      	ldr	r1, [r7, #12]
 8007736:	4618      	mov	r0, r3
 8007738:	f005 fe2f 	bl	800d39a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_PCD_EP_Flush+0x1a>
 8007764:	2302      	movs	r3, #2
 8007766:	e01b      	b.n	80077a0 <HAL_PCD_EP_Flush+0x52>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007774:	2b00      	cmp	r3, #0
 8007776:	da09      	bge.n	800778c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f004 ffbb 	bl	800c700 <USB_FlushTxFifo>
 800778a:	e004      	b.n	8007796 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4618      	mov	r0, r3
 8007792:	f004 ffdb 	bl	800c74c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	4613      	mov	r3, r2
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	3338      	adds	r3, #56	; 0x38
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	3304      	adds	r3, #4
 80077ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	699a      	ldr	r2, [r3, #24]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d901      	bls.n	80077e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e06c      	b.n	80078ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	695a      	ldr	r2, [r3, #20]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d902      	bls.n	80077fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	3303      	adds	r3, #3
 8007800:	089b      	lsrs	r3, r3, #2
 8007802:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007804:	e02b      	b.n	800785e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	695a      	ldr	r2, [r3, #20]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	429a      	cmp	r2, r3
 800781a:	d902      	bls.n	8007822 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	3303      	adds	r3, #3
 8007826:	089b      	lsrs	r3, r3, #2
 8007828:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	68d9      	ldr	r1, [r3, #12]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	b2da      	uxtb	r2, r3
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800783a:	b2db      	uxtb	r3, r3
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4603      	mov	r3, r0
 8007840:	6978      	ldr	r0, [r7, #20]
 8007842:	f005 fcde 	bl	800d202 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	441a      	add	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	441a      	add	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	b29b      	uxth	r3, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	429a      	cmp	r2, r3
 8007872:	d809      	bhi.n	8007888 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800787c:	429a      	cmp	r2, r3
 800787e:	d203      	bcs.n	8007888 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1be      	bne.n	8007806 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	695a      	ldr	r2, [r3, #20]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	429a      	cmp	r2, r3
 8007892:	d811      	bhi.n	80078b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	2201      	movs	r2, #1
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	6939      	ldr	r1, [r7, #16]
 80078b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078b4:	4013      	ands	r3, r2
 80078b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	333c      	adds	r3, #60	; 0x3c
 80078dc:	3304      	adds	r3, #4
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	f040 80a0 	bne.w	8007a3c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f003 0308 	and.w	r3, r3, #8
 8007902:	2b00      	cmp	r3, #0
 8007904:	d015      	beq.n	8007932 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4a72      	ldr	r2, [pc, #456]	; (8007ad4 <PCD_EP_OutXfrComplete_int+0x210>)
 800790a:	4293      	cmp	r3, r2
 800790c:	f240 80dd 	bls.w	8007aca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 80d7 	beq.w	8007aca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007928:	461a      	mov	r2, r3
 800792a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792e:	6093      	str	r3, [r2, #8]
 8007930:	e0cb      	b.n	8007aca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b00      	cmp	r3, #0
 800793a:	d009      	beq.n	8007950 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007948:	461a      	mov	r2, r3
 800794a:	2320      	movs	r3, #32
 800794c:	6093      	str	r3, [r2, #8]
 800794e:	e0bc      	b.n	8007aca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 80b7 	bne.w	8007aca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4a5d      	ldr	r2, [pc, #372]	; (8007ad4 <PCD_EP_OutXfrComplete_int+0x210>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d90f      	bls.n	8007984 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797a:	461a      	mov	r2, r3
 800797c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007980:	6093      	str	r3, [r2, #8]
 8007982:	e0a2      	b.n	8007aca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	4613      	mov	r3, r2
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007996:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	0159      	lsls	r1, r3, #5
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	440b      	add	r3, r1
 80079a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80079aa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4613      	mov	r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4403      	add	r3, r0
 80079ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80079be:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079d2:	6819      	ldr	r1, [r3, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	4613      	mov	r3, r2
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	1a9b      	subs	r3, r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4403      	add	r3, r0
 80079e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4419      	add	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	4613      	mov	r3, r2
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	1a9b      	subs	r3, r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4403      	add	r3, r0
 80079f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079fc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d114      	bne.n	8007a2e <PCD_EP_OutXfrComplete_int+0x16a>
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d108      	bne.n	8007a2e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a26:	461a      	mov	r2, r3
 8007a28:	2101      	movs	r1, #1
 8007a2a:	f005 fe49 	bl	800d6c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f00c ffdd 	bl	80149f4 <HAL_PCD_DataOutStageCallback>
 8007a3a:	e046      	b.n	8007aca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4a26      	ldr	r2, [pc, #152]	; (8007ad8 <PCD_EP_OutXfrComplete_int+0x214>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d124      	bne.n	8007a8e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a60:	6093      	str	r3, [r2, #8]
 8007a62:	e032      	b.n	8007aca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d008      	beq.n	8007a80 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	2320      	movs	r3, #32
 8007a7e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f00c ffb4 	bl	80149f4 <HAL_PCD_DataOutStageCallback>
 8007a8c:	e01d      	b.n	8007aca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d114      	bne.n	8007abe <PCD_EP_OutXfrComplete_int+0x1fa>
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d108      	bne.n	8007abe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	2100      	movs	r1, #0
 8007aba:	f005 fe01 	bl	800d6c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f00c ff95 	bl	80149f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	4f54300a 	.word	0x4f54300a
 8007ad8:	4f54310a 	.word	0x4f54310a

08007adc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	333c      	adds	r3, #60	; 0x3c
 8007af4:	3304      	adds	r3, #4
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4a15      	ldr	r2, [pc, #84]	; (8007b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d90e      	bls.n	8007b30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d009      	beq.n	8007b30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f00c ff4d 	bl	80149d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4a0a      	ldr	r2, [pc, #40]	; (8007b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d90c      	bls.n	8007b58 <PCD_EP_OutSetupPacket_int+0x7c>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d108      	bne.n	8007b58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b50:	461a      	mov	r2, r3
 8007b52:	2101      	movs	r1, #1
 8007b54:	f005 fdb4 	bl	800d6c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	4f54300a 	.word	0x4f54300a

08007b68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
 8007b74:	4613      	mov	r3, r2
 8007b76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d107      	bne.n	8007b96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007b86:	883b      	ldrh	r3, [r7, #0]
 8007b88:	0419      	lsls	r1, r3, #16
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	629a      	str	r2, [r3, #40]	; 0x28
 8007b94:	e028      	b.n	8007be8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	0c1b      	lsrs	r3, r3, #16
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
 8007ba8:	e00d      	b.n	8007bc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	3340      	adds	r3, #64	; 0x40
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	0c1b      	lsrs	r3, r3, #16
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
 8007bc6:	7bfa      	ldrb	r2, [r7, #15]
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d3ec      	bcc.n	8007baa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007bd0:	883b      	ldrh	r3, [r7, #0]
 8007bd2:	0418      	lsls	r0, r3, #16
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6819      	ldr	r1, [r3, #0]
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	4302      	orrs	r2, r0
 8007be0:	3340      	adds	r3, #64	; 0x40
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	887a      	ldrh	r2, [r7, #2]
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c4a:	f043 0303 	orr.w	r3, r3, #3
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0cc      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c8c:	4b68      	ldr	r3, [pc, #416]	; (8007e30 <HAL_RCC_ClockConfig+0x1b8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 030f 	and.w	r3, r3, #15
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d90c      	bls.n	8007cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c9a:	4b65      	ldr	r3, [pc, #404]	; (8007e30 <HAL_RCC_ClockConfig+0x1b8>)
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ca2:	4b63      	ldr	r3, [pc, #396]	; (8007e30 <HAL_RCC_ClockConfig+0x1b8>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d001      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e0b8      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d020      	beq.n	8007d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ccc:	4b59      	ldr	r3, [pc, #356]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	4a58      	ldr	r2, [pc, #352]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ce4:	4b53      	ldr	r3, [pc, #332]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	4a52      	ldr	r2, [pc, #328]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cf0:	4b50      	ldr	r3, [pc, #320]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	494d      	ldr	r1, [pc, #308]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d044      	beq.n	8007d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d107      	bne.n	8007d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d16:	4b47      	ldr	r3, [pc, #284]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d119      	bne.n	8007d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e07f      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d003      	beq.n	8007d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d107      	bne.n	8007d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d36:	4b3f      	ldr	r3, [pc, #252]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e06f      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d46:	4b3b      	ldr	r3, [pc, #236]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e067      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d56:	4b37      	ldr	r3, [pc, #220]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f023 0203 	bic.w	r2, r3, #3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	4934      	ldr	r1, [pc, #208]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d68:	f7fc fb64 	bl	8004434 <HAL_GetTick>
 8007d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d6e:	e00a      	b.n	8007d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d70:	f7fc fb60 	bl	8004434 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e04f      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d86:	4b2b      	ldr	r3, [pc, #172]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 020c 	and.w	r2, r3, #12
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d1eb      	bne.n	8007d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d98:	4b25      	ldr	r3, [pc, #148]	; (8007e30 <HAL_RCC_ClockConfig+0x1b8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d20c      	bcs.n	8007dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007da6:	4b22      	ldr	r3, [pc, #136]	; (8007e30 <HAL_RCC_ClockConfig+0x1b8>)
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dae:	4b20      	ldr	r3, [pc, #128]	; (8007e30 <HAL_RCC_ClockConfig+0x1b8>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d001      	beq.n	8007dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e032      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dcc:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	4916      	ldr	r1, [pc, #88]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dea:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	490e      	ldr	r1, [pc, #56]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dfe:	f000 f821 	bl	8007e44 <HAL_RCC_GetSysClockFreq>
 8007e02:	4601      	mov	r1, r0
 8007e04:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <HAL_RCC_ClockConfig+0x1bc>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	091b      	lsrs	r3, r3, #4
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	4a0a      	ldr	r2, [pc, #40]	; (8007e38 <HAL_RCC_ClockConfig+0x1c0>)
 8007e10:	5cd3      	ldrb	r3, [r2, r3]
 8007e12:	fa21 f303 	lsr.w	r3, r1, r3
 8007e16:	4a09      	ldr	r2, [pc, #36]	; (8007e3c <HAL_RCC_ClockConfig+0x1c4>)
 8007e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e1a:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <HAL_RCC_ClockConfig+0x1c8>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fc fac4 	bl	80043ac <HAL_InitTick>

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40023c00 	.word	0x40023c00
 8007e34:	40023800 	.word	0x40023800
 8007e38:	08052f24 	.word	0x08052f24
 8007e3c:	20000010 	.word	0x20000010
 8007e40:	20000014 	.word	0x20000014

08007e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e44:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	607b      	str	r3, [r7, #4]
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	2300      	movs	r3, #0
 8007e56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e5c:	4b67      	ldr	r3, [pc, #412]	; (8007ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 030c 	and.w	r3, r3, #12
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d007      	beq.n	8007e78 <HAL_RCC_GetSysClockFreq+0x34>
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d008      	beq.n	8007e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f040 80bb 	bne.w	8007fe8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e72:	4b63      	ldr	r3, [pc, #396]	; (8008000 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e74:	60bb      	str	r3, [r7, #8]
       break;
 8007e76:	e0ba      	b.n	8007fee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e78:	4b62      	ldr	r3, [pc, #392]	; (8008004 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007e7a:	60bb      	str	r3, [r7, #8]
      break;
 8007e7c:	e0b7      	b.n	8007fee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e7e:	4b5f      	ldr	r3, [pc, #380]	; (8007ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e86:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e88:	4b5c      	ldr	r3, [pc, #368]	; (8007ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d051      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e94:	4b59      	ldr	r3, [pc, #356]	; (8007ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	099b      	lsrs	r3, r3, #6
 8007e9a:	f04f 0400 	mov.w	r4, #0
 8007e9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	ea03 0501 	and.w	r5, r3, r1
 8007eaa:	ea04 0602 	and.w	r6, r4, r2
 8007eae:	46ab      	mov	fp, r5
 8007eb0:	46b4      	mov	ip, r6
 8007eb2:	eb1b 030b 	adds.w	r3, fp, fp
 8007eb6:	eb4c 040c 	adc.w	r4, ip, ip
 8007eba:	469b      	mov	fp, r3
 8007ebc:	46a4      	mov	ip, r4
 8007ebe:	eb1b 0b05 	adds.w	fp, fp, r5
 8007ec2:	eb4c 0c06 	adc.w	ip, ip, r6
 8007ec6:	f04f 0100 	mov.w	r1, #0
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8007ed2:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 8007ed6:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8007eda:	468b      	mov	fp, r1
 8007edc:	4694      	mov	ip, r2
 8007ede:	ebbb 0b05 	subs.w	fp, fp, r5
 8007ee2:	eb6c 0c06 	sbc.w	ip, ip, r6
 8007ee6:	f04f 0100 	mov.w	r1, #0
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8007ef2:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8007ef6:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8007efa:	468b      	mov	fp, r1
 8007efc:	4694      	mov	ip, r2
 8007efe:	ebbb 0b05 	subs.w	fp, fp, r5
 8007f02:	eb6c 0c06 	sbc.w	ip, ip, r6
 8007f06:	f04f 0100 	mov.w	r1, #0
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	ea4f 32cc 	mov.w	r2, ip, lsl #15
 8007f12:	ea42 425b 	orr.w	r2, r2, fp, lsr #17
 8007f16:	ea4f 31cb 	mov.w	r1, fp, lsl #15
 8007f1a:	468b      	mov	fp, r1
 8007f1c:	4694      	mov	ip, r2
 8007f1e:	4658      	mov	r0, fp
 8007f20:	4661      	mov	r1, ip
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f04f 0400 	mov.w	r4, #0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4623      	mov	r3, r4
 8007f2c:	f7f8 fea0 	bl	8000c70 <__aeabi_uldivmod>
 8007f30:	4603      	mov	r3, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e049      	b.n	8007fcc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f38:	4b30      	ldr	r3, [pc, #192]	; (8007ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	099b      	lsrs	r3, r3, #6
 8007f3e:	f04f 0400 	mov.w	r4, #0
 8007f42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	ea03 0501 	and.w	r5, r3, r1
 8007f4e:	ea04 0602 	and.w	r6, r4, r2
 8007f52:	4629      	mov	r1, r5
 8007f54:	4632      	mov	r2, r6
 8007f56:	f04f 0300 	mov.w	r3, #0
 8007f5a:	f04f 0400 	mov.w	r4, #0
 8007f5e:	0154      	lsls	r4, r2, #5
 8007f60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f64:	014b      	lsls	r3, r1, #5
 8007f66:	4619      	mov	r1, r3
 8007f68:	4622      	mov	r2, r4
 8007f6a:	1b49      	subs	r1, r1, r5
 8007f6c:	eb62 0206 	sbc.w	r2, r2, r6
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	f04f 0400 	mov.w	r4, #0
 8007f78:	0194      	lsls	r4, r2, #6
 8007f7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f7e:	018b      	lsls	r3, r1, #6
 8007f80:	1a5b      	subs	r3, r3, r1
 8007f82:	eb64 0402 	sbc.w	r4, r4, r2
 8007f86:	f04f 0100 	mov.w	r1, #0
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	00e2      	lsls	r2, r4, #3
 8007f90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f94:	00d9      	lsls	r1, r3, #3
 8007f96:	460b      	mov	r3, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	195b      	adds	r3, r3, r5
 8007f9c:	eb44 0406 	adc.w	r4, r4, r6
 8007fa0:	f04f 0100 	mov.w	r1, #0
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	02a2      	lsls	r2, r4, #10
 8007faa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007fae:	0299      	lsls	r1, r3, #10
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4614      	mov	r4, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f04f 0400 	mov.w	r4, #0
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	f7f8 fe55 	bl	8000c70 <__aeabi_uldivmod>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	0c1b      	lsrs	r3, r3, #16
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe4:	60bb      	str	r3, [r7, #8]
      break;
 8007fe6:	e002      	b.n	8007fee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007fea:	60bb      	str	r3, [r7, #8]
      break;
 8007fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fee:	68bb      	ldr	r3, [r7, #8]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007ffa:	bf00      	nop
 8007ffc:	40023800 	.word	0x40023800
 8008000:	00f42400 	.word	0x00f42400
 8008004:	00bb8000 	.word	0x00bb8000

08008008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800800c:	4b03      	ldr	r3, [pc, #12]	; (800801c <HAL_RCC_GetHCLKFreq+0x14>)
 800800e:	681b      	ldr	r3, [r3, #0]
}
 8008010:	4618      	mov	r0, r3
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20000010 	.word	0x20000010

08008020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008024:	f7ff fff0 	bl	8008008 <HAL_RCC_GetHCLKFreq>
 8008028:	4601      	mov	r1, r0
 800802a:	4b05      	ldr	r3, [pc, #20]	; (8008040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	0a9b      	lsrs	r3, r3, #10
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	4a03      	ldr	r2, [pc, #12]	; (8008044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008036:	5cd3      	ldrb	r3, [r2, r3]
 8008038:	fa21 f303 	lsr.w	r3, r1, r3
}
 800803c:	4618      	mov	r0, r3
 800803e:	bd80      	pop	{r7, pc}
 8008040:	40023800 	.word	0x40023800
 8008044:	08052f34 	.word	0x08052f34

08008048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800804c:	f7ff ffdc 	bl	8008008 <HAL_RCC_GetHCLKFreq>
 8008050:	4601      	mov	r1, r0
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	0b5b      	lsrs	r3, r3, #13
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	4a03      	ldr	r2, [pc, #12]	; (800806c <HAL_RCC_GetPCLK2Freq+0x24>)
 800805e:	5cd3      	ldrb	r3, [r2, r3]
 8008060:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008064:	4618      	mov	r0, r3
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40023800 	.word	0x40023800
 800806c:	08052f34 	.word	0x08052f34

08008070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d010      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008090:	4b87      	ldr	r3, [pc, #540]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008096:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	4984      	ldr	r1, [pc, #528]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80080ae:	2301      	movs	r3, #1
 80080b0:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d010      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80080be:	4b7c      	ldr	r3, [pc, #496]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80080c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	4978      	ldr	r1, [pc, #480]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80080dc:	2301      	movs	r3, #1
 80080de:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 8083 	beq.w	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080ee:	2300      	movs	r3, #0
 80080f0:	60bb      	str	r3, [r7, #8]
 80080f2:	4b6f      	ldr	r3, [pc, #444]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	4a6e      	ldr	r2, [pc, #440]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80080f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080fc:	6413      	str	r3, [r2, #64]	; 0x40
 80080fe:	4b6c      	ldr	r3, [pc, #432]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008106:	60bb      	str	r3, [r7, #8]
 8008108:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800810a:	4b6a      	ldr	r3, [pc, #424]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a69      	ldr	r2, [pc, #420]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008114:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008116:	f7fc f98d 	bl	8004434 <HAL_GetTick>
 800811a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800811c:	e008      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800811e:	f7fc f989 	bl	8004434 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	2b02      	cmp	r3, #2
 800812a:	d901      	bls.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e162      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008130:	4b60      	ldr	r3, [pc, #384]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0f0      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800813c:	4b5c      	ldr	r3, [pc, #368]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008144:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d02f      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	429a      	cmp	r2, r3
 8008158:	d028      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800815a:	4b55      	ldr	r3, [pc, #340]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800815c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008162:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008164:	4b54      	ldr	r3, [pc, #336]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008166:	2201      	movs	r2, #1
 8008168:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800816a:	4b53      	ldr	r3, [pc, #332]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008170:	4a4f      	ldr	r2, [pc, #316]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008176:	4b4e      	ldr	r3, [pc, #312]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b01      	cmp	r3, #1
 8008180:	d114      	bne.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008182:	f7fc f957 	bl	8004434 <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008188:	e00a      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800818a:	f7fc f953 	bl	8004434 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	f241 3288 	movw	r2, #5000	; 0x1388
 8008198:	4293      	cmp	r3, r2
 800819a:	d901      	bls.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e12a      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081a0:	4b43      	ldr	r3, [pc, #268]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80081a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0ee      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081b8:	d10d      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80081ba:	4b3d      	ldr	r3, [pc, #244]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80081ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ce:	4938      	ldr	r1, [pc, #224]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	608b      	str	r3, [r1, #8]
 80081d4:	e005      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80081d6:	4b36      	ldr	r3, [pc, #216]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	4a35      	ldr	r2, [pc, #212]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80081dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80081e0:	6093      	str	r3, [r2, #8]
 80081e2:	4b33      	ldr	r3, [pc, #204]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80081e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081ee:	4930      	ldr	r1, [pc, #192]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008206:	4b2d      	ldr	r3, [pc, #180]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008208:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0310 	and.w	r3, r3, #16
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008216:	4b26      	ldr	r3, [pc, #152]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800821c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	4922      	ldr	r1, [pc, #136]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008226:	4313      	orrs	r3, r2
 8008228:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	d011      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008238:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800823a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800823e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	491a      	ldr	r1, [pc, #104]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008248:	4313      	orrs	r3, r2
 800824a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008256:	d101      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8008258:	2301      	movs	r3, #1
 800825a:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008268:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800826a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800826e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	490e      	ldr	r1, [pc, #56]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008278:	4313      	orrs	r3, r2
 800827a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d004      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b80      	cmp	r3, #128	; 0x80
 800828a:	f040 8091 	bne.w	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800828e:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008294:	f7fc f8ce 	bl	8004434 <HAL_GetTick>
 8008298:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800829a:	e013      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800829c:	f7fc f8ca 	bl	8004434 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d90c      	bls.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e0a3      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80082ae:	bf00      	nop
 80082b0:	40023800 	.word	0x40023800
 80082b4:	40007000 	.word	0x40007000
 80082b8:	42470e40 	.word	0x42470e40
 80082bc:	424711e0 	.word	0x424711e0
 80082c0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082c4:	4b4e      	ldr	r3, [pc, #312]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e5      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80082d0:	4a4c      	ldr	r2, [pc, #304]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d023      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d019      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8008308:	2b00      	cmp	r3, #0
 800830a:	d004      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008314:	d00e      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800831e:	2b00      	cmp	r3, #0
 8008320:	d019      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d115      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008332:	d110      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	019b      	lsls	r3, r3, #6
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	061b      	lsls	r3, r3, #24
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	071b      	lsls	r3, r3, #28
 800834e:	492c      	ldr	r1, [pc, #176]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008350:	4313      	orrs	r3, r2
 8008352:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835e:	2b00      	cmp	r3, #0
 8008360:	d010      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	019b      	lsls	r3, r3, #6
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	061b      	lsls	r3, r3, #24
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	071b      	lsls	r3, r3, #28
 800837c:	4920      	ldr	r1, [pc, #128]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008384:	4b20      	ldr	r3, [pc, #128]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800838a:	f7fc f853 	bl	8004434 <HAL_GetTick>
 800838e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008390:	e008      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008392:	f7fc f84f 	bl	8004434 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d901      	bls.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e028      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083a4:	4b16      	ldr	r3, [pc, #88]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0f0      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083bc:	4b10      	ldr	r3, [pc, #64]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80083be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	490d      	ldr	r1, [pc, #52]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80083de:	4b08      	ldr	r3, [pc, #32]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80083e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	4904      	ldr	r1, [pc, #16]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40023800 	.word	0x40023800
 8008404:	424710d8 	.word	0x424710d8
 8008408:	42470068 	.word	0x42470068

0800840c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d003      	beq.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800842a:	2b02      	cmp	r3, #2
 800842c:	f000 8098 	beq.w	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008430:	e12d      	b.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8008432:	4b9a      	ldr	r3, [pc, #616]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008438:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800843c:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008444:	d00c      	beq.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8008446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800844a:	d802      	bhi.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8008450:	e082      	b.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008456:	d047      	beq.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008458:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800845c:	d06f      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800845e:	e07b      	b.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008460:	4b8f      	ldr	r3, [pc, #572]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008462:	617b      	str	r3, [r7, #20]
          break;
 8008464:	e07b      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008466:	4b8d      	ldr	r3, [pc, #564]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800846c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008474:	d109      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008476:	4b89      	ldr	r3, [pc, #548]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800847c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008480:	4a87      	ldr	r2, [pc, #540]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008482:	fbb2 f3f3 	udiv	r3, r2, r3
 8008486:	613b      	str	r3, [r7, #16]
 8008488:	e019      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800848a:	4b84      	ldr	r3, [pc, #528]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008496:	d109      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008498:	4b80      	ldr	r3, [pc, #512]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800849a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800849e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084a2:	4a7f      	ldr	r2, [pc, #508]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a8:	613b      	str	r3, [r7, #16]
 80084aa:	e008      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80084ac:	4b7b      	ldr	r3, [pc, #492]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084b6:	4a7b      	ldr	r2, [pc, #492]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80084b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084bc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80084be:	4b77      	ldr	r3, [pc, #476]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084c4:	099b      	lsrs	r3, r3, #6
 80084c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	fb02 f303 	mul.w	r3, r2, r3
 80084d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80084d2:	4b72      	ldr	r3, [pc, #456]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d8:	0f1b      	lsrs	r3, r3, #28
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e4:	617b      	str	r3, [r7, #20]
          break;
 80084e6:	e03a      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80084e8:	4b6c      	ldr	r3, [pc, #432]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f4:	d108      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80084f6:	4b69      	ldr	r3, [pc, #420]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084fe:	4a68      	ldr	r2, [pc, #416]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008500:	fbb2 f3f3 	udiv	r3, r2, r3
 8008504:	613b      	str	r3, [r7, #16]
 8008506:	e007      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008508:	4b64      	ldr	r3, [pc, #400]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008510:	4a64      	ldr	r2, [pc, #400]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008512:	fbb2 f3f3 	udiv	r3, r2, r3
 8008516:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008518:	4b60      	ldr	r3, [pc, #384]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	099b      	lsrs	r3, r3, #6
 800851e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	fb02 f303 	mul.w	r3, r2, r3
 8008528:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800852a:	4b5c      	ldr	r3, [pc, #368]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	0f1b      	lsrs	r3, r3, #28
 8008530:	f003 0307 	and.w	r3, r3, #7
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	fbb2 f3f3 	udiv	r3, r2, r3
 800853a:	617b      	str	r3, [r7, #20]
          break;
 800853c:	e00f      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800853e:	4b57      	ldr	r3, [pc, #348]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800854a:	d102      	bne.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 800854c:	4b54      	ldr	r3, [pc, #336]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800854e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008550:	e005      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8008552:	4b54      	ldr	r3, [pc, #336]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008554:	617b      	str	r3, [r7, #20]
          break;
 8008556:	e002      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	617b      	str	r3, [r7, #20]
          break;
 800855c:	bf00      	nop
        }
      }
      break;
 800855e:	e096      	b.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8008560:	4b4e      	ldr	r3, [pc, #312]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008566:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800856a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008572:	d00c      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8008574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008578:	d802      	bhi.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800857e:	e082      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008584:	d047      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008586:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800858a:	d06f      	beq.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800858c:	e07b      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800858e:	4b44      	ldr	r3, [pc, #272]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008590:	617b      	str	r3, [r7, #20]
          break;
 8008592:	e07b      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008594:	4b41      	ldr	r3, [pc, #260]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800859a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800859e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085a2:	d109      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80085a4:	4b3d      	ldr	r3, [pc, #244]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80085a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ae:	4a3c      	ldr	r2, [pc, #240]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b4:	613b      	str	r3, [r7, #16]
 80085b6:	e019      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80085b8:	4b38      	ldr	r3, [pc, #224]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085c4:	d109      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80085c6:	4b35      	ldr	r3, [pc, #212]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80085c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085d0:	4a33      	ldr	r2, [pc, #204]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d6:	613b      	str	r3, [r7, #16]
 80085d8:	e008      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80085da:	4b30      	ldr	r3, [pc, #192]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80085dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085e4:	4a2f      	ldr	r2, [pc, #188]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80085e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ea:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80085ec:	4b2b      	ldr	r3, [pc, #172]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80085ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085f2:	099b      	lsrs	r3, r3, #6
 80085f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008600:	4b26      	ldr	r3, [pc, #152]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008606:	0f1b      	lsrs	r3, r3, #28
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008612:	617b      	str	r3, [r7, #20]
          break;
 8008614:	e03a      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008616:	4b21      	ldr	r3, [pc, #132]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800861e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008622:	d108      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008624:	4b1d      	ldr	r3, [pc, #116]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800862c:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800862e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	e007      	b.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008636:	4b19      	ldr	r3, [pc, #100]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800863e:	4a19      	ldr	r2, [pc, #100]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008640:	fbb2 f3f3 	udiv	r3, r2, r3
 8008644:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008646:	4b15      	ldr	r3, [pc, #84]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	099b      	lsrs	r3, r3, #6
 800864c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	fb02 f303 	mul.w	r3, r2, r3
 8008656:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008658:	4b10      	ldr	r3, [pc, #64]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	0f1b      	lsrs	r3, r3, #28
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	fbb2 f3f3 	udiv	r3, r2, r3
 8008668:	617b      	str	r3, [r7, #20]
          break;
 800866a:	e00f      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800866c:	4b0b      	ldr	r3, [pc, #44]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008678:	d102      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 800867a:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800867c:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800867e:	e005      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8008680:	4b08      	ldr	r3, [pc, #32]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008682:	617b      	str	r3, [r7, #20]
          break;
 8008684:	e002      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	617b      	str	r3, [r7, #20]
          break;
 800868a:	bf00      	nop
        }
      }
      break;
 800868c:	bf00      	nop
    }
  }
  return frequency;
 800868e:	697b      	ldr	r3, [r7, #20]
}
 8008690:	4618      	mov	r0, r3
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	40023800 	.word	0x40023800
 80086a0:	00bb8000 	.word	0x00bb8000
 80086a4:	00f42400 	.word	0x00f42400

080086a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d075      	beq.n	80087ac <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80086c0:	4ba2      	ldr	r3, [pc, #648]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f003 030c 	and.w	r3, r3, #12
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d00c      	beq.n	80086e6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086cc:	4b9f      	ldr	r3, [pc, #636]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d112      	bne.n	80086fe <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086d8:	4b9c      	ldr	r3, [pc, #624]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086e4:	d10b      	bne.n	80086fe <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e6:	4b99      	ldr	r3, [pc, #612]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d05b      	beq.n	80087aa <HAL_RCC_OscConfig+0x102>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d157      	bne.n	80087aa <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e20b      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008706:	d106      	bne.n	8008716 <HAL_RCC_OscConfig+0x6e>
 8008708:	4b90      	ldr	r3, [pc, #576]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a8f      	ldr	r2, [pc, #572]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 800870e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	e01d      	b.n	8008752 <HAL_RCC_OscConfig+0xaa>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800871e:	d10c      	bne.n	800873a <HAL_RCC_OscConfig+0x92>
 8008720:	4b8a      	ldr	r3, [pc, #552]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a89      	ldr	r2, [pc, #548]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800872a:	6013      	str	r3, [r2, #0]
 800872c:	4b87      	ldr	r3, [pc, #540]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a86      	ldr	r2, [pc, #536]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	e00b      	b.n	8008752 <HAL_RCC_OscConfig+0xaa>
 800873a:	4b84      	ldr	r3, [pc, #528]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a83      	ldr	r2, [pc, #524]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	4b81      	ldr	r3, [pc, #516]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a80      	ldr	r2, [pc, #512]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 800874c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008750:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d013      	beq.n	8008782 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875a:	f7fb fe6b 	bl	8004434 <HAL_GetTick>
 800875e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008762:	f7fb fe67 	bl	8004434 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b64      	cmp	r3, #100	; 0x64
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e1d0      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008774:	4b75      	ldr	r3, [pc, #468]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0f0      	beq.n	8008762 <HAL_RCC_OscConfig+0xba>
 8008780:	e014      	b.n	80087ac <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008782:	f7fb fe57 	bl	8004434 <HAL_GetTick>
 8008786:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800878a:	f7fb fe53 	bl	8004434 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b64      	cmp	r3, #100	; 0x64
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e1bc      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800879c:	4b6b      	ldr	r3, [pc, #428]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f0      	bne.n	800878a <HAL_RCC_OscConfig+0xe2>
 80087a8:	e000      	b.n	80087ac <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d063      	beq.n	8008880 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80087b8:	4b64      	ldr	r3, [pc, #400]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 030c 	and.w	r3, r3, #12
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087c4:	4b61      	ldr	r3, [pc, #388]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d11c      	bne.n	800880a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087d0:	4b5e      	ldr	r3, [pc, #376]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d116      	bne.n	800880a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087dc:	4b5b      	ldr	r3, [pc, #364]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d005      	beq.n	80087f4 <HAL_RCC_OscConfig+0x14c>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d001      	beq.n	80087f4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e190      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f4:	4b55      	ldr	r3, [pc, #340]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	00db      	lsls	r3, r3, #3
 8008802:	4952      	ldr	r1, [pc, #328]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008804:	4313      	orrs	r3, r2
 8008806:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008808:	e03a      	b.n	8008880 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d020      	beq.n	8008854 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008812:	4b4f      	ldr	r3, [pc, #316]	; (8008950 <HAL_RCC_OscConfig+0x2a8>)
 8008814:	2201      	movs	r2, #1
 8008816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008818:	f7fb fe0c 	bl	8004434 <HAL_GetTick>
 800881c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008820:	f7fb fe08 	bl	8004434 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e171      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008832:	4b46      	ldr	r3, [pc, #280]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0f0      	beq.n	8008820 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800883e:	4b43      	ldr	r3, [pc, #268]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	493f      	ldr	r1, [pc, #252]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 800884e:	4313      	orrs	r3, r2
 8008850:	600b      	str	r3, [r1, #0]
 8008852:	e015      	b.n	8008880 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008854:	4b3e      	ldr	r3, [pc, #248]	; (8008950 <HAL_RCC_OscConfig+0x2a8>)
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885a:	f7fb fdeb 	bl	8004434 <HAL_GetTick>
 800885e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008860:	e008      	b.n	8008874 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008862:	f7fb fde7 	bl	8004434 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e150      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008874:	4b35      	ldr	r3, [pc, #212]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f0      	bne.n	8008862 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d030      	beq.n	80088ee <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d016      	beq.n	80088c2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008894:	4b2f      	ldr	r3, [pc, #188]	; (8008954 <HAL_RCC_OscConfig+0x2ac>)
 8008896:	2201      	movs	r2, #1
 8008898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800889a:	f7fb fdcb 	bl	8004434 <HAL_GetTick>
 800889e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088a0:	e008      	b.n	80088b4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088a2:	f7fb fdc7 	bl	8004434 <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d901      	bls.n	80088b4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e130      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088b4:	4b25      	ldr	r3, [pc, #148]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80088b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0f0      	beq.n	80088a2 <HAL_RCC_OscConfig+0x1fa>
 80088c0:	e015      	b.n	80088ee <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088c2:	4b24      	ldr	r3, [pc, #144]	; (8008954 <HAL_RCC_OscConfig+0x2ac>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c8:	f7fb fdb4 	bl	8004434 <HAL_GetTick>
 80088cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088ce:	e008      	b.n	80088e2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088d0:	f7fb fdb0 	bl	8004434 <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d901      	bls.n	80088e2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e119      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088e2:	4b1a      	ldr	r3, [pc, #104]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 80088e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f0      	bne.n	80088d0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 809f 	beq.w	8008a3a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088fc:	2300      	movs	r3, #0
 80088fe:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008900:	4b12      	ldr	r3, [pc, #72]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10f      	bne.n	800892c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800890c:	2300      	movs	r3, #0
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	4b0e      	ldr	r3, [pc, #56]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	4a0d      	ldr	r2, [pc, #52]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 8008916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800891a:	6413      	str	r3, [r2, #64]	; 0x40
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <HAL_RCC_OscConfig+0x2a4>)
 800891e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008928:	2301      	movs	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892c:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <HAL_RCC_OscConfig+0x2b0>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008934:	2b00      	cmp	r3, #0
 8008936:	d120      	bne.n	800897a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008938:	4b07      	ldr	r3, [pc, #28]	; (8008958 <HAL_RCC_OscConfig+0x2b0>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a06      	ldr	r2, [pc, #24]	; (8008958 <HAL_RCC_OscConfig+0x2b0>)
 800893e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008942:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008944:	f7fb fd76 	bl	8004434 <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800894a:	e010      	b.n	800896e <HAL_RCC_OscConfig+0x2c6>
 800894c:	40023800 	.word	0x40023800
 8008950:	42470000 	.word	0x42470000
 8008954:	42470e80 	.word	0x42470e80
 8008958:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895c:	f7fb fd6a 	bl	8004434 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e0d3      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800896e:	4b6c      	ldr	r3, [pc, #432]	; (8008b20 <HAL_RCC_OscConfig+0x478>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0f0      	beq.n	800895c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d106      	bne.n	8008990 <HAL_RCC_OscConfig+0x2e8>
 8008982:	4b68      	ldr	r3, [pc, #416]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008986:	4a67      	ldr	r2, [pc, #412]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008988:	f043 0301 	orr.w	r3, r3, #1
 800898c:	6713      	str	r3, [r2, #112]	; 0x70
 800898e:	e01c      	b.n	80089ca <HAL_RCC_OscConfig+0x322>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	2b05      	cmp	r3, #5
 8008996:	d10c      	bne.n	80089b2 <HAL_RCC_OscConfig+0x30a>
 8008998:	4b62      	ldr	r3, [pc, #392]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 800899a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899c:	4a61      	ldr	r2, [pc, #388]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 800899e:	f043 0304 	orr.w	r3, r3, #4
 80089a2:	6713      	str	r3, [r2, #112]	; 0x70
 80089a4:	4b5f      	ldr	r3, [pc, #380]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	4a5e      	ldr	r2, [pc, #376]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	6713      	str	r3, [r2, #112]	; 0x70
 80089b0:	e00b      	b.n	80089ca <HAL_RCC_OscConfig+0x322>
 80089b2:	4b5c      	ldr	r3, [pc, #368]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 80089b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b6:	4a5b      	ldr	r2, [pc, #364]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 80089b8:	f023 0301 	bic.w	r3, r3, #1
 80089bc:	6713      	str	r3, [r2, #112]	; 0x70
 80089be:	4b59      	ldr	r3, [pc, #356]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	4a58      	ldr	r2, [pc, #352]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 80089c4:	f023 0304 	bic.w	r3, r3, #4
 80089c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d015      	beq.n	80089fe <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d2:	f7fb fd2f 	bl	8004434 <HAL_GetTick>
 80089d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089d8:	e00a      	b.n	80089f0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089da:	f7fb fd2b 	bl	8004434 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d901      	bls.n	80089f0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e092      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089f0:	4b4c      	ldr	r3, [pc, #304]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 80089f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0ee      	beq.n	80089da <HAL_RCC_OscConfig+0x332>
 80089fc:	e014      	b.n	8008a28 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089fe:	f7fb fd19 	bl	8004434 <HAL_GetTick>
 8008a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a04:	e00a      	b.n	8008a1c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a06:	f7fb fd15 	bl	8004434 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d901      	bls.n	8008a1c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e07c      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a1c:	4b41      	ldr	r3, [pc, #260]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1ee      	bne.n	8008a06 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d105      	bne.n	8008a3a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a2e:	4b3d      	ldr	r3, [pc, #244]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	4a3c      	ldr	r2, [pc, #240]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d068      	beq.n	8008b14 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a42:	4b38      	ldr	r3, [pc, #224]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f003 030c 	and.w	r3, r3, #12
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d060      	beq.n	8008b10 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d145      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a56:	4b34      	ldr	r3, [pc, #208]	; (8008b28 <HAL_RCC_OscConfig+0x480>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5c:	f7fb fcea 	bl	8004434 <HAL_GetTick>
 8008a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a62:	e008      	b.n	8008a76 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a64:	f7fb fce6 	bl	8004434 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e04f      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a76:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f0      	bne.n	8008a64 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69da      	ldr	r2, [r3, #28]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	019b      	lsls	r3, r3, #6
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	041b      	lsls	r3, r3, #16
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	061b      	lsls	r3, r3, #24
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aac:	071b      	lsls	r3, r3, #28
 8008aae:	491d      	ldr	r1, [pc, #116]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ab4:	4b1c      	ldr	r3, [pc, #112]	; (8008b28 <HAL_RCC_OscConfig+0x480>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aba:	f7fb fcbb 	bl	8004434 <HAL_GetTick>
 8008abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ac0:	e008      	b.n	8008ad4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ac2:	f7fb fcb7 	bl	8004434 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e020      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ad4:	4b13      	ldr	r3, [pc, #76]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0f0      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x41a>
 8008ae0:	e018      	b.n	8008b14 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ae2:	4b11      	ldr	r3, [pc, #68]	; (8008b28 <HAL_RCC_OscConfig+0x480>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae8:	f7fb fca4 	bl	8004434 <HAL_GetTick>
 8008aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008af0:	f7fb fca0 	bl	8004434 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e009      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b02:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <HAL_RCC_OscConfig+0x47c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1f0      	bne.n	8008af0 <HAL_RCC_OscConfig+0x448>
 8008b0e:	e001      	b.n	8008b14 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	40007000 	.word	0x40007000
 8008b24:	40023800 	.word	0x40023800
 8008b28:	42470060 	.word	0x42470060

08008b2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e022      	b.n	8008b84 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d105      	bne.n	8008b56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7fa ff51 	bl	80039f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2203      	movs	r2, #3
 8008b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f814 	bl	8008b8c <HAL_SD_InitCard>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e00a      	b.n	8008b84 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b8c:	b5b0      	push	{r4, r5, r7, lr}
 8008b8e:	b08e      	sub	sp, #56	; 0x38
 8008b90:	af04      	add	r7, sp, #16
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008ba8:	2376      	movs	r3, #118	; 0x76
 8008baa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681d      	ldr	r5, [r3, #0]
 8008bb0:	466c      	mov	r4, sp
 8008bb2:	f107 0314 	add.w	r3, r7, #20
 8008bb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	f002 fdcb 	bl	800b760 <SDIO_Init>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e031      	b.n	8008c40 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008bdc:	4b1a      	ldr	r3, [pc, #104]	; (8008c48 <HAL_SD_InitCard+0xbc>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f002 fe03 	bl	800b7f2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008bec:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <HAL_SD_InitCard+0xbc>)
 8008bee:	2201      	movs	r2, #1
 8008bf0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fe80 	bl	80098f8 <SD_PowerON>
 8008bf8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e013      	b.n	8008c40 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fd9f 	bl	800975c <SD_InitCard>
 8008c1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	431a      	orrs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3728      	adds	r7, #40	; 0x28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bdb0      	pop	{r4, r5, r7, pc}
 8008c48:	422580a0 	.word	0x422580a0

08008c4c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b092      	sub	sp, #72	; 0x48
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c5a:	f7fb fbeb 	bl	8004434 <HAL_GetTick>
 8008c5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d107      	bne.n	8008c7e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e1d7      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	f040 81ca 	bne.w	8009020 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	441a      	add	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d907      	bls.n	8008cb0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e1be      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d002      	beq.n	8008cce <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	025b      	lsls	r3, r3, #9
 8008ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f002 fe1e 	bl	800b918 <SDMMC_CmdBlockLength>
 8008cdc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00f      	beq.n	8008d04 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a9a      	ldr	r2, [pc, #616]	; (8008f54 <HAL_SD_ReadBlocks+0x308>)
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e194      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d04:	f04f 33ff 	mov.w	r3, #4294967295
 8008d08:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	025b      	lsls	r3, r3, #9
 8008d0e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008d10:	2390      	movs	r3, #144	; 0x90
 8008d12:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008d14:	2302      	movs	r3, #2
 8008d16:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f107 0214 	add.w	r2, r7, #20
 8008d28:	4611      	mov	r1, r2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f002 fdc8 	bl	800b8c0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d90a      	bls.n	8008d4c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d42:	4618      	mov	r0, r3
 8008d44:	f002 fe2c 	bl	800b9a0 <SDMMC_CmdReadMultiBlock>
 8008d48:	6478      	str	r0, [r7, #68]	; 0x44
 8008d4a:	e009      	b.n	8008d60 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f002 fdff 	bl	800b95c <SDMMC_CmdReadSingleBlock>
 8008d5e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d012      	beq.n	8008d8c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a7a      	ldr	r2, [pc, #488]	; (8008f54 <HAL_SD_ReadBlocks+0x308>)
 8008d6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d74:	431a      	orrs	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e150      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008d90:	e061      	b.n	8008e56 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d03c      	beq.n	8008e1a <HAL_SD_ReadBlocks+0x1ce>
 8008da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d039      	beq.n	8008e1a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008da6:	2300      	movs	r3, #0
 8008da8:	643b      	str	r3, [r7, #64]	; 0x40
 8008daa:	e033      	b.n	8008e14 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f002 fd00 	bl	800b7b6 <SDIO_ReadFIFO>
 8008db6:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dce:	0a1b      	lsrs	r3, r3, #8
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	3301      	adds	r3, #1
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dde:	3b01      	subs	r3, #1
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de4:	0c1b      	lsrs	r3, r3, #16
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	3301      	adds	r3, #1
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df4:	3b01      	subs	r3, #1
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	0e1b      	lsrs	r3, r3, #24
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e04:	3301      	adds	r3, #1
 8008e06:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e10:	3301      	adds	r3, #1
 8008e12:	643b      	str	r3, [r7, #64]	; 0x40
 8008e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e16:	2b07      	cmp	r3, #7
 8008e18:	d9c8      	bls.n	8008dac <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e1a:	f7fb fb0b 	bl	8004434 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d902      	bls.n	8008e30 <HAL_SD_ReadBlocks+0x1e4>
 8008e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d112      	bne.n	8008e56 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a47      	ldr	r2, [pc, #284]	; (8008f54 <HAL_SD_ReadBlocks+0x308>)
 8008e36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e0eb      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d096      	beq.n	8008d92 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d022      	beq.n	8008eb8 <HAL_SD_ReadBlocks+0x26c>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d91f      	bls.n	8008eb8 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d01b      	beq.n	8008eb8 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f002 fdf1 	bl	800ba6c <SDMMC_CmdStopTransfer>
 8008e8a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d012      	beq.n	8008eb8 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a2f      	ldr	r2, [pc, #188]	; (8008f54 <HAL_SD_ReadBlocks+0x308>)
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e0ba      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebe:	f003 0308 	and.w	r3, r3, #8
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d012      	beq.n	8008eec <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a22      	ldr	r2, [pc, #136]	; (8008f54 <HAL_SD_ReadBlocks+0x308>)
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed2:	f043 0208 	orr.w	r2, r3, #8
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e0a0      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d012      	beq.n	8008f20 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <HAL_SD_ReadBlocks+0x308>)
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f06:	f043 0202 	orr.w	r2, r3, #2
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e086      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d063      	beq.n	8008ff6 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a08      	ldr	r2, [pc, #32]	; (8008f54 <HAL_SD_ReadBlocks+0x308>)
 8008f34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	f043 0220 	orr.w	r2, r3, #32
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e06c      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
 8008f54:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f002 fc2a 	bl	800b7b6 <SDIO_ReadFIFO>
 8008f62:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6e:	3301      	adds	r3, #1
 8008f70:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f74:	3b01      	subs	r3, #1
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	0a1b      	lsrs	r3, r3, #8
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f84:	3301      	adds	r3, #1
 8008f86:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	0c1b      	lsrs	r3, r3, #16
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa6:	0e1b      	lsrs	r3, r3, #24
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008fba:	f7fb fa3b 	bl	8004434 <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d902      	bls.n	8008fd0 <HAL_SD_ReadBlocks+0x384>
 8008fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d112      	bne.n	8008ff6 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a18      	ldr	r2, [pc, #96]	; (8009038 <HAL_SD_ReadBlocks+0x3ec>)
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e01b      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <HAL_SD_ReadBlocks+0x3be>
 8009004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1a6      	bne.n	8008f58 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009012:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	e006      	b.n	800902e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
  }
}
 800902e:	4618      	mov	r0, r3
 8009030:	3748      	adds	r7, #72	; 0x48
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	004005ff 	.word	0x004005ff

0800903c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b092      	sub	sp, #72	; 0x48
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800904a:	f7fb f9f3 	bl	8004434 <HAL_GetTick>
 800904e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d107      	bne.n	800906e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e182      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b01      	cmp	r3, #1
 8009078:	f040 8175 	bne.w	8009366 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	441a      	add	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908c:	429a      	cmp	r2, r3
 800908e:	d907      	bls.n	80090a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e169      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2203      	movs	r2, #3
 80090a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2200      	movs	r2, #0
 80090ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d002      	beq.n	80090be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	025b      	lsls	r3, r3, #9
 80090bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090c6:	4618      	mov	r0, r3
 80090c8:	f002 fc26 	bl	800b918 <SDMMC_CmdBlockLength>
 80090cc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80090ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00f      	beq.n	80090f4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a9c      	ldr	r2, [pc, #624]	; (800934c <HAL_SD_WriteBlocks+0x310>)
 80090da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090e2:	431a      	orrs	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e13f      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295
 80090f8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	025b      	lsls	r3, r3, #9
 80090fe:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009100:	2390      	movs	r3, #144	; 0x90
 8009102:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009104:	2300      	movs	r3, #0
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009108:	2300      	movs	r3, #0
 800910a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800910c:	2301      	movs	r3, #1
 800910e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f107 0218 	add.w	r2, r7, #24
 8009118:	4611      	mov	r1, r2
 800911a:	4618      	mov	r0, r3
 800911c:	f002 fbd0 	bl	800b8c0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d90a      	bls.n	800913c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2220      	movs	r2, #32
 800912a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009132:	4618      	mov	r0, r3
 8009134:	f002 fc78 	bl	800ba28 <SDMMC_CmdWriteMultiBlock>
 8009138:	6478      	str	r0, [r7, #68]	; 0x44
 800913a:	e009      	b.n	8009150 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2210      	movs	r2, #16
 8009140:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009148:	4618      	mov	r0, r3
 800914a:	f002 fc4b 	bl	800b9e4 <SDMMC_CmdWriteSingleBlock>
 800914e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009152:	2b00      	cmp	r3, #0
 8009154:	d012      	beq.n	800917c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a7c      	ldr	r2, [pc, #496]	; (800934c <HAL_SD_WriteBlocks+0x310>)
 800915c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009164:	431a      	orrs	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e0fb      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8009180:	e065      	b.n	800924e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d040      	beq.n	8009212 <HAL_SD_WriteBlocks+0x1d6>
 8009190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d03d      	beq.n	8009212 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009196:	2300      	movs	r3, #0
 8009198:	643b      	str	r3, [r7, #64]	; 0x40
 800919a:	e037      	b.n	800920c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800919c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	3301      	adds	r3, #1
 80091a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80091a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091aa:	3b01      	subs	r3, #1
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80091ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	021a      	lsls	r2, r3, #8
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091bc:	3301      	adds	r3, #1
 80091be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80091c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c2:	3b01      	subs	r3, #1
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	041a      	lsls	r2, r3, #16
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	3301      	adds	r3, #1
 80091d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80091d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091da:	3b01      	subs	r3, #1
 80091dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	061a      	lsls	r2, r3, #24
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ec:	3301      	adds	r3, #1
 80091ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80091f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f2:	3b01      	subs	r3, #1
 80091f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f107 0214 	add.w	r2, r7, #20
 80091fe:	4611      	mov	r1, r2
 8009200:	4618      	mov	r0, r3
 8009202:	f002 fae5 	bl	800b7d0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009208:	3301      	adds	r3, #1
 800920a:	643b      	str	r3, [r7, #64]	; 0x40
 800920c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800920e:	2b07      	cmp	r3, #7
 8009210:	d9c4      	bls.n	800919c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009212:	f7fb f90f 	bl	8004434 <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800921e:	429a      	cmp	r2, r3
 8009220:	d902      	bls.n	8009228 <HAL_SD_WriteBlocks+0x1ec>
 8009222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009224:	2b00      	cmp	r3, #0
 8009226:	d112      	bne.n	800924e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a47      	ldr	r2, [pc, #284]	; (800934c <HAL_SD_WriteBlocks+0x310>)
 800922e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009236:	431a      	orrs	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e092      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009254:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009258:	2b00      	cmp	r3, #0
 800925a:	d092      	beq.n	8009182 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d022      	beq.n	80092b0 <HAL_SD_WriteBlocks+0x274>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d91f      	bls.n	80092b0 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009274:	2b03      	cmp	r3, #3
 8009276:	d01b      	beq.n	80092b0 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4618      	mov	r0, r3
 800927e:	f002 fbf5 	bl	800ba6c <SDMMC_CmdStopTransfer>
 8009282:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009286:	2b00      	cmp	r3, #0
 8009288:	d012      	beq.n	80092b0 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a2f      	ldr	r2, [pc, #188]	; (800934c <HAL_SD_WriteBlocks+0x310>)
 8009290:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009298:	431a      	orrs	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e061      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d012      	beq.n	80092e4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a22      	ldr	r2, [pc, #136]	; (800934c <HAL_SD_WriteBlocks+0x310>)
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	f043 0208 	orr.w	r2, r3, #8
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e047      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d012      	beq.n	8009318 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a15      	ldr	r2, [pc, #84]	; (800934c <HAL_SD_WriteBlocks+0x310>)
 80092f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fe:	f043 0202 	orr.w	r2, r3, #2
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e02d      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931e:	f003 0310 	and.w	r3, r3, #16
 8009322:	2b00      	cmp	r3, #0
 8009324:	d014      	beq.n	8009350 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a08      	ldr	r2, [pc, #32]	; (800934c <HAL_SD_WriteBlocks+0x310>)
 800932c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009332:	f043 0210 	orr.w	r2, r3, #16
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e013      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
 800934c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f240 523a 	movw	r2, #1338	; 0x53a
 8009358:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	e006      	b.n	8009374 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
  }
}
 8009374:	4618      	mov	r0, r3
 8009376:	3748      	adds	r7, #72	; 0x48
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800938a:	0f9b      	lsrs	r3, r3, #30
 800938c:	b2da      	uxtb	r2, r3
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009396:	0e9b      	lsrs	r3, r3, #26
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a8:	0e1b      	lsrs	r3, r3, #24
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	f003 0303 	and.w	r3, r3, #3
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ba:	0c1b      	lsrs	r3, r3, #16
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093c6:	0a1b      	lsrs	r3, r3, #8
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093dc:	0d1b      	lsrs	r3, r3, #20
 80093de:	b29a      	uxth	r2, r3
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093e8:	0c1b      	lsrs	r3, r3, #16
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	f003 030f 	and.w	r3, r3, #15
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093fa:	0bdb      	lsrs	r3, r3, #15
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940c:	0b9b      	lsrs	r3, r3, #14
 800940e:	b2db      	uxtb	r3, r3
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	b2da      	uxtb	r2, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800941e:	0b5b      	lsrs	r3, r3, #13
 8009420:	b2db      	uxtb	r3, r3
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	b2da      	uxtb	r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009430:	0b1b      	lsrs	r3, r3, #12
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	b2da      	uxtb	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2200      	movs	r2, #0
 8009442:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009448:	2b00      	cmp	r3, #0
 800944a:	d163      	bne.n	8009514 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009450:	009a      	lsls	r2, r3, #2
 8009452:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009456:	4013      	ands	r3, r2
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800945c:	0f92      	lsrs	r2, r2, #30
 800945e:	431a      	orrs	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009468:	0edb      	lsrs	r3, r3, #27
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	b2da      	uxtb	r2, r3
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800947a:	0e1b      	lsrs	r3, r3, #24
 800947c:	b2db      	uxtb	r3, r3
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	b2da      	uxtb	r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800948c:	0d5b      	lsrs	r3, r3, #21
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	b2da      	uxtb	r2, r3
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800949e:	0c9b      	lsrs	r3, r3, #18
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b0:	0bdb      	lsrs	r3, r3, #15
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	f003 0307 	and.w	r3, r3, #7
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	7e1b      	ldrb	r3, [r3, #24]
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	3302      	adds	r3, #2
 80094d4:	2201      	movs	r2, #1
 80094d6:	fa02 f303 	lsl.w	r3, r2, r3
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80094de:	fb02 f203 	mul.w	r2, r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	7a1b      	ldrb	r3, [r3, #8]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 030f 	and.w	r3, r3, #15
 80094f0:	2201      	movs	r2, #1
 80094f2:	409a      	lsls	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009500:	0a52      	lsrs	r2, r2, #9
 8009502:	fb02 f203 	mul.w	r2, r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009510:	661a      	str	r2, [r3, #96]	; 0x60
 8009512:	e031      	b.n	8009578 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009518:	2b01      	cmp	r3, #1
 800951a:	d11d      	bne.n	8009558 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009520:	041b      	lsls	r3, r3, #16
 8009522:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952a:	0c1b      	lsrs	r3, r3, #16
 800952c:	431a      	orrs	r2, r3
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	3301      	adds	r3, #1
 8009538:	029a      	lsls	r2, r3, #10
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800954c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	661a      	str	r2, [r3, #96]	; 0x60
 8009556:	e00f      	b.n	8009578 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a58      	ldr	r2, [pc, #352]	; (80096c0 <HAL_SD_GetCardCSD+0x344>)
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e09d      	b.n	80096b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957c:	0b9b      	lsrs	r3, r3, #14
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	b2da      	uxtb	r2, r3
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800958e:	09db      	lsrs	r3, r3, #7
 8009590:	b2db      	uxtb	r3, r3
 8009592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009596:	b2da      	uxtb	r2, r3
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b0:	0fdb      	lsrs	r3, r3, #31
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095bc:	0f5b      	lsrs	r3, r3, #29
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f003 0303 	and.w	r3, r3, #3
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ce:	0e9b      	lsrs	r3, r3, #26
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0307 	and.w	r3, r3, #7
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e0:	0d9b      	lsrs	r3, r3, #22
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	f003 030f 	and.w	r3, r3, #15
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f2:	0d5b      	lsrs	r3, r3, #21
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960e:	0c1b      	lsrs	r3, r3, #16
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	b2da      	uxtb	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009622:	0bdb      	lsrs	r3, r3, #15
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	b2da      	uxtb	r2, r3
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009636:	0b9b      	lsrs	r3, r3, #14
 8009638:	b2db      	uxtb	r3, r3
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	b2da      	uxtb	r2, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964a:	0b5b      	lsrs	r3, r3, #13
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965e:	0b1b      	lsrs	r3, r3, #12
 8009660:	b2db      	uxtb	r3, r3
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	b2da      	uxtb	r2, r3
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009672:	0a9b      	lsrs	r3, r3, #10
 8009674:	b2db      	uxtb	r3, r3
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	b2da      	uxtb	r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009686:	0a1b      	lsrs	r3, r3, #8
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	b2da      	uxtb	r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969a:	085b      	lsrs	r3, r3, #1
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	004005ff 	.word	0x004005ff

080096c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009728:	f107 030c 	add.w	r3, r7, #12
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f970 	bl	8009a14 <SD_SendStatus>
 8009734:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	431a      	orrs	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	0a5b      	lsrs	r3, r3, #9
 800974c:	f003 030f 	and.w	r3, r3, #15
 8009750:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009752:	693b      	ldr	r3, [r7, #16]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800975c:	b5b0      	push	{r4, r5, r7, lr}
 800975e:	b094      	sub	sp, #80	; 0x50
 8009760:	af04      	add	r7, sp, #16
 8009762:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009764:	2301      	movs	r3, #1
 8009766:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4618      	mov	r0, r3
 800976e:	f002 f84f 	bl	800b810 <SDIO_GetPowerState>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009778:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800977c:	e0b7      	b.n	80098ee <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009782:	2b03      	cmp	r3, #3
 8009784:	d02f      	beq.n	80097e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4618      	mov	r0, r3
 800978c:	f002 fa35 	bl	800bbfa <SDMMC_CmdSendCID>
 8009790:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009794:	2b00      	cmp	r3, #0
 8009796:	d001      	beq.n	800979c <SD_InitCard+0x40>
    {
      return errorstate;
 8009798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979a:	e0a8      	b.n	80098ee <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2100      	movs	r1, #0
 80097a2:	4618      	mov	r0, r3
 80097a4:	f002 f879 	bl	800b89a <SDIO_GetResponse>
 80097a8:	4602      	mov	r2, r0
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2104      	movs	r1, #4
 80097b4:	4618      	mov	r0, r3
 80097b6:	f002 f870 	bl	800b89a <SDIO_GetResponse>
 80097ba:	4602      	mov	r2, r0
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2108      	movs	r1, #8
 80097c6:	4618      	mov	r0, r3
 80097c8:	f002 f867 	bl	800b89a <SDIO_GetResponse>
 80097cc:	4602      	mov	r2, r0
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	210c      	movs	r1, #12
 80097d8:	4618      	mov	r0, r3
 80097da:	f002 f85e 	bl	800b89a <SDIO_GetResponse>
 80097de:	4602      	mov	r2, r0
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d00d      	beq.n	800980a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f107 020e 	add.w	r2, r7, #14
 80097f6:	4611      	mov	r1, r2
 80097f8:	4618      	mov	r0, r3
 80097fa:	f002 fa3b 	bl	800bc74 <SDMMC_CmdSetRelAdd>
 80097fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <SD_InitCard+0xae>
    {
      return errorstate;
 8009806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009808:	e071      	b.n	80098ee <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980e:	2b03      	cmp	r3, #3
 8009810:	d036      	beq.n	8009880 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009812:	89fb      	ldrh	r3, [r7, #14]
 8009814:	461a      	mov	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009822:	041b      	lsls	r3, r3, #16
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f002 fa05 	bl	800bc36 <SDMMC_CmdSendCSD>
 800982c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800982e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009836:	e05a      	b.n	80098ee <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2100      	movs	r1, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f002 f82b 	bl	800b89a <SDIO_GetResponse>
 8009844:	4602      	mov	r2, r0
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2104      	movs	r1, #4
 8009850:	4618      	mov	r0, r3
 8009852:	f002 f822 	bl	800b89a <SDIO_GetResponse>
 8009856:	4602      	mov	r2, r0
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2108      	movs	r1, #8
 8009862:	4618      	mov	r0, r3
 8009864:	f002 f819 	bl	800b89a <SDIO_GetResponse>
 8009868:	4602      	mov	r2, r0
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	210c      	movs	r1, #12
 8009874:	4618      	mov	r0, r3
 8009876:	f002 f810 	bl	800b89a <SDIO_GetResponse>
 800987a:	4602      	mov	r2, r0
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2104      	movs	r1, #4
 8009886:	4618      	mov	r0, r3
 8009888:	f002 f807 	bl	800b89a <SDIO_GetResponse>
 800988c:	4603      	mov	r3, r0
 800988e:	0d1a      	lsrs	r2, r3, #20
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009894:	f107 0310 	add.w	r3, r7, #16
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff fd6e 	bl	800937c <HAL_SD_GetCardCSD>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80098aa:	e020      	b.n	80098ee <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6819      	ldr	r1, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b4:	041b      	lsls	r3, r3, #16
 80098b6:	f04f 0400 	mov.w	r4, #0
 80098ba:	461a      	mov	r2, r3
 80098bc:	4623      	mov	r3, r4
 80098be:	4608      	mov	r0, r1
 80098c0:	f002 f8f6 	bl	800bab0 <SDMMC_CmdSelDesel>
 80098c4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80098c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <SD_InitCard+0x174>
  {
    return errorstate;
 80098cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ce:	e00e      	b.n	80098ee <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681d      	ldr	r5, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	466c      	mov	r4, sp
 80098d8:	f103 0210 	add.w	r2, r3, #16
 80098dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80098de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098e2:	3304      	adds	r3, #4
 80098e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098e6:	4628      	mov	r0, r5
 80098e8:	f001 ff3a 	bl	800b760 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3740      	adds	r7, #64	; 0x40
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080098f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	2300      	movs	r3, #0
 800990a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4618      	mov	r0, r3
 8009912:	f002 f8f0 	bl	800baf6 <SDMMC_CmdGoIdleState>
 8009916:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <SD_PowerON+0x2a>
  {
    return errorstate;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	e072      	b.n	8009a08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4618      	mov	r0, r3
 8009928:	f002 f903 	bl	800bb32 <SDMMC_CmdOperCond>
 800992c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00d      	beq.n	8009950 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4618      	mov	r0, r3
 8009940:	f002 f8d9 	bl	800baf6 <SDMMC_CmdGoIdleState>
 8009944:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <SD_PowerON+0x5e>
    {
      return errorstate;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	e05b      	b.n	8009a08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800995a:	2b01      	cmp	r3, #1
 800995c:	d137      	bne.n	80099ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2100      	movs	r1, #0
 8009964:	4618      	mov	r0, r3
 8009966:	f002 f903 	bl	800bb70 <SDMMC_CmdAppCommand>
 800996a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d02d      	beq.n	80099ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009972:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009976:	e047      	b.n	8009a08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2100      	movs	r1, #0
 800997e:	4618      	mov	r0, r3
 8009980:	f002 f8f6 	bl	800bb70 <SDMMC_CmdAppCommand>
 8009984:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <SD_PowerON+0x98>
    {
      return errorstate;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	e03b      	b.n	8009a08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	491e      	ldr	r1, [pc, #120]	; (8009a10 <SD_PowerON+0x118>)
 8009996:	4618      	mov	r0, r3
 8009998:	f002 f90c 	bl	800bbb4 <SDMMC_CmdAppOperCommand>
 800999c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099a8:	e02e      	b.n	8009a08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2100      	movs	r1, #0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 ff72 	bl	800b89a <SDIO_GetResponse>
 80099b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	0fdb      	lsrs	r3, r3, #31
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d101      	bne.n	80099c4 <SD_PowerON+0xcc>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e000      	b.n	80099c6 <SD_PowerON+0xce>
 80099c4:	2300      	movs	r3, #0
 80099c6:	613b      	str	r3, [r7, #16]

    count++;
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	3301      	adds	r3, #1
 80099cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d802      	bhi.n	80099de <SD_PowerON+0xe6>
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0cc      	beq.n	8009978 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d902      	bls.n	80099ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80099e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099ec:	e00c      	b.n	8009a08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	645a      	str	r2, [r3, #68]	; 0x44
 80099fe:	e002      	b.n	8009a06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	c1100000 	.word	0xc1100000

08009a14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d102      	bne.n	8009a2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a28:	e018      	b.n	8009a5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a32:	041b      	lsls	r3, r3, #16
 8009a34:	4619      	mov	r1, r3
 8009a36:	4610      	mov	r0, r2
 8009a38:	f002 f93d 	bl	800bcb6 <SDMMC_CmdSendStatus>
 8009a3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	e009      	b.n	8009a5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 ff23 	bl	800b89a <SDIO_GetResponse>
 8009a54:	4602      	mov	r2, r0
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e056      	b.n	8009b24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d106      	bne.n	8009a96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7fa f819 	bl	8003ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	431a      	orrs	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	ea42 0103 	orr.w	r1, r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	0c1b      	lsrs	r3, r3, #16
 8009af4:	f003 0104 	and.w	r1, r3, #4
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	69da      	ldr	r2, [r3, #28]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d101      	bne.n	8009b4e <HAL_SPI_Transmit+0x22>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e11e      	b.n	8009d8c <HAL_SPI_Transmit+0x260>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b56:	f7fa fc6d 	bl	8004434 <HAL_GetTick>
 8009b5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b5c:	88fb      	ldrh	r3, [r7, #6]
 8009b5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d002      	beq.n	8009b72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b70:	e103      	b.n	8009d7a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <HAL_SPI_Transmit+0x52>
 8009b78:	88fb      	ldrh	r3, [r7, #6]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d102      	bne.n	8009b84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b82:	e0fa      	b.n	8009d7a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2203      	movs	r2, #3
 8009b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	88fa      	ldrh	r2, [r7, #6]
 8009b9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	88fa      	ldrh	r2, [r7, #6]
 8009ba2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bca:	d107      	bne.n	8009bdc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be6:	2b40      	cmp	r3, #64	; 0x40
 8009be8:	d007      	beq.n	8009bfa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c02:	d14b      	bne.n	8009c9c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <HAL_SPI_Transmit+0xe6>
 8009c0c:	8afb      	ldrh	r3, [r7, #22]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d13e      	bne.n	8009c90 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c16:	881a      	ldrh	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c22:	1c9a      	adds	r2, r3, #2
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c36:	e02b      	b.n	8009c90 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f003 0302 	and.w	r3, r3, #2
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d112      	bne.n	8009c6c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4a:	881a      	ldrh	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c56:	1c9a      	adds	r2, r3, #2
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c6a:	e011      	b.n	8009c90 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c6c:	f7fa fbe2 	bl	8004434 <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d803      	bhi.n	8009c84 <HAL_SPI_Transmit+0x158>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c82:	d102      	bne.n	8009c8a <HAL_SPI_Transmit+0x15e>
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d102      	bne.n	8009c90 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c8e:	e074      	b.n	8009d7a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1ce      	bne.n	8009c38 <HAL_SPI_Transmit+0x10c>
 8009c9a:	e04c      	b.n	8009d36 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <HAL_SPI_Transmit+0x17e>
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d140      	bne.n	8009d2c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	7812      	ldrb	r2, [r2, #0]
 8009cb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009cd0:	e02c      	b.n	8009d2c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d113      	bne.n	8009d08 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	330c      	adds	r3, #12
 8009cea:	7812      	ldrb	r2, [r2, #0]
 8009cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d06:	e011      	b.n	8009d2c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d08:	f7fa fb94 	bl	8004434 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d803      	bhi.n	8009d20 <HAL_SPI_Transmit+0x1f4>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1e:	d102      	bne.n	8009d26 <HAL_SPI_Transmit+0x1fa>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d2a:	e026      	b.n	8009d7a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1cd      	bne.n	8009cd2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 f894 	bl	8009e68 <SPI_EndRxTxTransaction>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2220      	movs	r2, #32
 8009d4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d54:	2300      	movs	r3, #0
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	613b      	str	r3, [r7, #16]
 8009d68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	77fb      	strb	r3, [r7, #31]
 8009d76:	e000      	b.n	8009d7a <HAL_SPI_Transmit+0x24e>
  }

error:
 8009d78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3720      	adds	r7, #32
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	4613      	mov	r3, r2
 8009da2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009da4:	e04c      	b.n	8009e40 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dac:	d048      	beq.n	8009e40 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009dae:	f7fa fb41 	bl	8004434 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d902      	bls.n	8009dc4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d13d      	bne.n	8009e40 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009dd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ddc:	d111      	bne.n	8009e02 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009de6:	d004      	beq.n	8009df2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009df0:	d107      	bne.n	8009e02 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e0a:	d10f      	bne.n	8009e2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e00f      	b.n	8009e60 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689a      	ldr	r2, [r3, #8]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	4013      	ands	r3, r2
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	bf0c      	ite	eq
 8009e50:	2301      	moveq	r3, #1
 8009e52:	2300      	movne	r3, #0
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	461a      	mov	r2, r3
 8009e58:	79fb      	ldrb	r3, [r7, #7]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d1a3      	bne.n	8009da6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009e74:	4b1b      	ldr	r3, [pc, #108]	; (8009ee4 <SPI_EndRxTxTransaction+0x7c>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a1b      	ldr	r2, [pc, #108]	; (8009ee8 <SPI_EndRxTxTransaction+0x80>)
 8009e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7e:	0d5b      	lsrs	r3, r3, #21
 8009e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e84:	fb02 f303 	mul.w	r3, r2, r3
 8009e88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e92:	d112      	bne.n	8009eba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2180      	movs	r1, #128	; 0x80
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f7ff ff78 	bl	8009d94 <SPI_WaitFlagStateUntilTimeout>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d016      	beq.n	8009ed8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eae:	f043 0220 	orr.w	r2, r3, #32
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e00f      	b.n	8009eda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00a      	beq.n	8009ed6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed0:	2b80      	cmp	r3, #128	; 0x80
 8009ed2:	d0f2      	beq.n	8009eba <SPI_EndRxTxTransaction+0x52>
 8009ed4:	e000      	b.n	8009ed8 <SPI_EndRxTxTransaction+0x70>
        break;
 8009ed6:	bf00      	nop
  }

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000010 	.word	0x20000010
 8009ee8:	165e9f81 	.word	0x165e9f81

08009eec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e01d      	b.n	8009f3a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7f9 fe7c 	bl	8003c10 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	f000 fcf6 	bl	800a91c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2201      	movs	r2, #1
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 ff30 	bl	800adbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a15      	ldr	r2, [pc, #84]	; (8009fb8 <HAL_TIM_OC_Start+0x74>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d004      	beq.n	8009f70 <HAL_TIM_OC_Start+0x2c>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a14      	ldr	r2, [pc, #80]	; (8009fbc <HAL_TIM_OC_Start+0x78>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d101      	bne.n	8009f74 <HAL_TIM_OC_Start+0x30>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <HAL_TIM_OC_Start+0x32>
 8009f74:	2300      	movs	r3, #0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f003 0307 	and.w	r3, r3, #7
 8009f94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b06      	cmp	r3, #6
 8009f9a:	d007      	beq.n	8009fac <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f042 0201 	orr.w	r2, r2, #1
 8009faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	40010000 	.word	0x40010000
 8009fbc:	40010400 	.word	0x40010400

08009fc0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b0c      	cmp	r3, #12
 8009fce:	d841      	bhi.n	800a054 <HAL_TIM_OC_Start_IT+0x94>
 8009fd0:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <HAL_TIM_OC_Start_IT+0x18>)
 8009fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd6:	bf00      	nop
 8009fd8:	0800a00d 	.word	0x0800a00d
 8009fdc:	0800a055 	.word	0x0800a055
 8009fe0:	0800a055 	.word	0x0800a055
 8009fe4:	0800a055 	.word	0x0800a055
 8009fe8:	0800a01f 	.word	0x0800a01f
 8009fec:	0800a055 	.word	0x0800a055
 8009ff0:	0800a055 	.word	0x0800a055
 8009ff4:	0800a055 	.word	0x0800a055
 8009ff8:	0800a031 	.word	0x0800a031
 8009ffc:	0800a055 	.word	0x0800a055
 800a000:	0800a055 	.word	0x0800a055
 800a004:	0800a055 	.word	0x0800a055
 800a008:	0800a043 	.word	0x0800a043
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0202 	orr.w	r2, r2, #2
 800a01a:	60da      	str	r2, [r3, #12]
      break;
 800a01c:	e01b      	b.n	800a056 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68da      	ldr	r2, [r3, #12]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f042 0204 	orr.w	r2, r2, #4
 800a02c:	60da      	str	r2, [r3, #12]
      break;
 800a02e:	e012      	b.n	800a056 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f042 0208 	orr.w	r2, r2, #8
 800a03e:	60da      	str	r2, [r3, #12]
      break;
 800a040:	e009      	b.n	800a056 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f042 0210 	orr.w	r2, r2, #16
 800a050:	60da      	str	r2, [r3, #12]
      break;
 800a052:	e000      	b.n	800a056 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 800a054:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2201      	movs	r2, #1
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 feac 	bl	800adbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a15      	ldr	r2, [pc, #84]	; (800a0c0 <HAL_TIM_OC_Start_IT+0x100>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d004      	beq.n	800a078 <HAL_TIM_OC_Start_IT+0xb8>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a14      	ldr	r2, [pc, #80]	; (800a0c4 <HAL_TIM_OC_Start_IT+0x104>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d101      	bne.n	800a07c <HAL_TIM_OC_Start_IT+0xbc>
 800a078:	2301      	movs	r3, #1
 800a07a:	e000      	b.n	800a07e <HAL_TIM_OC_Start_IT+0xbe>
 800a07c:	2300      	movs	r3, #0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d007      	beq.n	800a092 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b06      	cmp	r3, #6
 800a0a2:	d007      	beq.n	800a0b4 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 0201 	orr.w	r2, r2, #1
 800a0b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	40010000 	.word	0x40010000
 800a0c4:	40010400 	.word	0x40010400

0800a0c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e01d      	b.n	800a116 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d106      	bne.n	800a0f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7f9 fd32 	bl	8003b58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	3304      	adds	r3, #4
 800a104:	4619      	mov	r1, r3
 800a106:	4610      	mov	r0, r2
 800a108:	f000 fc08 	bl	800a91c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b02      	cmp	r3, #2
 800a138:	d101      	bne.n	800a13e <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800a13a:	2302      	movs	r3, #2
 800a13c:	e0f3      	b.n	800a326 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b01      	cmp	r3, #1
 800a148:	d10b      	bne.n	800a162 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d104      	bne.n	800a15a <HAL_TIM_PWM_Start_DMA+0x3a>
 800a150:	887b      	ldrh	r3, [r7, #2]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e0e5      	b.n	800a326 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2202      	movs	r2, #2
 800a15e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b0c      	cmp	r3, #12
 800a166:	f200 80ad 	bhi.w	800a2c4 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800a16a:	a201      	add	r2, pc, #4	; (adr r2, 800a170 <HAL_TIM_PWM_Start_DMA+0x50>)
 800a16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a170:	0800a1a5 	.word	0x0800a1a5
 800a174:	0800a2c5 	.word	0x0800a2c5
 800a178:	0800a2c5 	.word	0x0800a2c5
 800a17c:	0800a2c5 	.word	0x0800a2c5
 800a180:	0800a1ed 	.word	0x0800a1ed
 800a184:	0800a2c5 	.word	0x0800a2c5
 800a188:	0800a2c5 	.word	0x0800a2c5
 800a18c:	0800a2c5 	.word	0x0800a2c5
 800a190:	0800a235 	.word	0x0800a235
 800a194:	0800a2c5 	.word	0x0800a2c5
 800a198:	0800a2c5 	.word	0x0800a2c5
 800a19c:	0800a2c5 	.word	0x0800a2c5
 800a1a0:	0800a27d 	.word	0x0800a27d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	4a61      	ldr	r2, [pc, #388]	; (800a330 <HAL_TIM_PWM_Start_DMA+0x210>)
 800a1aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b0:	4a60      	ldr	r2, [pc, #384]	; (800a334 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a1b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	4a5f      	ldr	r2, [pc, #380]	; (800a338 <HAL_TIM_PWM_Start_DMA+0x218>)
 800a1ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3334      	adds	r3, #52	; 0x34
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	887b      	ldrh	r3, [r7, #2]
 800a1cc:	f7fb f972 	bl	80054b4 <HAL_DMA_Start_IT>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e0a5      	b.n	800a326 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1e8:	60da      	str	r2, [r3, #12]
      break;
 800a1ea:	e06c      	b.n	800a2c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f0:	4a4f      	ldr	r2, [pc, #316]	; (800a330 <HAL_TIM_PWM_Start_DMA+0x210>)
 800a1f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f8:	4a4e      	ldr	r2, [pc, #312]	; (800a334 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a1fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a200:	4a4d      	ldr	r2, [pc, #308]	; (800a338 <HAL_TIM_PWM_Start_DMA+0x218>)
 800a202:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3338      	adds	r3, #56	; 0x38
 800a210:	461a      	mov	r2, r3
 800a212:	887b      	ldrh	r3, [r7, #2]
 800a214:	f7fb f94e 	bl	80054b4 <HAL_DMA_Start_IT>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e081      	b.n	800a326 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68da      	ldr	r2, [r3, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a230:	60da      	str	r2, [r3, #12]
      break;
 800a232:	e048      	b.n	800a2c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a238:	4a3d      	ldr	r2, [pc, #244]	; (800a330 <HAL_TIM_PWM_Start_DMA+0x210>)
 800a23a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	4a3c      	ldr	r2, [pc, #240]	; (800a334 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	4a3b      	ldr	r2, [pc, #236]	; (800a338 <HAL_TIM_PWM_Start_DMA+0x218>)
 800a24a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	333c      	adds	r3, #60	; 0x3c
 800a258:	461a      	mov	r2, r3
 800a25a:	887b      	ldrh	r3, [r7, #2]
 800a25c:	f7fb f92a 	bl	80054b4 <HAL_DMA_Start_IT>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e05d      	b.n	800a326 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a278:	60da      	str	r2, [r3, #12]
      break;
 800a27a:	e024      	b.n	800a2c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a280:	4a2b      	ldr	r2, [pc, #172]	; (800a330 <HAL_TIM_PWM_Start_DMA+0x210>)
 800a282:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a288:	4a2a      	ldr	r2, [pc, #168]	; (800a334 <HAL_TIM_PWM_Start_DMA+0x214>)
 800a28a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a290:	4a29      	ldr	r2, [pc, #164]	; (800a338 <HAL_TIM_PWM_Start_DMA+0x218>)
 800a292:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a298:	6879      	ldr	r1, [r7, #4]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3340      	adds	r3, #64	; 0x40
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	887b      	ldrh	r3, [r7, #2]
 800a2a4:	f7fb f906 	bl	80054b4 <HAL_DMA_Start_IT>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e039      	b.n	800a326 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68da      	ldr	r2, [r3, #12]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a2c0:	60da      	str	r2, [r3, #12]
      break;
 800a2c2:	e000      	b.n	800a2c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800a2c4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	68b9      	ldr	r1, [r7, #8]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 fd74 	bl	800adbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a18      	ldr	r2, [pc, #96]	; (800a33c <HAL_TIM_PWM_Start_DMA+0x21c>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a17      	ldr	r2, [pc, #92]	; (800a340 <HAL_TIM_PWM_Start_DMA+0x220>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d101      	bne.n	800a2ec <HAL_TIM_PWM_Start_DMA+0x1cc>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e000      	b.n	800a2ee <HAL_TIM_PWM_Start_DMA+0x1ce>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d007      	beq.n	800a302 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f003 0307 	and.w	r3, r3, #7
 800a30c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	2b06      	cmp	r3, #6
 800a312:	d007      	beq.n	800a324 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f042 0201 	orr.w	r2, r2, #1
 800a322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	0800a83d 	.word	0x0800a83d
 800a334:	0800a8ad 	.word	0x0800a8ad
 800a338:	0800a819 	.word	0x0800a819
 800a33c:	40010000 	.word	0x40010000
 800a340:	40010400 	.word	0x40010400

0800a344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b02      	cmp	r3, #2
 800a358:	d122      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f003 0302 	and.w	r3, r3, #2
 800a364:	2b02      	cmp	r3, #2
 800a366:	d11b      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f06f 0202 	mvn.w	r2, #2
 800a370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fa14 	bl	800a7b4 <HAL_TIM_IC_CaptureCallback>
 800a38c:	e005      	b.n	800a39a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7f7 fcee 	bl	8001d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fa17 	bl	800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d122      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f003 0304 	and.w	r3, r3, #4
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	d11b      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f06f 0204 	mvn.w	r2, #4
 800a3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f9ea 	bl	800a7b4 <HAL_TIM_IC_CaptureCallback>
 800a3e0:	e005      	b.n	800a3ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7f7 fcc4 	bl	8001d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9ed 	bl	800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	f003 0308 	and.w	r3, r3, #8
 800a3fe:	2b08      	cmp	r3, #8
 800a400:	d122      	bne.n	800a448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f003 0308 	and.w	r3, r3, #8
 800a40c:	2b08      	cmp	r3, #8
 800a40e:	d11b      	bne.n	800a448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f06f 0208 	mvn.w	r2, #8
 800a418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2204      	movs	r2, #4
 800a41e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f9c0 	bl	800a7b4 <HAL_TIM_IC_CaptureCallback>
 800a434:	e005      	b.n	800a442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7f7 fc9a 	bl	8001d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f9c3 	bl	800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	f003 0310 	and.w	r3, r3, #16
 800a452:	2b10      	cmp	r3, #16
 800a454:	d122      	bne.n	800a49c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b10      	cmp	r3, #16
 800a462:	d11b      	bne.n	800a49c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0210 	mvn.w	r2, #16
 800a46c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2208      	movs	r2, #8
 800a472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	69db      	ldr	r3, [r3, #28]
 800a47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f996 	bl	800a7b4 <HAL_TIM_IC_CaptureCallback>
 800a488:	e005      	b.n	800a496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7f7 fc70 	bl	8001d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f999 	bl	800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d10e      	bne.n	800a4c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d107      	bne.n	800a4c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f06f 0201 	mvn.w	r2, #1
 800a4c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f96c 	bl	800a7a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d2:	2b80      	cmp	r3, #128	; 0x80
 800a4d4:	d10e      	bne.n	800a4f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e0:	2b80      	cmp	r3, #128	; 0x80
 800a4e2:	d107      	bne.n	800a4f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fd62 	bl	800afb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fe:	2b40      	cmp	r3, #64	; 0x40
 800a500:	d10e      	bne.n	800a520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50c:	2b40      	cmp	r3, #64	; 0x40
 800a50e:	d107      	bne.n	800a520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f968 	bl	800a7f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b20      	cmp	r3, #32
 800a52c:	d10e      	bne.n	800a54c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f003 0320 	and.w	r3, r3, #32
 800a538:	2b20      	cmp	r3, #32
 800a53a:	d107      	bne.n	800a54c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f06f 0220 	mvn.w	r2, #32
 800a544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fd2c 	bl	800afa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a566:	2b01      	cmp	r3, #1
 800a568:	d101      	bne.n	800a56e <HAL_TIM_OC_ConfigChannel+0x1a>
 800a56a:	2302      	movs	r3, #2
 800a56c:	e04e      	b.n	800a60c <HAL_TIM_OC_ConfigChannel+0xb8>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2202      	movs	r2, #2
 800a57a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b0c      	cmp	r3, #12
 800a582:	d839      	bhi.n	800a5f8 <HAL_TIM_OC_ConfigChannel+0xa4>
 800a584:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <HAL_TIM_OC_ConfigChannel+0x38>)
 800a586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58a:	bf00      	nop
 800a58c:	0800a5c1 	.word	0x0800a5c1
 800a590:	0800a5f9 	.word	0x0800a5f9
 800a594:	0800a5f9 	.word	0x0800a5f9
 800a598:	0800a5f9 	.word	0x0800a5f9
 800a59c:	0800a5cf 	.word	0x0800a5cf
 800a5a0:	0800a5f9 	.word	0x0800a5f9
 800a5a4:	0800a5f9 	.word	0x0800a5f9
 800a5a8:	0800a5f9 	.word	0x0800a5f9
 800a5ac:	0800a5dd 	.word	0x0800a5dd
 800a5b0:	0800a5f9 	.word	0x0800a5f9
 800a5b4:	0800a5f9 	.word	0x0800a5f9
 800a5b8:	0800a5f9 	.word	0x0800a5f9
 800a5bc:	0800a5eb 	.word	0x0800a5eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68b9      	ldr	r1, [r7, #8]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 fa48 	bl	800aa5c <TIM_OC1_SetConfig>
      break;
 800a5cc:	e015      	b.n	800a5fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68b9      	ldr	r1, [r7, #8]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 fab1 	bl	800ab3c <TIM_OC2_SetConfig>
      break;
 800a5da:	e00e      	b.n	800a5fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68b9      	ldr	r1, [r7, #8]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 fb20 	bl	800ac28 <TIM_OC3_SetConfig>
      break;
 800a5e8:	e007      	b.n	800a5fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 fb8d 	bl	800ad10 <TIM_OC4_SetConfig>
      break;
 800a5f6:	e000      	b.n	800a5fa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800a5f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a626:	2b01      	cmp	r3, #1
 800a628:	d101      	bne.n	800a62e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a62a:	2302      	movs	r3, #2
 800a62c:	e0b4      	b.n	800a798 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2202      	movs	r2, #2
 800a63a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b0c      	cmp	r3, #12
 800a642:	f200 809f 	bhi.w	800a784 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a646:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a681 	.word	0x0800a681
 800a650:	0800a785 	.word	0x0800a785
 800a654:	0800a785 	.word	0x0800a785
 800a658:	0800a785 	.word	0x0800a785
 800a65c:	0800a6c1 	.word	0x0800a6c1
 800a660:	0800a785 	.word	0x0800a785
 800a664:	0800a785 	.word	0x0800a785
 800a668:	0800a785 	.word	0x0800a785
 800a66c:	0800a703 	.word	0x0800a703
 800a670:	0800a785 	.word	0x0800a785
 800a674:	0800a785 	.word	0x0800a785
 800a678:	0800a785 	.word	0x0800a785
 800a67c:	0800a743 	.word	0x0800a743
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68b9      	ldr	r1, [r7, #8]
 800a686:	4618      	mov	r0, r3
 800a688:	f000 f9e8 	bl	800aa5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	699a      	ldr	r2, [r3, #24]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f042 0208 	orr.w	r2, r2, #8
 800a69a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	699a      	ldr	r2, [r3, #24]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 0204 	bic.w	r2, r2, #4
 800a6aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6999      	ldr	r1, [r3, #24]
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	691a      	ldr	r2, [r3, #16]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	619a      	str	r2, [r3, #24]
      break;
 800a6be:	e062      	b.n	800a786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68b9      	ldr	r1, [r7, #8]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 fa38 	bl	800ab3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	699a      	ldr	r2, [r3, #24]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	699a      	ldr	r2, [r3, #24]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6999      	ldr	r1, [r3, #24]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	021a      	lsls	r2, r3, #8
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	430a      	orrs	r2, r1
 800a6fe:	619a      	str	r2, [r3, #24]
      break;
 800a700:	e041      	b.n	800a786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fa8d 	bl	800ac28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	69da      	ldr	r2, [r3, #28]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f042 0208 	orr.w	r2, r2, #8
 800a71c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	69da      	ldr	r2, [r3, #28]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0204 	bic.w	r2, r2, #4
 800a72c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	69d9      	ldr	r1, [r3, #28]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	430a      	orrs	r2, r1
 800a73e:	61da      	str	r2, [r3, #28]
      break;
 800a740:	e021      	b.n	800a786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68b9      	ldr	r1, [r7, #8]
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 fae1 	bl	800ad10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	69da      	ldr	r2, [r3, #28]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a75c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	69da      	ldr	r2, [r3, #28]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a76c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69d9      	ldr	r1, [r3, #28]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	021a      	lsls	r2, r3, #8
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	430a      	orrs	r2, r1
 800a780:	61da      	str	r2, [r3, #28]
      break;
 800a782:	e000      	b.n	800a786 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a784:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a824:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f7ff ffe8 	bl	800a804 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800a834:	bf00      	nop
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a848:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d103      	bne.n	800a864 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	771a      	strb	r2, [r3, #28]
 800a862:	e019      	b.n	800a898 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d103      	bne.n	800a876 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2202      	movs	r2, #2
 800a872:	771a      	strb	r2, [r3, #28]
 800a874:	e010      	b.n	800a898 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d103      	bne.n	800a888 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2204      	movs	r2, #4
 800a884:	771a      	strb	r2, [r3, #28]
 800a886:	e007      	b.n	800a898 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d102      	bne.n	800a898 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2208      	movs	r2, #8
 800a896:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f7ff ff95 	bl	800a7c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	771a      	strb	r2, [r3, #28]
}
 800a8a4:	bf00      	nop
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d103      	bne.n	800a8d4 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	771a      	strb	r2, [r3, #28]
 800a8d2:	e019      	b.n	800a908 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d103      	bne.n	800a8e6 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	771a      	strb	r2, [r3, #28]
 800a8e4:	e010      	b.n	800a908 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d103      	bne.n	800a8f8 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2204      	movs	r2, #4
 800a8f4:	771a      	strb	r2, [r3, #28]
 800a8f6:	e007      	b.n	800a908 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d102      	bne.n	800a908 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2208      	movs	r2, #8
 800a906:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7ff ff67 	bl	800a7dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	771a      	strb	r2, [r3, #28]
}
 800a914:	bf00      	nop
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a40      	ldr	r2, [pc, #256]	; (800aa30 <TIM_Base_SetConfig+0x114>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d013      	beq.n	800a95c <TIM_Base_SetConfig+0x40>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a93a:	d00f      	beq.n	800a95c <TIM_Base_SetConfig+0x40>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a3d      	ldr	r2, [pc, #244]	; (800aa34 <TIM_Base_SetConfig+0x118>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d00b      	beq.n	800a95c <TIM_Base_SetConfig+0x40>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a3c      	ldr	r2, [pc, #240]	; (800aa38 <TIM_Base_SetConfig+0x11c>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d007      	beq.n	800a95c <TIM_Base_SetConfig+0x40>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a3b      	ldr	r2, [pc, #236]	; (800aa3c <TIM_Base_SetConfig+0x120>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d003      	beq.n	800a95c <TIM_Base_SetConfig+0x40>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a3a      	ldr	r2, [pc, #232]	; (800aa40 <TIM_Base_SetConfig+0x124>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d108      	bne.n	800a96e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a2f      	ldr	r2, [pc, #188]	; (800aa30 <TIM_Base_SetConfig+0x114>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d02b      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a97c:	d027      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a2c      	ldr	r2, [pc, #176]	; (800aa34 <TIM_Base_SetConfig+0x118>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d023      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a2b      	ldr	r2, [pc, #172]	; (800aa38 <TIM_Base_SetConfig+0x11c>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d01f      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a2a      	ldr	r2, [pc, #168]	; (800aa3c <TIM_Base_SetConfig+0x120>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d01b      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a29      	ldr	r2, [pc, #164]	; (800aa40 <TIM_Base_SetConfig+0x124>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d017      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a28      	ldr	r2, [pc, #160]	; (800aa44 <TIM_Base_SetConfig+0x128>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d013      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a27      	ldr	r2, [pc, #156]	; (800aa48 <TIM_Base_SetConfig+0x12c>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d00f      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a26      	ldr	r2, [pc, #152]	; (800aa4c <TIM_Base_SetConfig+0x130>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d00b      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a25      	ldr	r2, [pc, #148]	; (800aa50 <TIM_Base_SetConfig+0x134>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d007      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a24      	ldr	r2, [pc, #144]	; (800aa54 <TIM_Base_SetConfig+0x138>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d003      	beq.n	800a9ce <TIM_Base_SetConfig+0xb2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a23      	ldr	r2, [pc, #140]	; (800aa58 <TIM_Base_SetConfig+0x13c>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d108      	bne.n	800a9e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a0a      	ldr	r2, [pc, #40]	; (800aa30 <TIM_Base_SetConfig+0x114>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d003      	beq.n	800aa14 <TIM_Base_SetConfig+0xf8>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a0c      	ldr	r2, [pc, #48]	; (800aa40 <TIM_Base_SetConfig+0x124>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d103      	bne.n	800aa1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	691a      	ldr	r2, [r3, #16]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	615a      	str	r2, [r3, #20]
}
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	40010000 	.word	0x40010000
 800aa34:	40000400 	.word	0x40000400
 800aa38:	40000800 	.word	0x40000800
 800aa3c:	40000c00 	.word	0x40000c00
 800aa40:	40010400 	.word	0x40010400
 800aa44:	40014000 	.word	0x40014000
 800aa48:	40014400 	.word	0x40014400
 800aa4c:	40014800 	.word	0x40014800
 800aa50:	40001800 	.word	0x40001800
 800aa54:	40001c00 	.word	0x40001c00
 800aa58:	40002000 	.word	0x40002000

0800aa5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	f023 0201 	bic.w	r2, r3, #1
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f023 0303 	bic.w	r3, r3, #3
 800aa92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f023 0302 	bic.w	r3, r3, #2
 800aaa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a20      	ldr	r2, [pc, #128]	; (800ab34 <TIM_OC1_SetConfig+0xd8>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d003      	beq.n	800aac0 <TIM_OC1_SetConfig+0x64>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a1f      	ldr	r2, [pc, #124]	; (800ab38 <TIM_OC1_SetConfig+0xdc>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d10c      	bne.n	800aada <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	f023 0308 	bic.w	r3, r3, #8
 800aac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	4313      	orrs	r3, r2
 800aad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f023 0304 	bic.w	r3, r3, #4
 800aad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a15      	ldr	r2, [pc, #84]	; (800ab34 <TIM_OC1_SetConfig+0xd8>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d003      	beq.n	800aaea <TIM_OC1_SetConfig+0x8e>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a14      	ldr	r2, [pc, #80]	; (800ab38 <TIM_OC1_SetConfig+0xdc>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d111      	bne.n	800ab0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aaf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aaf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	699b      	ldr	r3, [r3, #24]
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	685a      	ldr	r2, [r3, #4]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	621a      	str	r2, [r3, #32]
}
 800ab28:	bf00      	nop
 800ab2a:	371c      	adds	r7, #28
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	40010000 	.word	0x40010000
 800ab38:	40010400 	.word	0x40010400

0800ab3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	f023 0210 	bic.w	r2, r3, #16
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	021b      	lsls	r3, r3, #8
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f023 0320 	bic.w	r3, r3, #32
 800ab86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	011b      	lsls	r3, r3, #4
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	4313      	orrs	r3, r2
 800ab92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a22      	ldr	r2, [pc, #136]	; (800ac20 <TIM_OC2_SetConfig+0xe4>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d003      	beq.n	800aba4 <TIM_OC2_SetConfig+0x68>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a21      	ldr	r2, [pc, #132]	; (800ac24 <TIM_OC2_SetConfig+0xe8>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d10d      	bne.n	800abc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	011b      	lsls	r3, r3, #4
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a17      	ldr	r2, [pc, #92]	; (800ac20 <TIM_OC2_SetConfig+0xe4>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d003      	beq.n	800abd0 <TIM_OC2_SetConfig+0x94>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a16      	ldr	r2, [pc, #88]	; (800ac24 <TIM_OC2_SetConfig+0xe8>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d113      	bne.n	800abf8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	4313      	orrs	r3, r2
 800abea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	621a      	str	r2, [r3, #32]
}
 800ac12:	bf00      	nop
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	40010000 	.word	0x40010000
 800ac24:	40010400 	.word	0x40010400

0800ac28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f023 0303 	bic.w	r3, r3, #3
 800ac5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	021b      	lsls	r3, r3, #8
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a21      	ldr	r2, [pc, #132]	; (800ad08 <TIM_OC3_SetConfig+0xe0>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d003      	beq.n	800ac8e <TIM_OC3_SetConfig+0x66>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a20      	ldr	r2, [pc, #128]	; (800ad0c <TIM_OC3_SetConfig+0xe4>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d10d      	bne.n	800acaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	021b      	lsls	r3, r3, #8
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a16      	ldr	r2, [pc, #88]	; (800ad08 <TIM_OC3_SetConfig+0xe0>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d003      	beq.n	800acba <TIM_OC3_SetConfig+0x92>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a15      	ldr	r2, [pc, #84]	; (800ad0c <TIM_OC3_SetConfig+0xe4>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d113      	bne.n	800ace2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	011b      	lsls	r3, r3, #4
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	011b      	lsls	r3, r3, #4
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	4313      	orrs	r3, r2
 800ace0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	685a      	ldr	r2, [r3, #4]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	621a      	str	r2, [r3, #32]
}
 800acfc:	bf00      	nop
 800acfe:	371c      	adds	r7, #28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	40010000 	.word	0x40010000
 800ad0c:	40010400 	.word	0x40010400

0800ad10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	021b      	lsls	r3, r3, #8
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	031b      	lsls	r3, r3, #12
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a12      	ldr	r2, [pc, #72]	; (800adb4 <TIM_OC4_SetConfig+0xa4>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d003      	beq.n	800ad78 <TIM_OC4_SetConfig+0x68>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a11      	ldr	r2, [pc, #68]	; (800adb8 <TIM_OC4_SetConfig+0xa8>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d109      	bne.n	800ad8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	695b      	ldr	r3, [r3, #20]
 800ad84:	019b      	lsls	r3, r3, #6
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	621a      	str	r2, [r3, #32]
}
 800ada6:	bf00      	nop
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	40010000 	.word	0x40010000
 800adb8:	40010400 	.word	0x40010400

0800adbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f003 031f 	and.w	r3, r3, #31
 800adce:	2201      	movs	r2, #1
 800add0:	fa02 f303 	lsl.w	r3, r2, r3
 800add4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6a1a      	ldr	r2, [r3, #32]
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	43db      	mvns	r3, r3
 800adde:	401a      	ands	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6a1a      	ldr	r2, [r3, #32]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	f003 031f 	and.w	r3, r3, #31
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	fa01 f303 	lsl.w	r3, r1, r3
 800adf4:	431a      	orrs	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	621a      	str	r2, [r3, #32]
}
 800adfa:	bf00      	nop
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
	...

0800ae08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d101      	bne.n	800ae20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae1c:	2302      	movs	r3, #2
 800ae1e:	e05a      	b.n	800aed6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a21      	ldr	r2, [pc, #132]	; (800aee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d022      	beq.n	800aeaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae6c:	d01d      	beq.n	800aeaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a1d      	ldr	r2, [pc, #116]	; (800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d018      	beq.n	800aeaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a1b      	ldr	r2, [pc, #108]	; (800aeec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d013      	beq.n	800aeaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a1a      	ldr	r2, [pc, #104]	; (800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d00e      	beq.n	800aeaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a18      	ldr	r2, [pc, #96]	; (800aef4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d009      	beq.n	800aeaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d004      	beq.n	800aeaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a15      	ldr	r2, [pc, #84]	; (800aefc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d10c      	bne.n	800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aeb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	40010000 	.word	0x40010000
 800aee8:	40000400 	.word	0x40000400
 800aeec:	40000800 	.word	0x40000800
 800aef0:	40000c00 	.word	0x40000c00
 800aef4:	40010400 	.word	0x40010400
 800aef8:	40014000 	.word	0x40014000
 800aefc:	40001800 	.word	0x40001800

0800af00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af14:	2b01      	cmp	r3, #1
 800af16:	d101      	bne.n	800af1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af18:	2302      	movs	r3, #2
 800af1a:	e03d      	b.n	800af98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4313      	orrs	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	4313      	orrs	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afc0:	bf00      	nop
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e03f      	b.n	800b05e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7f8 fe84 	bl	8003d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2224      	movs	r2, #36	; 0x24
 800affc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b00e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f829 	bl	800b068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	691a      	ldr	r2, [r3, #16]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	695a      	ldr	r2, [r3, #20]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68da      	ldr	r2, [r3, #12]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2220      	movs	r2, #32
 800b050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2220      	movs	r2, #32
 800b058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
	...

0800b068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	b085      	sub	sp, #20
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68da      	ldr	r2, [r3, #12]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	430a      	orrs	r2, r1
 800b086:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	689a      	ldr	r2, [r3, #8]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	431a      	orrs	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	431a      	orrs	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b0aa:	f023 030c 	bic.w	r3, r3, #12
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	6812      	ldr	r2, [r2, #0]
 800b0b2:	68f9      	ldr	r1, [r7, #12]
 800b0b4:	430b      	orrs	r3, r1
 800b0b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	699a      	ldr	r2, [r3, #24]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0d6:	f040 818b 	bne.w	800b3f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4ac1      	ldr	r2, [pc, #772]	; (800b3e4 <UART_SetConfig+0x37c>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d005      	beq.n	800b0f0 <UART_SetConfig+0x88>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4abf      	ldr	r2, [pc, #764]	; (800b3e8 <UART_SetConfig+0x380>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	f040 80bd 	bne.w	800b26a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0f0:	f7fc ffaa 	bl	8008048 <HAL_RCC_GetPCLK2Freq>
 800b0f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	461d      	mov	r5, r3
 800b0fa:	f04f 0600 	mov.w	r6, #0
 800b0fe:	46a8      	mov	r8, r5
 800b100:	46b1      	mov	r9, r6
 800b102:	eb18 0308 	adds.w	r3, r8, r8
 800b106:	eb49 0409 	adc.w	r4, r9, r9
 800b10a:	4698      	mov	r8, r3
 800b10c:	46a1      	mov	r9, r4
 800b10e:	eb18 0805 	adds.w	r8, r8, r5
 800b112:	eb49 0906 	adc.w	r9, r9, r6
 800b116:	f04f 0100 	mov.w	r1, #0
 800b11a:	f04f 0200 	mov.w	r2, #0
 800b11e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b122:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b126:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b12a:	4688      	mov	r8, r1
 800b12c:	4691      	mov	r9, r2
 800b12e:	eb18 0005 	adds.w	r0, r8, r5
 800b132:	eb49 0106 	adc.w	r1, r9, r6
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	461d      	mov	r5, r3
 800b13c:	f04f 0600 	mov.w	r6, #0
 800b140:	196b      	adds	r3, r5, r5
 800b142:	eb46 0406 	adc.w	r4, r6, r6
 800b146:	461a      	mov	r2, r3
 800b148:	4623      	mov	r3, r4
 800b14a:	f7f5 fd91 	bl	8000c70 <__aeabi_uldivmod>
 800b14e:	4603      	mov	r3, r0
 800b150:	460c      	mov	r4, r1
 800b152:	461a      	mov	r2, r3
 800b154:	4ba5      	ldr	r3, [pc, #660]	; (800b3ec <UART_SetConfig+0x384>)
 800b156:	fba3 2302 	umull	r2, r3, r3, r2
 800b15a:	095b      	lsrs	r3, r3, #5
 800b15c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	461d      	mov	r5, r3
 800b164:	f04f 0600 	mov.w	r6, #0
 800b168:	46a9      	mov	r9, r5
 800b16a:	46b2      	mov	sl, r6
 800b16c:	eb19 0309 	adds.w	r3, r9, r9
 800b170:	eb4a 040a 	adc.w	r4, sl, sl
 800b174:	4699      	mov	r9, r3
 800b176:	46a2      	mov	sl, r4
 800b178:	eb19 0905 	adds.w	r9, r9, r5
 800b17c:	eb4a 0a06 	adc.w	sl, sl, r6
 800b180:	f04f 0100 	mov.w	r1, #0
 800b184:	f04f 0200 	mov.w	r2, #0
 800b188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b18c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b194:	4689      	mov	r9, r1
 800b196:	4692      	mov	sl, r2
 800b198:	eb19 0005 	adds.w	r0, r9, r5
 800b19c:	eb4a 0106 	adc.w	r1, sl, r6
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	461d      	mov	r5, r3
 800b1a6:	f04f 0600 	mov.w	r6, #0
 800b1aa:	196b      	adds	r3, r5, r5
 800b1ac:	eb46 0406 	adc.w	r4, r6, r6
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4623      	mov	r3, r4
 800b1b4:	f7f5 fd5c 	bl	8000c70 <__aeabi_uldivmod>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4b8b      	ldr	r3, [pc, #556]	; (800b3ec <UART_SetConfig+0x384>)
 800b1c0:	fba3 1302 	umull	r1, r3, r3, r2
 800b1c4:	095b      	lsrs	r3, r3, #5
 800b1c6:	2164      	movs	r1, #100	; 0x64
 800b1c8:	fb01 f303 	mul.w	r3, r1, r3
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	3332      	adds	r3, #50	; 0x32
 800b1d2:	4a86      	ldr	r2, [pc, #536]	; (800b3ec <UART_SetConfig+0x384>)
 800b1d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d8:	095b      	lsrs	r3, r3, #5
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b1e0:	4498      	add	r8, r3
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	461d      	mov	r5, r3
 800b1e6:	f04f 0600 	mov.w	r6, #0
 800b1ea:	46a9      	mov	r9, r5
 800b1ec:	46b2      	mov	sl, r6
 800b1ee:	eb19 0309 	adds.w	r3, r9, r9
 800b1f2:	eb4a 040a 	adc.w	r4, sl, sl
 800b1f6:	4699      	mov	r9, r3
 800b1f8:	46a2      	mov	sl, r4
 800b1fa:	eb19 0905 	adds.w	r9, r9, r5
 800b1fe:	eb4a 0a06 	adc.w	sl, sl, r6
 800b202:	f04f 0100 	mov.w	r1, #0
 800b206:	f04f 0200 	mov.w	r2, #0
 800b20a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b20e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b212:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b216:	4689      	mov	r9, r1
 800b218:	4692      	mov	sl, r2
 800b21a:	eb19 0005 	adds.w	r0, r9, r5
 800b21e:	eb4a 0106 	adc.w	r1, sl, r6
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	461d      	mov	r5, r3
 800b228:	f04f 0600 	mov.w	r6, #0
 800b22c:	196b      	adds	r3, r5, r5
 800b22e:	eb46 0406 	adc.w	r4, r6, r6
 800b232:	461a      	mov	r2, r3
 800b234:	4623      	mov	r3, r4
 800b236:	f7f5 fd1b 	bl	8000c70 <__aeabi_uldivmod>
 800b23a:	4603      	mov	r3, r0
 800b23c:	460c      	mov	r4, r1
 800b23e:	461a      	mov	r2, r3
 800b240:	4b6a      	ldr	r3, [pc, #424]	; (800b3ec <UART_SetConfig+0x384>)
 800b242:	fba3 1302 	umull	r1, r3, r3, r2
 800b246:	095b      	lsrs	r3, r3, #5
 800b248:	2164      	movs	r1, #100	; 0x64
 800b24a:	fb01 f303 	mul.w	r3, r1, r3
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	3332      	adds	r3, #50	; 0x32
 800b254:	4a65      	ldr	r2, [pc, #404]	; (800b3ec <UART_SetConfig+0x384>)
 800b256:	fba2 2303 	umull	r2, r3, r2, r3
 800b25a:	095b      	lsrs	r3, r3, #5
 800b25c:	f003 0207 	and.w	r2, r3, #7
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4442      	add	r2, r8
 800b266:	609a      	str	r2, [r3, #8]
 800b268:	e26f      	b.n	800b74a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b26a:	f7fc fed9 	bl	8008020 <HAL_RCC_GetPCLK1Freq>
 800b26e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	461d      	mov	r5, r3
 800b274:	f04f 0600 	mov.w	r6, #0
 800b278:	46a8      	mov	r8, r5
 800b27a:	46b1      	mov	r9, r6
 800b27c:	eb18 0308 	adds.w	r3, r8, r8
 800b280:	eb49 0409 	adc.w	r4, r9, r9
 800b284:	4698      	mov	r8, r3
 800b286:	46a1      	mov	r9, r4
 800b288:	eb18 0805 	adds.w	r8, r8, r5
 800b28c:	eb49 0906 	adc.w	r9, r9, r6
 800b290:	f04f 0100 	mov.w	r1, #0
 800b294:	f04f 0200 	mov.w	r2, #0
 800b298:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b29c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b2a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b2a4:	4688      	mov	r8, r1
 800b2a6:	4691      	mov	r9, r2
 800b2a8:	eb18 0005 	adds.w	r0, r8, r5
 800b2ac:	eb49 0106 	adc.w	r1, r9, r6
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	461d      	mov	r5, r3
 800b2b6:	f04f 0600 	mov.w	r6, #0
 800b2ba:	196b      	adds	r3, r5, r5
 800b2bc:	eb46 0406 	adc.w	r4, r6, r6
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	f7f5 fcd4 	bl	8000c70 <__aeabi_uldivmod>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	4b47      	ldr	r3, [pc, #284]	; (800b3ec <UART_SetConfig+0x384>)
 800b2d0:	fba3 2302 	umull	r2, r3, r3, r2
 800b2d4:	095b      	lsrs	r3, r3, #5
 800b2d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	461d      	mov	r5, r3
 800b2de:	f04f 0600 	mov.w	r6, #0
 800b2e2:	46a9      	mov	r9, r5
 800b2e4:	46b2      	mov	sl, r6
 800b2e6:	eb19 0309 	adds.w	r3, r9, r9
 800b2ea:	eb4a 040a 	adc.w	r4, sl, sl
 800b2ee:	4699      	mov	r9, r3
 800b2f0:	46a2      	mov	sl, r4
 800b2f2:	eb19 0905 	adds.w	r9, r9, r5
 800b2f6:	eb4a 0a06 	adc.w	sl, sl, r6
 800b2fa:	f04f 0100 	mov.w	r1, #0
 800b2fe:	f04f 0200 	mov.w	r2, #0
 800b302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b306:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b30a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b30e:	4689      	mov	r9, r1
 800b310:	4692      	mov	sl, r2
 800b312:	eb19 0005 	adds.w	r0, r9, r5
 800b316:	eb4a 0106 	adc.w	r1, sl, r6
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	461d      	mov	r5, r3
 800b320:	f04f 0600 	mov.w	r6, #0
 800b324:	196b      	adds	r3, r5, r5
 800b326:	eb46 0406 	adc.w	r4, r6, r6
 800b32a:	461a      	mov	r2, r3
 800b32c:	4623      	mov	r3, r4
 800b32e:	f7f5 fc9f 	bl	8000c70 <__aeabi_uldivmod>
 800b332:	4603      	mov	r3, r0
 800b334:	460c      	mov	r4, r1
 800b336:	461a      	mov	r2, r3
 800b338:	4b2c      	ldr	r3, [pc, #176]	; (800b3ec <UART_SetConfig+0x384>)
 800b33a:	fba3 1302 	umull	r1, r3, r3, r2
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	2164      	movs	r1, #100	; 0x64
 800b342:	fb01 f303 	mul.w	r3, r1, r3
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	00db      	lsls	r3, r3, #3
 800b34a:	3332      	adds	r3, #50	; 0x32
 800b34c:	4a27      	ldr	r2, [pc, #156]	; (800b3ec <UART_SetConfig+0x384>)
 800b34e:	fba2 2303 	umull	r2, r3, r2, r3
 800b352:	095b      	lsrs	r3, r3, #5
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b35a:	4498      	add	r8, r3
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	461d      	mov	r5, r3
 800b360:	f04f 0600 	mov.w	r6, #0
 800b364:	46a9      	mov	r9, r5
 800b366:	46b2      	mov	sl, r6
 800b368:	eb19 0309 	adds.w	r3, r9, r9
 800b36c:	eb4a 040a 	adc.w	r4, sl, sl
 800b370:	4699      	mov	r9, r3
 800b372:	46a2      	mov	sl, r4
 800b374:	eb19 0905 	adds.w	r9, r9, r5
 800b378:	eb4a 0a06 	adc.w	sl, sl, r6
 800b37c:	f04f 0100 	mov.w	r1, #0
 800b380:	f04f 0200 	mov.w	r2, #0
 800b384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b388:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b38c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b390:	4689      	mov	r9, r1
 800b392:	4692      	mov	sl, r2
 800b394:	eb19 0005 	adds.w	r0, r9, r5
 800b398:	eb4a 0106 	adc.w	r1, sl, r6
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	461d      	mov	r5, r3
 800b3a2:	f04f 0600 	mov.w	r6, #0
 800b3a6:	196b      	adds	r3, r5, r5
 800b3a8:	eb46 0406 	adc.w	r4, r6, r6
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4623      	mov	r3, r4
 800b3b0:	f7f5 fc5e 	bl	8000c70 <__aeabi_uldivmod>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <UART_SetConfig+0x384>)
 800b3bc:	fba3 1302 	umull	r1, r3, r3, r2
 800b3c0:	095b      	lsrs	r3, r3, #5
 800b3c2:	2164      	movs	r1, #100	; 0x64
 800b3c4:	fb01 f303 	mul.w	r3, r1, r3
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	3332      	adds	r3, #50	; 0x32
 800b3ce:	4a07      	ldr	r2, [pc, #28]	; (800b3ec <UART_SetConfig+0x384>)
 800b3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d4:	095b      	lsrs	r3, r3, #5
 800b3d6:	f003 0207 	and.w	r2, r3, #7
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4442      	add	r2, r8
 800b3e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b3e2:	e1b2      	b.n	800b74a <UART_SetConfig+0x6e2>
 800b3e4:	40011000 	.word	0x40011000
 800b3e8:	40011400 	.word	0x40011400
 800b3ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4ad7      	ldr	r2, [pc, #860]	; (800b754 <UART_SetConfig+0x6ec>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d005      	beq.n	800b406 <UART_SetConfig+0x39e>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4ad6      	ldr	r2, [pc, #856]	; (800b758 <UART_SetConfig+0x6f0>)
 800b400:	4293      	cmp	r3, r2
 800b402:	f040 80d1 	bne.w	800b5a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b406:	f7fc fe1f 	bl	8008048 <HAL_RCC_GetPCLK2Freq>
 800b40a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	469a      	mov	sl, r3
 800b410:	f04f 0b00 	mov.w	fp, #0
 800b414:	46d0      	mov	r8, sl
 800b416:	46d9      	mov	r9, fp
 800b418:	eb18 0308 	adds.w	r3, r8, r8
 800b41c:	eb49 0409 	adc.w	r4, r9, r9
 800b420:	4698      	mov	r8, r3
 800b422:	46a1      	mov	r9, r4
 800b424:	eb18 080a 	adds.w	r8, r8, sl
 800b428:	eb49 090b 	adc.w	r9, r9, fp
 800b42c:	f04f 0100 	mov.w	r1, #0
 800b430:	f04f 0200 	mov.w	r2, #0
 800b434:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b438:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b43c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b440:	4688      	mov	r8, r1
 800b442:	4691      	mov	r9, r2
 800b444:	eb1a 0508 	adds.w	r5, sl, r8
 800b448:	eb4b 0609 	adc.w	r6, fp, r9
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	4619      	mov	r1, r3
 800b452:	f04f 0200 	mov.w	r2, #0
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	f04f 0400 	mov.w	r4, #0
 800b45e:	0094      	lsls	r4, r2, #2
 800b460:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b464:	008b      	lsls	r3, r1, #2
 800b466:	461a      	mov	r2, r3
 800b468:	4623      	mov	r3, r4
 800b46a:	4628      	mov	r0, r5
 800b46c:	4631      	mov	r1, r6
 800b46e:	f7f5 fbff 	bl	8000c70 <__aeabi_uldivmod>
 800b472:	4603      	mov	r3, r0
 800b474:	460c      	mov	r4, r1
 800b476:	461a      	mov	r2, r3
 800b478:	4bb8      	ldr	r3, [pc, #736]	; (800b75c <UART_SetConfig+0x6f4>)
 800b47a:	fba3 2302 	umull	r2, r3, r3, r2
 800b47e:	095b      	lsrs	r3, r3, #5
 800b480:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	469b      	mov	fp, r3
 800b488:	f04f 0c00 	mov.w	ip, #0
 800b48c:	46d9      	mov	r9, fp
 800b48e:	46e2      	mov	sl, ip
 800b490:	eb19 0309 	adds.w	r3, r9, r9
 800b494:	eb4a 040a 	adc.w	r4, sl, sl
 800b498:	4699      	mov	r9, r3
 800b49a:	46a2      	mov	sl, r4
 800b49c:	eb19 090b 	adds.w	r9, r9, fp
 800b4a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b4a4:	f04f 0100 	mov.w	r1, #0
 800b4a8:	f04f 0200 	mov.w	r2, #0
 800b4ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b4b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b4b8:	4689      	mov	r9, r1
 800b4ba:	4692      	mov	sl, r2
 800b4bc:	eb1b 0509 	adds.w	r5, fp, r9
 800b4c0:	eb4c 060a 	adc.w	r6, ip, sl
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	f04f 0200 	mov.w	r2, #0
 800b4ce:	f04f 0300 	mov.w	r3, #0
 800b4d2:	f04f 0400 	mov.w	r4, #0
 800b4d6:	0094      	lsls	r4, r2, #2
 800b4d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b4dc:	008b      	lsls	r3, r1, #2
 800b4de:	461a      	mov	r2, r3
 800b4e0:	4623      	mov	r3, r4
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	f7f5 fbc3 	bl	8000c70 <__aeabi_uldivmod>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	4b9a      	ldr	r3, [pc, #616]	; (800b75c <UART_SetConfig+0x6f4>)
 800b4f2:	fba3 1302 	umull	r1, r3, r3, r2
 800b4f6:	095b      	lsrs	r3, r3, #5
 800b4f8:	2164      	movs	r1, #100	; 0x64
 800b4fa:	fb01 f303 	mul.w	r3, r1, r3
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	011b      	lsls	r3, r3, #4
 800b502:	3332      	adds	r3, #50	; 0x32
 800b504:	4a95      	ldr	r2, [pc, #596]	; (800b75c <UART_SetConfig+0x6f4>)
 800b506:	fba2 2303 	umull	r2, r3, r2, r3
 800b50a:	095b      	lsrs	r3, r3, #5
 800b50c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b510:	4498      	add	r8, r3
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	469b      	mov	fp, r3
 800b516:	f04f 0c00 	mov.w	ip, #0
 800b51a:	46d9      	mov	r9, fp
 800b51c:	46e2      	mov	sl, ip
 800b51e:	eb19 0309 	adds.w	r3, r9, r9
 800b522:	eb4a 040a 	adc.w	r4, sl, sl
 800b526:	4699      	mov	r9, r3
 800b528:	46a2      	mov	sl, r4
 800b52a:	eb19 090b 	adds.w	r9, r9, fp
 800b52e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b532:	f04f 0100 	mov.w	r1, #0
 800b536:	f04f 0200 	mov.w	r2, #0
 800b53a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b53e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b542:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b546:	4689      	mov	r9, r1
 800b548:	4692      	mov	sl, r2
 800b54a:	eb1b 0509 	adds.w	r5, fp, r9
 800b54e:	eb4c 060a 	adc.w	r6, ip, sl
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	4619      	mov	r1, r3
 800b558:	f04f 0200 	mov.w	r2, #0
 800b55c:	f04f 0300 	mov.w	r3, #0
 800b560:	f04f 0400 	mov.w	r4, #0
 800b564:	0094      	lsls	r4, r2, #2
 800b566:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b56a:	008b      	lsls	r3, r1, #2
 800b56c:	461a      	mov	r2, r3
 800b56e:	4623      	mov	r3, r4
 800b570:	4628      	mov	r0, r5
 800b572:	4631      	mov	r1, r6
 800b574:	f7f5 fb7c 	bl	8000c70 <__aeabi_uldivmod>
 800b578:	4603      	mov	r3, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	461a      	mov	r2, r3
 800b57e:	4b77      	ldr	r3, [pc, #476]	; (800b75c <UART_SetConfig+0x6f4>)
 800b580:	fba3 1302 	umull	r1, r3, r3, r2
 800b584:	095b      	lsrs	r3, r3, #5
 800b586:	2164      	movs	r1, #100	; 0x64
 800b588:	fb01 f303 	mul.w	r3, r1, r3
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	011b      	lsls	r3, r3, #4
 800b590:	3332      	adds	r3, #50	; 0x32
 800b592:	4a72      	ldr	r2, [pc, #456]	; (800b75c <UART_SetConfig+0x6f4>)
 800b594:	fba2 2303 	umull	r2, r3, r2, r3
 800b598:	095b      	lsrs	r3, r3, #5
 800b59a:	f003 020f 	and.w	r2, r3, #15
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4442      	add	r2, r8
 800b5a4:	609a      	str	r2, [r3, #8]
 800b5a6:	e0d0      	b.n	800b74a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b5a8:	f7fc fd3a 	bl	8008020 <HAL_RCC_GetPCLK1Freq>
 800b5ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	469a      	mov	sl, r3
 800b5b2:	f04f 0b00 	mov.w	fp, #0
 800b5b6:	46d0      	mov	r8, sl
 800b5b8:	46d9      	mov	r9, fp
 800b5ba:	eb18 0308 	adds.w	r3, r8, r8
 800b5be:	eb49 0409 	adc.w	r4, r9, r9
 800b5c2:	4698      	mov	r8, r3
 800b5c4:	46a1      	mov	r9, r4
 800b5c6:	eb18 080a 	adds.w	r8, r8, sl
 800b5ca:	eb49 090b 	adc.w	r9, r9, fp
 800b5ce:	f04f 0100 	mov.w	r1, #0
 800b5d2:	f04f 0200 	mov.w	r2, #0
 800b5d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b5da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b5de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b5e2:	4688      	mov	r8, r1
 800b5e4:	4691      	mov	r9, r2
 800b5e6:	eb1a 0508 	adds.w	r5, sl, r8
 800b5ea:	eb4b 0609 	adc.w	r6, fp, r9
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	f04f 0200 	mov.w	r2, #0
 800b5f8:	f04f 0300 	mov.w	r3, #0
 800b5fc:	f04f 0400 	mov.w	r4, #0
 800b600:	0094      	lsls	r4, r2, #2
 800b602:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b606:	008b      	lsls	r3, r1, #2
 800b608:	461a      	mov	r2, r3
 800b60a:	4623      	mov	r3, r4
 800b60c:	4628      	mov	r0, r5
 800b60e:	4631      	mov	r1, r6
 800b610:	f7f5 fb2e 	bl	8000c70 <__aeabi_uldivmod>
 800b614:	4603      	mov	r3, r0
 800b616:	460c      	mov	r4, r1
 800b618:	461a      	mov	r2, r3
 800b61a:	4b50      	ldr	r3, [pc, #320]	; (800b75c <UART_SetConfig+0x6f4>)
 800b61c:	fba3 2302 	umull	r2, r3, r3, r2
 800b620:	095b      	lsrs	r3, r3, #5
 800b622:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	469b      	mov	fp, r3
 800b62a:	f04f 0c00 	mov.w	ip, #0
 800b62e:	46d9      	mov	r9, fp
 800b630:	46e2      	mov	sl, ip
 800b632:	eb19 0309 	adds.w	r3, r9, r9
 800b636:	eb4a 040a 	adc.w	r4, sl, sl
 800b63a:	4699      	mov	r9, r3
 800b63c:	46a2      	mov	sl, r4
 800b63e:	eb19 090b 	adds.w	r9, r9, fp
 800b642:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b646:	f04f 0100 	mov.w	r1, #0
 800b64a:	f04f 0200 	mov.w	r2, #0
 800b64e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b652:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b656:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b65a:	4689      	mov	r9, r1
 800b65c:	4692      	mov	sl, r2
 800b65e:	eb1b 0509 	adds.w	r5, fp, r9
 800b662:	eb4c 060a 	adc.w	r6, ip, sl
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	4619      	mov	r1, r3
 800b66c:	f04f 0200 	mov.w	r2, #0
 800b670:	f04f 0300 	mov.w	r3, #0
 800b674:	f04f 0400 	mov.w	r4, #0
 800b678:	0094      	lsls	r4, r2, #2
 800b67a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b67e:	008b      	lsls	r3, r1, #2
 800b680:	461a      	mov	r2, r3
 800b682:	4623      	mov	r3, r4
 800b684:	4628      	mov	r0, r5
 800b686:	4631      	mov	r1, r6
 800b688:	f7f5 faf2 	bl	8000c70 <__aeabi_uldivmod>
 800b68c:	4603      	mov	r3, r0
 800b68e:	460c      	mov	r4, r1
 800b690:	461a      	mov	r2, r3
 800b692:	4b32      	ldr	r3, [pc, #200]	; (800b75c <UART_SetConfig+0x6f4>)
 800b694:	fba3 1302 	umull	r1, r3, r3, r2
 800b698:	095b      	lsrs	r3, r3, #5
 800b69a:	2164      	movs	r1, #100	; 0x64
 800b69c:	fb01 f303 	mul.w	r3, r1, r3
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	011b      	lsls	r3, r3, #4
 800b6a4:	3332      	adds	r3, #50	; 0x32
 800b6a6:	4a2d      	ldr	r2, [pc, #180]	; (800b75c <UART_SetConfig+0x6f4>)
 800b6a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ac:	095b      	lsrs	r3, r3, #5
 800b6ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6b2:	4498      	add	r8, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	469b      	mov	fp, r3
 800b6b8:	f04f 0c00 	mov.w	ip, #0
 800b6bc:	46d9      	mov	r9, fp
 800b6be:	46e2      	mov	sl, ip
 800b6c0:	eb19 0309 	adds.w	r3, r9, r9
 800b6c4:	eb4a 040a 	adc.w	r4, sl, sl
 800b6c8:	4699      	mov	r9, r3
 800b6ca:	46a2      	mov	sl, r4
 800b6cc:	eb19 090b 	adds.w	r9, r9, fp
 800b6d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b6d4:	f04f 0100 	mov.w	r1, #0
 800b6d8:	f04f 0200 	mov.w	r2, #0
 800b6dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b6e8:	4689      	mov	r9, r1
 800b6ea:	4692      	mov	sl, r2
 800b6ec:	eb1b 0509 	adds.w	r5, fp, r9
 800b6f0:	eb4c 060a 	adc.w	r6, ip, sl
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	f04f 0200 	mov.w	r2, #0
 800b6fe:	f04f 0300 	mov.w	r3, #0
 800b702:	f04f 0400 	mov.w	r4, #0
 800b706:	0094      	lsls	r4, r2, #2
 800b708:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b70c:	008b      	lsls	r3, r1, #2
 800b70e:	461a      	mov	r2, r3
 800b710:	4623      	mov	r3, r4
 800b712:	4628      	mov	r0, r5
 800b714:	4631      	mov	r1, r6
 800b716:	f7f5 faab 	bl	8000c70 <__aeabi_uldivmod>
 800b71a:	4603      	mov	r3, r0
 800b71c:	460c      	mov	r4, r1
 800b71e:	461a      	mov	r2, r3
 800b720:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <UART_SetConfig+0x6f4>)
 800b722:	fba3 1302 	umull	r1, r3, r3, r2
 800b726:	095b      	lsrs	r3, r3, #5
 800b728:	2164      	movs	r1, #100	; 0x64
 800b72a:	fb01 f303 	mul.w	r3, r1, r3
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	011b      	lsls	r3, r3, #4
 800b732:	3332      	adds	r3, #50	; 0x32
 800b734:	4a09      	ldr	r2, [pc, #36]	; (800b75c <UART_SetConfig+0x6f4>)
 800b736:	fba2 2303 	umull	r2, r3, r2, r3
 800b73a:	095b      	lsrs	r3, r3, #5
 800b73c:	f003 020f 	and.w	r2, r3, #15
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4442      	add	r2, r8
 800b746:	609a      	str	r2, [r3, #8]
}
 800b748:	e7ff      	b.n	800b74a <UART_SetConfig+0x6e2>
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b754:	40011000 	.word	0x40011000
 800b758:	40011400 	.word	0x40011400
 800b75c:	51eb851f 	.word	0x51eb851f

0800b760 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b760:	b084      	sub	sp, #16
 800b762:	b480      	push	{r7}
 800b764:	b085      	sub	sp, #20
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	f107 001c 	add.w	r0, r7, #28
 800b76e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b776:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b778:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b77a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b77e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b782:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b786:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b78a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b79a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	b004      	add	sp, #16
 800b7b4:	4770      	bx	lr

0800b7b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b083      	sub	sp, #12
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b800:	2002      	movs	r0, #2
 800b802:	f7f8 fe23 	bl	800444c <HAL_Delay>
  
  return HAL_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0303 	and.w	r3, r3, #3
}
 800b820:	4618      	mov	r0, r3
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b84a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b850:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b856:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b866:	f023 030f 	bic.w	r3, r3, #15
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	431a      	orrs	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	b2db      	uxtb	r3, r3
}
 800b88e:	4618      	mov	r0, r3
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b085      	sub	sp, #20
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3314      	adds	r3, #20
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
}  
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b8e6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b8ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b8f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	431a      	orrs	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0

}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b088      	sub	sp, #32
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b926:	2310      	movs	r3, #16
 800b928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b92a:	2340      	movs	r3, #64	; 0x40
 800b92c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b92e:	2300      	movs	r3, #0
 800b930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b936:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b938:	f107 0308 	add.w	r3, r7, #8
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff ff74 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b944:	f241 3288 	movw	r2, #5000	; 0x1388
 800b948:	2110      	movs	r1, #16
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f9fe 	bl	800bd4c <SDMMC_GetCmdResp1>
 800b950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b952:	69fb      	ldr	r3, [r7, #28]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3720      	adds	r7, #32
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b088      	sub	sp, #32
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b96a:	2311      	movs	r3, #17
 800b96c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b96e:	2340      	movs	r3, #64	; 0x40
 800b970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b972:	2300      	movs	r3, #0
 800b974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b97a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b97c:	f107 0308 	add.w	r3, r7, #8
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ff52 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b988:	f241 3288 	movw	r2, #5000	; 0x1388
 800b98c:	2111      	movs	r1, #17
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f9dc 	bl	800bd4c <SDMMC_GetCmdResp1>
 800b994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b996:	69fb      	ldr	r3, [r7, #28]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3720      	adds	r7, #32
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b9ae:	2312      	movs	r3, #18
 800b9b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9b2:	2340      	movs	r3, #64	; 0x40
 800b9b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9c0:	f107 0308 	add.w	r3, r7, #8
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff ff30 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b9cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d0:	2112      	movs	r1, #18
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f9ba 	bl	800bd4c <SDMMC_GetCmdResp1>
 800b9d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9da:	69fb      	ldr	r3, [r7, #28]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3720      	adds	r7, #32
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b9f2:	2318      	movs	r3, #24
 800b9f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9f6:	2340      	movs	r3, #64	; 0x40
 800b9f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba04:	f107 0308 	add.w	r3, r7, #8
 800ba08:	4619      	mov	r1, r3
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f7ff ff0e 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ba10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba14:	2118      	movs	r1, #24
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f998 	bl	800bd4c <SDMMC_GetCmdResp1>
 800ba1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba1e:	69fb      	ldr	r3, [r7, #28]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3720      	adds	r7, #32
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ba36:	2319      	movs	r3, #25
 800ba38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba3a:	2340      	movs	r3, #64	; 0x40
 800ba3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba48:	f107 0308 	add.w	r3, r7, #8
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7ff feec 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ba54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba58:	2119      	movs	r1, #25
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f976 	bl	800bd4c <SDMMC_GetCmdResp1>
 800ba60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba62:	69fb      	ldr	r3, [r7, #28]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3720      	adds	r7, #32
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ba74:	2300      	movs	r3, #0
 800ba76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ba78:	230c      	movs	r3, #12
 800ba7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba7c:	2340      	movs	r3, #64	; 0x40
 800ba7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba80:	2300      	movs	r3, #0
 800ba82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba8a:	f107 0308 	add.w	r3, r7, #8
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff fecb 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ba96:	4a05      	ldr	r2, [pc, #20]	; (800baac <SDMMC_CmdStopTransfer+0x40>)
 800ba98:	210c      	movs	r1, #12
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f956 	bl	800bd4c <SDMMC_GetCmdResp1>
 800baa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baa2:	69fb      	ldr	r3, [r7, #28]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3720      	adds	r7, #32
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	05f5e100 	.word	0x05f5e100

0800bab0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b08a      	sub	sp, #40	; 0x28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bac0:	2307      	movs	r3, #7
 800bac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bac4:	2340      	movs	r3, #64	; 0x40
 800bac6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bac8:	2300      	movs	r3, #0
 800baca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bacc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bad0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bad2:	f107 0310 	add.w	r3, r7, #16
 800bad6:	4619      	mov	r1, r3
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7ff fea7 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800bade:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae2:	2107      	movs	r1, #7
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 f931 	bl	800bd4c <SDMMC_GetCmdResp1>
 800baea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3728      	adds	r7, #40	; 0x28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b088      	sub	sp, #32
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bb02:	2300      	movs	r3, #0
 800bb04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800bb06:	2300      	movs	r3, #0
 800bb08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb14:	f107 0308 	add.w	r3, r7, #8
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff fe86 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f8eb 	bl	800bcfc <SDMMC_GetCmdError>
 800bb26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb28:	69fb      	ldr	r3, [r7, #28]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3720      	adds	r7, #32
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b088      	sub	sp, #32
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bb3a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bb3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bb40:	2308      	movs	r3, #8
 800bb42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb44:	2340      	movs	r3, #64	; 0x40
 800bb46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb52:	f107 0308 	add.w	r3, r7, #8
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7ff fe67 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fad4 	bl	800c10c <SDMMC_GetCmdResp7>
 800bb64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb66:	69fb      	ldr	r3, [r7, #28]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3720      	adds	r7, #32
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bb7e:	2337      	movs	r3, #55	; 0x37
 800bb80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb82:	2340      	movs	r3, #64	; 0x40
 800bb84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb86:	2300      	movs	r3, #0
 800bb88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb90:	f107 0308 	add.w	r3, r7, #8
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7ff fe48 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bb9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba0:	2137      	movs	r1, #55	; 0x37
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f8d2 	bl	800bd4c <SDMMC_GetCmdResp1>
 800bba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbaa:	69fb      	ldr	r3, [r7, #28]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3720      	adds	r7, #32
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b088      	sub	sp, #32
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bbca:	2329      	movs	r3, #41	; 0x29
 800bbcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbce:	2340      	movs	r3, #64	; 0x40
 800bbd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbdc:	f107 0308 	add.w	r3, r7, #8
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7ff fe22 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f9e1 	bl	800bfb0 <SDMMC_GetCmdResp3>
 800bbee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3720      	adds	r7, #32
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b088      	sub	sp, #32
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bc02:	2300      	movs	r3, #0
 800bc04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bc06:	2302      	movs	r3, #2
 800bc08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bc0a:	23c0      	movs	r3, #192	; 0xc0
 800bc0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc18:	f107 0308 	add.w	r3, r7, #8
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7ff fe04 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f97d 	bl	800bf24 <SDMMC_GetCmdResp2>
 800bc2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc2c:	69fb      	ldr	r3, [r7, #28]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3720      	adds	r7, #32
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b088      	sub	sp, #32
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bc44:	2309      	movs	r3, #9
 800bc46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bc48:	23c0      	movs	r3, #192	; 0xc0
 800bc4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc56:	f107 0308 	add.w	r3, r7, #8
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff fde5 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f95e 	bl	800bf24 <SDMMC_GetCmdResp2>
 800bc68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc6a:	69fb      	ldr	r3, [r7, #28]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3720      	adds	r7, #32
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bc82:	2303      	movs	r3, #3
 800bc84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bc86:	2340      	movs	r3, #64	; 0x40
 800bc88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc94:	f107 0308 	add.w	r3, r7, #8
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7ff fdc6 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	2103      	movs	r1, #3
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 f9bd 	bl	800c024 <SDMMC_GetCmdResp6>
 800bcaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcac:	69fb      	ldr	r3, [r7, #28]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3720      	adds	r7, #32
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b088      	sub	sp, #32
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
 800bcbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bcc4:	230d      	movs	r3, #13
 800bcc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bcc8:	2340      	movs	r3, #64	; 0x40
 800bcca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bccc:	2300      	movs	r3, #0
 800bcce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcd6:	f107 0308 	add.w	r3, r7, #8
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff fda5 	bl	800b82c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800bce2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce6:	210d      	movs	r1, #13
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f82f 	bl	800bd4c <SDMMC_GetCmdResp1>
 800bcee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcf0:	69fb      	ldr	r3, [r7, #28]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bcfc:	b490      	push	{r4, r7}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd04:	4b0f      	ldr	r3, [pc, #60]	; (800bd44 <SDMMC_GetCmdError+0x48>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a0f      	ldr	r2, [pc, #60]	; (800bd48 <SDMMC_GetCmdError+0x4c>)
 800bd0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd0e:	0a5b      	lsrs	r3, r3, #9
 800bd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd18:	4623      	mov	r3, r4
 800bd1a:	1e5c      	subs	r4, r3, #1
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd24:	e009      	b.n	800bd3a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d0f2      	beq.n	800bd18 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	22c5      	movs	r2, #197	; 0xc5
 800bd36:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bc90      	pop	{r4, r7}
 800bd42:	4770      	bx	lr
 800bd44:	20000010 	.word	0x20000010
 800bd48:	10624dd3 	.word	0x10624dd3

0800bd4c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bd4c:	b590      	push	{r4, r7, lr}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	460b      	mov	r3, r1
 800bd56:	607a      	str	r2, [r7, #4]
 800bd58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd5a:	4b6f      	ldr	r3, [pc, #444]	; (800bf18 <SDMMC_GetCmdResp1+0x1cc>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a6f      	ldr	r2, [pc, #444]	; (800bf1c <SDMMC_GetCmdResp1+0x1d0>)
 800bd60:	fba2 2303 	umull	r2, r3, r2, r3
 800bd64:	0a5b      	lsrs	r3, r3, #9
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd6c:	4623      	mov	r3, r4
 800bd6e:	1e5c      	subs	r4, r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d102      	bne.n	800bd7a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd78:	e0c9      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d0f0      	beq.n	800bd6c <SDMMC_GetCmdResp1+0x20>
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1eb      	bne.n	800bd6c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d004      	beq.n	800bdaa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2204      	movs	r2, #4
 800bda4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bda6:	2304      	movs	r3, #4
 800bda8:	e0b1      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d004      	beq.n	800bdc0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e0a6      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	22c5      	movs	r2, #197	; 0xc5
 800bdc4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f7ff fd5a 	bl	800b880 <SDIO_GetCommandResponse>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	461a      	mov	r2, r3
 800bdd0:	7afb      	ldrb	r3, [r7, #11]
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d001      	beq.n	800bdda <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e099      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bdda:	2100      	movs	r1, #0
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f7ff fd5c 	bl	800b89a <SDIO_GetResponse>
 800bde2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	4b4e      	ldr	r3, [pc, #312]	; (800bf20 <SDMMC_GetCmdResp1+0x1d4>)
 800bde8:	4013      	ands	r3, r2
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	e08d      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	da02      	bge.n	800bdfe <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bdf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bdfc:	e087      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800be08:	2340      	movs	r3, #64	; 0x40
 800be0a:	e080      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800be16:	2380      	movs	r3, #128	; 0x80
 800be18:	e079      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800be24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be28:	e071      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be38:	e069      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be48:	e061      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d002      	beq.n	800be5a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be58:	e059      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be68:	e051      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be78:	e049      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be88:	e041      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800be94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be98:	e039      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bea8:	e031      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800beb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800beb8:	e029      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bec4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bec8:	e021      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bed4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bed8:	e019      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d002      	beq.n	800beea <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bee8:	e011      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d002      	beq.n	800befa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bef4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bef8:	e009      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	f003 0308 	and.w	r3, r3, #8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d002      	beq.n	800bf0a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bf04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bf08:	e001      	b.n	800bf0e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	371c      	adds	r7, #28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd90      	pop	{r4, r7, pc}
 800bf16:	bf00      	nop
 800bf18:	20000010 	.word	0x20000010
 800bf1c:	10624dd3 	.word	0x10624dd3
 800bf20:	fdffe008 	.word	0xfdffe008

0800bf24 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bf24:	b490      	push	{r4, r7}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf2c:	4b1e      	ldr	r3, [pc, #120]	; (800bfa8 <SDMMC_GetCmdResp2+0x84>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a1e      	ldr	r2, [pc, #120]	; (800bfac <SDMMC_GetCmdResp2+0x88>)
 800bf32:	fba2 2303 	umull	r2, r3, r2, r3
 800bf36:	0a5b      	lsrs	r3, r3, #9
 800bf38:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf40:	4623      	mov	r3, r4
 800bf42:	1e5c      	subs	r4, r3, #1
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d102      	bne.n	800bf4e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf4c:	e026      	b.n	800bf9c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf52:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d0f0      	beq.n	800bf40 <SDMMC_GetCmdResp2+0x1c>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1eb      	bne.n	800bf40 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf6c:	f003 0304 	and.w	r3, r3, #4
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d004      	beq.n	800bf7e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2204      	movs	r2, #4
 800bf78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf7a:	2304      	movs	r3, #4
 800bf7c:	e00e      	b.n	800bf9c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d004      	beq.n	800bf94 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e003      	b.n	800bf9c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	22c5      	movs	r2, #197	; 0xc5
 800bf98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bc90      	pop	{r4, r7}
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	20000010 	.word	0x20000010
 800bfac:	10624dd3 	.word	0x10624dd3

0800bfb0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bfb0:	b490      	push	{r4, r7}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfb8:	4b18      	ldr	r3, [pc, #96]	; (800c01c <SDMMC_GetCmdResp3+0x6c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a18      	ldr	r2, [pc, #96]	; (800c020 <SDMMC_GetCmdResp3+0x70>)
 800bfbe:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc2:	0a5b      	lsrs	r3, r3, #9
 800bfc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfc8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bfcc:	4623      	mov	r3, r4
 800bfce:	1e5c      	subs	r4, r3, #1
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfd8:	e01b      	b.n	800c012 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfde:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0f0      	beq.n	800bfcc <SDMMC_GetCmdResp3+0x1c>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1eb      	bne.n	800bfcc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff8:	f003 0304 	and.w	r3, r3, #4
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d004      	beq.n	800c00a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2204      	movs	r2, #4
 800c004:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c006:	2304      	movs	r3, #4
 800c008:	e003      	b.n	800c012 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	22c5      	movs	r2, #197	; 0xc5
 800c00e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bc90      	pop	{r4, r7}
 800c01a:	4770      	bx	lr
 800c01c:	20000010 	.word	0x20000010
 800c020:	10624dd3 	.word	0x10624dd3

0800c024 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c024:	b590      	push	{r4, r7, lr}
 800c026:	b087      	sub	sp, #28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	460b      	mov	r3, r1
 800c02e:	607a      	str	r2, [r7, #4]
 800c030:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c032:	4b34      	ldr	r3, [pc, #208]	; (800c104 <SDMMC_GetCmdResp6+0xe0>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a34      	ldr	r2, [pc, #208]	; (800c108 <SDMMC_GetCmdResp6+0xe4>)
 800c038:	fba2 2303 	umull	r2, r3, r2, r3
 800c03c:	0a5b      	lsrs	r3, r3, #9
 800c03e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c042:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c046:	4623      	mov	r3, r4
 800c048:	1e5c      	subs	r4, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d102      	bne.n	800c054 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c04e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c052:	e052      	b.n	800c0fa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c058:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c060:	2b00      	cmp	r3, #0
 800c062:	d0f0      	beq.n	800c046 <SDMMC_GetCmdResp6+0x22>
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1eb      	bne.n	800c046 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c072:	f003 0304 	and.w	r3, r3, #4
 800c076:	2b00      	cmp	r3, #0
 800c078:	d004      	beq.n	800c084 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2204      	movs	r2, #4
 800c07e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c080:	2304      	movs	r3, #4
 800c082:	e03a      	b.n	800c0fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d004      	beq.n	800c09a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2201      	movs	r2, #1
 800c094:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c096:	2301      	movs	r3, #1
 800c098:	e02f      	b.n	800c0fa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f7ff fbf0 	bl	800b880 <SDIO_GetCommandResponse>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	7afb      	ldrb	r3, [r7, #11]
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d001      	beq.n	800c0ae <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e025      	b.n	800c0fa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	22c5      	movs	r2, #197	; 0xc5
 800c0b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	f7ff fbef 	bl	800b89a <SDIO_GetResponse>
 800c0bc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d106      	bne.n	800c0d6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	0c1b      	lsrs	r3, r3, #16
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	e011      	b.n	800c0fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0e4:	e009      	b.n	800c0fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0f4:	e001      	b.n	800c0fa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	371c      	adds	r7, #28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd90      	pop	{r4, r7, pc}
 800c102:	bf00      	nop
 800c104:	20000010 	.word	0x20000010
 800c108:	10624dd3 	.word	0x10624dd3

0800c10c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c10c:	b490      	push	{r4, r7}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c114:	4b21      	ldr	r3, [pc, #132]	; (800c19c <SDMMC_GetCmdResp7+0x90>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a21      	ldr	r2, [pc, #132]	; (800c1a0 <SDMMC_GetCmdResp7+0x94>)
 800c11a:	fba2 2303 	umull	r2, r3, r2, r3
 800c11e:	0a5b      	lsrs	r3, r3, #9
 800c120:	f241 3288 	movw	r2, #5000	; 0x1388
 800c124:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c128:	4623      	mov	r3, r4
 800c12a:	1e5c      	subs	r4, r3, #1
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c130:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c134:	e02c      	b.n	800c190 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c13a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c142:	2b00      	cmp	r3, #0
 800c144:	d0f0      	beq.n	800c128 <SDMMC_GetCmdResp7+0x1c>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1eb      	bne.n	800c128 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c154:	f003 0304 	and.w	r3, r3, #4
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d004      	beq.n	800c166 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2204      	movs	r2, #4
 800c160:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c162:	2304      	movs	r3, #4
 800c164:	e014      	b.n	800c190 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d004      	beq.n	800c17c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c178:	2301      	movs	r3, #1
 800c17a:	e009      	b.n	800c190 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2240      	movs	r2, #64	; 0x40
 800c18c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c18e:	2300      	movs	r3, #0
  
}
 800c190:	4618      	mov	r0, r3
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bc90      	pop	{r4, r7}
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	20000010 	.word	0x20000010
 800c1a0:	10624dd3 	.word	0x10624dd3

0800c1a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1a4:	b084      	sub	sp, #16
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b084      	sub	sp, #16
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	f107 001c 	add.w	r0, r7, #28
 800c1b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d122      	bne.n	800c202 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c1d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d105      	bne.n	800c1f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f001 fac0 	bl	800d77c <USB_CoreReset>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73fb      	strb	r3, [r7, #15]
 800c200:	e01a      	b.n	800c238 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f001 fab4 	bl	800d77c <USB_CoreReset>
 800c214:	4603      	mov	r3, r0
 800c216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d106      	bne.n	800c22c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	639a      	str	r2, [r3, #56]	; 0x38
 800c22a:	e005      	b.n	800c238 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d10b      	bne.n	800c256 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	f043 0206 	orr.w	r2, r3, #6
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	f043 0220 	orr.w	r2, r3, #32
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c256:	7bfb      	ldrb	r3, [r7, #15]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c262:	b004      	add	sp, #16
 800c264:	4770      	bx	lr
	...

0800c268 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	4613      	mov	r3, r2
 800c274:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c276:	79fb      	ldrb	r3, [r7, #7]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d165      	bne.n	800c348 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	4a41      	ldr	r2, [pc, #260]	; (800c384 <USB_SetTurnaroundTime+0x11c>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d906      	bls.n	800c292 <USB_SetTurnaroundTime+0x2a>
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	4a40      	ldr	r2, [pc, #256]	; (800c388 <USB_SetTurnaroundTime+0x120>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d802      	bhi.n	800c292 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c28c:	230f      	movs	r3, #15
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	e062      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	4a3c      	ldr	r2, [pc, #240]	; (800c388 <USB_SetTurnaroundTime+0x120>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d906      	bls.n	800c2a8 <USB_SetTurnaroundTime+0x40>
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	4a3b      	ldr	r2, [pc, #236]	; (800c38c <USB_SetTurnaroundTime+0x124>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d802      	bhi.n	800c2a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c2a2:	230e      	movs	r3, #14
 800c2a4:	617b      	str	r3, [r7, #20]
 800c2a6:	e057      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	4a38      	ldr	r2, [pc, #224]	; (800c38c <USB_SetTurnaroundTime+0x124>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d906      	bls.n	800c2be <USB_SetTurnaroundTime+0x56>
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	4a37      	ldr	r2, [pc, #220]	; (800c390 <USB_SetTurnaroundTime+0x128>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d802      	bhi.n	800c2be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c2b8:	230d      	movs	r3, #13
 800c2ba:	617b      	str	r3, [r7, #20]
 800c2bc:	e04c      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	4a33      	ldr	r2, [pc, #204]	; (800c390 <USB_SetTurnaroundTime+0x128>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d906      	bls.n	800c2d4 <USB_SetTurnaroundTime+0x6c>
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	4a32      	ldr	r2, [pc, #200]	; (800c394 <USB_SetTurnaroundTime+0x12c>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d802      	bhi.n	800c2d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c2ce:	230c      	movs	r3, #12
 800c2d0:	617b      	str	r3, [r7, #20]
 800c2d2:	e041      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	4a2f      	ldr	r2, [pc, #188]	; (800c394 <USB_SetTurnaroundTime+0x12c>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d906      	bls.n	800c2ea <USB_SetTurnaroundTime+0x82>
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	4a2e      	ldr	r2, [pc, #184]	; (800c398 <USB_SetTurnaroundTime+0x130>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d802      	bhi.n	800c2ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c2e4:	230b      	movs	r3, #11
 800c2e6:	617b      	str	r3, [r7, #20]
 800c2e8:	e036      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	4a2a      	ldr	r2, [pc, #168]	; (800c398 <USB_SetTurnaroundTime+0x130>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d906      	bls.n	800c300 <USB_SetTurnaroundTime+0x98>
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	4a29      	ldr	r2, [pc, #164]	; (800c39c <USB_SetTurnaroundTime+0x134>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d802      	bhi.n	800c300 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c2fa:	230a      	movs	r3, #10
 800c2fc:	617b      	str	r3, [r7, #20]
 800c2fe:	e02b      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	4a26      	ldr	r2, [pc, #152]	; (800c39c <USB_SetTurnaroundTime+0x134>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d906      	bls.n	800c316 <USB_SetTurnaroundTime+0xae>
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	4a25      	ldr	r2, [pc, #148]	; (800c3a0 <USB_SetTurnaroundTime+0x138>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d802      	bhi.n	800c316 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c310:	2309      	movs	r3, #9
 800c312:	617b      	str	r3, [r7, #20]
 800c314:	e020      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	4a21      	ldr	r2, [pc, #132]	; (800c3a0 <USB_SetTurnaroundTime+0x138>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d906      	bls.n	800c32c <USB_SetTurnaroundTime+0xc4>
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	4a20      	ldr	r2, [pc, #128]	; (800c3a4 <USB_SetTurnaroundTime+0x13c>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d802      	bhi.n	800c32c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c326:	2308      	movs	r3, #8
 800c328:	617b      	str	r3, [r7, #20]
 800c32a:	e015      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	4a1d      	ldr	r2, [pc, #116]	; (800c3a4 <USB_SetTurnaroundTime+0x13c>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d906      	bls.n	800c342 <USB_SetTurnaroundTime+0xda>
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	4a1c      	ldr	r2, [pc, #112]	; (800c3a8 <USB_SetTurnaroundTime+0x140>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d802      	bhi.n	800c342 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c33c:	2307      	movs	r3, #7
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	e00a      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c342:	2306      	movs	r3, #6
 800c344:	617b      	str	r3, [r7, #20]
 800c346:	e007      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c348:	79fb      	ldrb	r3, [r7, #7]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d102      	bne.n	800c354 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c34e:	2309      	movs	r3, #9
 800c350:	617b      	str	r3, [r7, #20]
 800c352:	e001      	b.n	800c358 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c354:	2309      	movs	r3, #9
 800c356:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	68da      	ldr	r2, [r3, #12]
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	029b      	lsls	r3, r3, #10
 800c36c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c370:	431a      	orrs	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	371c      	adds	r7, #28
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr
 800c384:	00d8acbf 	.word	0x00d8acbf
 800c388:	00e4e1bf 	.word	0x00e4e1bf
 800c38c:	00f423ff 	.word	0x00f423ff
 800c390:	0106737f 	.word	0x0106737f
 800c394:	011a499f 	.word	0x011a499f
 800c398:	01312cff 	.word	0x01312cff
 800c39c:	014ca43f 	.word	0x014ca43f
 800c3a0:	016e35ff 	.word	0x016e35ff
 800c3a4:	01a6ab1f 	.word	0x01a6ab1f
 800c3a8:	01e847ff 	.word	0x01e847ff

0800c3ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	f043 0201 	orr.w	r2, r3, #1
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b083      	sub	sp, #12
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f023 0201 	bic.w	r2, r3, #1
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c408:	78fb      	ldrb	r3, [r7, #3]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d106      	bne.n	800c41c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	60da      	str	r2, [r3, #12]
 800c41a:	e00b      	b.n	800c434 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c41c:	78fb      	ldrb	r3, [r7, #3]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d106      	bne.n	800c430 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	60da      	str	r2, [r3, #12]
 800c42e:	e001      	b.n	800c434 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e003      	b.n	800c43c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c434:	2032      	movs	r0, #50	; 0x32
 800c436:	f7f8 f809 	bl	800444c <HAL_Delay>

  return HAL_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c444:	b084      	sub	sp, #16
 800c446:	b580      	push	{r7, lr}
 800c448:	b086      	sub	sp, #24
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c45e:	2300      	movs	r3, #0
 800c460:	613b      	str	r3, [r7, #16]
 800c462:	e009      	b.n	800c478 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	3340      	adds	r3, #64	; 0x40
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	2200      	movs	r2, #0
 800c470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	3301      	adds	r3, #1
 800c476:	613b      	str	r3, [r7, #16]
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	2b0e      	cmp	r3, #14
 800c47c:	d9f2      	bls.n	800c464 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c480:	2b00      	cmp	r3, #0
 800c482:	d11c      	bne.n	800c4be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c492:	f043 0302 	orr.w	r3, r3, #2
 800c496:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	601a      	str	r2, [r3, #0]
 800c4bc:	e005      	b.n	800c4ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4dc:	4619      	mov	r1, r3
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	680b      	ldr	r3, [r1, #0]
 800c4e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d10c      	bne.n	800c50a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d104      	bne.n	800c500 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f949 	bl	800c790 <USB_SetDevSpeed>
 800c4fe:	e008      	b.n	800c512 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c500:	2101      	movs	r1, #1
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f944 	bl	800c790 <USB_SetDevSpeed>
 800c508:	e003      	b.n	800c512 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c50a:	2103      	movs	r1, #3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f93f 	bl	800c790 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c512:	2110      	movs	r1, #16
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 f8f3 	bl	800c700 <USB_FlushTxFifo>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d001      	beq.n	800c524 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 f911 	bl	800c74c <USB_FlushRxFifo>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d001      	beq.n	800c534 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c53a:	461a      	mov	r2, r3
 800c53c:	2300      	movs	r3, #0
 800c53e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c546:	461a      	mov	r2, r3
 800c548:	2300      	movs	r3, #0
 800c54a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c552:	461a      	mov	r2, r3
 800c554:	2300      	movs	r3, #0
 800c556:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c558:	2300      	movs	r3, #0
 800c55a:	613b      	str	r3, [r7, #16]
 800c55c:	e043      	b.n	800c5e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	015a      	lsls	r2, r3, #5
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	4413      	add	r3, r2
 800c566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c574:	d118      	bne.n	800c5a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10a      	bne.n	800c592 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c588:	461a      	mov	r2, r3
 800c58a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c58e:	6013      	str	r3, [r2, #0]
 800c590:	e013      	b.n	800c5ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	015a      	lsls	r2, r3, #5
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	4413      	add	r3, r2
 800c59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c5a4:	6013      	str	r3, [r2, #0]
 800c5a6:	e008      	b.n	800c5ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	015a      	lsls	r2, r3, #5
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	015a      	lsls	r2, r3, #5
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d8:	461a      	mov	r2, r3
 800c5da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c5de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	613b      	str	r3, [r7, #16]
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d3b7      	bcc.n	800c55e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	613b      	str	r3, [r7, #16]
 800c5f2:	e043      	b.n	800c67c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	015a      	lsls	r2, r3, #5
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c60a:	d118      	bne.n	800c63e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10a      	bne.n	800c628 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	015a      	lsls	r2, r3, #5
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	4413      	add	r3, r2
 800c61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c61e:	461a      	mov	r2, r3
 800c620:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c624:	6013      	str	r3, [r2, #0]
 800c626:	e013      	b.n	800c650 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	015a      	lsls	r2, r3, #5
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4413      	add	r3, r2
 800c630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c634:	461a      	mov	r2, r3
 800c636:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	e008      	b.n	800c650 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	015a      	lsls	r2, r3, #5
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	4413      	add	r3, r2
 800c646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64a:	461a      	mov	r2, r3
 800c64c:	2300      	movs	r3, #0
 800c64e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	015a      	lsls	r2, r3, #5
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c65c:	461a      	mov	r2, r3
 800c65e:	2300      	movs	r3, #0
 800c660:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	015a      	lsls	r2, r3, #5
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	4413      	add	r3, r2
 800c66a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66e:	461a      	mov	r2, r3
 800c670:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c674:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	3301      	adds	r3, #1
 800c67a:	613b      	str	r3, [r7, #16]
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	429a      	cmp	r2, r3
 800c682:	d3b7      	bcc.n	800c5f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c696:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c6a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d105      	bne.n	800c6b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	f043 0210 	orr.w	r2, r3, #16
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	699a      	ldr	r2, [r3, #24]
 800c6bc:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <USB_DevInit+0x2b8>)
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d005      	beq.n	800c6d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	699b      	ldr	r3, [r3, #24]
 800c6ce:	f043 0208 	orr.w	r2, r3, #8
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d107      	bne.n	800c6ec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	699b      	ldr	r3, [r3, #24]
 800c6e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6e4:	f043 0304 	orr.w	r3, r3, #4
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6f8:	b004      	add	sp, #16
 800c6fa:	4770      	bx	lr
 800c6fc:	803c3800 	.word	0x803c3800

0800c700 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c70a:	2300      	movs	r3, #0
 800c70c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	019b      	lsls	r3, r3, #6
 800c712:	f043 0220 	orr.w	r2, r3, #32
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	3301      	adds	r3, #1
 800c71e:	60fb      	str	r3, [r7, #12]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	4a09      	ldr	r2, [pc, #36]	; (800c748 <USB_FlushTxFifo+0x48>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d901      	bls.n	800c72c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c728:	2303      	movs	r3, #3
 800c72a:	e006      	b.n	800c73a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	f003 0320 	and.w	r3, r3, #32
 800c734:	2b20      	cmp	r3, #32
 800c736:	d0f0      	beq.n	800c71a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3714      	adds	r7, #20
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	00030d40 	.word	0x00030d40

0800c74c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c754:	2300      	movs	r3, #0
 800c756:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2210      	movs	r2, #16
 800c75c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3301      	adds	r3, #1
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	4a09      	ldr	r2, [pc, #36]	; (800c78c <USB_FlushRxFifo+0x40>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d901      	bls.n	800c770 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c76c:	2303      	movs	r3, #3
 800c76e:	e006      	b.n	800c77e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	f003 0310 	and.w	r3, r3, #16
 800c778:	2b10      	cmp	r3, #16
 800c77a:	d0f0      	beq.n	800c75e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3714      	adds	r7, #20
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	00030d40 	.word	0x00030d40

0800c790 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	460b      	mov	r3, r1
 800c79a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	78fb      	ldrb	r3, [r7, #3]
 800c7aa:	68f9      	ldr	r1, [r7, #12]
 800c7ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b087      	sub	sp, #28
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	f003 0306 	and.w	r3, r3, #6
 800c7da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d102      	bne.n	800c7e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	75fb      	strb	r3, [r7, #23]
 800c7e6:	e00a      	b.n	800c7fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d002      	beq.n	800c7f4 <USB_GetDevSpeed+0x32>
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b06      	cmp	r3, #6
 800c7f2:	d102      	bne.n	800c7fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c7f4:	2302      	movs	r3, #2
 800c7f6:	75fb      	strb	r3, [r7, #23]
 800c7f8:	e001      	b.n	800c7fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c7fa:	230f      	movs	r3, #15
 800c7fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c800:	4618      	mov	r0, r3
 800c802:	371c      	adds	r7, #28
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	785b      	ldrb	r3, [r3, #1]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d13a      	bne.n	800c89e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c82e:	69da      	ldr	r2, [r3, #28]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	f003 030f 	and.w	r3, r3, #15
 800c838:	2101      	movs	r1, #1
 800c83a:	fa01 f303 	lsl.w	r3, r1, r3
 800c83e:	b29b      	uxth	r3, r3
 800c840:	68f9      	ldr	r1, [r7, #12]
 800c842:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c846:	4313      	orrs	r3, r2
 800c848:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d155      	bne.n	800c90c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	015a      	lsls	r2, r3, #5
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	4413      	add	r3, r2
 800c868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	78db      	ldrb	r3, [r3, #3]
 800c87a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c87c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	059b      	lsls	r3, r3, #22
 800c882:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c884:	4313      	orrs	r3, r2
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	0151      	lsls	r1, r2, #5
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	440a      	add	r2, r1
 800c88e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c89a:	6013      	str	r3, [r2, #0]
 800c89c:	e036      	b.n	800c90c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8a4:	69da      	ldr	r2, [r3, #28]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	f003 030f 	and.w	r3, r3, #15
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b4:	041b      	lsls	r3, r3, #16
 800c8b6:	68f9      	ldr	r1, [r7, #12]
 800c8b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	015a      	lsls	r2, r3, #5
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d11a      	bne.n	800c90c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	015a      	lsls	r2, r3, #5
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	4413      	add	r3, r2
 800c8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	78db      	ldrb	r3, [r3, #3]
 800c8f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c8f2:	430b      	orrs	r3, r1
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	0151      	lsls	r1, r2, #5
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	440a      	add	r2, r1
 800c8fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c90a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
	...

0800c91c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	785b      	ldrb	r3, [r3, #1]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d161      	bne.n	800c9fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	015a      	lsls	r2, r3, #5
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4413      	add	r3, r2
 800c940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c94a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c94e:	d11f      	bne.n	800c990 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	015a      	lsls	r2, r3, #5
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4413      	add	r3, r2
 800c958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	0151      	lsls	r1, r2, #5
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	440a      	add	r2, r1
 800c966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c96a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c96e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	015a      	lsls	r2, r3, #5
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	4413      	add	r3, r2
 800c978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	0151      	lsls	r1, r2, #5
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	440a      	add	r2, r1
 800c986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c98a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c98e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	f003 030f 	and.w	r3, r3, #15
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	43db      	mvns	r3, r3
 800c9aa:	68f9      	ldr	r1, [r7, #12]
 800c9ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ba:	69da      	ldr	r2, [r3, #28]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	f003 030f 	and.w	r3, r3, #15
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	43db      	mvns	r3, r3
 800c9ce:	68f9      	ldr	r1, [r7, #12]
 800c9d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	015a      	lsls	r2, r3, #5
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	0159      	lsls	r1, r3, #5
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	440b      	add	r3, r1
 800c9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	4b35      	ldr	r3, [pc, #212]	; (800cacc <USB_DeactivateEndpoint+0x1b0>)
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	600b      	str	r3, [r1, #0]
 800c9fa:	e060      	b.n	800cabe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	015a      	lsls	r2, r3, #5
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	4413      	add	r3, r2
 800ca04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca12:	d11f      	bne.n	800ca54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	015a      	lsls	r2, r3, #5
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	0151      	lsls	r1, r2, #5
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	440a      	add	r2, r1
 800ca2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	015a      	lsls	r2, r3, #5
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	0151      	lsls	r1, r2, #5
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	440a      	add	r2, r1
 800ca4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	f003 030f 	and.w	r3, r3, #15
 800ca64:	2101      	movs	r1, #1
 800ca66:	fa01 f303 	lsl.w	r3, r1, r3
 800ca6a:	041b      	lsls	r3, r3, #16
 800ca6c:	43db      	mvns	r3, r3
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca74:	4013      	ands	r3, r2
 800ca76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca7e:	69da      	ldr	r2, [r3, #28]
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	f003 030f 	and.w	r3, r3, #15
 800ca88:	2101      	movs	r1, #1
 800ca8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca8e:	041b      	lsls	r3, r3, #16
 800ca90:	43db      	mvns	r3, r3
 800ca92:	68f9      	ldr	r1, [r7, #12]
 800ca94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca98:	4013      	ands	r3, r2
 800ca9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	015a      	lsls	r2, r3, #5
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	4413      	add	r3, r2
 800caa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	0159      	lsls	r1, r3, #5
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	440b      	add	r3, r1
 800cab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab6:	4619      	mov	r1, r3
 800cab8:	4b05      	ldr	r3, [pc, #20]	; (800cad0 <USB_DeactivateEndpoint+0x1b4>)
 800caba:	4013      	ands	r3, r2
 800cabc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	ec337800 	.word	0xec337800
 800cad0:	eff37800 	.word	0xeff37800

0800cad4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b08a      	sub	sp, #40	; 0x28
 800cad8:	af02      	add	r7, sp, #8
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	4613      	mov	r3, r2
 800cae0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	785b      	ldrb	r3, [r3, #1]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	f040 815c 	bne.w	800cdae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	695b      	ldr	r3, [r3, #20]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d132      	bne.n	800cb64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	015a      	lsls	r2, r3, #5
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	4413      	add	r3, r2
 800cb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	69ba      	ldr	r2, [r7, #24]
 800cb0e:	0151      	lsls	r1, r2, #5
 800cb10:	69fa      	ldr	r2, [r7, #28]
 800cb12:	440a      	add	r2, r1
 800cb14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	015a      	lsls	r2, r3, #5
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	69ba      	ldr	r2, [r7, #24]
 800cb32:	0151      	lsls	r1, r2, #5
 800cb34:	69fa      	ldr	r2, [r7, #28]
 800cb36:	440a      	add	r2, r1
 800cb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	015a      	lsls	r2, r3, #5
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	4413      	add	r3, r2
 800cb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	69ba      	ldr	r2, [r7, #24]
 800cb52:	0151      	lsls	r1, r2, #5
 800cb54:	69fa      	ldr	r2, [r7, #28]
 800cb56:	440a      	add	r2, r1
 800cb58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb5c:	0cdb      	lsrs	r3, r3, #19
 800cb5e:	04db      	lsls	r3, r3, #19
 800cb60:	6113      	str	r3, [r2, #16]
 800cb62:	e074      	b.n	800cc4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	015a      	lsls	r2, r3, #5
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb70:	691b      	ldr	r3, [r3, #16]
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	0151      	lsls	r1, r2, #5
 800cb76:	69fa      	ldr	r2, [r7, #28]
 800cb78:	440a      	add	r2, r1
 800cb7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb7e:	0cdb      	lsrs	r3, r3, #19
 800cb80:	04db      	lsls	r3, r3, #19
 800cb82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	015a      	lsls	r2, r3, #5
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	69ba      	ldr	r2, [r7, #24]
 800cb94:	0151      	lsls	r1, r2, #5
 800cb96:	69fa      	ldr	r2, [r7, #28]
 800cb98:	440a      	add	r2, r1
 800cb9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cba2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb4:	691a      	ldr	r2, [r3, #16]
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	6959      	ldr	r1, [r3, #20]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	440b      	add	r3, r1
 800cbc0:	1e59      	subs	r1, r3, #1
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	fbb1 f3f3 	udiv	r3, r1, r3
 800cbca:	04d9      	lsls	r1, r3, #19
 800cbcc:	4b9d      	ldr	r3, [pc, #628]	; (800ce44 <USB_EPStartXfer+0x370>)
 800cbce:	400b      	ands	r3, r1
 800cbd0:	69b9      	ldr	r1, [r7, #24]
 800cbd2:	0148      	lsls	r0, r1, #5
 800cbd4:	69f9      	ldr	r1, [r7, #28]
 800cbd6:	4401      	add	r1, r0
 800cbd8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	015a      	lsls	r2, r3, #5
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbec:	691a      	ldr	r2, [r3, #16]
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbf6:	69b9      	ldr	r1, [r7, #24]
 800cbf8:	0148      	lsls	r0, r1, #5
 800cbfa:	69f9      	ldr	r1, [r7, #28]
 800cbfc:	4401      	add	r1, r0
 800cbfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cc02:	4313      	orrs	r3, r2
 800cc04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	78db      	ldrb	r3, [r3, #3]
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d11f      	bne.n	800cc4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	015a      	lsls	r2, r3, #5
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	4413      	add	r3, r2
 800cc16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc1a:	691b      	ldr	r3, [r3, #16]
 800cc1c:	69ba      	ldr	r2, [r7, #24]
 800cc1e:	0151      	lsls	r1, r2, #5
 800cc20:	69fa      	ldr	r2, [r7, #28]
 800cc22:	440a      	add	r2, r1
 800cc24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cc2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	015a      	lsls	r2, r3, #5
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	4413      	add	r3, r2
 800cc36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	69ba      	ldr	r2, [r7, #24]
 800cc3e:	0151      	lsls	r1, r2, #5
 800cc40:	69fa      	ldr	r2, [r7, #28]
 800cc42:	440a      	add	r2, r1
 800cc44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cc4e:	79fb      	ldrb	r3, [r7, #7]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d14b      	bne.n	800ccec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d009      	beq.n	800cc70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc68:	461a      	mov	r2, r3
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	78db      	ldrb	r3, [r3, #3]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d128      	bne.n	800ccca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d110      	bne.n	800ccaa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	015a      	lsls	r2, r3, #5
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	69ba      	ldr	r2, [r7, #24]
 800cc98:	0151      	lsls	r1, r2, #5
 800cc9a:	69fa      	ldr	r2, [r7, #28]
 800cc9c:	440a      	add	r2, r1
 800cc9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	e00f      	b.n	800ccca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	015a      	lsls	r2, r3, #5
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	69ba      	ldr	r2, [r7, #24]
 800ccba:	0151      	lsls	r1, r2, #5
 800ccbc:	69fa      	ldr	r2, [r7, #28]
 800ccbe:	440a      	add	r2, r1
 800ccc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	015a      	lsls	r2, r3, #5
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	69ba      	ldr	r2, [r7, #24]
 800ccda:	0151      	lsls	r1, r2, #5
 800ccdc:	69fa      	ldr	r2, [r7, #28]
 800ccde:	440a      	add	r2, r1
 800cce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cce4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	e12f      	b.n	800cf4c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	69ba      	ldr	r2, [r7, #24]
 800ccfc:	0151      	lsls	r1, r2, #5
 800ccfe:	69fa      	ldr	r2, [r7, #28]
 800cd00:	440a      	add	r2, r1
 800cd02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	78db      	ldrb	r3, [r3, #3]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d015      	beq.n	800cd40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	695b      	ldr	r3, [r3, #20]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f000 8117 	beq.w	800cf4c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	f003 030f 	and.w	r3, r3, #15
 800cd2e:	2101      	movs	r1, #1
 800cd30:	fa01 f303 	lsl.w	r3, r1, r3
 800cd34:	69f9      	ldr	r1, [r7, #28]
 800cd36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	634b      	str	r3, [r1, #52]	; 0x34
 800cd3e:	e105      	b.n	800cf4c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d110      	bne.n	800cd72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	015a      	lsls	r2, r3, #5
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	4413      	add	r3, r2
 800cd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	69ba      	ldr	r2, [r7, #24]
 800cd60:	0151      	lsls	r1, r2, #5
 800cd62:	69fa      	ldr	r2, [r7, #28]
 800cd64:	440a      	add	r2, r1
 800cd66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd6e:	6013      	str	r3, [r2, #0]
 800cd70:	e00f      	b.n	800cd92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	015a      	lsls	r2, r3, #5
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	4413      	add	r3, r2
 800cd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	69ba      	ldr	r2, [r7, #24]
 800cd82:	0151      	lsls	r1, r2, #5
 800cd84:	69fa      	ldr	r2, [r7, #28]
 800cd86:	440a      	add	r2, r1
 800cd88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	68d9      	ldr	r1, [r3, #12]
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	781a      	ldrb	r2, [r3, #0]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	b298      	uxth	r0, r3
 800cda0:	79fb      	ldrb	r3, [r7, #7]
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	4603      	mov	r3, r0
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f000 fa2b 	bl	800d202 <USB_WritePacket>
 800cdac:	e0ce      	b.n	800cf4c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	015a      	lsls	r2, r3, #5
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdba:	691b      	ldr	r3, [r3, #16]
 800cdbc:	69ba      	ldr	r2, [r7, #24]
 800cdbe:	0151      	lsls	r1, r2, #5
 800cdc0:	69fa      	ldr	r2, [r7, #28]
 800cdc2:	440a      	add	r2, r1
 800cdc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdc8:	0cdb      	lsrs	r3, r3, #19
 800cdca:	04db      	lsls	r3, r3, #19
 800cdcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	015a      	lsls	r2, r3, #5
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	69ba      	ldr	r2, [r7, #24]
 800cdde:	0151      	lsls	r1, r2, #5
 800cde0:	69fa      	ldr	r2, [r7, #28]
 800cde2:	440a      	add	r2, r1
 800cde4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cde8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cdec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cdf0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d126      	bne.n	800ce48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	015a      	lsls	r2, r3, #5
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	4413      	add	r3, r2
 800ce02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce06:	691a      	ldr	r2, [r3, #16]
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce10:	69b9      	ldr	r1, [r7, #24]
 800ce12:	0148      	lsls	r0, r1, #5
 800ce14:	69f9      	ldr	r1, [r7, #28]
 800ce16:	4401      	add	r1, r0
 800ce18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	015a      	lsls	r2, r3, #5
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	4413      	add	r3, r2
 800ce28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	69ba      	ldr	r2, [r7, #24]
 800ce30:	0151      	lsls	r1, r2, #5
 800ce32:	69fa      	ldr	r2, [r7, #28]
 800ce34:	440a      	add	r2, r1
 800ce36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce3e:	6113      	str	r3, [r2, #16]
 800ce40:	e036      	b.n	800ceb0 <USB_EPStartXfer+0x3dc>
 800ce42:	bf00      	nop
 800ce44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	695a      	ldr	r2, [r3, #20]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	4413      	add	r3, r2
 800ce52:	1e5a      	subs	r2, r3, #1
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce5c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	015a      	lsls	r2, r3, #5
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	4413      	add	r3, r2
 800ce66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6a:	691a      	ldr	r2, [r3, #16]
 800ce6c:	8afb      	ldrh	r3, [r7, #22]
 800ce6e:	04d9      	lsls	r1, r3, #19
 800ce70:	4b39      	ldr	r3, [pc, #228]	; (800cf58 <USB_EPStartXfer+0x484>)
 800ce72:	400b      	ands	r3, r1
 800ce74:	69b9      	ldr	r1, [r7, #24]
 800ce76:	0148      	lsls	r0, r1, #5
 800ce78:	69f9      	ldr	r1, [r7, #28]
 800ce7a:	4401      	add	r1, r0
 800ce7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce80:	4313      	orrs	r3, r2
 800ce82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	015a      	lsls	r2, r3, #5
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce90:	691a      	ldr	r2, [r3, #16]
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	8af9      	ldrh	r1, [r7, #22]
 800ce98:	fb01 f303 	mul.w	r3, r1, r3
 800ce9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cea0:	69b9      	ldr	r1, [r7, #24]
 800cea2:	0148      	lsls	r0, r1, #5
 800cea4:	69f9      	ldr	r1, [r7, #28]
 800cea6:	4401      	add	r1, r0
 800cea8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ceac:	4313      	orrs	r3, r2
 800ceae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d10d      	bne.n	800ced2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d009      	beq.n	800ced2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	68d9      	ldr	r1, [r3, #12]
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	015a      	lsls	r2, r3, #5
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	4413      	add	r3, r2
 800ceca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cece:	460a      	mov	r2, r1
 800ced0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	78db      	ldrb	r3, [r3, #3]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d128      	bne.n	800cf2c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d110      	bne.n	800cf0c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	015a      	lsls	r2, r3, #5
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	4413      	add	r3, r2
 800cef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	69ba      	ldr	r2, [r7, #24]
 800cefa:	0151      	lsls	r1, r2, #5
 800cefc:	69fa      	ldr	r2, [r7, #28]
 800cefe:	440a      	add	r2, r1
 800cf00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf08:	6013      	str	r3, [r2, #0]
 800cf0a:	e00f      	b.n	800cf2c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	015a      	lsls	r2, r3, #5
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	4413      	add	r3, r2
 800cf14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	69ba      	ldr	r2, [r7, #24]
 800cf1c:	0151      	lsls	r1, r2, #5
 800cf1e:	69fa      	ldr	r2, [r7, #28]
 800cf20:	440a      	add	r2, r1
 800cf22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	015a      	lsls	r2, r3, #5
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	4413      	add	r3, r2
 800cf34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	69ba      	ldr	r2, [r7, #24]
 800cf3c:	0151      	lsls	r1, r2, #5
 800cf3e:	69fa      	ldr	r2, [r7, #28]
 800cf40:	440a      	add	r2, r1
 800cf42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3720      	adds	r7, #32
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	1ff80000 	.word	0x1ff80000

0800cf5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	4613      	mov	r3, r2
 800cf68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	785b      	ldrb	r3, [r3, #1]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	f040 80cd 	bne.w	800d118 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d132      	bne.n	800cfec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	015a      	lsls	r2, r3, #5
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	0151      	lsls	r1, r2, #5
 800cf98:	697a      	ldr	r2, [r7, #20]
 800cf9a:	440a      	add	r2, r1
 800cf9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cfa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cfa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	015a      	lsls	r2, r3, #5
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	693a      	ldr	r2, [r7, #16]
 800cfba:	0151      	lsls	r1, r2, #5
 800cfbc:	697a      	ldr	r2, [r7, #20]
 800cfbe:	440a      	add	r2, r1
 800cfc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	015a      	lsls	r2, r3, #5
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	693a      	ldr	r2, [r7, #16]
 800cfda:	0151      	lsls	r1, r2, #5
 800cfdc:	697a      	ldr	r2, [r7, #20]
 800cfde:	440a      	add	r2, r1
 800cfe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfe4:	0cdb      	lsrs	r3, r3, #19
 800cfe6:	04db      	lsls	r3, r3, #19
 800cfe8:	6113      	str	r3, [r2, #16]
 800cfea:	e04e      	b.n	800d08a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff8:	691b      	ldr	r3, [r3, #16]
 800cffa:	693a      	ldr	r2, [r7, #16]
 800cffc:	0151      	lsls	r1, r2, #5
 800cffe:	697a      	ldr	r2, [r7, #20]
 800d000:	440a      	add	r2, r1
 800d002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d006:	0cdb      	lsrs	r3, r3, #19
 800d008:	04db      	lsls	r3, r3, #19
 800d00a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	015a      	lsls	r2, r3, #5
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	4413      	add	r3, r2
 800d014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	693a      	ldr	r2, [r7, #16]
 800d01c:	0151      	lsls	r1, r2, #5
 800d01e:	697a      	ldr	r2, [r7, #20]
 800d020:	440a      	add	r2, r1
 800d022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d026:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d02a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d02e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	695a      	ldr	r2, [r3, #20]
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d903      	bls.n	800d044 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	689a      	ldr	r2, [r3, #8]
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	015a      	lsls	r2, r3, #5
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	4413      	add	r3, r2
 800d04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	0151      	lsls	r1, r2, #5
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	440a      	add	r2, r1
 800d05a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d05e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d070:	691a      	ldr	r2, [r3, #16]
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	695b      	ldr	r3, [r3, #20]
 800d076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d07a:	6939      	ldr	r1, [r7, #16]
 800d07c:	0148      	lsls	r0, r1, #5
 800d07e:	6979      	ldr	r1, [r7, #20]
 800d080:	4401      	add	r1, r0
 800d082:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d086:	4313      	orrs	r3, r2
 800d088:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d08a:	79fb      	ldrb	r3, [r7, #7]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d11e      	bne.n	800d0ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	691b      	ldr	r3, [r3, #16]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d009      	beq.n	800d0ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	015a      	lsls	r2, r3, #5
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	015a      	lsls	r2, r3, #5
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	693a      	ldr	r2, [r7, #16]
 800d0bc:	0151      	lsls	r1, r2, #5
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	440a      	add	r2, r1
 800d0c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	e092      	b.n	800d1f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	015a      	lsls	r2, r3, #5
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	693a      	ldr	r2, [r7, #16]
 800d0de:	0151      	lsls	r1, r2, #5
 800d0e0:	697a      	ldr	r2, [r7, #20]
 800d0e2:	440a      	add	r2, r1
 800d0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d0ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	695b      	ldr	r3, [r3, #20]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d07e      	beq.n	800d1f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	f003 030f 	and.w	r3, r3, #15
 800d106:	2101      	movs	r1, #1
 800d108:	fa01 f303 	lsl.w	r3, r1, r3
 800d10c:	6979      	ldr	r1, [r7, #20]
 800d10e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d112:	4313      	orrs	r3, r2
 800d114:	634b      	str	r3, [r1, #52]	; 0x34
 800d116:	e06d      	b.n	800d1f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	015a      	lsls	r2, r3, #5
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	4413      	add	r3, r2
 800d120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	693a      	ldr	r2, [r7, #16]
 800d128:	0151      	lsls	r1, r2, #5
 800d12a:	697a      	ldr	r2, [r7, #20]
 800d12c:	440a      	add	r2, r1
 800d12e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d132:	0cdb      	lsrs	r3, r3, #19
 800d134:	04db      	lsls	r3, r3, #19
 800d136:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	015a      	lsls	r2, r3, #5
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	4413      	add	r3, r2
 800d140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	693a      	ldr	r2, [r7, #16]
 800d148:	0151      	lsls	r1, r2, #5
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	440a      	add	r2, r1
 800d14e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d152:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d156:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d15a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d003      	beq.n	800d16c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	689a      	ldr	r2, [r3, #8]
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	015a      	lsls	r2, r3, #5
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	4413      	add	r3, r2
 800d174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	693a      	ldr	r2, [r7, #16]
 800d17c:	0151      	lsls	r1, r2, #5
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	440a      	add	r2, r1
 800d182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d18a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	015a      	lsls	r2, r3, #5
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	4413      	add	r3, r2
 800d194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d198:	691a      	ldr	r2, [r3, #16]
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1a2:	6939      	ldr	r1, [r7, #16]
 800d1a4:	0148      	lsls	r0, r1, #5
 800d1a6:	6979      	ldr	r1, [r7, #20]
 800d1a8:	4401      	add	r1, r0
 800d1aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d10d      	bne.n	800d1d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d009      	beq.n	800d1d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	68d9      	ldr	r1, [r3, #12]
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	015a      	lsls	r2, r3, #5
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1d0:	460a      	mov	r2, r1
 800d1d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	693a      	ldr	r2, [r7, #16]
 800d1e4:	0151      	lsls	r1, r2, #5
 800d1e6:	697a      	ldr	r2, [r7, #20]
 800d1e8:	440a      	add	r2, r1
 800d1ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d202:	b480      	push	{r7}
 800d204:	b089      	sub	sp, #36	; 0x24
 800d206:	af00      	add	r7, sp, #0
 800d208:	60f8      	str	r0, [r7, #12]
 800d20a:	60b9      	str	r1, [r7, #8]
 800d20c:	4611      	mov	r1, r2
 800d20e:	461a      	mov	r2, r3
 800d210:	460b      	mov	r3, r1
 800d212:	71fb      	strb	r3, [r7, #7]
 800d214:	4613      	mov	r3, r2
 800d216:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d220:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d224:	2b00      	cmp	r3, #0
 800d226:	d11a      	bne.n	800d25e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d228:	88bb      	ldrh	r3, [r7, #4]
 800d22a:	3303      	adds	r3, #3
 800d22c:	089b      	lsrs	r3, r3, #2
 800d22e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d230:	2300      	movs	r3, #0
 800d232:	61bb      	str	r3, [r7, #24]
 800d234:	e00f      	b.n	800d256 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d236:	79fb      	ldrb	r3, [r7, #7]
 800d238:	031a      	lsls	r2, r3, #12
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	4413      	add	r3, r2
 800d23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d242:	461a      	mov	r2, r3
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	3304      	adds	r3, #4
 800d24e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	3301      	adds	r3, #1
 800d254:	61bb      	str	r3, [r7, #24]
 800d256:	69ba      	ldr	r2, [r7, #24]
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d3eb      	bcc.n	800d236 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d25e:	2300      	movs	r3, #0
}
 800d260:	4618      	mov	r0, r3
 800d262:	3724      	adds	r7, #36	; 0x24
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b089      	sub	sp, #36	; 0x24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	4613      	mov	r3, r2
 800d278:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d282:	88fb      	ldrh	r3, [r7, #6]
 800d284:	3303      	adds	r3, #3
 800d286:	089b      	lsrs	r3, r3, #2
 800d288:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d28a:	2300      	movs	r3, #0
 800d28c:	61bb      	str	r3, [r7, #24]
 800d28e:	e00b      	b.n	800d2a8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	3304      	adds	r3, #4
 800d2a0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	61bb      	str	r3, [r7, #24]
 800d2a8:	69ba      	ldr	r2, [r7, #24]
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d3ef      	bcc.n	800d290 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d2b0:	69fb      	ldr	r3, [r7, #28]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3724      	adds	r7, #36	; 0x24
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr

0800d2be <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2be:	b480      	push	{r7}
 800d2c0:	b085      	sub	sp, #20
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
 800d2c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	785b      	ldrb	r3, [r3, #1]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d12c      	bne.n	800d334 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	015a      	lsls	r2, r3, #5
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	db12      	blt.n	800d312 <USB_EPSetStall+0x54>
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d00f      	beq.n	800d312 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	015a      	lsls	r2, r3, #5
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	0151      	lsls	r1, r2, #5
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	440a      	add	r2, r1
 800d308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d30c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d310:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	015a      	lsls	r2, r3, #5
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	4413      	add	r3, r2
 800d31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	0151      	lsls	r1, r2, #5
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	440a      	add	r2, r1
 800d328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d32c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d330:	6013      	str	r3, [r2, #0]
 800d332:	e02b      	b.n	800d38c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	015a      	lsls	r2, r3, #5
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	4413      	add	r3, r2
 800d33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	db12      	blt.n	800d36c <USB_EPSetStall+0xae>
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00f      	beq.n	800d36c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	015a      	lsls	r2, r3, #5
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	4413      	add	r3, r2
 800d354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	0151      	lsls	r1, r2, #5
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	440a      	add	r2, r1
 800d362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d36a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	015a      	lsls	r2, r3, #5
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	4413      	add	r3, r2
 800d374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	0151      	lsls	r1, r2, #5
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	440a      	add	r2, r1
 800d382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d38a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3714      	adds	r7, #20
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr

0800d39a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d39a:	b480      	push	{r7}
 800d39c:	b085      	sub	sp, #20
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	785b      	ldrb	r3, [r3, #1]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d128      	bne.n	800d408 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	015a      	lsls	r2, r3, #5
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	4413      	add	r3, r2
 800d3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	0151      	lsls	r1, r2, #5
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	440a      	add	r2, r1
 800d3cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d3d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	78db      	ldrb	r3, [r3, #3]
 800d3da:	2b03      	cmp	r3, #3
 800d3dc:	d003      	beq.n	800d3e6 <USB_EPClearStall+0x4c>
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	78db      	ldrb	r3, [r3, #3]
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	d138      	bne.n	800d458 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	015a      	lsls	r2, r3, #5
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68ba      	ldr	r2, [r7, #8]
 800d3f6:	0151      	lsls	r1, r2, #5
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	440a      	add	r2, r1
 800d3fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d404:	6013      	str	r3, [r2, #0]
 800d406:	e027      	b.n	800d458 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	015a      	lsls	r2, r3, #5
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4413      	add	r3, r2
 800d410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	0151      	lsls	r1, r2, #5
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	440a      	add	r2, r1
 800d41e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d426:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	78db      	ldrb	r3, [r3, #3]
 800d42c:	2b03      	cmp	r3, #3
 800d42e:	d003      	beq.n	800d438 <USB_EPClearStall+0x9e>
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	78db      	ldrb	r3, [r3, #3]
 800d434:	2b02      	cmp	r3, #2
 800d436:	d10f      	bne.n	800d458 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	015a      	lsls	r2, r3, #5
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	4413      	add	r3, r2
 800d440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	0151      	lsls	r1, r2, #5
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	440a      	add	r2, r1
 800d44e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d456:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3714      	adds	r7, #20
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d466:	b480      	push	{r7}
 800d468:	b085      	sub	sp, #20
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	460b      	mov	r3, r1
 800d470:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d484:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d488:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	78fb      	ldrb	r3, [r7, #3]
 800d494:	011b      	lsls	r3, r3, #4
 800d496:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d49a:	68f9      	ldr	r1, [r7, #12]
 800d49c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr

0800d4b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b085      	sub	sp, #20
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d4cc:	f023 0303 	bic.w	r3, r3, #3
 800d4d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d4e0:	f023 0302 	bic.w	r3, r3, #2
 800d4e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3714      	adds	r7, #20
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d50e:	f023 0303 	bic.w	r3, r3, #3
 800d512:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d522:	f043 0302 	orr.w	r3, r3, #2
 800d526:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d528:	2300      	movs	r3, #0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3714      	adds	r7, #20
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr

0800d536 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d536:	b480      	push	{r7}
 800d538:	b085      	sub	sp, #20
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	695b      	ldr	r3, [r3, #20]
 800d542:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	699b      	ldr	r3, [r3, #24]
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	4013      	ands	r3, r2
 800d54c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d54e:	68fb      	ldr	r3, [r7, #12]
}
 800d550:	4618      	mov	r0, r3
 800d552:	3714      	adds	r7, #20
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d56e:	699b      	ldr	r3, [r3, #24]
 800d570:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d578:	69db      	ldr	r3, [r3, #28]
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	4013      	ands	r3, r2
 800d57e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	0c1b      	lsrs	r3, r3, #16
}
 800d584:	4618      	mov	r0, r3
 800d586:	3714      	adds	r7, #20
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5a2:	699b      	ldr	r3, [r3, #24]
 800d5a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ac:	69db      	ldr	r3, [r3, #28]
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	b29b      	uxth	r3, r3
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d5d4:	78fb      	ldrb	r3, [r7, #3]
 800d5d6:	015a      	lsls	r2, r3, #5
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	4413      	add	r3, r2
 800d5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ea:	695b      	ldr	r3, [r3, #20]
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	4013      	ands	r3, r2
 800d5f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d600:	b480      	push	{r7}
 800d602:	b087      	sub	sp, #28
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	460b      	mov	r3, r1
 800d60a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d622:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d624:	78fb      	ldrb	r3, [r7, #3]
 800d626:	f003 030f 	and.w	r3, r3, #15
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	fa22 f303 	lsr.w	r3, r2, r3
 800d630:	01db      	lsls	r3, r3, #7
 800d632:	b2db      	uxtb	r3, r3
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	4313      	orrs	r3, r2
 800d638:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	015a      	lsls	r2, r3, #5
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	4413      	add	r3, r2
 800d642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	693a      	ldr	r2, [r7, #16]
 800d64a:	4013      	ands	r3, r2
 800d64c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d64e:	68bb      	ldr	r3, [r7, #8]
}
 800d650:	4618      	mov	r0, r3
 800d652:	371c      	adds	r7, #28
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	695b      	ldr	r3, [r3, #20]
 800d668:	f003 0301 	and.w	r3, r3, #1
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d692:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d696:	f023 0307 	bic.w	r3, r3, #7
 800d69a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d6b0:	2300      	movs	r3, #0
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3714      	adds	r7, #20
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
	...

0800d6c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b087      	sub	sp, #28
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	607a      	str	r2, [r7, #4]
 800d6cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	333c      	adds	r3, #60	; 0x3c
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	4a26      	ldr	r2, [pc, #152]	; (800d778 <USB_EP0_OutStart+0xb8>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d90a      	bls.n	800d6fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6f4:	d101      	bne.n	800d6fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	e037      	b.n	800d76a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d700:	461a      	mov	r2, r3
 800d702:	2300      	movs	r3, #0
 800d704:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	697a      	ldr	r2, [r7, #20]
 800d710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d714:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d718:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d728:	f043 0318 	orr.w	r3, r3, #24
 800d72c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	697a      	ldr	r2, [r7, #20]
 800d738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d73c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d740:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d742:	7afb      	ldrb	r3, [r7, #11]
 800d744:	2b01      	cmp	r3, #1
 800d746:	d10f      	bne.n	800d768 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d74e:	461a      	mov	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	697a      	ldr	r2, [r7, #20]
 800d75e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d762:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d766:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	371c      	adds	r7, #28
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	4f54300a 	.word	0x4f54300a

0800d77c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d784:	2300      	movs	r3, #0
 800d786:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	3301      	adds	r3, #1
 800d78c:	60fb      	str	r3, [r7, #12]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	4a13      	ldr	r2, [pc, #76]	; (800d7e0 <USB_CoreReset+0x64>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d901      	bls.n	800d79a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d796:	2303      	movs	r3, #3
 800d798:	e01b      	b.n	800d7d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	daf2      	bge.n	800d788 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	f043 0201 	orr.w	r2, r3, #1
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4a09      	ldr	r2, [pc, #36]	; (800d7e0 <USB_CoreReset+0x64>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d901      	bls.n	800d7c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d7c0:	2303      	movs	r3, #3
 800d7c2:	e006      	b.n	800d7d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	f003 0301 	and.w	r3, r3, #1
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d0f0      	beq.n	800d7b2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d7d0:	2300      	movs	r3, #0
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3714      	adds	r7, #20
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	00030d40 	.word	0x00030d40

0800d7e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d7e8:	4904      	ldr	r1, [pc, #16]	; (800d7fc <MX_FATFS_Init+0x18>)
 800d7ea:	4805      	ldr	r0, [pc, #20]	; (800d800 <MX_FATFS_Init+0x1c>)
 800d7ec:	f006 fdf4 	bl	80143d8 <FATFS_LinkDriver>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	4b03      	ldr	r3, [pc, #12]	; (800d804 <MX_FATFS_Init+0x20>)
 800d7f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d7f8:	bf00      	nop
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	20009144 	.word	0x20009144
 800d800:	08053044 	.word	0x08053044
 800d804:	20009140 	.word	0x20009140

0800d808 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d80c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d80e:	4618      	mov	r0, r3
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d822:	f000 f86b 	bl	800d8fc <BSP_SD_IsDetected>
 800d826:	4603      	mov	r3, r0
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d001      	beq.n	800d830 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e005      	b.n	800d83c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d830:	4804      	ldr	r0, [pc, #16]	; (800d844 <BSP_SD_Init+0x2c>)
 800d832:	f7fb f97b 	bl	8008b2c <HAL_SD_Init>
 800d836:	4603      	mov	r3, r0
 800d838:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d83a:	79fb      	ldrb	r3, [r7, #7]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	20002500 	.word	0x20002500

0800d848 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af02      	add	r7, sp, #8
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
 800d854:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d856:	2300      	movs	r3, #0
 800d858:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	68ba      	ldr	r2, [r7, #8]
 800d862:	68f9      	ldr	r1, [r7, #12]
 800d864:	4806      	ldr	r0, [pc, #24]	; (800d880 <BSP_SD_ReadBlocks+0x38>)
 800d866:	f7fb f9f1 	bl	8008c4c <HAL_SD_ReadBlocks>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d870:	2301      	movs	r3, #1
 800d872:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d874:	7dfb      	ldrb	r3, [r7, #23]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	20002500 	.word	0x20002500

0800d884 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b088      	sub	sp, #32
 800d888:	af02      	add	r7, sp, #8
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
 800d890:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	68ba      	ldr	r2, [r7, #8]
 800d89e:	68f9      	ldr	r1, [r7, #12]
 800d8a0:	4806      	ldr	r0, [pc, #24]	; (800d8bc <BSP_SD_WriteBlocks+0x38>)
 800d8a2:	f7fb fbcb 	bl	800903c <HAL_SD_WriteBlocks>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d001      	beq.n	800d8b0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3718      	adds	r7, #24
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20002500 	.word	0x20002500

0800d8c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d8c4:	4805      	ldr	r0, [pc, #20]	; (800d8dc <BSP_SD_GetCardState+0x1c>)
 800d8c6:	f7fb ff29 	bl	800971c <HAL_SD_GetCardState>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b04      	cmp	r3, #4
 800d8ce:	bf14      	ite	ne
 800d8d0:	2301      	movne	r3, #1
 800d8d2:	2300      	moveq	r3, #0
 800d8d4:	b2db      	uxtb	r3, r3
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	20002500 	.word	0x20002500

0800d8e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d8e8:	6879      	ldr	r1, [r7, #4]
 800d8ea:	4803      	ldr	r0, [pc, #12]	; (800d8f8 <BSP_SD_GetCardInfo+0x18>)
 800d8ec:	f7fb feea 	bl	80096c4 <HAL_SD_GetCardInfo>
}
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20002500 	.word	0x20002500

0800d8fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d902:	2301      	movs	r3, #1
 800d904:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d906:	f000 f80b 	bl	800d920 <BSP_PlatformIsDetected>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d101      	bne.n	800d914 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d910:	2300      	movs	r3, #0
 800d912:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d914:	79fb      	ldrb	r3, [r7, #7]
 800d916:	b2db      	uxtb	r3, r3
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d926:	2301      	movs	r3, #1
 800d928:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d92a:	2180      	movs	r1, #128	; 0x80
 800d92c:	4806      	ldr	r0, [pc, #24]	; (800d948 <BSP_PlatformIsDetected+0x28>)
 800d92e:	f7f8 f9fb 	bl	8005d28 <HAL_GPIO_ReadPin>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d001      	beq.n	800d93c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d938:	2300      	movs	r3, #0
 800d93a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d93c:	79fb      	ldrb	r3, [r7, #7]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	40020800 	.word	0x40020800

0800d94c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	4603      	mov	r3, r0
 800d954:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d956:	4b0b      	ldr	r3, [pc, #44]	; (800d984 <SD_CheckStatus+0x38>)
 800d958:	2201      	movs	r2, #1
 800d95a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d95c:	f7ff ffb0 	bl	800d8c0 <BSP_SD_GetCardState>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d107      	bne.n	800d976 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d966:	4b07      	ldr	r3, [pc, #28]	; (800d984 <SD_CheckStatus+0x38>)
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	f023 0301 	bic.w	r3, r3, #1
 800d970:	b2da      	uxtb	r2, r3
 800d972:	4b04      	ldr	r3, [pc, #16]	; (800d984 <SD_CheckStatus+0x38>)
 800d974:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d976:	4b03      	ldr	r3, [pc, #12]	; (800d984 <SD_CheckStatus+0x38>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	b2db      	uxtb	r3, r3
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	20000019 	.word	0x20000019

0800d988 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d992:	4b0b      	ldr	r3, [pc, #44]	; (800d9c0 <SD_initialize+0x38>)
 800d994:	2201      	movs	r2, #1
 800d996:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d998:	f7ff ff3e 	bl	800d818 <BSP_SD_Init>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d107      	bne.n	800d9b2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d9a2:	79fb      	ldrb	r3, [r7, #7]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff ffd1 	bl	800d94c <SD_CheckStatus>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	4b04      	ldr	r3, [pc, #16]	; (800d9c0 <SD_initialize+0x38>)
 800d9b0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d9b2:	4b03      	ldr	r3, [pc, #12]	; (800d9c0 <SD_initialize+0x38>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	b2db      	uxtb	r3, r3
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	20000019 	.word	0x20000019

0800d9c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d9ce:	79fb      	ldrb	r3, [r7, #7]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff ffbb 	bl	800d94c <SD_CheckStatus>
 800d9d6:	4603      	mov	r3, r0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60b9      	str	r1, [r7, #8]
 800d9e8:	607a      	str	r2, [r7, #4]
 800d9ea:	603b      	str	r3, [r7, #0]
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f8:	683a      	ldr	r2, [r7, #0]
 800d9fa:	6879      	ldr	r1, [r7, #4]
 800d9fc:	68b8      	ldr	r0, [r7, #8]
 800d9fe:	f7ff ff23 	bl	800d848 <BSP_SD_ReadBlocks>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d107      	bne.n	800da18 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800da08:	bf00      	nop
 800da0a:	f7ff ff59 	bl	800d8c0 <BSP_SD_GetCardState>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1fa      	bne.n	800da0a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800da18:	7dfb      	ldrb	r3, [r7, #23]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b086      	sub	sp, #24
 800da26:	af00      	add	r7, sp, #0
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
 800da2c:	603b      	str	r3, [r7, #0]
 800da2e:	4603      	mov	r3, r0
 800da30:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800da36:	f04f 33ff 	mov.w	r3, #4294967295
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	6879      	ldr	r1, [r7, #4]
 800da3e:	68b8      	ldr	r0, [r7, #8]
 800da40:	f7ff ff20 	bl	800d884 <BSP_SD_WriteBlocks>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d107      	bne.n	800da5a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800da4a:	bf00      	nop
 800da4c:	f7ff ff38 	bl	800d8c0 <BSP_SD_GetCardState>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1fa      	bne.n	800da4c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3718      	adds	r7, #24
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b08c      	sub	sp, #48	; 0x30
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	603a      	str	r2, [r7, #0]
 800da6e:	71fb      	strb	r3, [r7, #7]
 800da70:	460b      	mov	r3, r1
 800da72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800da7a:	4b25      	ldr	r3, [pc, #148]	; (800db10 <SD_ioctl+0xac>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	f003 0301 	and.w	r3, r3, #1
 800da84:	2b00      	cmp	r3, #0
 800da86:	d001      	beq.n	800da8c <SD_ioctl+0x28>
 800da88:	2303      	movs	r3, #3
 800da8a:	e03c      	b.n	800db06 <SD_ioctl+0xa2>

  switch (cmd)
 800da8c:	79bb      	ldrb	r3, [r7, #6]
 800da8e:	2b03      	cmp	r3, #3
 800da90:	d834      	bhi.n	800dafc <SD_ioctl+0x98>
 800da92:	a201      	add	r2, pc, #4	; (adr r2, 800da98 <SD_ioctl+0x34>)
 800da94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da98:	0800daa9 	.word	0x0800daa9
 800da9c:	0800dab1 	.word	0x0800dab1
 800daa0:	0800dac9 	.word	0x0800dac9
 800daa4:	0800dae3 	.word	0x0800dae3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800daae:	e028      	b.n	800db02 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dab0:	f107 030c 	add.w	r3, r7, #12
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7ff ff13 	bl	800d8e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800daba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dac6:	e01c      	b.n	800db02 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dac8:	f107 030c 	add.w	r3, r7, #12
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff ff07 	bl	800d8e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dae0:	e00f      	b.n	800db02 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dae2:	f107 030c 	add.w	r3, r7, #12
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7ff fefa 	bl	800d8e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daee:	0a5a      	lsrs	r2, r3, #9
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dafa:	e002      	b.n	800db02 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dafc:	2304      	movs	r3, #4
 800dafe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800db02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800db06:	4618      	mov	r0, r3
 800db08:	3730      	adds	r7, #48	; 0x30
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	20000019 	.word	0x20000019

0800db14 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	460b      	mov	r3, r1
 800db1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800db20:	f44f 701d 	mov.w	r0, #628	; 0x274
 800db24:	f009 f818 	bl	8016b58 <malloc>
 800db28:	4603      	mov	r3, r0
 800db2a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d105      	bne.n	800db3e <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2200      	movs	r2, #0
 800db36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800db3a:	2302      	movs	r3, #2
 800db3c:	e034      	b.n	800dba8 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	7c1b      	ldrb	r3, [r3, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d115      	bne.n	800db7a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800db4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db52:	2202      	movs	r2, #2
 800db54:	2101      	movs	r1, #1
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f007 f8a8 	bl	8014cac <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800db64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db68:	2202      	movs	r2, #2
 800db6a:	2181      	movs	r1, #129	; 0x81
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f007 f89d 	bl	8014cac <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	871a      	strh	r2, [r3, #56]	; 0x38
 800db78:	e012      	b.n	800dba0 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800db7a:	2340      	movs	r3, #64	; 0x40
 800db7c:	2202      	movs	r2, #2
 800db7e:	2101      	movs	r1, #1
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f007 f893 	bl	8014cac <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2201      	movs	r2, #1
 800db8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800db8e:	2340      	movs	r3, #64	; 0x40
 800db90:	2202      	movs	r2, #2
 800db92:	2181      	movs	r1, #129	; 0x81
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f007 f889 	bl	8014cac <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2201      	movs	r2, #1
 800db9e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f000 f98e 	bl	800dec2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	460b      	mov	r3, r1
 800dbba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f007 f89a 	bl	8014cf8 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800dbcc:	2181      	movs	r1, #129	; 0x81
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f007 f892 	bl	8014cf8 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 f9c7 	bl	800df6e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d009      	beq.n	800dbfe <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f008 ffb9 	bl	8016b68 <free>
    pdev->pClassData = NULL;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc18:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d04d      	beq.n	800dcca <USBD_MSC_Setup+0xc2>
 800dc2e:	2b20      	cmp	r3, #32
 800dc30:	f040 80c6 	bne.w	800ddc0 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	785b      	ldrb	r3, [r3, #1]
 800dc38:	2bfe      	cmp	r3, #254	; 0xfe
 800dc3a:	d002      	beq.n	800dc42 <USBD_MSC_Setup+0x3a>
 800dc3c:	2bff      	cmp	r3, #255	; 0xff
 800dc3e:	d024      	beq.n	800dc8a <USBD_MSC_Setup+0x82>
 800dc40:	e03b      	b.n	800dcba <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	885b      	ldrh	r3, [r3, #2]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d118      	bne.n	800dc7c <USBD_MSC_Setup+0x74>
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	88db      	ldrh	r3, [r3, #6]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d114      	bne.n	800dc7c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	da0f      	bge.n	800dc7c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc62:	699b      	ldr	r3, [r3, #24]
 800dc64:	4798      	blx	r3
 800dc66:	4603      	mov	r3, r0
 800dc68:	461a      	mov	r2, r3
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	2201      	movs	r2, #1
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f002 fc7e 	bl	8010576 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dc7a:	e025      	b.n	800dcc8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800dc7c:	6839      	ldr	r1, [r7, #0]
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f002 fc08 	bl	8010494 <USBD_CtlError>
        ret = USBD_FAIL;
 800dc84:	2303      	movs	r3, #3
 800dc86:	75fb      	strb	r3, [r7, #23]
      break;
 800dc88:	e01e      	b.n	800dcc8 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	885b      	ldrh	r3, [r3, #2]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10c      	bne.n	800dcac <USBD_MSC_Setup+0xa4>
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	88db      	ldrh	r3, [r3, #6]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d108      	bne.n	800dcac <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	db03      	blt.n	800dcac <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 f940 	bl	800df2a <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dcaa:	e00d      	b.n	800dcc8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f002 fbf0 	bl	8010494 <USBD_CtlError>
        ret = USBD_FAIL;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	75fb      	strb	r3, [r7, #23]
      break;
 800dcb8:	e006      	b.n	800dcc8 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f002 fbe9 	bl	8010494 <USBD_CtlError>
      ret = USBD_FAIL;
 800dcc2:	2303      	movs	r3, #3
 800dcc4:	75fb      	strb	r3, [r7, #23]
      break;
 800dcc6:	bf00      	nop
    }
    break;
 800dcc8:	e081      	b.n	800ddce <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	785b      	ldrb	r3, [r3, #1]
 800dcce:	2b0b      	cmp	r3, #11
 800dcd0:	d86d      	bhi.n	800ddae <USBD_MSC_Setup+0x1a6>
 800dcd2:	a201      	add	r2, pc, #4	; (adr r2, 800dcd8 <USBD_MSC_Setup+0xd0>)
 800dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd8:	0800dd09 	.word	0x0800dd09
 800dcdc:	0800dd7f 	.word	0x0800dd7f
 800dce0:	0800ddaf 	.word	0x0800ddaf
 800dce4:	0800ddaf 	.word	0x0800ddaf
 800dce8:	0800ddaf 	.word	0x0800ddaf
 800dcec:	0800ddaf 	.word	0x0800ddaf
 800dcf0:	0800ddaf 	.word	0x0800ddaf
 800dcf4:	0800ddaf 	.word	0x0800ddaf
 800dcf8:	0800ddaf 	.word	0x0800ddaf
 800dcfc:	0800ddaf 	.word	0x0800ddaf
 800dd00:	0800dd31 	.word	0x0800dd31
 800dd04:	0800dd59 	.word	0x0800dd59
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d107      	bne.n	800dd22 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dd12:	f107 030e 	add.w	r3, r7, #14
 800dd16:	2202      	movs	r2, #2
 800dd18:	4619      	mov	r1, r3
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f002 fc2b 	bl	8010576 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd20:	e04d      	b.n	800ddbe <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f002 fbb5 	bl	8010494 <USBD_CtlError>
        ret = USBD_FAIL;
 800dd2a:	2303      	movs	r3, #3
 800dd2c:	75fb      	strb	r3, [r7, #23]
      break;
 800dd2e:	e046      	b.n	800ddbe <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd36:	2b03      	cmp	r3, #3
 800dd38:	d107      	bne.n	800dd4a <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	2201      	movs	r2, #1
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f002 fc17 	bl	8010576 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd48:	e039      	b.n	800ddbe <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f002 fba1 	bl	8010494 <USBD_CtlError>
        ret = USBD_FAIL;
 800dd52:	2303      	movs	r3, #3
 800dd54:	75fb      	strb	r3, [r7, #23]
      break;
 800dd56:	e032      	b.n	800ddbe <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd5e:	2b03      	cmp	r3, #3
 800dd60:	d106      	bne.n	800dd70 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	885b      	ldrh	r3, [r3, #2]
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	461a      	mov	r2, r3
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd6e:	e026      	b.n	800ddbe <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f002 fb8e 	bl	8010494 <USBD_CtlError>
        ret = USBD_FAIL;
 800dd78:	2303      	movs	r3, #3
 800dd7a:	75fb      	strb	r3, [r7, #23]
      break;
 800dd7c:	e01f      	b.n	800ddbe <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd84:	2b03      	cmp	r3, #3
 800dd86:	d119      	bne.n	800ddbc <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	885b      	ldrh	r3, [r3, #2]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d115      	bne.n	800ddbc <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	889b      	ldrh	r3, [r3, #4]
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	4619      	mov	r1, r3
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f006 ffcc 	bl	8014d36 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	889b      	ldrh	r3, [r3, #4]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	4619      	mov	r1, r3
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fa5a 	bl	800e260 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800ddac:	e006      	b.n	800ddbc <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800ddae:	6839      	ldr	r1, [r7, #0]
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f002 fb6f 	bl	8010494 <USBD_CtlError>
      ret = USBD_FAIL;
 800ddb6:	2303      	movs	r3, #3
 800ddb8:	75fb      	strb	r3, [r7, #23]
      break;
 800ddba:	e000      	b.n	800ddbe <USBD_MSC_Setup+0x1b6>
      break;
 800ddbc:	bf00      	nop
    }
    break;
 800ddbe:	e006      	b.n	800ddce <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f002 fb66 	bl	8010494 <USBD_CtlError>
    ret = USBD_FAIL;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	75fb      	strb	r3, [r7, #23]
    break;
 800ddcc:	bf00      	nop
  }

  return (uint8_t)ret;
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800dde4:	78fb      	ldrb	r3, [r7, #3]
 800dde6:	4619      	mov	r1, r3
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 f8d1 	bl	800df90 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	460b      	mov	r3, r1
 800de02:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800de04:	78fb      	ldrb	r3, [r7, #3]
 800de06:	4619      	mov	r1, r3
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f8f2 	bl	800dff2 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800de0e:	2300      	movs	r3, #0
}
 800de10:	4618      	mov	r0, r3
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2220      	movs	r2, #32
 800de24:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800de26:	4b03      	ldr	r3, [pc, #12]	; (800de34 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800de28:	4618      	mov	r0, r3
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr
 800de34:	20000054 	.word	0x20000054

0800de38 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2220      	movs	r2, #32
 800de44:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800de46:	4b03      	ldr	r3, [pc, #12]	; (800de54 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr
 800de54:	20000074 	.word	0x20000074

0800de58 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2220      	movs	r2, #32
 800de64:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800de66:	4b03      	ldr	r3, [pc, #12]	; (800de74 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800de68:	4618      	mov	r0, r3
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	20000094 	.word	0x20000094

0800de78 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	220a      	movs	r2, #10
 800de84:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800de86:	4b03      	ldr	r3, [pc, #12]	; (800de94 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800de88:	4618      	mov	r0, r3
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr
 800de94:	200000b4 	.word	0x200000b4

0800de98 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d101      	bne.n	800deac <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dea8:	2303      	movs	r3, #3
 800deaa:	e004      	b.n	800deb6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr

0800dec2 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b084      	sub	sp, #16
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ded0:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2200      	movs	r2, #0
 800dedc:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2200      	movs	r2, #0
 800def2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2000      	movs	r0, #0
 800df00:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800df02:	2101      	movs	r1, #1
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f006 ff16 	bl	8014d36 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800df0a:	2181      	movs	r1, #129	; 0x81
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f006 ff12 	bl	8014d36 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800df18:	231f      	movs	r3, #31
 800df1a:	2101      	movs	r1, #1
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f006 ffd3 	bl	8014ec8 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800df22:	bf00      	nop
 800df24:	3710      	adds	r7, #16
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b084      	sub	sp, #16
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df38:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2200      	movs	r2, #0
 800df3e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2201      	movs	r2, #1
 800df44:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800df46:	2181      	movs	r1, #129	; 0x81
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f006 ff32 	bl	8014db2 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800df4e:	2101      	movs	r1, #1
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f006 ff2e 	bl	8014db2 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800df5c:	231f      	movs	r3, #31
 800df5e:	2101      	movs	r1, #1
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f006 ffb1 	bl	8014ec8 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800df66:	bf00      	nop
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800df6e:	b480      	push	{r7}
 800df70:	b085      	sub	sp, #20
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df7c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2200      	movs	r2, #0
 800df82:	721a      	strb	r2, [r3, #8]
}
 800df84:	bf00      	nop
 800df86:	3714      	adds	r7, #20
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	460b      	mov	r3, r1
 800df9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfa2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	7a1b      	ldrb	r3, [r3, #8]
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d004      	beq.n	800dfb6 <MSC_BOT_DataIn+0x26>
 800dfac:	2b02      	cmp	r3, #2
 800dfae:	db19      	blt.n	800dfe4 <MSC_BOT_DataIn+0x54>
 800dfb0:	2b04      	cmp	r3, #4
 800dfb2:	dc17      	bgt.n	800dfe4 <MSC_BOT_DataIn+0x54>
 800dfb4:	e011      	b.n	800dfda <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 f973 	bl	800e2b0 <SCSI_ProcessCmd>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	da0b      	bge.n	800dfe8 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 f8ea 	bl	800e1ac <MSC_BOT_SendCSW>
    }
    break;
 800dfd8:	e006      	b.n	800dfe8 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800dfda:	2100      	movs	r1, #0
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 f8e5 	bl	800e1ac <MSC_BOT_SendCSW>
    break;
 800dfe2:	e002      	b.n	800dfea <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800dfe4:	bf00      	nop
 800dfe6:	e000      	b.n	800dfea <MSC_BOT_DataIn+0x5a>
    break;
 800dfe8:	bf00      	nop
  }
}
 800dfea:	bf00      	nop
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}

0800dff2 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b084      	sub	sp, #16
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
 800dffa:	460b      	mov	r3, r1
 800dffc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e004:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	7a1b      	ldrb	r3, [r3, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <MSC_BOT_DataOut+0x22>
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d004      	beq.n	800e01c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800e012:	e015      	b.n	800e040 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 f817 	bl	800e048 <MSC_BOT_CBW_Decode>
      break;
 800e01a:	e011      	b.n	800e040 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e028:	461a      	mov	r2, r3
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 f940 	bl	800e2b0 <SCSI_ProcessCmd>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	da03      	bge.n	800e03e <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e036:	2101      	movs	r1, #1
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f8b7 	bl	800e1ac <MSC_BOT_SendCSW>
      break;
 800e03e:	bf00      	nop
  }
}
 800e040:	bf00      	nop
 800e042:	3710      	adds	r7, #16
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e056:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e070:	2101      	movs	r1, #1
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f006 ff49 	bl	8014f0a <USBD_LL_GetRxDataSize>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b1f      	cmp	r3, #31
 800e07c:	d114      	bne.n	800e0a8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e084:	4a32      	ldr	r2, [pc, #200]	; (800e150 <MSC_BOT_CBW_Decode+0x108>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d10e      	bne.n	800e0a8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e090:	2b01      	cmp	r3, #1
 800e092:	d809      	bhi.n	800e0a8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d004      	beq.n	800e0a8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e0a4:	2b10      	cmp	r3, #16
 800e0a6:	d90e      	bls.n	800e0c6 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0ae:	2320      	movs	r3, #32
 800e0b0:	2205      	movs	r2, #5
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 fcc9 	bl	800ea4a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f8a0 	bl	800e204 <MSC_BOT_Abort>
 800e0c4:	e041      	b.n	800e14a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 f8eb 	bl	800e2b0 <SCSI_ProcessCmd>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	da0c      	bge.n	800e0fa <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	7a1b      	ldrb	r3, [r3, #8]
 800e0e4:	2b05      	cmp	r3, #5
 800e0e6:	d104      	bne.n	800e0f2 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e0e8:	2101      	movs	r1, #1
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f85e 	bl	800e1ac <MSC_BOT_SendCSW>
 800e0f0:	e02b      	b.n	800e14a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f886 	bl	800e204 <MSC_BOT_Abort>
 800e0f8:	e027      	b.n	800e14a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	7a1b      	ldrb	r3, [r3, #8]
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	d022      	beq.n	800e148 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e106:	2b01      	cmp	r3, #1
 800e108:	d01e      	beq.n	800e148 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e10e:	2b03      	cmp	r3, #3
 800e110:	d01a      	beq.n	800e148 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d009      	beq.n	800e12e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f103 0110 	add.w	r1, r3, #16
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	461a      	mov	r2, r3
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f814 	bl	800e154 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800e12c:	e00d      	b.n	800e14a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d104      	bne.n	800e140 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e136:	2100      	movs	r1, #0
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 f837 	bl	800e1ac <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800e13e:	e004      	b.n	800e14a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f000 f85f 	bl	800e204 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800e146:	e000      	b.n	800e14a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800e148:	bf00      	nop
    }
  }
}
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	43425355 	.word	0x43425355

0800e154 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b086      	sub	sp, #24
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e166:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	4293      	cmp	r3, r2
 800e172:	bf28      	it	cs
 800e174:	4613      	movcs	r3, r2
 800e176:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	1ad2      	subs	r2, r2, r3
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	2204      	movs	r2, #4
 800e194:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	68ba      	ldr	r2, [r7, #8]
 800e19a:	2181      	movs	r1, #129	; 0x81
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f006 fe72 	bl	8014e86 <USBD_LL_Transmit>
}
 800e1a2:	bf00      	nop
 800e1a4:	3718      	adds	r7, #24
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
	...

0800e1ac <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1be:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	4a0f      	ldr	r2, [pc, #60]	; (800e200 <MSC_BOT_SendCSW+0x54>)
 800e1c4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	78fa      	ldrb	r2, [r7, #3]
 800e1cc:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e1dc:	230d      	movs	r3, #13
 800e1de:	2181      	movs	r1, #129	; 0x81
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f006 fe50 	bl	8014e86 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e1ec:	231f      	movs	r3, #31
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f006 fe69 	bl	8014ec8 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e1f6:	bf00      	nop
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	53425355 	.word	0x53425355

0800e204 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e212:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10c      	bne.n	800e238 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e224:	2b00      	cmp	r3, #0
 800e226:	d007      	beq.n	800e238 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d103      	bne.n	800e238 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e230:	2101      	movs	r1, #1
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f006 fd9e 	bl	8014d74 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e238:	2181      	movs	r1, #129	; 0x81
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f006 fd9a 	bl	8014d74 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	7a5b      	ldrb	r3, [r3, #9]
 800e244:	2b02      	cmp	r3, #2
 800e246:	d107      	bne.n	800e258 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e248:	2181      	movs	r1, #129	; 0x81
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f006 fd92 	bl	8014d74 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e250:	2101      	movs	r1, #1
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f006 fd8e 	bl	8014d74 <USBD_LL_StallEP>
  }
}
 800e258:	bf00      	nop
 800e25a:	3710      	adds	r7, #16
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	460b      	mov	r3, r1
 800e26a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e272:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	7a5b      	ldrb	r3, [r3, #9]
 800e278:	2b02      	cmp	r3, #2
 800e27a:	d108      	bne.n	800e28e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e27c:	2181      	movs	r1, #129	; 0x81
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f006 fd78 	bl	8014d74 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e284:	2101      	movs	r1, #1
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f006 fd74 	bl	8014d74 <USBD_LL_StallEP>
 800e28c:	e00d      	b.n	800e2aa <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e28e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e292:	2b00      	cmp	r3, #0
 800e294:	da08      	bge.n	800e2a8 <MSC_BOT_CplClrFeature+0x48>
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	7a5b      	ldrb	r3, [r3, #9]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d004      	beq.n	800e2a8 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e29e:	2101      	movs	r1, #1
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7ff ff83 	bl	800e1ac <MSC_BOT_SendCSW>
 800e2a6:	e000      	b.n	800e2aa <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800e2a8:	bf00      	nop
  }
}
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2c4:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	2b25      	cmp	r3, #37	; 0x25
 800e2cc:	d06e      	beq.n	800e3ac <SCSI_ProcessCmd+0xfc>
 800e2ce:	2b25      	cmp	r3, #37	; 0x25
 800e2d0:	dc11      	bgt.n	800e2f6 <SCSI_ProcessCmd+0x46>
 800e2d2:	2b1a      	cmp	r3, #26
 800e2d4:	d04f      	beq.n	800e376 <SCSI_ProcessCmd+0xc6>
 800e2d6:	2b1a      	cmp	r3, #26
 800e2d8:	dc06      	bgt.n	800e2e8 <SCSI_ProcessCmd+0x38>
 800e2da:	2b03      	cmp	r3, #3
 800e2dc:	d027      	beq.n	800e32e <SCSI_ProcessCmd+0x7e>
 800e2de:	2b12      	cmp	r3, #18
 800e2e0:	d02e      	beq.n	800e340 <SCSI_ProcessCmd+0x90>
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d01a      	beq.n	800e31c <SCSI_ProcessCmd+0x6c>
 800e2e6:	e0a0      	b.n	800e42a <SCSI_ProcessCmd+0x17a>
 800e2e8:	2b1e      	cmp	r3, #30
 800e2ea:	d03b      	beq.n	800e364 <SCSI_ProcessCmd+0xb4>
 800e2ec:	2b23      	cmp	r3, #35	; 0x23
 800e2ee:	d054      	beq.n	800e39a <SCSI_ProcessCmd+0xea>
 800e2f0:	2b1b      	cmp	r3, #27
 800e2f2:	d02e      	beq.n	800e352 <SCSI_ProcessCmd+0xa2>
 800e2f4:	e099      	b.n	800e42a <SCSI_ProcessCmd+0x17a>
 800e2f6:	2b5a      	cmp	r3, #90	; 0x5a
 800e2f8:	d046      	beq.n	800e388 <SCSI_ProcessCmd+0xd8>
 800e2fa:	2b5a      	cmp	r3, #90	; 0x5a
 800e2fc:	dc07      	bgt.n	800e30e <SCSI_ProcessCmd+0x5e>
 800e2fe:	2b2a      	cmp	r3, #42	; 0x2a
 800e300:	d078      	beq.n	800e3f4 <SCSI_ProcessCmd+0x144>
 800e302:	2b2f      	cmp	r3, #47	; 0x2f
 800e304:	f000 8088 	beq.w	800e418 <SCSI_ProcessCmd+0x168>
 800e308:	2b28      	cmp	r3, #40	; 0x28
 800e30a:	d061      	beq.n	800e3d0 <SCSI_ProcessCmd+0x120>
 800e30c:	e08d      	b.n	800e42a <SCSI_ProcessCmd+0x17a>
 800e30e:	2ba8      	cmp	r3, #168	; 0xa8
 800e310:	d067      	beq.n	800e3e2 <SCSI_ProcessCmd+0x132>
 800e312:	2baa      	cmp	r3, #170	; 0xaa
 800e314:	d077      	beq.n	800e406 <SCSI_ProcessCmd+0x156>
 800e316:	2b9e      	cmp	r3, #158	; 0x9e
 800e318:	d051      	beq.n	800e3be <SCSI_ProcessCmd+0x10e>
 800e31a:	e086      	b.n	800e42a <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e31c:	7afb      	ldrb	r3, [r7, #11]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	4619      	mov	r1, r3
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f000 f893 	bl	800e44e <SCSI_TestUnitReady>
 800e328:	4603      	mov	r3, r0
 800e32a:	75fb      	strb	r3, [r7, #23]
    break;
 800e32c:	e089      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800e32e:	7afb      	ldrb	r3, [r7, #11]
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	4619      	mov	r1, r3
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	f000 fb0f 	bl	800e958 <SCSI_RequestSense>
 800e33a:	4603      	mov	r3, r0
 800e33c:	75fb      	strb	r3, [r7, #23]
    break;
 800e33e:	e080      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800e340:	7afb      	ldrb	r3, [r7, #11]
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	4619      	mov	r1, r3
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	f000 f8cc 	bl	800e4e4 <SCSI_Inquiry>
 800e34c:	4603      	mov	r3, r0
 800e34e:	75fb      	strb	r3, [r7, #23]
    break;
 800e350:	e077      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e352:	7afb      	ldrb	r3, [r7, #11]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	4619      	mov	r1, r3
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f000 fbb9 	bl	800ead0 <SCSI_StartStopUnit>
 800e35e:	4603      	mov	r3, r0
 800e360:	75fb      	strb	r3, [r7, #23]
    break;
 800e362:	e06e      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e364:	7afb      	ldrb	r3, [r7, #11]
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	4619      	mov	r1, r3
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f000 fbfb 	bl	800eb66 <SCSI_AllowPreventRemovable>
 800e370:	4603      	mov	r3, r0
 800e372:	75fb      	strb	r3, [r7, #23]
    break;
 800e374:	e065      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e376:	7afb      	ldrb	r3, [r7, #11]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	4619      	mov	r1, r3
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f000 fa9f 	bl	800e8c0 <SCSI_ModeSense6>
 800e382:	4603      	mov	r3, r0
 800e384:	75fb      	strb	r3, [r7, #23]
    break;
 800e386:	e05c      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e388:	7afb      	ldrb	r3, [r7, #11]
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	4619      	mov	r1, r3
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f000 fabc 	bl	800e90c <SCSI_ModeSense10>
 800e394:	4603      	mov	r3, r0
 800e396:	75fb      	strb	r3, [r7, #23]
    break;
 800e398:	e053      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e39a:	7afb      	ldrb	r3, [r7, #11]
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	4619      	mov	r1, r3
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f000 fa20 	bl	800e7e6 <SCSI_ReadFormatCapacity>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	75fb      	strb	r3, [r7, #23]
    break;
 800e3aa:	e04a      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e3ac:	7afb      	ldrb	r3, [r7, #11]
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f000 f904 	bl	800e5c0 <SCSI_ReadCapacity10>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	75fb      	strb	r3, [r7, #23]
    break;
 800e3bc:	e041      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e3be:	7afb      	ldrb	r3, [r7, #11]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	f000 f96a 	bl	800e69e <SCSI_ReadCapacity16>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	75fb      	strb	r3, [r7, #23]
    break;
 800e3ce:	e038      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800e3d0:	7afb      	ldrb	r3, [r7, #11]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f000 fbe8 	bl	800ebac <SCSI_Read10>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	75fb      	strb	r3, [r7, #23]
    break;
 800e3e0:	e02f      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800e3e2:	7afb      	ldrb	r3, [r7, #11]
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f000 fc79 	bl	800ece0 <SCSI_Read12>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	75fb      	strb	r3, [r7, #23]
    break;
 800e3f2:	e026      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800e3f4:	7afb      	ldrb	r3, [r7, #11]
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	f000 fd15 	bl	800ee2a <SCSI_Write10>
 800e400:	4603      	mov	r3, r0
 800e402:	75fb      	strb	r3, [r7, #23]
    break;
 800e404:	e01d      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800e406:	7afb      	ldrb	r3, [r7, #11]
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	4619      	mov	r1, r3
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f000 fdcb 	bl	800efa8 <SCSI_Write12>
 800e412:	4603      	mov	r3, r0
 800e414:	75fb      	strb	r3, [r7, #23]
    break;
 800e416:	e014      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800e418:	7afb      	ldrb	r3, [r7, #11]
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	4619      	mov	r1, r3
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f000 fe91 	bl	800f146 <SCSI_Verify10>
 800e424:	4603      	mov	r3, r0
 800e426:	75fb      	strb	r3, [r7, #23]
    break;
 800e428:	e00b      	b.n	800e442 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e42a:	7af9      	ldrb	r1, [r7, #11]
 800e42c:	2320      	movs	r3, #32
 800e42e:	2205      	movs	r2, #5
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f000 fb0a 	bl	800ea4a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	2202      	movs	r2, #2
 800e43a:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800e43c:	23ff      	movs	r3, #255	; 0xff
 800e43e:	75fb      	strb	r3, [r7, #23]
    break;
 800e440:	bf00      	nop
  }

  return ret;
 800e442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3718      	adds	r7, #24
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b086      	sub	sp, #24
 800e452:	af00      	add	r7, sp, #0
 800e454:	60f8      	str	r0, [r7, #12]
 800e456:	460b      	mov	r3, r1
 800e458:	607a      	str	r2, [r7, #4]
 800e45a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e462:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00a      	beq.n	800e484 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e474:	2320      	movs	r3, #32
 800e476:	2205      	movs	r2, #5
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f000 fae6 	bl	800ea4a <SCSI_SenseCode>

    return -1;
 800e47e:	f04f 33ff 	mov.w	r3, #4294967295
 800e482:	e02a      	b.n	800e4da <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e48a:	2b02      	cmp	r3, #2
 800e48c:	d10b      	bne.n	800e4a6 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e48e:	7af9      	ldrb	r1, [r7, #11]
 800e490:	233a      	movs	r3, #58	; 0x3a
 800e492:	2202      	movs	r2, #2
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f000 fad8 	bl	800ea4a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2205      	movs	r2, #5
 800e49e:	721a      	strb	r2, [r3, #8]
    return -1;
 800e4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a4:	e019      	b.n	800e4da <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	7afa      	ldrb	r2, [r7, #11]
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	4798      	blx	r3
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00b      	beq.n	800e4d2 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e4ba:	7af9      	ldrb	r1, [r7, #11]
 800e4bc:	233a      	movs	r3, #58	; 0x3a
 800e4be:	2202      	movs	r2, #2
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f000 fac2 	bl	800ea4a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2205      	movs	r2, #5
 800e4ca:	721a      	strb	r2, [r3, #8]

    return -1;
 800e4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e4d0:	e003      	b.n	800e4da <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	60da      	str	r2, [r3, #12]

  return 0;
 800e4d8:	2300      	movs	r3, #0
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3718      	adds	r7, #24
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
	...

0800e4e4 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b088      	sub	sp, #32
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	607a      	str	r2, [r7, #4]
 800e4f0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4f8:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e500:	2b00      	cmp	r3, #0
 800e502:	d10a      	bne.n	800e51a <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e504:	69bb      	ldr	r3, [r7, #24]
 800e506:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e50a:	2320      	movs	r3, #32
 800e50c:	2205      	movs	r2, #5
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f000 fa9b 	bl	800ea4a <SCSI_SenseCode>
    return -1;
 800e514:	f04f 33ff 	mov.w	r3, #4294967295
 800e518:	e04a      	b.n	800e5b0 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	3301      	adds	r3, #1
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	f003 0301 	and.w	r3, r3, #1
 800e524:	2b00      	cmp	r3, #0
 800e526:	d020      	beq.n	800e56a <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	3302      	adds	r3, #2
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d105      	bne.n	800e53e <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e532:	2206      	movs	r2, #6
 800e534:	4920      	ldr	r1, [pc, #128]	; (800e5b8 <SCSI_Inquiry+0xd4>)
 800e536:	69b8      	ldr	r0, [r7, #24]
 800e538:	f000 ff50 	bl	800f3dc <SCSI_UpdateBotData>
 800e53c:	e037      	b.n	800e5ae <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	3302      	adds	r3, #2
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	2b80      	cmp	r3, #128	; 0x80
 800e546:	d105      	bne.n	800e554 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e548:	2208      	movs	r2, #8
 800e54a:	491c      	ldr	r1, [pc, #112]	; (800e5bc <SCSI_Inquiry+0xd8>)
 800e54c:	69b8      	ldr	r0, [r7, #24]
 800e54e:	f000 ff45 	bl	800f3dc <SCSI_UpdateBotData>
 800e552:	e02c      	b.n	800e5ae <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e55a:	2324      	movs	r3, #36	; 0x24
 800e55c:	2205      	movs	r2, #5
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	f000 fa73 	bl	800ea4a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e564:	f04f 33ff 	mov.w	r3, #4294967295
 800e568:	e022      	b.n	800e5b0 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e570:	69d9      	ldr	r1, [r3, #28]
 800e572:	7afa      	ldrb	r2, [r7, #11]
 800e574:	4613      	mov	r3, r2
 800e576:	00db      	lsls	r3, r3, #3
 800e578:	4413      	add	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	440b      	add	r3, r1
 800e57e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	3304      	adds	r3, #4
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	b29b      	uxth	r3, r3
 800e588:	3305      	adds	r3, #5
 800e58a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3304      	adds	r3, #4
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	b29b      	uxth	r3, r3
 800e594:	8bfa      	ldrh	r2, [r7, #30]
 800e596:	429a      	cmp	r2, r3
 800e598:	d303      	bcc.n	800e5a2 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	3304      	adds	r3, #4
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e5a2:	8bfb      	ldrh	r3, [r7, #30]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	6979      	ldr	r1, [r7, #20]
 800e5a8:	69b8      	ldr	r0, [r7, #24]
 800e5aa:	f000 ff17 	bl	800f3dc <SCSI_UpdateBotData>
  }

  return 0;
 800e5ae:	2300      	movs	r3, #0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3720      	adds	r7, #32
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	200000c0 	.word	0x200000c0
 800e5bc:	200000c8 	.word	0x200000c8

0800e5c0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b086      	sub	sp, #24
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5d4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e5ea:	7af8      	ldrb	r0, [r7, #11]
 800e5ec:	4798      	blx	r3
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e5f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d104      	bne.n	800e604 <SCSI_ReadCapacity10+0x44>
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e600:	2b02      	cmp	r3, #2
 800e602:	d108      	bne.n	800e616 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e604:	7af9      	ldrb	r1, [r7, #11]
 800e606:	233a      	movs	r3, #58	; 0x3a
 800e608:	2202      	movs	r2, #2
 800e60a:	68f8      	ldr	r0, [r7, #12]
 800e60c:	f000 fa1d 	bl	800ea4a <SCSI_SenseCode>
    return -1;
 800e610:	f04f 33ff 	mov.w	r3, #4294967295
 800e614:	e03f      	b.n	800e696 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e61c:	3b01      	subs	r3, #1
 800e61e:	0e1b      	lsrs	r3, r3, #24
 800e620:	b2da      	uxtb	r2, r3
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e62c:	3b01      	subs	r3, #1
 800e62e:	0c1b      	lsrs	r3, r3, #16
 800e630:	b2da      	uxtb	r2, r3
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e63c:	3b01      	subs	r3, #1
 800e63e:	0a1b      	lsrs	r3, r3, #8
 800e640:	b2da      	uxtb	r2, r3
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	3b01      	subs	r3, #1
 800e650:	b2da      	uxtb	r2, r3
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e65c:	161b      	asrs	r3, r3, #24
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e66a:	141b      	asrs	r3, r3, #16
 800e66c:	b2da      	uxtb	r2, r3
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e678:	0a1b      	lsrs	r3, r3, #8
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	b2da      	uxtb	r2, r3
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e688:	b2da      	uxtb	r2, r3
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	2208      	movs	r2, #8
 800e692:	60da      	str	r2, [r3, #12]

  return 0;
 800e694:	2300      	movs	r3, #0

}
 800e696:	4618      	mov	r0, r3
 800e698:	3718      	adds	r7, #24
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b088      	sub	sp, #32
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	60f8      	str	r0, [r7, #12]
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	607a      	str	r2, [r7, #4]
 800e6aa:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6b2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	69ba      	ldr	r2, [r7, #24]
 800e6be:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e6c2:	69ba      	ldr	r2, [r7, #24]
 800e6c4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e6c8:	7af8      	ldrb	r0, [r7, #11]
 800e6ca:	4798      	blx	r3
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e6d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d104      	bne.n	800e6e2 <SCSI_ReadCapacity16+0x44>
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e6de:	2b02      	cmp	r3, #2
 800e6e0:	d108      	bne.n	800e6f4 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e6e2:	7af9      	ldrb	r1, [r7, #11]
 800e6e4:	233a      	movs	r3, #58	; 0x3a
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f000 f9ae 	bl	800ea4a <SCSI_SenseCode>
    return -1;
 800e6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e6f2:	e074      	b.n	800e7de <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	330a      	adds	r3, #10
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	330b      	adds	r3, #11
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e704:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	330c      	adds	r3, #12
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e70e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	320d      	adds	r2, #13
 800e714:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e716:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e71c:	2300      	movs	r3, #0
 800e71e:	77fb      	strb	r3, [r7, #31]
 800e720:	e007      	b.n	800e732 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800e722:	7ffb      	ldrb	r3, [r7, #31]
 800e724:	69ba      	ldr	r2, [r7, #24]
 800e726:	4413      	add	r3, r2
 800e728:	2200      	movs	r2, #0
 800e72a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e72c:	7ffb      	ldrb	r3, [r7, #31]
 800e72e:	3301      	adds	r3, #1
 800e730:	77fb      	strb	r3, [r7, #31]
 800e732:	7ffa      	ldrb	r2, [r7, #31]
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d3f2      	bcc.n	800e722 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e742:	3b01      	subs	r3, #1
 800e744:	0e1b      	lsrs	r3, r3, #24
 800e746:	b2da      	uxtb	r2, r3
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e752:	3b01      	subs	r3, #1
 800e754:	0c1b      	lsrs	r3, r3, #16
 800e756:	b2da      	uxtb	r2, r3
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e762:	3b01      	subs	r3, #1
 800e764:	0a1b      	lsrs	r3, r3, #8
 800e766:	b2da      	uxtb	r2, r3
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e772:	b2db      	uxtb	r3, r3
 800e774:	3b01      	subs	r3, #1
 800e776:	b2da      	uxtb	r2, r3
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e782:	161b      	asrs	r3, r3, #24
 800e784:	b2da      	uxtb	r2, r3
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e790:	141b      	asrs	r3, r3, #16
 800e792:	b2da      	uxtb	r2, r3
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e79e:	0a1b      	lsrs	r3, r3, #8
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e7ae:	b2da      	uxtb	r2, r3
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	330a      	adds	r3, #10
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	330b      	adds	r3, #11
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e7c4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	330c      	adds	r3, #12
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e7ce:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	320d      	adds	r2, #13
 800e7d4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e7d6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	60da      	str	r2, [r3, #12]

  return 0;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3720      	adds	r7, #32
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}

0800e7e6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b088      	sub	sp, #32
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	60f8      	str	r0, [r7, #12]
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	607a      	str	r2, [r7, #4]
 800e7f2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7fa:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	f107 0214 	add.w	r2, r7, #20
 800e808:	f107 0110 	add.w	r1, r7, #16
 800e80c:	7af8      	ldrb	r0, [r7, #11]
 800e80e:	4798      	blx	r3
 800e810:	4603      	mov	r3, r0
 800e812:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d104      	bne.n	800e826 <SCSI_ReadFormatCapacity+0x40>
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e822:	2b02      	cmp	r3, #2
 800e824:	d108      	bne.n	800e838 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e826:	7af9      	ldrb	r1, [r7, #11]
 800e828:	233a      	movs	r3, #58	; 0x3a
 800e82a:	2202      	movs	r2, #2
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f000 f90c 	bl	800ea4a <SCSI_SenseCode>
    return -1;
 800e832:	f04f 33ff 	mov.w	r3, #4294967295
 800e836:	e03e      	b.n	800e8b6 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800e838:	2300      	movs	r3, #0
 800e83a:	83fb      	strh	r3, [r7, #30]
 800e83c:	e007      	b.n	800e84e <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800e83e:	8bfb      	ldrh	r3, [r7, #30]
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	4413      	add	r3, r2
 800e844:	2200      	movs	r2, #0
 800e846:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800e848:	8bfb      	ldrh	r3, [r7, #30]
 800e84a:	3301      	adds	r3, #1
 800e84c:	83fb      	strh	r3, [r7, #30]
 800e84e:	8bfb      	ldrh	r3, [r7, #30]
 800e850:	2b0b      	cmp	r3, #11
 800e852:	d9f4      	bls.n	800e83e <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	2208      	movs	r2, #8
 800e858:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	3b01      	subs	r3, #1
 800e85e:	0e1b      	lsrs	r3, r3, #24
 800e860:	b2da      	uxtb	r2, r3
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	3b01      	subs	r3, #1
 800e86a:	0c1b      	lsrs	r3, r3, #16
 800e86c:	b2da      	uxtb	r2, r3
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	3b01      	subs	r3, #1
 800e876:	0a1b      	lsrs	r3, r3, #8
 800e878:	b2da      	uxtb	r2, r3
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	b2db      	uxtb	r3, r3
 800e882:	3b01      	subs	r3, #1
 800e884:	b2da      	uxtb	r2, r3
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	2202      	movs	r2, #2
 800e88e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e890:	8abb      	ldrh	r3, [r7, #20]
 800e892:	141b      	asrs	r3, r3, #16
 800e894:	b2da      	uxtb	r2, r3
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e89a:	8abb      	ldrh	r3, [r7, #20]
 800e89c:	0a1b      	lsrs	r3, r3, #8
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	b2da      	uxtb	r2, r3
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e8a6:	8abb      	ldrh	r3, [r7, #20]
 800e8a8:	b2da      	uxtb	r2, r3
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	220c      	movs	r2, #12
 800e8b2:	60da      	str	r2, [r3, #12]

  return 0;
 800e8b4:	2300      	movs	r3, #0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3720      	adds	r7, #32
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
	...

0800e8c0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b086      	sub	sp, #24
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	607a      	str	r2, [r7, #4]
 800e8cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8d4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800e8d6:	2317      	movs	r3, #23
 800e8d8:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	8afa      	ldrh	r2, [r7, #22]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d303      	bcc.n	800e8f0 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	3304      	adds	r3, #4
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800e8f0:	8afb      	ldrh	r3, [r7, #22]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	4904      	ldr	r1, [pc, #16]	; (800e908 <SCSI_ModeSense6+0x48>)
 800e8f6:	6938      	ldr	r0, [r7, #16]
 800e8f8:	f000 fd70 	bl	800f3dc <SCSI_UpdateBotData>

  return 0;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3718      	adds	r7, #24
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	200000d0 	.word	0x200000d0

0800e90c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b086      	sub	sp, #24
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	460b      	mov	r3, r1
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e920:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800e922:	231b      	movs	r3, #27
 800e924:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3308      	adds	r3, #8
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	8afa      	ldrh	r2, [r7, #22]
 800e930:	429a      	cmp	r2, r3
 800e932:	d303      	bcc.n	800e93c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	3308      	adds	r3, #8
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800e93c:	8afb      	ldrh	r3, [r7, #22]
 800e93e:	461a      	mov	r2, r3
 800e940:	4904      	ldr	r1, [pc, #16]	; (800e954 <SCSI_ModeSense10+0x48>)
 800e942:	6938      	ldr	r0, [r7, #16]
 800e944:	f000 fd4a 	bl	800f3dc <SCSI_UpdateBotData>

  return 0;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3718      	adds	r7, #24
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	200000e8 	.word	0x200000e8

0800e958 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	460b      	mov	r3, r1
 800e962:	607a      	str	r2, [r7, #4]
 800e964:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e96c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10a      	bne.n	800e98e <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e97e:	2320      	movs	r3, #32
 800e980:	2205      	movs	r2, #5
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f000 f861 	bl	800ea4a <SCSI_SenseCode>
    return -1;
 800e988:	f04f 33ff 	mov.w	r3, #4294967295
 800e98c:	e059      	b.n	800ea42 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e98e:	2300      	movs	r3, #0
 800e990:	75fb      	strb	r3, [r7, #23]
 800e992:	e007      	b.n	800e9a4 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800e994:	7dfb      	ldrb	r3, [r7, #23]
 800e996:	693a      	ldr	r2, [r7, #16]
 800e998:	4413      	add	r3, r2
 800e99a:	2200      	movs	r2, #0
 800e99c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e99e:	7dfb      	ldrb	r3, [r7, #23]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	75fb      	strb	r3, [r7, #23]
 800e9a4:	7dfb      	ldrb	r3, [r7, #23]
 800e9a6:	2b11      	cmp	r3, #17
 800e9a8:	d9f4      	bls.n	800e994 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	2270      	movs	r2, #112	; 0x70
 800e9ae:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	220c      	movs	r2, #12
 800e9b4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d02e      	beq.n	800ea24 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	3248      	adds	r2, #72	; 0x48
 800e9d2:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800e9e0:	693a      	ldr	r2, [r7, #16]
 800e9e2:	3348      	adds	r3, #72	; 0x48
 800e9e4:	00db      	lsls	r3, r3, #3
 800e9e6:	4413      	add	r3, r2
 800e9e8:	791a      	ldrb	r2, [r3, #4]
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	3348      	adds	r3, #72	; 0x48
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	4413      	add	r3, r2
 800e9fc:	795a      	ldrb	r2, [r3, #5]
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ea08:	3301      	adds	r3, #1
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ea18:	2b04      	cmp	r3, #4
 800ea1a:	d103      	bne.n	800ea24 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	2212      	movs	r2, #18
 800ea28:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	2b12      	cmp	r3, #18
 800ea32:	d805      	bhi.n	800ea40 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	3304      	adds	r3, #4
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3718      	adds	r7, #24
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ea4a:	b480      	push	{r7}
 800ea4c:	b085      	sub	sp, #20
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
 800ea52:	4608      	mov	r0, r1
 800ea54:	4611      	mov	r1, r2
 800ea56:	461a      	mov	r2, r3
 800ea58:	4603      	mov	r3, r0
 800ea5a:	70fb      	strb	r3, [r7, #3]
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	70bb      	strb	r3, [r7, #2]
 800ea60:	4613      	mov	r3, r2
 800ea62:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea6a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ea72:	461a      	mov	r2, r3
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3248      	adds	r2, #72	; 0x48
 800ea78:	78b9      	ldrb	r1, [r7, #2]
 800ea7a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	3348      	adds	r3, #72	; 0x48
 800ea88:	00db      	lsls	r3, r3, #3
 800ea8a:	4413      	add	r3, r2
 800ea8c:	787a      	ldrb	r2, [r7, #1]
 800ea8e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	3348      	adds	r3, #72	; 0x48
 800ea9a:	00db      	lsls	r3, r3, #3
 800ea9c:	4413      	add	r3, r2
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	b2da      	uxtb	r2, r3
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eab8:	2b04      	cmp	r3, #4
 800eaba:	d103      	bne.n	800eac4 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2200      	movs	r2, #0
 800eac0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800eac4:	bf00      	nop
 800eac6:	3714      	adds	r7, #20
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	460b      	mov	r3, r1
 800eada:	607a      	str	r2, [r7, #4]
 800eadc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eae4:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d10f      	bne.n	800eb10 <SCSI_StartStopUnit+0x40>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	f003 0303 	and.w	r3, r3, #3
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d108      	bne.n	800eb10 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800eafe:	7af9      	ldrb	r1, [r7, #11]
 800eb00:	2324      	movs	r3, #36	; 0x24
 800eb02:	2205      	movs	r2, #5
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f7ff ffa0 	bl	800ea4a <SCSI_SenseCode>

    return -1;
 800eb0a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb0e:	e026      	b.n	800eb5e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3304      	adds	r3, #4
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	f003 0303 	and.w	r3, r3, #3
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d104      	bne.n	800eb28 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800eb26:	e016      	b.n	800eb56 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3304      	adds	r3, #4
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	f003 0303 	and.w	r3, r3, #3
 800eb32:	2b02      	cmp	r3, #2
 800eb34:	d104      	bne.n	800eb40 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	2202      	movs	r2, #2
 800eb3a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800eb3e:	e00a      	b.n	800eb56 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3304      	adds	r3, #4
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	f003 0303 	and.w	r3, r3, #3
 800eb4a:	2b03      	cmp	r3, #3
 800eb4c:	d103      	bne.n	800eb56 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	60da      	str	r2, [r3, #12]

  return 0;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3718      	adds	r7, #24
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb66:	b480      	push	{r7}
 800eb68:	b087      	sub	sp, #28
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	60f8      	str	r0, [r7, #12]
 800eb6e:	460b      	mov	r3, r1
 800eb70:	607a      	str	r2, [r7, #4]
 800eb72:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb7a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3304      	adds	r3, #4
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d104      	bne.n	800eb90 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800eb8e:	e003      	b.n	800eb98 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	60da      	str	r2, [r3, #12]

  return 0;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	371c      	adds	r7, #28
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b086      	sub	sp, #24
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebc0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	7a1b      	ldrb	r3, [r3, #8]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d17c      	bne.n	800ecc4 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ebd0:	b25b      	sxtb	r3, r3
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	db0a      	blt.n	800ebec <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ebdc:	2320      	movs	r3, #32
 800ebde:	2205      	movs	r2, #5
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f7ff ff32 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ebe6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebea:	e075      	b.n	800ecd8 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d108      	bne.n	800ec08 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ebf6:	7af9      	ldrb	r1, [r7, #11]
 800ebf8:	233a      	movs	r3, #58	; 0x3a
 800ebfa:	2202      	movs	r2, #2
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f7ff ff24 	bl	800ea4a <SCSI_SenseCode>

      return -1;
 800ec02:	f04f 33ff 	mov.w	r3, #4294967295
 800ec06:	e067      	b.n	800ecd8 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	7afa      	ldrb	r2, [r7, #11]
 800ec12:	4610      	mov	r0, r2
 800ec14:	4798      	blx	r3
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d008      	beq.n	800ec2e <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ec1c:	7af9      	ldrb	r1, [r7, #11]
 800ec1e:	233a      	movs	r3, #58	; 0x3a
 800ec20:	2202      	movs	r2, #2
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	f7ff ff11 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ec28:	f04f 33ff 	mov.w	r3, #4294967295
 800ec2c:	e054      	b.n	800ecd8 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	3302      	adds	r3, #2
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	3303      	adds	r3, #3
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec3e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	3304      	adds	r3, #4
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ec48:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	3205      	adds	r2, #5
 800ec4e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ec50:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	3307      	adds	r3, #7
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	021b      	lsls	r3, r3, #8
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	3208      	adds	r2, #8
 800ec64:	7812      	ldrb	r2, [r2, #0]
 800ec66:	431a      	orrs	r2, r3
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ec7a:	7af9      	ldrb	r1, [r7, #11]
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f000 fa95 	bl	800f1ac <SCSI_CheckAddressRange>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	da02      	bge.n	800ec8e <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ec88:	f04f 33ff 	mov.w	r3, #4294967295
 800ec8c:	e024      	b.n	800ecd8 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ec9a:	6979      	ldr	r1, [r7, #20]
 800ec9c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800eca0:	fb01 f303 	mul.w	r3, r1, r3
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d00a      	beq.n	800ecbe <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ecae:	2320      	movs	r3, #32
 800ecb0:	2205      	movs	r2, #5
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f7ff fec9 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ecb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecbc:	e00c      	b.n	800ecd8 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2202      	movs	r2, #2
 800ecc2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecca:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800eccc:	7afb      	ldrb	r3, [r7, #11]
 800ecce:	4619      	mov	r1, r3
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f000 fa8d 	bl	800f1f0 <SCSI_ProcessRead>
 800ecd6:	4603      	mov	r3, r0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3718      	adds	r7, #24
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	460b      	mov	r3, r1
 800ecea:	607a      	str	r2, [r7, #4]
 800ecec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecf4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	7a1b      	ldrb	r3, [r3, #8]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f040 8087 	bne.w	800ee0e <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ed06:	b25b      	sxtb	r3, r3
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	db0a      	blt.n	800ed22 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ed12:	2320      	movs	r3, #32
 800ed14:	2205      	movs	r2, #5
 800ed16:	68f8      	ldr	r0, [r7, #12]
 800ed18:	f7ff fe97 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ed1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed20:	e07f      	b.n	800ee22 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ed28:	2b02      	cmp	r3, #2
 800ed2a:	d108      	bne.n	800ed3e <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ed2c:	7af9      	ldrb	r1, [r7, #11]
 800ed2e:	233a      	movs	r3, #58	; 0x3a
 800ed30:	2202      	movs	r2, #2
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	f7ff fe89 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ed38:	f04f 33ff 	mov.w	r3, #4294967295
 800ed3c:	e071      	b.n	800ee22 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	7afa      	ldrb	r2, [r7, #11]
 800ed48:	4610      	mov	r0, r2
 800ed4a:	4798      	blx	r3
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d008      	beq.n	800ed64 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ed52:	7af9      	ldrb	r1, [r7, #11]
 800ed54:	233a      	movs	r3, #58	; 0x3a
 800ed56:	2202      	movs	r2, #2
 800ed58:	68f8      	ldr	r0, [r7, #12]
 800ed5a:	f7ff fe76 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ed5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed62:	e05e      	b.n	800ee22 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	3302      	adds	r3, #2
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	3303      	adds	r3, #3
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed74:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	3304      	adds	r3, #4
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ed7e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	3205      	adds	r2, #5
 800ed84:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ed86:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	3306      	adds	r3, #6
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	3307      	adds	r3, #7
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ed9e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3308      	adds	r3, #8
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800eda8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	3209      	adds	r2, #9
 800edae:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800edb0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800edc4:	7af9      	ldrb	r1, [r7, #11]
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f000 f9f0 	bl	800f1ac <SCSI_CheckAddressRange>
 800edcc:	4603      	mov	r3, r0
 800edce:	2b00      	cmp	r3, #0
 800edd0:	da02      	bge.n	800edd8 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800edd2:	f04f 33ff 	mov.w	r3, #4294967295
 800edd6:	e024      	b.n	800ee22 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ede4:	6979      	ldr	r1, [r7, #20]
 800ede6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800edea:	fb01 f303 	mul.w	r3, r1, r3
 800edee:	429a      	cmp	r2, r3
 800edf0:	d00a      	beq.n	800ee08 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800edf8:	2320      	movs	r3, #32
 800edfa:	2205      	movs	r2, #5
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f7ff fe24 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ee02:	f04f 33ff 	mov.w	r3, #4294967295
 800ee06:	e00c      	b.n	800ee22 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	2202      	movs	r2, #2
 800ee0c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee14:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ee16:	7afb      	ldrb	r3, [r7, #11]
 800ee18:	4619      	mov	r1, r3
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f000 f9e8 	bl	800f1f0 <SCSI_ProcessRead>
 800ee20:	4603      	mov	r3, r0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b086      	sub	sp, #24
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	60f8      	str	r0, [r7, #12]
 800ee32:	460b      	mov	r3, r1
 800ee34:	607a      	str	r2, [r7, #4]
 800ee36:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee3e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	7a1b      	ldrb	r3, [r3, #8]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f040 80a5 	bne.w	800ef94 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10a      	bne.n	800ee6a <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ee5a:	2320      	movs	r3, #32
 800ee5c:	2205      	movs	r2, #5
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f7ff fdf3 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ee64:	f04f 33ff 	mov.w	r3, #4294967295
 800ee68:	e09a      	b.n	800efa0 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ee70:	b25b      	sxtb	r3, r3
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	da0a      	bge.n	800ee8c <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ee7c:	2320      	movs	r3, #32
 800ee7e:	2205      	movs	r2, #5
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f7ff fde2 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ee86:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8a:	e089      	b.n	800efa0 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	7afa      	ldrb	r2, [r7, #11]
 800ee96:	4610      	mov	r0, r2
 800ee98:	4798      	blx	r3
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d008      	beq.n	800eeb2 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eea0:	7af9      	ldrb	r1, [r7, #11]
 800eea2:	233a      	movs	r3, #58	; 0x3a
 800eea4:	2202      	movs	r2, #2
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f7ff fdcf 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800eeac:	f04f 33ff 	mov.w	r3, #4294967295
 800eeb0:	e076      	b.n	800efa0 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	7afa      	ldrb	r2, [r7, #11]
 800eebc:	4610      	mov	r0, r2
 800eebe:	4798      	blx	r3
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d008      	beq.n	800eed8 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800eec6:	7af9      	ldrb	r1, [r7, #11]
 800eec8:	2327      	movs	r3, #39	; 0x27
 800eeca:	2202      	movs	r2, #2
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f7ff fdbc 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800eed2:	f04f 33ff 	mov.w	r3, #4294967295
 800eed6:	e063      	b.n	800efa0 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3302      	adds	r3, #2
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	3303      	adds	r3, #3
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eee8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	3304      	adds	r3, #4
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800eef2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	3205      	adds	r2, #5
 800eef8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800eefa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	3307      	adds	r3, #7
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	3208      	adds	r2, #8
 800ef0e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ef10:	431a      	orrs	r2, r3
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ef24:	7af9      	ldrb	r1, [r7, #11]
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	f000 f940 	bl	800f1ac <SCSI_CheckAddressRange>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	da02      	bge.n	800ef38 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ef32:	f04f 33ff 	mov.w	r3, #4294967295
 800ef36:	e033      	b.n	800efa0 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ef3e:	697a      	ldr	r2, [r7, #20]
 800ef40:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ef44:	fb02 f303 	mul.w	r3, r2, r3
 800ef48:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ef50:	693a      	ldr	r2, [r7, #16]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d00a      	beq.n	800ef6c <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ef5c:	2320      	movs	r3, #32
 800ef5e:	2205      	movs	r2, #5
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f7ff fd72 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800ef66:	f04f 33ff 	mov.w	r3, #4294967295
 800ef6a:	e019      	b.n	800efa0 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef72:	bf28      	it	cs
 800ef74:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ef78:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	f103 0210 	add.w	r2, r3, #16
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	2101      	movs	r1, #1
 800ef8a:	68f8      	ldr	r0, [r7, #12]
 800ef8c:	f005 ff9c 	bl	8014ec8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ef90:	2300      	movs	r3, #0
 800ef92:	e005      	b.n	800efa0 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800ef94:	7afb      	ldrb	r3, [r7, #11]
 800ef96:	4619      	mov	r1, r3
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f000 f99c 	bl	800f2d6 <SCSI_ProcessWrite>
 800ef9e:	4603      	mov	r3, r0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3718      	adds	r7, #24
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	460b      	mov	r3, r1
 800efb2:	607a      	str	r2, [r7, #4]
 800efb4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efbc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	7a1b      	ldrb	r3, [r3, #8]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f040 80b5 	bne.w	800f132 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10a      	bne.n	800efe8 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800efd8:	2320      	movs	r3, #32
 800efda:	2205      	movs	r2, #5
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f7ff fd34 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800efe2:	f04f 33ff 	mov.w	r3, #4294967295
 800efe6:	e0aa      	b.n	800f13e <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800efee:	b25b      	sxtb	r3, r3
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	da0a      	bge.n	800f00a <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800effa:	2320      	movs	r3, #32
 800effc:	2205      	movs	r2, #5
 800effe:	68f8      	ldr	r0, [r7, #12]
 800f000:	f7ff fd23 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800f004:	f04f 33ff 	mov.w	r3, #4294967295
 800f008:	e099      	b.n	800f13e <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f010:	689b      	ldr	r3, [r3, #8]
 800f012:	7afa      	ldrb	r2, [r7, #11]
 800f014:	4610      	mov	r0, r2
 800f016:	4798      	blx	r3
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00b      	beq.n	800f036 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f01e:	7af9      	ldrb	r1, [r7, #11]
 800f020:	233a      	movs	r3, #58	; 0x3a
 800f022:	2202      	movs	r2, #2
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f7ff fd10 	bl	800ea4a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	2205      	movs	r2, #5
 800f02e:	721a      	strb	r2, [r3, #8]
      return -1;
 800f030:	f04f 33ff 	mov.w	r3, #4294967295
 800f034:	e083      	b.n	800f13e <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f03c:	68db      	ldr	r3, [r3, #12]
 800f03e:	7afa      	ldrb	r2, [r7, #11]
 800f040:	4610      	mov	r0, r2
 800f042:	4798      	blx	r3
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00b      	beq.n	800f062 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f04a:	7af9      	ldrb	r1, [r7, #11]
 800f04c:	2327      	movs	r3, #39	; 0x27
 800f04e:	2202      	movs	r2, #2
 800f050:	68f8      	ldr	r0, [r7, #12]
 800f052:	f7ff fcfa 	bl	800ea4a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	2205      	movs	r2, #5
 800f05a:	721a      	strb	r2, [r3, #8]
      return -1;
 800f05c:	f04f 33ff 	mov.w	r3, #4294967295
 800f060:	e06d      	b.n	800f13e <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3302      	adds	r3, #2
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	3303      	adds	r3, #3
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f072:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3304      	adds	r3, #4
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f07c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	3205      	adds	r2, #5
 800f082:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f084:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	3306      	adds	r3, #6
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	3307      	adds	r3, #7
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f09c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	3308      	adds	r3, #8
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f0a6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	3209      	adds	r2, #9
 800f0ac:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f0ae:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f0c2:	7af9      	ldrb	r1, [r7, #11]
 800f0c4:	68f8      	ldr	r0, [r7, #12]
 800f0c6:	f000 f871 	bl	800f1ac <SCSI_CheckAddressRange>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	da02      	bge.n	800f0d6 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d4:	e033      	b.n	800f13e <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f0dc:	697a      	ldr	r2, [r7, #20]
 800f0de:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f0e2:	fb02 f303 	mul.w	r3, r2, r3
 800f0e6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d00a      	beq.n	800f10a <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f0fa:	2320      	movs	r3, #32
 800f0fc:	2205      	movs	r2, #5
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7ff fca3 	bl	800ea4a <SCSI_SenseCode>
      return -1;
 800f104:	f04f 33ff 	mov.w	r3, #4294967295
 800f108:	e019      	b.n	800f13e <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f110:	bf28      	it	cs
 800f112:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f116:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	2201      	movs	r2, #1
 800f11c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	f103 0210 	add.w	r2, r3, #16
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	2101      	movs	r1, #1
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f005 fecd 	bl	8014ec8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f12e:	2300      	movs	r3, #0
 800f130:	e005      	b.n	800f13e <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800f132:	7afb      	ldrb	r3, [r7, #11]
 800f134:	4619      	mov	r1, r3
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f000 f8cd 	bl	800f2d6 <SCSI_ProcessWrite>
 800f13c:	4603      	mov	r3, r0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b086      	sub	sp, #24
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	60f8      	str	r0, [r7, #12]
 800f14e:	460b      	mov	r3, r1
 800f150:	607a      	str	r2, [r7, #4]
 800f152:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f15a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	3301      	adds	r3, #1
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	f003 0302 	and.w	r3, r3, #2
 800f166:	2b00      	cmp	r3, #0
 800f168:	d008      	beq.n	800f17c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f16a:	7af9      	ldrb	r1, [r7, #11]
 800f16c:	2324      	movs	r3, #36	; 0x24
 800f16e:	2205      	movs	r2, #5
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f7ff fc6a 	bl	800ea4a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f176:	f04f 33ff 	mov.w	r3, #4294967295
 800f17a:	e013      	b.n	800f1a4 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f188:	7af9      	ldrb	r1, [r7, #11]
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f000 f80e 	bl	800f1ac <SCSI_CheckAddressRange>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	da02      	bge.n	800f19c <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800f196:	f04f 33ff 	mov.w	r3, #4294967295
 800f19a:	e003      	b.n	800f1a4 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	60da      	str	r2, [r3, #12]

  return 0;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3718      	adds	r7, #24
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b086      	sub	sp, #24
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	607a      	str	r2, [r7, #4]
 800f1b6:	603b      	str	r3, [r7, #0]
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1c2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	441a      	add	r2, r3
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d908      	bls.n	800f1e6 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f1d4:	7af9      	ldrb	r1, [r7, #11]
 800f1d6:	2321      	movs	r3, #33	; 0x21
 800f1d8:	2205      	movs	r2, #5
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7ff fc35 	bl	800ea4a <SCSI_SenseCode>
    return -1;
 800f1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e4:	e000      	b.n	800f1e8 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3718      	adds	r7, #24
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f1f0:	b590      	push	{r4, r7, lr}
 800f1f2:	b085      	sub	sp, #20
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f202:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f210:	fb02 f303 	mul.w	r3, r2, r3
 800f214:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f21c:	bf28      	it	cs
 800f21e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f222:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f22a:	691c      	ldr	r4, [r3, #16]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f103 0110 	add.w	r1, r3, #16
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f23e:	4618      	mov	r0, r3
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f246:	b29b      	uxth	r3, r3
 800f248:	78f8      	ldrb	r0, [r7, #3]
 800f24a:	47a0      	blx	r4
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	da08      	bge.n	800f264 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f252:	78f9      	ldrb	r1, [r7, #3]
 800f254:	2311      	movs	r3, #17
 800f256:	2204      	movs	r2, #4
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff fbf6 	bl	800ea4a <SCSI_SenseCode>
    return -1;
 800f25e:	f04f 33ff 	mov.w	r3, #4294967295
 800f262:	e034      	b.n	800f2ce <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f103 0210 	add.w	r2, r3, #16
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	2181      	movs	r1, #129	; 0x81
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f005 fe09 	bl	8014e86 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f280:	4619      	mov	r1, r3
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	fbb3 f3f1 	udiv	r3, r3, r1
 800f288:	441a      	add	r2, r3
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f29c:	4619      	mov	r1, r3
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2a4:	1ad2      	subs	r2, r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	1ad2      	subs	r2, r2, r3
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d102      	bne.n	800f2cc <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2203      	movs	r2, #3
 800f2ca:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3714      	adds	r7, #20
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd90      	pop	{r4, r7, pc}

0800f2d6 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f2d6:	b590      	push	{r4, r7, lr}
 800f2d8:	b085      	sub	sp, #20
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
 800f2de:	460b      	mov	r3, r1
 800f2e0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2e8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f2f0:	68fa      	ldr	r2, [r7, #12]
 800f2f2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f2f6:	fb02 f303 	mul.w	r3, r2, r3
 800f2fa:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f302:	bf28      	it	cs
 800f304:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f308:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f310:	695c      	ldr	r4, [r3, #20]
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f103 0110 	add.w	r1, r3, #16
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f324:	4618      	mov	r0, r3
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	78f8      	ldrb	r0, [r7, #3]
 800f330:	47a0      	blx	r4
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	da08      	bge.n	800f34a <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f338:	78f9      	ldrb	r1, [r7, #3]
 800f33a:	2303      	movs	r3, #3
 800f33c:	2204      	movs	r2, #4
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f7ff fb83 	bl	800ea4a <SCSI_SenseCode>
    return -1;
 800f344:	f04f 33ff 	mov.w	r3, #4294967295
 800f348:	e044      	b.n	800f3d4 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f356:	4619      	mov	r1, r3
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f35e:	441a      	add	r2, r3
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f372:	4619      	mov	r1, r3
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	fbb3 f3f1 	udiv	r3, r3, r1
 800f37a:	1ad2      	subs	r2, r2, r3
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	1ad2      	subs	r2, r2, r3
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d104      	bne.n	800f3a6 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f39c:	2100      	movs	r1, #0
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fe ff04 	bl	800e1ac <MSC_BOT_SendCSW>
 800f3a4:	e015      	b.n	800f3d2 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f3ac:	68fa      	ldr	r2, [r7, #12]
 800f3ae:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f3b2:	fb02 f303 	mul.w	r3, r2, r3
 800f3b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3ba:	bf28      	it	cs
 800f3bc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f3c0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f103 0210 	add.w	r2, r3, #16
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	2101      	movs	r1, #1
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f005 fd7b 	bl	8014ec8 <USBD_LL_PrepareReceive>
  }

  return 0;
 800f3d2:	2300      	movs	r3, #0
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd90      	pop	{r4, r7, pc}

0800f3dc <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b087      	sub	sp, #28
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f3ea:	88fb      	ldrh	r3, [r7, #6]
 800f3ec:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800f3ee:	8afa      	ldrh	r2, [r7, #22]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f3f4:	e00b      	b.n	800f40e <SCSI_UpdateBotData+0x32>
  {
    len--;
 800f3f6:	8afb      	ldrh	r3, [r7, #22]
 800f3f8:	3b01      	subs	r3, #1
 800f3fa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f3fc:	8afb      	ldrh	r3, [r7, #22]
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	441a      	add	r2, r3
 800f402:	8afb      	ldrh	r3, [r7, #22]
 800f404:	7811      	ldrb	r1, [r2, #0]
 800f406:	68fa      	ldr	r2, [r7, #12]
 800f408:	4413      	add	r3, r2
 800f40a:	460a      	mov	r2, r1
 800f40c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f40e:	8afb      	ldrh	r3, [r7, #22]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d1f0      	bne.n	800f3f6 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	371c      	adds	r7, #28
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b086      	sub	sp, #24
 800f426:	af00      	add	r7, sp, #0
 800f428:	60f8      	str	r0, [r7, #12]
 800f42a:	60b9      	str	r1, [r7, #8]
 800f42c:	4613      	mov	r3, r2
 800f42e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d101      	bne.n	800f43a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f436:	2303      	movs	r3, #3
 800f438:	e025      	b.n	800f486 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f440:	2b00      	cmp	r3, #0
 800f442:	d003      	beq.n	800f44c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2200      	movs	r2, #0
 800f448:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f452:	2b00      	cmp	r3, #0
 800f454:	d003      	beq.n	800f45e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2200      	movs	r2, #0
 800f45a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d003      	beq.n	800f46c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	68ba      	ldr	r2, [r7, #8]
 800f468:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2201      	movs	r2, #1
 800f470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	79fa      	ldrb	r2, [r7, #7]
 800f478:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f005 fb90 	bl	8014ba0 <USBD_LL_Init>
 800f480:	4603      	mov	r3, r0
 800f482:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f484:	7dfb      	ldrb	r3, [r7, #23]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b084      	sub	sp, #16
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
 800f496:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f498:	2300      	movs	r3, #0
 800f49a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d101      	bne.n	800f4a6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	e010      	b.n	800f4c8 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	683a      	ldr	r2, [r7, #0]
 800f4aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b6:	f107 020e 	add.w	r2, r7, #14
 800f4ba:	4610      	mov	r0, r2
 800f4bc:	4798      	blx	r3
 800f4be:	4602      	mov	r2, r0
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f4c6:	2300      	movs	r3, #0
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f005 fbb1 	bl	8014c40 <USBD_LL_Start>
 800f4de:	4603      	mov	r3, r0
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d009      	beq.n	800f50e <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	6852      	ldr	r2, [r2, #4]
 800f506:	b2d2      	uxtb	r2, r2
 800f508:	4611      	mov	r1, r2
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f514:	2b00      	cmp	r3, #0
 800f516:	d003      	beq.n	800f520 <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2200      	movs	r2, #0
 800f51c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f005 fba8 	bl	8014c76 <USBD_LL_Stop>
 800f526:	4603      	mov	r3, r0
 800f528:	73fb      	strb	r3, [r7, #15]

  return ret;
 800f52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f53c:	2300      	movs	r3, #0
}
 800f53e:	4618      	mov	r0, r3
 800f540:	370c      	adds	r7, #12
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr

0800f54a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b084      	sub	sp, #16
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
 800f552:	460b      	mov	r3, r1
 800f554:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f556:	2303      	movs	r3, #3
 800f558:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f560:	2b00      	cmp	r3, #0
 800f562:	d009      	beq.n	800f578 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	78fa      	ldrb	r2, [r7, #3]
 800f56e:	4611      	mov	r1, r2
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	4798      	blx	r3
 800f574:	4603      	mov	r3, r0
 800f576:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f578:	7bfb      	ldrb	r3, [r7, #15]
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b082      	sub	sp, #8
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	460b      	mov	r3, r1
 800f58c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f594:	2b00      	cmp	r3, #0
 800f596:	d007      	beq.n	800f5a8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	78fa      	ldrb	r2, [r7, #3]
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	4798      	blx	r3
  }

  return USBD_OK;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b084      	sub	sp, #16
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
 800f5ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5c2:	6839      	ldr	r1, [r7, #0]
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f000 ff2b 	bl	8010420 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f5d8:	461a      	mov	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f5e6:	f003 031f 	and.w	r3, r3, #31
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d00e      	beq.n	800f60c <USBD_LL_SetupStage+0x5a>
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d302      	bcc.n	800f5f8 <USBD_LL_SetupStage+0x46>
 800f5f2:	2b02      	cmp	r3, #2
 800f5f4:	d014      	beq.n	800f620 <USBD_LL_SetupStage+0x6e>
 800f5f6:	e01d      	b.n	800f634 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5fe:	4619      	mov	r1, r3
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f000 fa17 	bl	800fa34 <USBD_StdDevReq>
 800f606:	4603      	mov	r3, r0
 800f608:	73fb      	strb	r3, [r7, #15]
      break;
 800f60a:	e020      	b.n	800f64e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f612:	4619      	mov	r1, r3
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 fa7b 	bl	800fb10 <USBD_StdItfReq>
 800f61a:	4603      	mov	r3, r0
 800f61c:	73fb      	strb	r3, [r7, #15]
      break;
 800f61e:	e016      	b.n	800f64e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f626:	4619      	mov	r1, r3
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 fab7 	bl	800fb9c <USBD_StdEPReq>
 800f62e:	4603      	mov	r3, r0
 800f630:	73fb      	strb	r3, [r7, #15]
      break;
 800f632:	e00c      	b.n	800f64e <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f63a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	4619      	mov	r1, r3
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f005 fb96 	bl	8014d74 <USBD_LL_StallEP>
 800f648:	4603      	mov	r3, r0
 800f64a:	73fb      	strb	r3, [r7, #15]
      break;
 800f64c:	bf00      	nop
  }

  return ret;
 800f64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f650:	4618      	mov	r0, r3
 800f652:	3710      	adds	r7, #16
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b086      	sub	sp, #24
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	460b      	mov	r3, r1
 800f662:	607a      	str	r2, [r7, #4]
 800f664:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f666:	7afb      	ldrb	r3, [r7, #11]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d137      	bne.n	800f6dc <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f672:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f67a:	2b03      	cmp	r3, #3
 800f67c:	d14a      	bne.n	800f714 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	689a      	ldr	r2, [r3, #8]
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	429a      	cmp	r2, r3
 800f688:	d913      	bls.n	800f6b2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	689a      	ldr	r2, [r3, #8]
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	68db      	ldr	r3, [r3, #12]
 800f692:	1ad2      	subs	r2, r2, r3
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	68da      	ldr	r2, [r3, #12]
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	bf28      	it	cs
 800f6a4:	4613      	movcs	r3, r2
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	6879      	ldr	r1, [r7, #4]
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	f000 ff8f 	bl	80105ce <USBD_CtlContinueRx>
 800f6b0:	e030      	b.n	800f714 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6b8:	691b      	ldr	r3, [r3, #16]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00a      	beq.n	800f6d4 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f6c4:	2b03      	cmp	r3, #3
 800f6c6:	d105      	bne.n	800f6d4 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	f000 ff8b 	bl	80105f0 <USBD_CtlSendStatus>
 800f6da:	e01b      	b.n	800f714 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6e2:	699b      	ldr	r3, [r3, #24]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d013      	beq.n	800f710 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f6ee:	2b03      	cmp	r3, #3
 800f6f0:	d10e      	bne.n	800f710 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	7afa      	ldrb	r2, [r7, #11]
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	4798      	blx	r3
 800f702:	4603      	mov	r3, r0
 800f704:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f706:	7dfb      	ldrb	r3, [r7, #23]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d003      	beq.n	800f714 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800f70c:	7dfb      	ldrb	r3, [r7, #23]
 800f70e:	e002      	b.n	800f716 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f710:	2303      	movs	r3, #3
 800f712:	e000      	b.n	800f716 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800f714:	2300      	movs	r3, #0
}
 800f716:	4618      	mov	r0, r3
 800f718:	3718      	adds	r7, #24
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f71e:	b580      	push	{r7, lr}
 800f720:	b086      	sub	sp, #24
 800f722:	af00      	add	r7, sp, #0
 800f724:	60f8      	str	r0, [r7, #12]
 800f726:	460b      	mov	r3, r1
 800f728:	607a      	str	r2, [r7, #4]
 800f72a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f72c:	7afb      	ldrb	r3, [r7, #11]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d16a      	bne.n	800f808 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3314      	adds	r3, #20
 800f736:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f73e:	2b02      	cmp	r3, #2
 800f740:	d155      	bne.n	800f7ee <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	689a      	ldr	r2, [r3, #8]
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d914      	bls.n	800f778 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	689a      	ldr	r2, [r3, #8]
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	1ad2      	subs	r2, r2, r3
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	461a      	mov	r2, r3
 800f762:	6879      	ldr	r1, [r7, #4]
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 ff21 	bl	80105ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f76a:	2300      	movs	r3, #0
 800f76c:	2200      	movs	r2, #0
 800f76e:	2100      	movs	r1, #0
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f005 fba9 	bl	8014ec8 <USBD_LL_PrepareReceive>
 800f776:	e03a      	b.n	800f7ee <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	68da      	ldr	r2, [r3, #12]
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	429a      	cmp	r2, r3
 800f782:	d11c      	bne.n	800f7be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	685a      	ldr	r2, [r3, #4]
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d316      	bcc.n	800f7be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	685a      	ldr	r2, [r3, #4]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d20f      	bcs.n	800f7be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f79e:	2200      	movs	r2, #0
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f000 ff02 	bl	80105ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f005 fb86 	bl	8014ec8 <USBD_LL_PrepareReceive>
 800f7bc:	e017      	b.n	800f7ee <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00a      	beq.n	800f7e0 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f7d0:	2b03      	cmp	r3, #3
 800f7d2:	d105      	bne.n	800f7e0 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	68f8      	ldr	r0, [r7, #12]
 800f7de:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7e0:	2180      	movs	r1, #128	; 0x80
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f005 fac6 	bl	8014d74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f000 ff14 	bl	8010616 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d123      	bne.n	800f840 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f7ff fe9b 	bl	800f534 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f806:	e01b      	b.n	800f840 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f80e:	695b      	ldr	r3, [r3, #20]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d013      	beq.n	800f83c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f81a:	2b03      	cmp	r3, #3
 800f81c:	d10e      	bne.n	800f83c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f824:	695b      	ldr	r3, [r3, #20]
 800f826:	7afa      	ldrb	r2, [r7, #11]
 800f828:	4611      	mov	r1, r2
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	4798      	blx	r3
 800f82e:	4603      	mov	r3, r0
 800f830:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f832:	7dfb      	ldrb	r3, [r7, #23]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d003      	beq.n	800f840 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800f838:	7dfb      	ldrb	r3, [r7, #23]
 800f83a:	e002      	b.n	800f842 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f83c:	2303      	movs	r3, #3
 800f83e:	e000      	b.n	800f842 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800f840:	2300      	movs	r3, #0
}
 800f842:	4618      	mov	r0, r3
 800f844:	3718      	adds	r7, #24
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f84a:	b580      	push	{r7, lr}
 800f84c:	b082      	sub	sp, #8
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2201      	movs	r2, #1
 800f856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f876:	2b00      	cmp	r3, #0
 800f878:	d009      	beq.n	800f88e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	6852      	ldr	r2, [r2, #4]
 800f886:	b2d2      	uxtb	r2, r2
 800f888:	4611      	mov	r1, r2
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f88e:	2340      	movs	r3, #64	; 0x40
 800f890:	2200      	movs	r2, #0
 800f892:	2100      	movs	r1, #0
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f005 fa09 	bl	8014cac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2201      	movs	r2, #1
 800f89e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2240      	movs	r2, #64	; 0x40
 800f8a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f8aa:	2340      	movs	r3, #64	; 0x40
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	2180      	movs	r1, #128	; 0x80
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f005 f9fb 	bl	8014cac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2240      	movs	r2, #64	; 0x40
 800f8c0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	78fa      	ldrb	r2, [r7, #3]
 800f8dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2204      	movs	r2, #4
 800f904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f908:	2300      	movs	r3, #0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	370c      	adds	r7, #12
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr

0800f916 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f916:	b480      	push	{r7}
 800f918:	b083      	sub	sp, #12
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f924:	2b04      	cmp	r3, #4
 800f926:	d105      	bne.n	800f934 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	370c      	adds	r7, #12
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr

0800f942 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b082      	sub	sp, #8
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f950:	2b03      	cmp	r3, #3
 800f952:	d10b      	bne.n	800f96c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f95a:	69db      	ldr	r3, [r3, #28]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d005      	beq.n	800f96c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f966:	69db      	ldr	r3, [r3, #28]
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3708      	adds	r7, #8
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}

0800f976 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f976:	b480      	push	{r7}
 800f978:	b083      	sub	sp, #12
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
 800f97e:	460b      	mov	r3, r1
 800f980:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f99c:	2300      	movs	r3, #0
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr

0800f9aa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f9aa:	b480      	push	{r7}
 800f9ac:	b083      	sub	sp, #12
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f9b2:	2300      	movs	r3, #0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	370c      	adds	r7, #12
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr

0800f9c0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d009      	beq.n	800f9ee <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	6852      	ldr	r2, [r2, #4]
 800f9e6:	b2d2      	uxtb	r2, r2
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	4798      	blx	r3
  }

  return USBD_OK;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b087      	sub	sp, #28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fa16:	8a3b      	ldrh	r3, [r7, #16]
 800fa18:	021b      	lsls	r3, r3, #8
 800fa1a:	b21a      	sxth	r2, r3
 800fa1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa20:	4313      	orrs	r3, r2
 800fa22:	b21b      	sxth	r3, r3
 800fa24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fa26:	89fb      	ldrh	r3, [r7, #14]
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	371c      	adds	r7, #28
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa4a:	2b20      	cmp	r3, #32
 800fa4c:	d004      	beq.n	800fa58 <USBD_StdDevReq+0x24>
 800fa4e:	2b40      	cmp	r3, #64	; 0x40
 800fa50:	d002      	beq.n	800fa58 <USBD_StdDevReq+0x24>
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00a      	beq.n	800fa6c <USBD_StdDevReq+0x38>
 800fa56:	e050      	b.n	800fafa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa5e:	689b      	ldr	r3, [r3, #8]
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	4798      	blx	r3
 800fa66:	4603      	mov	r3, r0
 800fa68:	73fb      	strb	r3, [r7, #15]
    break;
 800fa6a:	e04b      	b.n	800fb04 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	785b      	ldrb	r3, [r3, #1]
 800fa70:	2b09      	cmp	r3, #9
 800fa72:	d83c      	bhi.n	800faee <USBD_StdDevReq+0xba>
 800fa74:	a201      	add	r2, pc, #4	; (adr r2, 800fa7c <USBD_StdDevReq+0x48>)
 800fa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa7a:	bf00      	nop
 800fa7c:	0800fad1 	.word	0x0800fad1
 800fa80:	0800fae5 	.word	0x0800fae5
 800fa84:	0800faef 	.word	0x0800faef
 800fa88:	0800fadb 	.word	0x0800fadb
 800fa8c:	0800faef 	.word	0x0800faef
 800fa90:	0800faaf 	.word	0x0800faaf
 800fa94:	0800faa5 	.word	0x0800faa5
 800fa98:	0800faef 	.word	0x0800faef
 800fa9c:	0800fac7 	.word	0x0800fac7
 800faa0:	0800fab9 	.word	0x0800fab9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800faa4:	6839      	ldr	r1, [r7, #0]
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 f9ce 	bl	800fe48 <USBD_GetDescriptor>
      break;
 800faac:	e024      	b.n	800faf8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800faae:	6839      	ldr	r1, [r7, #0]
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 fb33 	bl	801011c <USBD_SetAddress>
      break;
 800fab6:	e01f      	b.n	800faf8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800fab8:	6839      	ldr	r1, [r7, #0]
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 fb70 	bl	80101a0 <USBD_SetConfig>
 800fac0:	4603      	mov	r3, r0
 800fac2:	73fb      	strb	r3, [r7, #15]
      break;
 800fac4:	e018      	b.n	800faf8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800fac6:	6839      	ldr	r1, [r7, #0]
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 fc0d 	bl	80102e8 <USBD_GetConfig>
      break;
 800face:	e013      	b.n	800faf8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800fad0:	6839      	ldr	r1, [r7, #0]
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 fc3c 	bl	8010350 <USBD_GetStatus>
      break;
 800fad8:	e00e      	b.n	800faf8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 fc6a 	bl	80103b6 <USBD_SetFeature>
      break;
 800fae2:	e009      	b.n	800faf8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800fae4:	6839      	ldr	r1, [r7, #0]
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f000 fc79 	bl	80103de <USBD_ClrFeature>
      break;
 800faec:	e004      	b.n	800faf8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800faee:	6839      	ldr	r1, [r7, #0]
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 fccf 	bl	8010494 <USBD_CtlError>
      break;
 800faf6:	bf00      	nop
    }
    break;
 800faf8:	e004      	b.n	800fb04 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800fafa:	6839      	ldr	r1, [r7, #0]
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f000 fcc9 	bl	8010494 <USBD_CtlError>
    break;
 800fb02:	bf00      	nop
  }

  return ret;
 800fb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop

0800fb10 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb26:	2b20      	cmp	r3, #32
 800fb28:	d003      	beq.n	800fb32 <USBD_StdItfReq+0x22>
 800fb2a:	2b40      	cmp	r3, #64	; 0x40
 800fb2c:	d001      	beq.n	800fb32 <USBD_StdItfReq+0x22>
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d12a      	bne.n	800fb88 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	2b02      	cmp	r3, #2
 800fb3c:	d81d      	bhi.n	800fb7a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	889b      	ldrh	r3, [r3, #4]
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d813      	bhi.n	800fb70 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	6839      	ldr	r1, [r7, #0]
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	4798      	blx	r3
 800fb56:	4603      	mov	r3, r0
 800fb58:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	88db      	ldrh	r3, [r3, #6]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d110      	bne.n	800fb84 <USBD_StdItfReq+0x74>
 800fb62:	7bfb      	ldrb	r3, [r7, #15]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d10d      	bne.n	800fb84 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 fd41 	bl	80105f0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800fb6e:	e009      	b.n	800fb84 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800fb70:	6839      	ldr	r1, [r7, #0]
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 fc8e 	bl	8010494 <USBD_CtlError>
      break;
 800fb78:	e004      	b.n	800fb84 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800fb7a:	6839      	ldr	r1, [r7, #0]
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fc89 	bl	8010494 <USBD_CtlError>
      break;
 800fb82:	e000      	b.n	800fb86 <USBD_StdItfReq+0x76>
      break;
 800fb84:	bf00      	nop
    }
    break;
 800fb86:	e004      	b.n	800fb92 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800fb88:	6839      	ldr	r1, [r7, #0]
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 fc82 	bl	8010494 <USBD_CtlError>
    break;
 800fb90:	bf00      	nop
  }

  return ret;
 800fb92:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3710      	adds	r7, #16
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fba6:	2300      	movs	r3, #0
 800fba8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	889b      	ldrh	r3, [r3, #4]
 800fbae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fbb8:	2b20      	cmp	r3, #32
 800fbba:	d004      	beq.n	800fbc6 <USBD_StdEPReq+0x2a>
 800fbbc:	2b40      	cmp	r3, #64	; 0x40
 800fbbe:	d002      	beq.n	800fbc6 <USBD_StdEPReq+0x2a>
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d00a      	beq.n	800fbda <USBD_StdEPReq+0x3e>
 800fbc4:	e135      	b.n	800fe32 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	6839      	ldr	r1, [r7, #0]
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	4798      	blx	r3
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800fbd8:	e130      	b.n	800fe3c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	785b      	ldrb	r3, [r3, #1]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d03e      	beq.n	800fc60 <USBD_StdEPReq+0xc4>
 800fbe2:	2b03      	cmp	r3, #3
 800fbe4:	d002      	beq.n	800fbec <USBD_StdEPReq+0x50>
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d077      	beq.n	800fcda <USBD_StdEPReq+0x13e>
 800fbea:	e11c      	b.n	800fe26 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbf2:	2b02      	cmp	r3, #2
 800fbf4:	d002      	beq.n	800fbfc <USBD_StdEPReq+0x60>
 800fbf6:	2b03      	cmp	r3, #3
 800fbf8:	d015      	beq.n	800fc26 <USBD_StdEPReq+0x8a>
 800fbfa:	e02b      	b.n	800fc54 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fbfc:	7bbb      	ldrb	r3, [r7, #14]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d00c      	beq.n	800fc1c <USBD_StdEPReq+0x80>
 800fc02:	7bbb      	ldrb	r3, [r7, #14]
 800fc04:	2b80      	cmp	r3, #128	; 0x80
 800fc06:	d009      	beq.n	800fc1c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc08:	7bbb      	ldrb	r3, [r7, #14]
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f005 f8b1 	bl	8014d74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc12:	2180      	movs	r1, #128	; 0x80
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f005 f8ad 	bl	8014d74 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fc1a:	e020      	b.n	800fc5e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800fc1c:	6839      	ldr	r1, [r7, #0]
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 fc38 	bl	8010494 <USBD_CtlError>
        break;
 800fc24:	e01b      	b.n	800fc5e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	885b      	ldrh	r3, [r3, #2]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d10e      	bne.n	800fc4c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc2e:	7bbb      	ldrb	r3, [r7, #14]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00b      	beq.n	800fc4c <USBD_StdEPReq+0xb0>
 800fc34:	7bbb      	ldrb	r3, [r7, #14]
 800fc36:	2b80      	cmp	r3, #128	; 0x80
 800fc38:	d008      	beq.n	800fc4c <USBD_StdEPReq+0xb0>
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	88db      	ldrh	r3, [r3, #6]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d104      	bne.n	800fc4c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc42:	7bbb      	ldrb	r3, [r7, #14]
 800fc44:	4619      	mov	r1, r3
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f005 f894 	bl	8014d74 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 fccf 	bl	80105f0 <USBD_CtlSendStatus>

        break;
 800fc52:	e004      	b.n	800fc5e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800fc54:	6839      	ldr	r1, [r7, #0]
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 fc1c 	bl	8010494 <USBD_CtlError>
        break;
 800fc5c:	bf00      	nop
      }
      break;
 800fc5e:	e0e7      	b.n	800fe30 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc66:	2b02      	cmp	r3, #2
 800fc68:	d002      	beq.n	800fc70 <USBD_StdEPReq+0xd4>
 800fc6a:	2b03      	cmp	r3, #3
 800fc6c:	d015      	beq.n	800fc9a <USBD_StdEPReq+0xfe>
 800fc6e:	e02d      	b.n	800fccc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc70:	7bbb      	ldrb	r3, [r7, #14]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d00c      	beq.n	800fc90 <USBD_StdEPReq+0xf4>
 800fc76:	7bbb      	ldrb	r3, [r7, #14]
 800fc78:	2b80      	cmp	r3, #128	; 0x80
 800fc7a:	d009      	beq.n	800fc90 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc7c:	7bbb      	ldrb	r3, [r7, #14]
 800fc7e:	4619      	mov	r1, r3
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f005 f877 	bl	8014d74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc86:	2180      	movs	r1, #128	; 0x80
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f005 f873 	bl	8014d74 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fc8e:	e023      	b.n	800fcd8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800fc90:	6839      	ldr	r1, [r7, #0]
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fbfe 	bl	8010494 <USBD_CtlError>
        break;
 800fc98:	e01e      	b.n	800fcd8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	885b      	ldrh	r3, [r3, #2]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d119      	bne.n	800fcd6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800fca2:	7bbb      	ldrb	r3, [r7, #14]
 800fca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d004      	beq.n	800fcb6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fcac:	7bbb      	ldrb	r3, [r7, #14]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f005 f87e 	bl	8014db2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 fc9a 	bl	80105f0 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	6839      	ldr	r1, [r7, #0]
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	4798      	blx	r3
        }
        break;
 800fcca:	e004      	b.n	800fcd6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800fccc:	6839      	ldr	r1, [r7, #0]
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f000 fbe0 	bl	8010494 <USBD_CtlError>
        break;
 800fcd4:	e000      	b.n	800fcd8 <USBD_StdEPReq+0x13c>
        break;
 800fcd6:	bf00      	nop
      }
      break;
 800fcd8:	e0aa      	b.n	800fe30 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fce0:	2b02      	cmp	r3, #2
 800fce2:	d002      	beq.n	800fcea <USBD_StdEPReq+0x14e>
 800fce4:	2b03      	cmp	r3, #3
 800fce6:	d032      	beq.n	800fd4e <USBD_StdEPReq+0x1b2>
 800fce8:	e097      	b.n	800fe1a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fcea:	7bbb      	ldrb	r3, [r7, #14]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d007      	beq.n	800fd00 <USBD_StdEPReq+0x164>
 800fcf0:	7bbb      	ldrb	r3, [r7, #14]
 800fcf2:	2b80      	cmp	r3, #128	; 0x80
 800fcf4:	d004      	beq.n	800fd00 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800fcf6:	6839      	ldr	r1, [r7, #0]
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 fbcb 	bl	8010494 <USBD_CtlError>
          break;
 800fcfe:	e091      	b.n	800fe24 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	da0b      	bge.n	800fd20 <USBD_StdEPReq+0x184>
 800fd08:	7bbb      	ldrb	r3, [r7, #14]
 800fd0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd0e:	4613      	mov	r3, r2
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	4413      	add	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	3310      	adds	r3, #16
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	3304      	adds	r3, #4
 800fd1e:	e00b      	b.n	800fd38 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fd20:	7bbb      	ldrb	r3, [r7, #14]
 800fd22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd26:	4613      	mov	r3, r2
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	4413      	add	r3, r2
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	4413      	add	r3, r2
 800fd36:	3304      	adds	r3, #4
 800fd38:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	2202      	movs	r2, #2
 800fd44:	4619      	mov	r1, r3
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 fc15 	bl	8010576 <USBD_CtlSendData>
        break;
 800fd4c:	e06a      	b.n	800fe24 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800fd4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	da11      	bge.n	800fd7a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fd56:	7bbb      	ldrb	r3, [r7, #14]
 800fd58:	f003 020f 	and.w	r2, r3, #15
 800fd5c:	6879      	ldr	r1, [r7, #4]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4413      	add	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	440b      	add	r3, r1
 800fd68:	3324      	adds	r3, #36	; 0x24
 800fd6a:	881b      	ldrh	r3, [r3, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d117      	bne.n	800fda0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fd70:	6839      	ldr	r1, [r7, #0]
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f000 fb8e 	bl	8010494 <USBD_CtlError>
            break;
 800fd78:	e054      	b.n	800fe24 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fd7a:	7bbb      	ldrb	r3, [r7, #14]
 800fd7c:	f003 020f 	and.w	r2, r3, #15
 800fd80:	6879      	ldr	r1, [r7, #4]
 800fd82:	4613      	mov	r3, r2
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	4413      	add	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	440b      	add	r3, r1
 800fd8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fd90:	881b      	ldrh	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d104      	bne.n	800fda0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fd96:	6839      	ldr	r1, [r7, #0]
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f000 fb7b 	bl	8010494 <USBD_CtlError>
            break;
 800fd9e:	e041      	b.n	800fe24 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fda0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	da0b      	bge.n	800fdc0 <USBD_StdEPReq+0x224>
 800fda8:	7bbb      	ldrb	r3, [r7, #14]
 800fdaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fdae:	4613      	mov	r3, r2
 800fdb0:	009b      	lsls	r3, r3, #2
 800fdb2:	4413      	add	r3, r2
 800fdb4:	009b      	lsls	r3, r3, #2
 800fdb6:	3310      	adds	r3, #16
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	4413      	add	r3, r2
 800fdbc:	3304      	adds	r3, #4
 800fdbe:	e00b      	b.n	800fdd8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fdc0:	7bbb      	ldrb	r3, [r7, #14]
 800fdc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	3304      	adds	r3, #4
 800fdd8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fdda:	7bbb      	ldrb	r3, [r7, #14]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d002      	beq.n	800fde6 <USBD_StdEPReq+0x24a>
 800fde0:	7bbb      	ldrb	r3, [r7, #14]
 800fde2:	2b80      	cmp	r3, #128	; 0x80
 800fde4:	d103      	bne.n	800fdee <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2200      	movs	r2, #0
 800fdea:	601a      	str	r2, [r3, #0]
 800fdec:	e00e      	b.n	800fe0c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fdee:	7bbb      	ldrb	r3, [r7, #14]
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f004 fffc 	bl	8014df0 <USBD_LL_IsStallEP>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d003      	beq.n	800fe06 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	2201      	movs	r2, #1
 800fe02:	601a      	str	r2, [r3, #0]
 800fe04:	e002      	b.n	800fe0c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	2202      	movs	r2, #2
 800fe10:	4619      	mov	r1, r3
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f000 fbaf 	bl	8010576 <USBD_CtlSendData>
          break;
 800fe18:	e004      	b.n	800fe24 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800fe1a:	6839      	ldr	r1, [r7, #0]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 fb39 	bl	8010494 <USBD_CtlError>
        break;
 800fe22:	bf00      	nop
      }
      break;
 800fe24:	e004      	b.n	800fe30 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800fe26:	6839      	ldr	r1, [r7, #0]
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fb33 	bl	8010494 <USBD_CtlError>
      break;
 800fe2e:	bf00      	nop
    }
    break;
 800fe30:	e004      	b.n	800fe3c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800fe32:	6839      	ldr	r1, [r7, #0]
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 fb2d 	bl	8010494 <USBD_CtlError>
    break;
 800fe3a:	bf00      	nop
  }

  return ret;
 800fe3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
	...

0800fe48 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fe52:	2300      	movs	r3, #0
 800fe54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fe56:	2300      	movs	r3, #0
 800fe58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	885b      	ldrh	r3, [r3, #2]
 800fe62:	0a1b      	lsrs	r3, r3, #8
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	3b01      	subs	r3, #1
 800fe68:	2b06      	cmp	r3, #6
 800fe6a:	f200 8128 	bhi.w	80100be <USBD_GetDescriptor+0x276>
 800fe6e:	a201      	add	r2, pc, #4	; (adr r2, 800fe74 <USBD_GetDescriptor+0x2c>)
 800fe70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe74:	0800fe91 	.word	0x0800fe91
 800fe78:	0800fea9 	.word	0x0800fea9
 800fe7c:	0800fee9 	.word	0x0800fee9
 800fe80:	080100bf 	.word	0x080100bf
 800fe84:	080100bf 	.word	0x080100bf
 800fe88:	0801005f 	.word	0x0801005f
 800fe8c:	0801008b 	.word	0x0801008b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	7c12      	ldrb	r2, [r2, #16]
 800fe9c:	f107 0108 	add.w	r1, r7, #8
 800fea0:	4610      	mov	r0, r2
 800fea2:	4798      	blx	r3
 800fea4:	60f8      	str	r0, [r7, #12]
    break;
 800fea6:	e112      	b.n	80100ce <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	7c1b      	ldrb	r3, [r3, #16]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d10d      	bne.n	800fecc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feb8:	f107 0208 	add.w	r2, r7, #8
 800febc:	4610      	mov	r0, r2
 800febe:	4798      	blx	r3
 800fec0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	3301      	adds	r3, #1
 800fec6:	2202      	movs	r2, #2
 800fec8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800feca:	e100      	b.n	80100ce <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed4:	f107 0208 	add.w	r2, r7, #8
 800fed8:	4610      	mov	r0, r2
 800feda:	4798      	blx	r3
 800fedc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	3301      	adds	r3, #1
 800fee2:	2202      	movs	r2, #2
 800fee4:	701a      	strb	r2, [r3, #0]
    break;
 800fee6:	e0f2      	b.n	80100ce <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	885b      	ldrh	r3, [r3, #2]
 800feec:	b2db      	uxtb	r3, r3
 800feee:	2b05      	cmp	r3, #5
 800fef0:	f200 80ac 	bhi.w	801004c <USBD_GetDescriptor+0x204>
 800fef4:	a201      	add	r2, pc, #4	; (adr r2, 800fefc <USBD_GetDescriptor+0xb4>)
 800fef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fefa:	bf00      	nop
 800fefc:	0800ff15 	.word	0x0800ff15
 800ff00:	0800ff49 	.word	0x0800ff49
 800ff04:	0800ff7d 	.word	0x0800ff7d
 800ff08:	0800ffb1 	.word	0x0800ffb1
 800ff0c:	0800ffe5 	.word	0x0800ffe5
 800ff10:	08010019 	.word	0x08010019
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00b      	beq.n	800ff38 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	7c12      	ldrb	r2, [r2, #16]
 800ff2c:	f107 0108 	add.w	r1, r7, #8
 800ff30:	4610      	mov	r0, r2
 800ff32:	4798      	blx	r3
 800ff34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff36:	e091      	b.n	801005c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff38:	6839      	ldr	r1, [r7, #0]
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 faaa 	bl	8010494 <USBD_CtlError>
        err++;
 800ff40:	7afb      	ldrb	r3, [r7, #11]
 800ff42:	3301      	adds	r3, #1
 800ff44:	72fb      	strb	r3, [r7, #11]
      break;
 800ff46:	e089      	b.n	801005c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff4e:	689b      	ldr	r3, [r3, #8]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00b      	beq.n	800ff6c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	7c12      	ldrb	r2, [r2, #16]
 800ff60:	f107 0108 	add.w	r1, r7, #8
 800ff64:	4610      	mov	r0, r2
 800ff66:	4798      	blx	r3
 800ff68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff6a:	e077      	b.n	801005c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff6c:	6839      	ldr	r1, [r7, #0]
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f000 fa90 	bl	8010494 <USBD_CtlError>
        err++;
 800ff74:	7afb      	ldrb	r3, [r7, #11]
 800ff76:	3301      	adds	r3, #1
 800ff78:	72fb      	strb	r3, [r7, #11]
      break;
 800ff7a:	e06f      	b.n	801005c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00b      	beq.n	800ffa0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	7c12      	ldrb	r2, [r2, #16]
 800ff94:	f107 0108 	add.w	r1, r7, #8
 800ff98:	4610      	mov	r0, r2
 800ff9a:	4798      	blx	r3
 800ff9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff9e:	e05d      	b.n	801005c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ffa0:	6839      	ldr	r1, [r7, #0]
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f000 fa76 	bl	8010494 <USBD_CtlError>
        err++;
 800ffa8:	7afb      	ldrb	r3, [r7, #11]
 800ffaa:	3301      	adds	r3, #1
 800ffac:	72fb      	strb	r3, [r7, #11]
      break;
 800ffae:	e055      	b.n	801005c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d00b      	beq.n	800ffd4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffc2:	691b      	ldr	r3, [r3, #16]
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	7c12      	ldrb	r2, [r2, #16]
 800ffc8:	f107 0108 	add.w	r1, r7, #8
 800ffcc:	4610      	mov	r0, r2
 800ffce:	4798      	blx	r3
 800ffd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffd2:	e043      	b.n	801005c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ffd4:	6839      	ldr	r1, [r7, #0]
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 fa5c 	bl	8010494 <USBD_CtlError>
        err++;
 800ffdc:	7afb      	ldrb	r3, [r7, #11]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	72fb      	strb	r3, [r7, #11]
      break;
 800ffe2:	e03b      	b.n	801005c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffea:	695b      	ldr	r3, [r3, #20]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00b      	beq.n	8010008 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fff6:	695b      	ldr	r3, [r3, #20]
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	7c12      	ldrb	r2, [r2, #16]
 800fffc:	f107 0108 	add.w	r1, r7, #8
 8010000:	4610      	mov	r0, r2
 8010002:	4798      	blx	r3
 8010004:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010006:	e029      	b.n	801005c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010008:	6839      	ldr	r1, [r7, #0]
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 fa42 	bl	8010494 <USBD_CtlError>
        err++;
 8010010:	7afb      	ldrb	r3, [r7, #11]
 8010012:	3301      	adds	r3, #1
 8010014:	72fb      	strb	r3, [r7, #11]
      break;
 8010016:	e021      	b.n	801005c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801001e:	699b      	ldr	r3, [r3, #24]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d00b      	beq.n	801003c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801002a:	699b      	ldr	r3, [r3, #24]
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	7c12      	ldrb	r2, [r2, #16]
 8010030:	f107 0108 	add.w	r1, r7, #8
 8010034:	4610      	mov	r0, r2
 8010036:	4798      	blx	r3
 8010038:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801003a:	e00f      	b.n	801005c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801003c:	6839      	ldr	r1, [r7, #0]
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f000 fa28 	bl	8010494 <USBD_CtlError>
        err++;
 8010044:	7afb      	ldrb	r3, [r7, #11]
 8010046:	3301      	adds	r3, #1
 8010048:	72fb      	strb	r3, [r7, #11]
      break;
 801004a:	e007      	b.n	801005c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 801004c:	6839      	ldr	r1, [r7, #0]
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 fa20 	bl	8010494 <USBD_CtlError>
      err++;
 8010054:	7afb      	ldrb	r3, [r7, #11]
 8010056:	3301      	adds	r3, #1
 8010058:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801005a:	bf00      	nop
    }
    break;
 801005c:	e037      	b.n	80100ce <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	7c1b      	ldrb	r3, [r3, #16]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d109      	bne.n	801007a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801006c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801006e:	f107 0208 	add.w	r2, r7, #8
 8010072:	4610      	mov	r0, r2
 8010074:	4798      	blx	r3
 8010076:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010078:	e029      	b.n	80100ce <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fa09 	bl	8010494 <USBD_CtlError>
      err++;
 8010082:	7afb      	ldrb	r3, [r7, #11]
 8010084:	3301      	adds	r3, #1
 8010086:	72fb      	strb	r3, [r7, #11]
    break;
 8010088:	e021      	b.n	80100ce <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	7c1b      	ldrb	r3, [r3, #16]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d10d      	bne.n	80100ae <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801009a:	f107 0208 	add.w	r2, r7, #8
 801009e:	4610      	mov	r0, r2
 80100a0:	4798      	blx	r3
 80100a2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	3301      	adds	r3, #1
 80100a8:	2207      	movs	r2, #7
 80100aa:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80100ac:	e00f      	b.n	80100ce <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 f9ef 	bl	8010494 <USBD_CtlError>
      err++;
 80100b6:	7afb      	ldrb	r3, [r7, #11]
 80100b8:	3301      	adds	r3, #1
 80100ba:	72fb      	strb	r3, [r7, #11]
    break;
 80100bc:	e007      	b.n	80100ce <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80100be:	6839      	ldr	r1, [r7, #0]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 f9e7 	bl	8010494 <USBD_CtlError>
    err++;
 80100c6:	7afb      	ldrb	r3, [r7, #11]
 80100c8:	3301      	adds	r3, #1
 80100ca:	72fb      	strb	r3, [r7, #11]
    break;
 80100cc:	bf00      	nop
  }

  if (err != 0U)
 80100ce:	7afb      	ldrb	r3, [r7, #11]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d11e      	bne.n	8010112 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	88db      	ldrh	r3, [r3, #6]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d016      	beq.n	801010a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80100dc:	893b      	ldrh	r3, [r7, #8]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d00e      	beq.n	8010100 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	88da      	ldrh	r2, [r3, #6]
 80100e6:	893b      	ldrh	r3, [r7, #8]
 80100e8:	4293      	cmp	r3, r2
 80100ea:	bf28      	it	cs
 80100ec:	4613      	movcs	r3, r2
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80100f2:	893b      	ldrh	r3, [r7, #8]
 80100f4:	461a      	mov	r2, r3
 80100f6:	68f9      	ldr	r1, [r7, #12]
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 fa3c 	bl	8010576 <USBD_CtlSendData>
 80100fe:	e009      	b.n	8010114 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8010100:	6839      	ldr	r1, [r7, #0]
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f9c6 	bl	8010494 <USBD_CtlError>
 8010108:	e004      	b.n	8010114 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 fa70 	bl	80105f0 <USBD_CtlSendStatus>
 8010110:	e000      	b.n	8010114 <USBD_GetDescriptor+0x2cc>
    return;
 8010112:	bf00      	nop
    }
  }
}
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop

0801011c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	889b      	ldrh	r3, [r3, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d130      	bne.n	8010190 <USBD_SetAddress+0x74>
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	88db      	ldrh	r3, [r3, #6]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d12c      	bne.n	8010190 <USBD_SetAddress+0x74>
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	885b      	ldrh	r3, [r3, #2]
 801013a:	2b7f      	cmp	r3, #127	; 0x7f
 801013c:	d828      	bhi.n	8010190 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	885b      	ldrh	r3, [r3, #2]
 8010142:	b2db      	uxtb	r3, r3
 8010144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010148:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010150:	2b03      	cmp	r3, #3
 8010152:	d104      	bne.n	801015e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010154:	6839      	ldr	r1, [r7, #0]
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 f99c 	bl	8010494 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801015c:	e01c      	b.n	8010198 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	7bfa      	ldrb	r2, [r7, #15]
 8010162:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010166:	7bfb      	ldrb	r3, [r7, #15]
 8010168:	4619      	mov	r1, r3
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f004 fe6c 	bl	8014e48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 fa3d 	bl	80105f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010176:	7bfb      	ldrb	r3, [r7, #15]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d004      	beq.n	8010186 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2202      	movs	r2, #2
 8010180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010184:	e008      	b.n	8010198 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2201      	movs	r2, #1
 801018a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801018e:	e003      	b.n	8010198 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010190:	6839      	ldr	r1, [r7, #0]
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 f97e 	bl	8010494 <USBD_CtlError>
  }
}
 8010198:	bf00      	nop
 801019a:	3710      	adds	r7, #16
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80101aa:	2300      	movs	r3, #0
 80101ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	885b      	ldrh	r3, [r3, #2]
 80101b2:	b2da      	uxtb	r2, r3
 80101b4:	4b4b      	ldr	r3, [pc, #300]	; (80102e4 <USBD_SetConfig+0x144>)
 80101b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80101b8:	4b4a      	ldr	r3, [pc, #296]	; (80102e4 <USBD_SetConfig+0x144>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d905      	bls.n	80101cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80101c0:	6839      	ldr	r1, [r7, #0]
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 f966 	bl	8010494 <USBD_CtlError>
    return USBD_FAIL;
 80101c8:	2303      	movs	r3, #3
 80101ca:	e087      	b.n	80102dc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101d2:	2b02      	cmp	r3, #2
 80101d4:	d002      	beq.n	80101dc <USBD_SetConfig+0x3c>
 80101d6:	2b03      	cmp	r3, #3
 80101d8:	d025      	beq.n	8010226 <USBD_SetConfig+0x86>
 80101da:	e071      	b.n	80102c0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80101dc:	4b41      	ldr	r3, [pc, #260]	; (80102e4 <USBD_SetConfig+0x144>)
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d01c      	beq.n	801021e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80101e4:	4b3f      	ldr	r3, [pc, #252]	; (80102e4 <USBD_SetConfig+0x144>)
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	461a      	mov	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80101ee:	4b3d      	ldr	r3, [pc, #244]	; (80102e4 <USBD_SetConfig+0x144>)
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	4619      	mov	r1, r3
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7ff f9a8 	bl	800f54a <USBD_SetClassConfig>
 80101fa:	4603      	mov	r3, r0
 80101fc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80101fe:	7bfb      	ldrb	r3, [r7, #15]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d004      	beq.n	801020e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8010204:	6839      	ldr	r1, [r7, #0]
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 f944 	bl	8010494 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801020c:	e065      	b.n	80102da <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 f9ee 	bl	80105f0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2203      	movs	r2, #3
 8010218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801021c:	e05d      	b.n	80102da <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 f9e6 	bl	80105f0 <USBD_CtlSendStatus>
    break;
 8010224:	e059      	b.n	80102da <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8010226:	4b2f      	ldr	r3, [pc, #188]	; (80102e4 <USBD_SetConfig+0x144>)
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d112      	bne.n	8010254 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2202      	movs	r2, #2
 8010232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8010236:	4b2b      	ldr	r3, [pc, #172]	; (80102e4 <USBD_SetConfig+0x144>)
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	461a      	mov	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010240:	4b28      	ldr	r3, [pc, #160]	; (80102e4 <USBD_SetConfig+0x144>)
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	4619      	mov	r1, r3
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f7ff f99b 	bl	800f582 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 f9cf 	bl	80105f0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8010252:	e042      	b.n	80102da <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8010254:	4b23      	ldr	r3, [pc, #140]	; (80102e4 <USBD_SetConfig+0x144>)
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	461a      	mov	r2, r3
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	429a      	cmp	r2, r3
 8010260:	d02a      	beq.n	80102b8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	b2db      	uxtb	r3, r3
 8010268:	4619      	mov	r1, r3
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f7ff f989 	bl	800f582 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8010270:	4b1c      	ldr	r3, [pc, #112]	; (80102e4 <USBD_SetConfig+0x144>)
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	461a      	mov	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801027a:	4b1a      	ldr	r3, [pc, #104]	; (80102e4 <USBD_SetConfig+0x144>)
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	4619      	mov	r1, r3
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f7ff f962 	bl	800f54a <USBD_SetClassConfig>
 8010286:	4603      	mov	r3, r0
 8010288:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801028a:	7bfb      	ldrb	r3, [r7, #15]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00f      	beq.n	80102b0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8010290:	6839      	ldr	r1, [r7, #0]
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f000 f8fe 	bl	8010494 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	b2db      	uxtb	r3, r3
 801029e:	4619      	mov	r1, r3
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7ff f96e 	bl	800f582 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2202      	movs	r2, #2
 80102aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80102ae:	e014      	b.n	80102da <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 f99d 	bl	80105f0 <USBD_CtlSendStatus>
    break;
 80102b6:	e010      	b.n	80102da <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 f999 	bl	80105f0 <USBD_CtlSendStatus>
    break;
 80102be:	e00c      	b.n	80102da <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80102c0:	6839      	ldr	r1, [r7, #0]
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 f8e6 	bl	8010494 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80102c8:	4b06      	ldr	r3, [pc, #24]	; (80102e4 <USBD_SetConfig+0x144>)
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	4619      	mov	r1, r3
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f7ff f957 	bl	800f582 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80102d4:	2303      	movs	r3, #3
 80102d6:	73fb      	strb	r3, [r7, #15]
    break;
 80102d8:	bf00      	nop
  }

  return ret;
 80102da:	7bfb      	ldrb	r3, [r7, #15]
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3710      	adds	r7, #16
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	20001e80 	.word	0x20001e80

080102e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	88db      	ldrh	r3, [r3, #6]
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d004      	beq.n	8010304 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80102fa:	6839      	ldr	r1, [r7, #0]
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 f8c9 	bl	8010494 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8010302:	e021      	b.n	8010348 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801030a:	2b01      	cmp	r3, #1
 801030c:	db17      	blt.n	801033e <USBD_GetConfig+0x56>
 801030e:	2b02      	cmp	r3, #2
 8010310:	dd02      	ble.n	8010318 <USBD_GetConfig+0x30>
 8010312:	2b03      	cmp	r3, #3
 8010314:	d00b      	beq.n	801032e <USBD_GetConfig+0x46>
 8010316:	e012      	b.n	801033e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	3308      	adds	r3, #8
 8010322:	2201      	movs	r2, #1
 8010324:	4619      	mov	r1, r3
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 f925 	bl	8010576 <USBD_CtlSendData>
      break;
 801032c:	e00c      	b.n	8010348 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	3304      	adds	r3, #4
 8010332:	2201      	movs	r2, #1
 8010334:	4619      	mov	r1, r3
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 f91d 	bl	8010576 <USBD_CtlSendData>
      break;
 801033c:	e004      	b.n	8010348 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801033e:	6839      	ldr	r1, [r7, #0]
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f000 f8a7 	bl	8010494 <USBD_CtlError>
      break;
 8010346:	bf00      	nop
}
 8010348:	bf00      	nop
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010360:	3b01      	subs	r3, #1
 8010362:	2b02      	cmp	r3, #2
 8010364:	d81e      	bhi.n	80103a4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	88db      	ldrh	r3, [r3, #6]
 801036a:	2b02      	cmp	r3, #2
 801036c:	d004      	beq.n	8010378 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801036e:	6839      	ldr	r1, [r7, #0]
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 f88f 	bl	8010494 <USBD_CtlError>
      break;
 8010376:	e01a      	b.n	80103ae <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010384:	2b00      	cmp	r3, #0
 8010386:	d005      	beq.n	8010394 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	68db      	ldr	r3, [r3, #12]
 801038c:	f043 0202 	orr.w	r2, r3, #2
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	330c      	adds	r3, #12
 8010398:	2202      	movs	r2, #2
 801039a:	4619      	mov	r1, r3
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 f8ea 	bl	8010576 <USBD_CtlSendData>
    break;
 80103a2:	e004      	b.n	80103ae <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80103a4:	6839      	ldr	r1, [r7, #0]
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 f874 	bl	8010494 <USBD_CtlError>
    break;
 80103ac:	bf00      	nop
  }
}
 80103ae:	bf00      	nop
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b082      	sub	sp, #8
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	885b      	ldrh	r3, [r3, #2]
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	d106      	bne.n	80103d6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2201      	movs	r2, #1
 80103cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 f90d 	bl	80105f0 <USBD_CtlSendStatus>
  }
}
 80103d6:	bf00      	nop
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b082      	sub	sp, #8
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103ee:	3b01      	subs	r3, #1
 80103f0:	2b02      	cmp	r3, #2
 80103f2:	d80b      	bhi.n	801040c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	885b      	ldrh	r3, [r3, #2]
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d10c      	bne.n	8010416 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f000 f8f3 	bl	80105f0 <USBD_CtlSendStatus>
      }
      break;
 801040a:	e004      	b.n	8010416 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801040c:	6839      	ldr	r1, [r7, #0]
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 f840 	bl	8010494 <USBD_CtlError>
      break;
 8010414:	e000      	b.n	8010418 <USBD_ClrFeature+0x3a>
      break;
 8010416:	bf00      	nop
  }
}
 8010418:	bf00      	nop
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	781a      	ldrb	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	3301      	adds	r3, #1
 801043a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	781a      	ldrb	r2, [r3, #0]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	3301      	adds	r3, #1
 8010448:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801044a:	68f8      	ldr	r0, [r7, #12]
 801044c:	f7ff fad4 	bl	800f9f8 <SWAPBYTE>
 8010450:	4603      	mov	r3, r0
 8010452:	461a      	mov	r2, r3
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	3301      	adds	r3, #1
 801045c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	3301      	adds	r3, #1
 8010462:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f7ff fac7 	bl	800f9f8 <SWAPBYTE>
 801046a:	4603      	mov	r3, r0
 801046c:	461a      	mov	r2, r3
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	3301      	adds	r3, #1
 8010476:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	3301      	adds	r3, #1
 801047c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f7ff faba 	bl	800f9f8 <SWAPBYTE>
 8010484:	4603      	mov	r3, r0
 8010486:	461a      	mov	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	80da      	strh	r2, [r3, #6]
}
 801048c:	bf00      	nop
 801048e:	3710      	adds	r7, #16
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801049e:	2180      	movs	r1, #128	; 0x80
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f004 fc67 	bl	8014d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80104a6:	2100      	movs	r1, #0
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f004 fc63 	bl	8014d74 <USBD_LL_StallEP>
}
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b086      	sub	sp, #24
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	60f8      	str	r0, [r7, #12]
 80104be:	60b9      	str	r1, [r7, #8]
 80104c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80104c2:	2300      	movs	r3, #0
 80104c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d036      	beq.n	801053a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80104d0:	6938      	ldr	r0, [r7, #16]
 80104d2:	f000 f836 	bl	8010542 <USBD_GetLen>
 80104d6:	4603      	mov	r3, r0
 80104d8:	3301      	adds	r3, #1
 80104da:	b29b      	uxth	r3, r3
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	b29a      	uxth	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80104e4:	7dfb      	ldrb	r3, [r7, #23]
 80104e6:	68ba      	ldr	r2, [r7, #8]
 80104e8:	4413      	add	r3, r2
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	7812      	ldrb	r2, [r2, #0]
 80104ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80104f0:	7dfb      	ldrb	r3, [r7, #23]
 80104f2:	3301      	adds	r3, #1
 80104f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80104f6:	7dfb      	ldrb	r3, [r7, #23]
 80104f8:	68ba      	ldr	r2, [r7, #8]
 80104fa:	4413      	add	r3, r2
 80104fc:	2203      	movs	r2, #3
 80104fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8010500:	7dfb      	ldrb	r3, [r7, #23]
 8010502:	3301      	adds	r3, #1
 8010504:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010506:	e013      	b.n	8010530 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010508:	7dfb      	ldrb	r3, [r7, #23]
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	4413      	add	r3, r2
 801050e:	693a      	ldr	r2, [r7, #16]
 8010510:	7812      	ldrb	r2, [r2, #0]
 8010512:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	3301      	adds	r3, #1
 8010518:	613b      	str	r3, [r7, #16]
    idx++;
 801051a:	7dfb      	ldrb	r3, [r7, #23]
 801051c:	3301      	adds	r3, #1
 801051e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010520:	7dfb      	ldrb	r3, [r7, #23]
 8010522:	68ba      	ldr	r2, [r7, #8]
 8010524:	4413      	add	r3, r2
 8010526:	2200      	movs	r2, #0
 8010528:	701a      	strb	r2, [r3, #0]
    idx++;
 801052a:	7dfb      	ldrb	r3, [r7, #23]
 801052c:	3301      	adds	r3, #1
 801052e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1e7      	bne.n	8010508 <USBD_GetString+0x52>
 8010538:	e000      	b.n	801053c <USBD_GetString+0x86>
    return;
 801053a:	bf00      	nop
  }
}
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010542:	b480      	push	{r7}
 8010544:	b085      	sub	sp, #20
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801054a:	2300      	movs	r3, #0
 801054c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010552:	e005      	b.n	8010560 <USBD_GetLen+0x1e>
  {
    len++;
 8010554:	7bfb      	ldrb	r3, [r7, #15]
 8010556:	3301      	adds	r3, #1
 8010558:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	3301      	adds	r3, #1
 801055e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d1f5      	bne.n	8010554 <USBD_GetLen+0x12>
  }

  return len;
 8010568:	7bfb      	ldrb	r3, [r7, #15]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3714      	adds	r7, #20
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr

08010576 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b084      	sub	sp, #16
 801057a:	af00      	add	r7, sp, #0
 801057c:	60f8      	str	r0, [r7, #12]
 801057e:	60b9      	str	r1, [r7, #8]
 8010580:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2202      	movs	r2, #2
 8010586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	68ba      	ldr	r2, [r7, #8]
 801059a:	2100      	movs	r1, #0
 801059c:	68f8      	ldr	r0, [r7, #12]
 801059e:	f004 fc72 	bl	8014e86 <USBD_LL_Transmit>

  return USBD_OK;
 80105a2:	2300      	movs	r3, #0
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3710      	adds	r7, #16
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	2100      	movs	r1, #0
 80105be:	68f8      	ldr	r0, [r7, #12]
 80105c0:	f004 fc61 	bl	8014e86 <USBD_LL_Transmit>

  return USBD_OK;
 80105c4:	2300      	movs	r3, #0
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3710      	adds	r7, #16
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b084      	sub	sp, #16
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	60f8      	str	r0, [r7, #12]
 80105d6:	60b9      	str	r1, [r7, #8]
 80105d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	68ba      	ldr	r2, [r7, #8]
 80105de:	2100      	movs	r1, #0
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f004 fc71 	bl	8014ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80105e6:	2300      	movs	r3, #0
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2204      	movs	r2, #4
 80105fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010600:	2300      	movs	r3, #0
 8010602:	2200      	movs	r2, #0
 8010604:	2100      	movs	r1, #0
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f004 fc3d 	bl	8014e86 <USBD_LL_Transmit>

  return USBD_OK;
 801060c:	2300      	movs	r3, #0
}
 801060e:	4618      	mov	r0, r3
 8010610:	3708      	adds	r7, #8
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010616:	b580      	push	{r7, lr}
 8010618:	b082      	sub	sp, #8
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2205      	movs	r2, #5
 8010622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010626:	2300      	movs	r3, #0
 8010628:	2200      	movs	r2, #0
 801062a:	2100      	movs	r1, #0
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f004 fc4b 	bl	8014ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010632:	2300      	movs	r3, #0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	4603      	mov	r3, r0
 8010644:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010646:	79fb      	ldrb	r3, [r7, #7]
 8010648:	4a08      	ldr	r2, [pc, #32]	; (801066c <disk_status+0x30>)
 801064a:	009b      	lsls	r3, r3, #2
 801064c:	4413      	add	r3, r2
 801064e:	685b      	ldr	r3, [r3, #4]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	79fa      	ldrb	r2, [r7, #7]
 8010654:	4905      	ldr	r1, [pc, #20]	; (801066c <disk_status+0x30>)
 8010656:	440a      	add	r2, r1
 8010658:	7a12      	ldrb	r2, [r2, #8]
 801065a:	4610      	mov	r0, r2
 801065c:	4798      	blx	r3
 801065e:	4603      	mov	r3, r0
 8010660:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010662:	7bfb      	ldrb	r3, [r7, #15]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	2000212c 	.word	0x2000212c

08010670 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	4603      	mov	r3, r0
 8010678:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801067a:	2300      	movs	r3, #0
 801067c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801067e:	79fb      	ldrb	r3, [r7, #7]
 8010680:	4a0d      	ldr	r2, [pc, #52]	; (80106b8 <disk_initialize+0x48>)
 8010682:	5cd3      	ldrb	r3, [r2, r3]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d111      	bne.n	80106ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	4a0b      	ldr	r2, [pc, #44]	; (80106b8 <disk_initialize+0x48>)
 801068c:	2101      	movs	r1, #1
 801068e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010690:	79fb      	ldrb	r3, [r7, #7]
 8010692:	4a09      	ldr	r2, [pc, #36]	; (80106b8 <disk_initialize+0x48>)
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	4413      	add	r3, r2
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	79fa      	ldrb	r2, [r7, #7]
 801069e:	4906      	ldr	r1, [pc, #24]	; (80106b8 <disk_initialize+0x48>)
 80106a0:	440a      	add	r2, r1
 80106a2:	7a12      	ldrb	r2, [r2, #8]
 80106a4:	4610      	mov	r0, r2
 80106a6:	4798      	blx	r3
 80106a8:	4603      	mov	r3, r0
 80106aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80106ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3710      	adds	r7, #16
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	2000212c 	.word	0x2000212c

080106bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80106bc:	b590      	push	{r4, r7, lr}
 80106be:	b087      	sub	sp, #28
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60b9      	str	r1, [r7, #8]
 80106c4:	607a      	str	r2, [r7, #4]
 80106c6:	603b      	str	r3, [r7, #0]
 80106c8:	4603      	mov	r3, r0
 80106ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
 80106ce:	4a0a      	ldr	r2, [pc, #40]	; (80106f8 <disk_read+0x3c>)
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	4413      	add	r3, r2
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	689c      	ldr	r4, [r3, #8]
 80106d8:	7bfb      	ldrb	r3, [r7, #15]
 80106da:	4a07      	ldr	r2, [pc, #28]	; (80106f8 <disk_read+0x3c>)
 80106dc:	4413      	add	r3, r2
 80106de:	7a18      	ldrb	r0, [r3, #8]
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	68b9      	ldr	r1, [r7, #8]
 80106e6:	47a0      	blx	r4
 80106e8:	4603      	mov	r3, r0
 80106ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80106ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	371c      	adds	r7, #28
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd90      	pop	{r4, r7, pc}
 80106f6:	bf00      	nop
 80106f8:	2000212c 	.word	0x2000212c

080106fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80106fc:	b590      	push	{r4, r7, lr}
 80106fe:	b087      	sub	sp, #28
 8010700:	af00      	add	r7, sp, #0
 8010702:	60b9      	str	r1, [r7, #8]
 8010704:	607a      	str	r2, [r7, #4]
 8010706:	603b      	str	r3, [r7, #0]
 8010708:	4603      	mov	r3, r0
 801070a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801070c:	7bfb      	ldrb	r3, [r7, #15]
 801070e:	4a0a      	ldr	r2, [pc, #40]	; (8010738 <disk_write+0x3c>)
 8010710:	009b      	lsls	r3, r3, #2
 8010712:	4413      	add	r3, r2
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	68dc      	ldr	r4, [r3, #12]
 8010718:	7bfb      	ldrb	r3, [r7, #15]
 801071a:	4a07      	ldr	r2, [pc, #28]	; (8010738 <disk_write+0x3c>)
 801071c:	4413      	add	r3, r2
 801071e:	7a18      	ldrb	r0, [r3, #8]
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	68b9      	ldr	r1, [r7, #8]
 8010726:	47a0      	blx	r4
 8010728:	4603      	mov	r3, r0
 801072a:	75fb      	strb	r3, [r7, #23]
  return res;
 801072c:	7dfb      	ldrb	r3, [r7, #23]
}
 801072e:	4618      	mov	r0, r3
 8010730:	371c      	adds	r7, #28
 8010732:	46bd      	mov	sp, r7
 8010734:	bd90      	pop	{r4, r7, pc}
 8010736:	bf00      	nop
 8010738:	2000212c 	.word	0x2000212c

0801073c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	4603      	mov	r3, r0
 8010744:	603a      	str	r2, [r7, #0]
 8010746:	71fb      	strb	r3, [r7, #7]
 8010748:	460b      	mov	r3, r1
 801074a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801074c:	79fb      	ldrb	r3, [r7, #7]
 801074e:	4a09      	ldr	r2, [pc, #36]	; (8010774 <disk_ioctl+0x38>)
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	4413      	add	r3, r2
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	691b      	ldr	r3, [r3, #16]
 8010758:	79fa      	ldrb	r2, [r7, #7]
 801075a:	4906      	ldr	r1, [pc, #24]	; (8010774 <disk_ioctl+0x38>)
 801075c:	440a      	add	r2, r1
 801075e:	7a10      	ldrb	r0, [r2, #8]
 8010760:	79b9      	ldrb	r1, [r7, #6]
 8010762:	683a      	ldr	r2, [r7, #0]
 8010764:	4798      	blx	r3
 8010766:	4603      	mov	r3, r0
 8010768:	73fb      	strb	r3, [r7, #15]
  return res;
 801076a:	7bfb      	ldrb	r3, [r7, #15]
}
 801076c:	4618      	mov	r0, r3
 801076e:	3710      	adds	r7, #16
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	2000212c 	.word	0x2000212c

08010778 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010778:	b480      	push	{r7}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	3301      	adds	r3, #1
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010788:	89fb      	ldrh	r3, [r7, #14]
 801078a:	021b      	lsls	r3, r3, #8
 801078c:	b21a      	sxth	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	b21b      	sxth	r3, r3
 8010794:	4313      	orrs	r3, r2
 8010796:	b21b      	sxth	r3, r3
 8010798:	81fb      	strh	r3, [r7, #14]
	return rv;
 801079a:	89fb      	ldrh	r3, [r7, #14]
}
 801079c:	4618      	mov	r0, r3
 801079e:	3714      	adds	r7, #20
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80107a8:	b480      	push	{r7}
 80107aa:	b085      	sub	sp, #20
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	3303      	adds	r3, #3
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	021b      	lsls	r3, r3, #8
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	3202      	adds	r2, #2
 80107c0:	7812      	ldrb	r2, [r2, #0]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	021b      	lsls	r3, r3, #8
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	3201      	adds	r2, #1
 80107ce:	7812      	ldrb	r2, [r2, #0]
 80107d0:	4313      	orrs	r3, r2
 80107d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	021b      	lsls	r3, r3, #8
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	7812      	ldrb	r2, [r2, #0]
 80107dc:	4313      	orrs	r3, r2
 80107de:	60fb      	str	r3, [r7, #12]
	return rv;
 80107e0:	68fb      	ldr	r3, [r7, #12]
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3714      	adds	r7, #20
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr

080107ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80107ee:	b480      	push	{r7}
 80107f0:	b083      	sub	sp, #12
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	460b      	mov	r3, r1
 80107f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	1c5a      	adds	r2, r3, #1
 80107fe:	607a      	str	r2, [r7, #4]
 8010800:	887a      	ldrh	r2, [r7, #2]
 8010802:	b2d2      	uxtb	r2, r2
 8010804:	701a      	strb	r2, [r3, #0]
 8010806:	887b      	ldrh	r3, [r7, #2]
 8010808:	0a1b      	lsrs	r3, r3, #8
 801080a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	1c5a      	adds	r2, r3, #1
 8010810:	607a      	str	r2, [r7, #4]
 8010812:	887a      	ldrh	r2, [r7, #2]
 8010814:	b2d2      	uxtb	r2, r2
 8010816:	701a      	strb	r2, [r3, #0]
}
 8010818:	bf00      	nop
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	1c5a      	adds	r2, r3, #1
 8010832:	607a      	str	r2, [r7, #4]
 8010834:	683a      	ldr	r2, [r7, #0]
 8010836:	b2d2      	uxtb	r2, r2
 8010838:	701a      	strb	r2, [r3, #0]
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	0a1b      	lsrs	r3, r3, #8
 801083e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	1c5a      	adds	r2, r3, #1
 8010844:	607a      	str	r2, [r7, #4]
 8010846:	683a      	ldr	r2, [r7, #0]
 8010848:	b2d2      	uxtb	r2, r2
 801084a:	701a      	strb	r2, [r3, #0]
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	0a1b      	lsrs	r3, r3, #8
 8010850:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	1c5a      	adds	r2, r3, #1
 8010856:	607a      	str	r2, [r7, #4]
 8010858:	683a      	ldr	r2, [r7, #0]
 801085a:	b2d2      	uxtb	r2, r2
 801085c:	701a      	strb	r2, [r3, #0]
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	0a1b      	lsrs	r3, r3, #8
 8010862:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	1c5a      	adds	r2, r3, #1
 8010868:	607a      	str	r2, [r7, #4]
 801086a:	683a      	ldr	r2, [r7, #0]
 801086c:	b2d2      	uxtb	r2, r2
 801086e:	701a      	strb	r2, [r3, #0]
}
 8010870:	bf00      	nop
 8010872:	370c      	adds	r7, #12
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr

0801087c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801087c:	b480      	push	{r7}
 801087e:	b087      	sub	sp, #28
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00d      	beq.n	80108b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	1c53      	adds	r3, r2, #1
 801089a:	613b      	str	r3, [r7, #16]
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	1c59      	adds	r1, r3, #1
 80108a0:	6179      	str	r1, [r7, #20]
 80108a2:	7812      	ldrb	r2, [r2, #0]
 80108a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	3b01      	subs	r3, #1
 80108aa:	607b      	str	r3, [r7, #4]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d1f1      	bne.n	8010896 <mem_cpy+0x1a>
	}
}
 80108b2:	bf00      	nop
 80108b4:	371c      	adds	r7, #28
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80108be:	b480      	push	{r7}
 80108c0:	b087      	sub	sp, #28
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	60f8      	str	r0, [r7, #12]
 80108c6:	60b9      	str	r1, [r7, #8]
 80108c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	1c5a      	adds	r2, r3, #1
 80108d2:	617a      	str	r2, [r7, #20]
 80108d4:	68ba      	ldr	r2, [r7, #8]
 80108d6:	b2d2      	uxtb	r2, r2
 80108d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	3b01      	subs	r3, #1
 80108de:	607b      	str	r3, [r7, #4]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d1f3      	bne.n	80108ce <mem_set+0x10>
}
 80108e6:	bf00      	nop
 80108e8:	371c      	adds	r7, #28
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80108f2:	b480      	push	{r7}
 80108f4:	b089      	sub	sp, #36	; 0x24
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	60f8      	str	r0, [r7, #12]
 80108fa:	60b9      	str	r1, [r7, #8]
 80108fc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	61fb      	str	r3, [r7, #28]
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010906:	2300      	movs	r3, #0
 8010908:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	1c5a      	adds	r2, r3, #1
 801090e:	61fa      	str	r2, [r7, #28]
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	4619      	mov	r1, r3
 8010914:	69bb      	ldr	r3, [r7, #24]
 8010916:	1c5a      	adds	r2, r3, #1
 8010918:	61ba      	str	r2, [r7, #24]
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	1acb      	subs	r3, r1, r3
 801091e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	3b01      	subs	r3, #1
 8010924:	607b      	str	r3, [r7, #4]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <mem_cmp+0x40>
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d0eb      	beq.n	801090a <mem_cmp+0x18>

	return r;
 8010932:	697b      	ldr	r3, [r7, #20]
}
 8010934:	4618      	mov	r0, r3
 8010936:	3724      	adds	r7, #36	; 0x24
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010940:	b480      	push	{r7}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801094a:	e002      	b.n	8010952 <chk_chr+0x12>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	3301      	adds	r3, #1
 8010950:	607b      	str	r3, [r7, #4]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d005      	beq.n	8010966 <chk_chr+0x26>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	461a      	mov	r2, r3
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	4293      	cmp	r3, r2
 8010964:	d1f2      	bne.n	801094c <chk_chr+0xc>
	return *str;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	781b      	ldrb	r3, [r3, #0]
}
 801096a:	4618      	mov	r0, r3
 801096c:	370c      	adds	r7, #12
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr
	...

08010978 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010982:	2300      	movs	r3, #0
 8010984:	60bb      	str	r3, [r7, #8]
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	60fb      	str	r3, [r7, #12]
 801098a:	e029      	b.n	80109e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801098c:	4a27      	ldr	r2, [pc, #156]	; (8010a2c <chk_lock+0xb4>)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	011b      	lsls	r3, r3, #4
 8010992:	4413      	add	r3, r2
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d01d      	beq.n	80109d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801099a:	4a24      	ldr	r2, [pc, #144]	; (8010a2c <chk_lock+0xb4>)
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	011b      	lsls	r3, r3, #4
 80109a0:	4413      	add	r3, r2
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d116      	bne.n	80109da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80109ac:	4a1f      	ldr	r2, [pc, #124]	; (8010a2c <chk_lock+0xb4>)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	011b      	lsls	r3, r3, #4
 80109b2:	4413      	add	r3, r2
 80109b4:	3304      	adds	r3, #4
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80109bc:	429a      	cmp	r2, r3
 80109be:	d10c      	bne.n	80109da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80109c0:	4a1a      	ldr	r2, [pc, #104]	; (8010a2c <chk_lock+0xb4>)
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	011b      	lsls	r3, r3, #4
 80109c6:	4413      	add	r3, r2
 80109c8:	3308      	adds	r3, #8
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d102      	bne.n	80109da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80109d4:	e007      	b.n	80109e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80109d6:	2301      	movs	r3, #1
 80109d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	3301      	adds	r3, #1
 80109de:	60fb      	str	r3, [r7, #12]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2b09      	cmp	r3, #9
 80109e4:	d9d2      	bls.n	801098c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	2b0a      	cmp	r3, #10
 80109ea:	d109      	bne.n	8010a00 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d102      	bne.n	80109f8 <chk_lock+0x80>
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	2b02      	cmp	r3, #2
 80109f6:	d101      	bne.n	80109fc <chk_lock+0x84>
 80109f8:	2300      	movs	r3, #0
 80109fa:	e010      	b.n	8010a1e <chk_lock+0xa6>
 80109fc:	2312      	movs	r3, #18
 80109fe:	e00e      	b.n	8010a1e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d108      	bne.n	8010a18 <chk_lock+0xa0>
 8010a06:	4a09      	ldr	r2, [pc, #36]	; (8010a2c <chk_lock+0xb4>)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	011b      	lsls	r3, r3, #4
 8010a0c:	4413      	add	r3, r2
 8010a0e:	330c      	adds	r3, #12
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a16:	d101      	bne.n	8010a1c <chk_lock+0xa4>
 8010a18:	2310      	movs	r3, #16
 8010a1a:	e000      	b.n	8010a1e <chk_lock+0xa6>
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3714      	adds	r7, #20
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	20001e8c 	.word	0x20001e8c

08010a30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010a36:	2300      	movs	r3, #0
 8010a38:	607b      	str	r3, [r7, #4]
 8010a3a:	e002      	b.n	8010a42 <enq_lock+0x12>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	607b      	str	r3, [r7, #4]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b09      	cmp	r3, #9
 8010a46:	d806      	bhi.n	8010a56 <enq_lock+0x26>
 8010a48:	4a09      	ldr	r2, [pc, #36]	; (8010a70 <enq_lock+0x40>)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	011b      	lsls	r3, r3, #4
 8010a4e:	4413      	add	r3, r2
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d1f2      	bne.n	8010a3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2b0a      	cmp	r3, #10
 8010a5a:	bf14      	ite	ne
 8010a5c:	2301      	movne	r3, #1
 8010a5e:	2300      	moveq	r3, #0
 8010a60:	b2db      	uxtb	r3, r3
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	370c      	adds	r7, #12
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	20001e8c 	.word	0x20001e8c

08010a74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b085      	sub	sp, #20
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010a7e:	2300      	movs	r3, #0
 8010a80:	60fb      	str	r3, [r7, #12]
 8010a82:	e01f      	b.n	8010ac4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010a84:	4a41      	ldr	r2, [pc, #260]	; (8010b8c <inc_lock+0x118>)
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	011b      	lsls	r3, r3, #4
 8010a8a:	4413      	add	r3, r2
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d113      	bne.n	8010abe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010a96:	4a3d      	ldr	r2, [pc, #244]	; (8010b8c <inc_lock+0x118>)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	011b      	lsls	r3, r3, #4
 8010a9c:	4413      	add	r3, r2
 8010a9e:	3304      	adds	r3, #4
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d109      	bne.n	8010abe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010aaa:	4a38      	ldr	r2, [pc, #224]	; (8010b8c <inc_lock+0x118>)
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	011b      	lsls	r3, r3, #4
 8010ab0:	4413      	add	r3, r2
 8010ab2:	3308      	adds	r3, #8
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d006      	beq.n	8010acc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	60fb      	str	r3, [r7, #12]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2b09      	cmp	r3, #9
 8010ac8:	d9dc      	bls.n	8010a84 <inc_lock+0x10>
 8010aca:	e000      	b.n	8010ace <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010acc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2b0a      	cmp	r3, #10
 8010ad2:	d132      	bne.n	8010b3a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	60fb      	str	r3, [r7, #12]
 8010ad8:	e002      	b.n	8010ae0 <inc_lock+0x6c>
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	3301      	adds	r3, #1
 8010ade:	60fb      	str	r3, [r7, #12]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2b09      	cmp	r3, #9
 8010ae4:	d806      	bhi.n	8010af4 <inc_lock+0x80>
 8010ae6:	4a29      	ldr	r2, [pc, #164]	; (8010b8c <inc_lock+0x118>)
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	011b      	lsls	r3, r3, #4
 8010aec:	4413      	add	r3, r2
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d1f2      	bne.n	8010ada <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b0a      	cmp	r3, #10
 8010af8:	d101      	bne.n	8010afe <inc_lock+0x8a>
 8010afa:	2300      	movs	r3, #0
 8010afc:	e040      	b.n	8010b80 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	4922      	ldr	r1, [pc, #136]	; (8010b8c <inc_lock+0x118>)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	011b      	lsls	r3, r3, #4
 8010b08:	440b      	add	r3, r1
 8010b0a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	689a      	ldr	r2, [r3, #8]
 8010b10:	491e      	ldr	r1, [pc, #120]	; (8010b8c <inc_lock+0x118>)
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	011b      	lsls	r3, r3, #4
 8010b16:	440b      	add	r3, r1
 8010b18:	3304      	adds	r3, #4
 8010b1a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	695a      	ldr	r2, [r3, #20]
 8010b20:	491a      	ldr	r1, [pc, #104]	; (8010b8c <inc_lock+0x118>)
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	011b      	lsls	r3, r3, #4
 8010b26:	440b      	add	r3, r1
 8010b28:	3308      	adds	r3, #8
 8010b2a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010b2c:	4a17      	ldr	r2, [pc, #92]	; (8010b8c <inc_lock+0x118>)
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	011b      	lsls	r3, r3, #4
 8010b32:	4413      	add	r3, r2
 8010b34:	330c      	adds	r3, #12
 8010b36:	2200      	movs	r2, #0
 8010b38:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d009      	beq.n	8010b54 <inc_lock+0xe0>
 8010b40:	4a12      	ldr	r2, [pc, #72]	; (8010b8c <inc_lock+0x118>)
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	011b      	lsls	r3, r3, #4
 8010b46:	4413      	add	r3, r2
 8010b48:	330c      	adds	r3, #12
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d001      	beq.n	8010b54 <inc_lock+0xe0>
 8010b50:	2300      	movs	r3, #0
 8010b52:	e015      	b.n	8010b80 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d108      	bne.n	8010b6c <inc_lock+0xf8>
 8010b5a:	4a0c      	ldr	r2, [pc, #48]	; (8010b8c <inc_lock+0x118>)
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	011b      	lsls	r3, r3, #4
 8010b60:	4413      	add	r3, r2
 8010b62:	330c      	adds	r3, #12
 8010b64:	881b      	ldrh	r3, [r3, #0]
 8010b66:	3301      	adds	r3, #1
 8010b68:	b29a      	uxth	r2, r3
 8010b6a:	e001      	b.n	8010b70 <inc_lock+0xfc>
 8010b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b70:	4906      	ldr	r1, [pc, #24]	; (8010b8c <inc_lock+0x118>)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	011b      	lsls	r3, r3, #4
 8010b76:	440b      	add	r3, r1
 8010b78:	330c      	adds	r3, #12
 8010b7a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	3301      	adds	r3, #1
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3714      	adds	r7, #20
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	20001e8c 	.word	0x20001e8c

08010b90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	607b      	str	r3, [r7, #4]
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2b09      	cmp	r3, #9
 8010ba2:	d825      	bhi.n	8010bf0 <dec_lock+0x60>
		n = Files[i].ctr;
 8010ba4:	4a17      	ldr	r2, [pc, #92]	; (8010c04 <dec_lock+0x74>)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	011b      	lsls	r3, r3, #4
 8010baa:	4413      	add	r3, r2
 8010bac:	330c      	adds	r3, #12
 8010bae:	881b      	ldrh	r3, [r3, #0]
 8010bb0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010bb2:	89fb      	ldrh	r3, [r7, #14]
 8010bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bb8:	d101      	bne.n	8010bbe <dec_lock+0x2e>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010bbe:	89fb      	ldrh	r3, [r7, #14]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d002      	beq.n	8010bca <dec_lock+0x3a>
 8010bc4:	89fb      	ldrh	r3, [r7, #14]
 8010bc6:	3b01      	subs	r3, #1
 8010bc8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010bca:	4a0e      	ldr	r2, [pc, #56]	; (8010c04 <dec_lock+0x74>)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	011b      	lsls	r3, r3, #4
 8010bd0:	4413      	add	r3, r2
 8010bd2:	330c      	adds	r3, #12
 8010bd4:	89fa      	ldrh	r2, [r7, #14]
 8010bd6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010bd8:	89fb      	ldrh	r3, [r7, #14]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d105      	bne.n	8010bea <dec_lock+0x5a>
 8010bde:	4a09      	ldr	r2, [pc, #36]	; (8010c04 <dec_lock+0x74>)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	011b      	lsls	r3, r3, #4
 8010be4:	4413      	add	r3, r2
 8010be6:	2200      	movs	r2, #0
 8010be8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010bea:	2300      	movs	r3, #0
 8010bec:	737b      	strb	r3, [r7, #13]
 8010bee:	e001      	b.n	8010bf4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010bf0:	2302      	movs	r3, #2
 8010bf2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010bf4:	7b7b      	ldrb	r3, [r7, #13]
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3714      	adds	r7, #20
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	20001e8c 	.word	0x20001e8c

08010c08 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b085      	sub	sp, #20
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010c10:	2300      	movs	r3, #0
 8010c12:	60fb      	str	r3, [r7, #12]
 8010c14:	e010      	b.n	8010c38 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010c16:	4a0d      	ldr	r2, [pc, #52]	; (8010c4c <clear_lock+0x44>)
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	011b      	lsls	r3, r3, #4
 8010c1c:	4413      	add	r3, r2
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d105      	bne.n	8010c32 <clear_lock+0x2a>
 8010c26:	4a09      	ldr	r2, [pc, #36]	; (8010c4c <clear_lock+0x44>)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	011b      	lsls	r3, r3, #4
 8010c2c:	4413      	add	r3, r2
 8010c2e:	2200      	movs	r2, #0
 8010c30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	3301      	adds	r3, #1
 8010c36:	60fb      	str	r3, [r7, #12]
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2b09      	cmp	r3, #9
 8010c3c:	d9eb      	bls.n	8010c16 <clear_lock+0xe>
	}
}
 8010c3e:	bf00      	nop
 8010c40:	3714      	adds	r7, #20
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr
 8010c4a:	bf00      	nop
 8010c4c:	20001e8c 	.word	0x20001e8c

08010c50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b086      	sub	sp, #24
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	78db      	ldrb	r3, [r3, #3]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d034      	beq.n	8010cce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	7858      	ldrb	r0, [r3, #1]
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010c74:	2301      	movs	r3, #1
 8010c76:	697a      	ldr	r2, [r7, #20]
 8010c78:	f7ff fd40 	bl	80106fc <disk_write>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d002      	beq.n	8010c88 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010c82:	2301      	movs	r3, #1
 8010c84:	73fb      	strb	r3, [r7, #15]
 8010c86:	e022      	b.n	8010cce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c92:	697a      	ldr	r2, [r7, #20]
 8010c94:	1ad2      	subs	r2, r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6a1b      	ldr	r3, [r3, #32]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d217      	bcs.n	8010cce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	789b      	ldrb	r3, [r3, #2]
 8010ca2:	613b      	str	r3, [r7, #16]
 8010ca4:	e010      	b.n	8010cc8 <sync_window+0x78>
					wsect += fs->fsize;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6a1b      	ldr	r3, [r3, #32]
 8010caa:	697a      	ldr	r2, [r7, #20]
 8010cac:	4413      	add	r3, r2
 8010cae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	7858      	ldrb	r0, [r3, #1]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010cba:	2301      	movs	r3, #1
 8010cbc:	697a      	ldr	r2, [r7, #20]
 8010cbe:	f7ff fd1d 	bl	80106fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	3b01      	subs	r3, #1
 8010cc6:	613b      	str	r3, [r7, #16]
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d8eb      	bhi.n	8010ca6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3718      	adds	r7, #24
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cea:	683a      	ldr	r2, [r7, #0]
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d01b      	beq.n	8010d28 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f7ff ffad 	bl	8010c50 <sync_window>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010cfa:	7bfb      	ldrb	r3, [r7, #15]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d113      	bne.n	8010d28 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	7858      	ldrb	r0, [r3, #1]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	683a      	ldr	r2, [r7, #0]
 8010d0e:	f7ff fcd5 	bl	80106bc <disk_read>
 8010d12:	4603      	mov	r3, r0
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d004      	beq.n	8010d22 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010d18:	f04f 33ff 	mov.w	r3, #4294967295
 8010d1c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010d1e:	2301      	movs	r3, #1
 8010d20:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	683a      	ldr	r2, [r7, #0]
 8010d26:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3710      	adds	r7, #16
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
	...

08010d34 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f7ff ff87 	bl	8010c50 <sync_window>
 8010d42:	4603      	mov	r3, r0
 8010d44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010d46:	7bfb      	ldrb	r3, [r7, #15]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d159      	bne.n	8010e00 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	2b03      	cmp	r3, #3
 8010d52:	d149      	bne.n	8010de8 <sync_fs+0xb4>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	791b      	ldrb	r3, [r3, #4]
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d145      	bne.n	8010de8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	899b      	ldrh	r3, [r3, #12]
 8010d66:	461a      	mov	r2, r3
 8010d68:	2100      	movs	r1, #0
 8010d6a:	f7ff fda8 	bl	80108be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	3338      	adds	r3, #56	; 0x38
 8010d72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d76:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7ff fd37 	bl	80107ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	3338      	adds	r3, #56	; 0x38
 8010d84:	4921      	ldr	r1, [pc, #132]	; (8010e0c <sync_fs+0xd8>)
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7ff fd4c 	bl	8010824 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	3338      	adds	r3, #56	; 0x38
 8010d90:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010d94:	491e      	ldr	r1, [pc, #120]	; (8010e10 <sync_fs+0xdc>)
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff fd44 	bl	8010824 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	3338      	adds	r3, #56	; 0x38
 8010da0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	699b      	ldr	r3, [r3, #24]
 8010da8:	4619      	mov	r1, r3
 8010daa:	4610      	mov	r0, r2
 8010dac:	f7ff fd3a 	bl	8010824 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	3338      	adds	r3, #56	; 0x38
 8010db4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	695b      	ldr	r3, [r3, #20]
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	4610      	mov	r0, r2
 8010dc0:	f7ff fd30 	bl	8010824 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc8:	1c5a      	adds	r2, r3, #1
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	7858      	ldrb	r0, [r3, #1]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ddc:	2301      	movs	r3, #1
 8010dde:	f7ff fc8d 	bl	80106fc <disk_write>
			fs->fsi_flag = 0;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	785b      	ldrb	r3, [r3, #1]
 8010dec:	2200      	movs	r2, #0
 8010dee:	2100      	movs	r1, #0
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7ff fca3 	bl	801073c <disk_ioctl>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d001      	beq.n	8010e00 <sync_fs+0xcc>
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	41615252 	.word	0x41615252
 8010e10:	61417272 	.word	0x61417272

08010e14 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	3b02      	subs	r3, #2
 8010e22:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	69db      	ldr	r3, [r3, #28]
 8010e28:	3b02      	subs	r3, #2
 8010e2a:	683a      	ldr	r2, [r7, #0]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d301      	bcc.n	8010e34 <clust2sect+0x20>
 8010e30:	2300      	movs	r3, #0
 8010e32:	e008      	b.n	8010e46 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	895b      	ldrh	r3, [r3, #10]
 8010e38:	461a      	mov	r2, r3
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	fb03 f202 	mul.w	r2, r3, r2
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e44:	4413      	add	r3, r2
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	370c      	adds	r7, #12
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr

08010e52 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010e52:	b580      	push	{r7, lr}
 8010e54:	b086      	sub	sp, #24
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	6078      	str	r0, [r7, #4]
 8010e5a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d904      	bls.n	8010e72 <get_fat+0x20>
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	69db      	ldr	r3, [r3, #28]
 8010e6c:	683a      	ldr	r2, [r7, #0]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d302      	bcc.n	8010e78 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010e72:	2301      	movs	r3, #1
 8010e74:	617b      	str	r3, [r7, #20]
 8010e76:	e0b7      	b.n	8010fe8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010e78:	f04f 33ff 	mov.w	r3, #4294967295
 8010e7c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	2b02      	cmp	r3, #2
 8010e84:	d05a      	beq.n	8010f3c <get_fat+0xea>
 8010e86:	2b03      	cmp	r3, #3
 8010e88:	d07d      	beq.n	8010f86 <get_fat+0x134>
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	f040 80a2 	bne.w	8010fd4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	60fb      	str	r3, [r7, #12]
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	085b      	lsrs	r3, r3, #1
 8010e98:	68fa      	ldr	r2, [r7, #12]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	899b      	ldrh	r3, [r3, #12]
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8010eae:	4413      	add	r3, r2
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	6938      	ldr	r0, [r7, #16]
 8010eb4:	f7ff ff10 	bl	8010cd8 <move_window>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f040 808d 	bne.w	8010fda <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	60fa      	str	r2, [r7, #12]
 8010ec6:	693a      	ldr	r2, [r7, #16]
 8010ec8:	8992      	ldrh	r2, [r2, #12]
 8010eca:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ece:	fb02 f201 	mul.w	r2, r2, r1
 8010ed2:	1a9b      	subs	r3, r3, r2
 8010ed4:	693a      	ldr	r2, [r7, #16]
 8010ed6:	4413      	add	r3, r2
 8010ed8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010edc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	899b      	ldrh	r3, [r3, #12]
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8010eee:	4413      	add	r3, r2
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	6938      	ldr	r0, [r7, #16]
 8010ef4:	f7ff fef0 	bl	8010cd8 <move_window>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d16f      	bne.n	8010fde <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	899b      	ldrh	r3, [r3, #12]
 8010f02:	461a      	mov	r2, r3
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f0a:	fb02 f201 	mul.w	r2, r2, r1
 8010f0e:	1a9b      	subs	r3, r3, r2
 8010f10:	693a      	ldr	r2, [r7, #16]
 8010f12:	4413      	add	r3, r2
 8010f14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010f18:	021b      	lsls	r3, r3, #8
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	4313      	orrs	r3, r2
 8010f20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	f003 0301 	and.w	r3, r3, #1
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d002      	beq.n	8010f32 <get_fat+0xe0>
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	091b      	lsrs	r3, r3, #4
 8010f30:	e002      	b.n	8010f38 <get_fat+0xe6>
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f38:	617b      	str	r3, [r7, #20]
			break;
 8010f3a:	e055      	b.n	8010fe8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	899b      	ldrh	r3, [r3, #12]
 8010f44:	085b      	lsrs	r3, r3, #1
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	4619      	mov	r1, r3
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f50:	4413      	add	r3, r2
 8010f52:	4619      	mov	r1, r3
 8010f54:	6938      	ldr	r0, [r7, #16]
 8010f56:	f7ff febf 	bl	8010cd8 <move_window>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d140      	bne.n	8010fe2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	005b      	lsls	r3, r3, #1
 8010f6a:	693a      	ldr	r2, [r7, #16]
 8010f6c:	8992      	ldrh	r2, [r2, #12]
 8010f6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f72:	fb02 f200 	mul.w	r2, r2, r0
 8010f76:	1a9b      	subs	r3, r3, r2
 8010f78:	440b      	add	r3, r1
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7ff fbfc 	bl	8010778 <ld_word>
 8010f80:	4603      	mov	r3, r0
 8010f82:	617b      	str	r3, [r7, #20]
			break;
 8010f84:	e030      	b.n	8010fe8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	899b      	ldrh	r3, [r3, #12]
 8010f8e:	089b      	lsrs	r3, r3, #2
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	4619      	mov	r1, r3
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f9a:	4413      	add	r3, r2
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	6938      	ldr	r0, [r7, #16]
 8010fa0:	f7ff fe9a 	bl	8010cd8 <move_window>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d11d      	bne.n	8010fe6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	009b      	lsls	r3, r3, #2
 8010fb4:	693a      	ldr	r2, [r7, #16]
 8010fb6:	8992      	ldrh	r2, [r2, #12]
 8010fb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fbc:	fb02 f200 	mul.w	r2, r2, r0
 8010fc0:	1a9b      	subs	r3, r3, r2
 8010fc2:	440b      	add	r3, r1
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fbef 	bl	80107a8 <ld_dword>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010fd0:	617b      	str	r3, [r7, #20]
			break;
 8010fd2:	e009      	b.n	8010fe8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	617b      	str	r3, [r7, #20]
 8010fd8:	e006      	b.n	8010fe8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010fda:	bf00      	nop
 8010fdc:	e004      	b.n	8010fe8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010fde:	bf00      	nop
 8010fe0:	e002      	b.n	8010fe8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010fe2:	bf00      	nop
 8010fe4:	e000      	b.n	8010fe8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010fe6:	bf00      	nop
		}
	}

	return val;
 8010fe8:	697b      	ldr	r3, [r7, #20]
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3718      	adds	r7, #24
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010ff2:	b590      	push	{r4, r7, lr}
 8010ff4:	b089      	sub	sp, #36	; 0x24
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	60f8      	str	r0, [r7, #12]
 8010ffa:	60b9      	str	r1, [r7, #8]
 8010ffc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010ffe:	2302      	movs	r3, #2
 8011000:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	2b01      	cmp	r3, #1
 8011006:	f240 8106 	bls.w	8011216 <put_fat+0x224>
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	69db      	ldr	r3, [r3, #28]
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	429a      	cmp	r2, r3
 8011012:	f080 8100 	bcs.w	8011216 <put_fat+0x224>
		switch (fs->fs_type) {
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	2b02      	cmp	r3, #2
 801101c:	f000 8088 	beq.w	8011130 <put_fat+0x13e>
 8011020:	2b03      	cmp	r3, #3
 8011022:	f000 80b0 	beq.w	8011186 <put_fat+0x194>
 8011026:	2b01      	cmp	r3, #1
 8011028:	f040 80f5 	bne.w	8011216 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	61bb      	str	r3, [r7, #24]
 8011030:	69bb      	ldr	r3, [r7, #24]
 8011032:	085b      	lsrs	r3, r3, #1
 8011034:	69ba      	ldr	r2, [r7, #24]
 8011036:	4413      	add	r3, r2
 8011038:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	899b      	ldrh	r3, [r3, #12]
 8011042:	4619      	mov	r1, r3
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	fbb3 f3f1 	udiv	r3, r3, r1
 801104a:	4413      	add	r3, r2
 801104c:	4619      	mov	r1, r3
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	f7ff fe42 	bl	8010cd8 <move_window>
 8011054:	4603      	mov	r3, r0
 8011056:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011058:	7ffb      	ldrb	r3, [r7, #31]
 801105a:	2b00      	cmp	r3, #0
 801105c:	f040 80d4 	bne.w	8011208 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011066:	69bb      	ldr	r3, [r7, #24]
 8011068:	1c5a      	adds	r2, r3, #1
 801106a:	61ba      	str	r2, [r7, #24]
 801106c:	68fa      	ldr	r2, [r7, #12]
 801106e:	8992      	ldrh	r2, [r2, #12]
 8011070:	fbb3 f0f2 	udiv	r0, r3, r2
 8011074:	fb02 f200 	mul.w	r2, r2, r0
 8011078:	1a9b      	subs	r3, r3, r2
 801107a:	440b      	add	r3, r1
 801107c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	f003 0301 	and.w	r3, r3, #1
 8011084:	2b00      	cmp	r3, #0
 8011086:	d00d      	beq.n	80110a4 <put_fat+0xb2>
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	b25b      	sxtb	r3, r3
 801108e:	f003 030f 	and.w	r3, r3, #15
 8011092:	b25a      	sxtb	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	b2db      	uxtb	r3, r3
 8011098:	011b      	lsls	r3, r3, #4
 801109a:	b25b      	sxtb	r3, r3
 801109c:	4313      	orrs	r3, r2
 801109e:	b25b      	sxtb	r3, r3
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	e001      	b.n	80110a8 <put_fat+0xb6>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	b2db      	uxtb	r3, r3
 80110a8:	697a      	ldr	r2, [r7, #20]
 80110aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2201      	movs	r2, #1
 80110b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	899b      	ldrh	r3, [r3, #12]
 80110ba:	4619      	mov	r1, r3
 80110bc:	69bb      	ldr	r3, [r7, #24]
 80110be:	fbb3 f3f1 	udiv	r3, r3, r1
 80110c2:	4413      	add	r3, r2
 80110c4:	4619      	mov	r1, r3
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f7ff fe06 	bl	8010cd8 <move_window>
 80110cc:	4603      	mov	r3, r0
 80110ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80110d0:	7ffb      	ldrb	r3, [r7, #31]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f040 809a 	bne.w	801120c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	899b      	ldrh	r3, [r3, #12]
 80110e2:	461a      	mov	r2, r3
 80110e4:	69bb      	ldr	r3, [r7, #24]
 80110e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80110ea:	fb02 f200 	mul.w	r2, r2, r0
 80110ee:	1a9b      	subs	r3, r3, r2
 80110f0:	440b      	add	r3, r1
 80110f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	f003 0301 	and.w	r3, r3, #1
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d003      	beq.n	8011106 <put_fat+0x114>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	091b      	lsrs	r3, r3, #4
 8011102:	b2db      	uxtb	r3, r3
 8011104:	e00e      	b.n	8011124 <put_fat+0x132>
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	b25b      	sxtb	r3, r3
 801110c:	f023 030f 	bic.w	r3, r3, #15
 8011110:	b25a      	sxtb	r2, r3
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	0a1b      	lsrs	r3, r3, #8
 8011116:	b25b      	sxtb	r3, r3
 8011118:	f003 030f 	and.w	r3, r3, #15
 801111c:	b25b      	sxtb	r3, r3
 801111e:	4313      	orrs	r3, r2
 8011120:	b25b      	sxtb	r3, r3
 8011122:	b2db      	uxtb	r3, r3
 8011124:	697a      	ldr	r2, [r7, #20]
 8011126:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	2201      	movs	r2, #1
 801112c:	70da      	strb	r2, [r3, #3]
			break;
 801112e:	e072      	b.n	8011216 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	899b      	ldrh	r3, [r3, #12]
 8011138:	085b      	lsrs	r3, r3, #1
 801113a:	b29b      	uxth	r3, r3
 801113c:	4619      	mov	r1, r3
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	fbb3 f3f1 	udiv	r3, r3, r1
 8011144:	4413      	add	r3, r2
 8011146:	4619      	mov	r1, r3
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	f7ff fdc5 	bl	8010cd8 <move_window>
 801114e:	4603      	mov	r3, r0
 8011150:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011152:	7ffb      	ldrb	r3, [r7, #31]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d15b      	bne.n	8011210 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	005b      	lsls	r3, r3, #1
 8011162:	68fa      	ldr	r2, [r7, #12]
 8011164:	8992      	ldrh	r2, [r2, #12]
 8011166:	fbb3 f0f2 	udiv	r0, r3, r2
 801116a:	fb02 f200 	mul.w	r2, r2, r0
 801116e:	1a9b      	subs	r3, r3, r2
 8011170:	440b      	add	r3, r1
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	b292      	uxth	r2, r2
 8011176:	4611      	mov	r1, r2
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff fb38 	bl	80107ee <st_word>
			fs->wflag = 1;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2201      	movs	r2, #1
 8011182:	70da      	strb	r2, [r3, #3]
			break;
 8011184:	e047      	b.n	8011216 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	899b      	ldrh	r3, [r3, #12]
 801118e:	089b      	lsrs	r3, r3, #2
 8011190:	b29b      	uxth	r3, r3
 8011192:	4619      	mov	r1, r3
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	fbb3 f3f1 	udiv	r3, r3, r1
 801119a:	4413      	add	r3, r2
 801119c:	4619      	mov	r1, r3
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f7ff fd9a 	bl	8010cd8 <move_window>
 80111a4:	4603      	mov	r3, r0
 80111a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80111a8:	7ffb      	ldrb	r3, [r7, #31]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d132      	bne.n	8011214 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	009b      	lsls	r3, r3, #2
 80111be:	68fa      	ldr	r2, [r7, #12]
 80111c0:	8992      	ldrh	r2, [r2, #12]
 80111c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80111c6:	fb02 f200 	mul.w	r2, r2, r0
 80111ca:	1a9b      	subs	r3, r3, r2
 80111cc:	440b      	add	r3, r1
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7ff faea 	bl	80107a8 <ld_dword>
 80111d4:	4603      	mov	r3, r0
 80111d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80111da:	4323      	orrs	r3, r4
 80111dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	68fa      	ldr	r2, [r7, #12]
 80111ea:	8992      	ldrh	r2, [r2, #12]
 80111ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80111f0:	fb02 f200 	mul.w	r2, r2, r0
 80111f4:	1a9b      	subs	r3, r3, r2
 80111f6:	440b      	add	r3, r1
 80111f8:	6879      	ldr	r1, [r7, #4]
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ff fb12 	bl	8010824 <st_dword>
			fs->wflag = 1;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2201      	movs	r2, #1
 8011204:	70da      	strb	r2, [r3, #3]
			break;
 8011206:	e006      	b.n	8011216 <put_fat+0x224>
			if (res != FR_OK) break;
 8011208:	bf00      	nop
 801120a:	e004      	b.n	8011216 <put_fat+0x224>
			if (res != FR_OK) break;
 801120c:	bf00      	nop
 801120e:	e002      	b.n	8011216 <put_fat+0x224>
			if (res != FR_OK) break;
 8011210:	bf00      	nop
 8011212:	e000      	b.n	8011216 <put_fat+0x224>
			if (res != FR_OK) break;
 8011214:	bf00      	nop
		}
	}
	return res;
 8011216:	7ffb      	ldrb	r3, [r7, #31]
}
 8011218:	4618      	mov	r0, r3
 801121a:	3724      	adds	r7, #36	; 0x24
 801121c:	46bd      	mov	sp, r7
 801121e:	bd90      	pop	{r4, r7, pc}

08011220 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b088      	sub	sp, #32
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801122c:	2300      	movs	r3, #0
 801122e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d904      	bls.n	8011246 <remove_chain+0x26>
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	69db      	ldr	r3, [r3, #28]
 8011240:	68ba      	ldr	r2, [r7, #8]
 8011242:	429a      	cmp	r2, r3
 8011244:	d301      	bcc.n	801124a <remove_chain+0x2a>
 8011246:	2302      	movs	r3, #2
 8011248:	e04b      	b.n	80112e2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d00c      	beq.n	801126a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011250:	f04f 32ff 	mov.w	r2, #4294967295
 8011254:	6879      	ldr	r1, [r7, #4]
 8011256:	69b8      	ldr	r0, [r7, #24]
 8011258:	f7ff fecb 	bl	8010ff2 <put_fat>
 801125c:	4603      	mov	r3, r0
 801125e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011260:	7ffb      	ldrb	r3, [r7, #31]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d001      	beq.n	801126a <remove_chain+0x4a>
 8011266:	7ffb      	ldrb	r3, [r7, #31]
 8011268:	e03b      	b.n	80112e2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801126a:	68b9      	ldr	r1, [r7, #8]
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	f7ff fdf0 	bl	8010e52 <get_fat>
 8011272:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d031      	beq.n	80112de <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d101      	bne.n	8011284 <remove_chain+0x64>
 8011280:	2302      	movs	r3, #2
 8011282:	e02e      	b.n	80112e2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801128a:	d101      	bne.n	8011290 <remove_chain+0x70>
 801128c:	2301      	movs	r3, #1
 801128e:	e028      	b.n	80112e2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011290:	2200      	movs	r2, #0
 8011292:	68b9      	ldr	r1, [r7, #8]
 8011294:	69b8      	ldr	r0, [r7, #24]
 8011296:	f7ff feac 	bl	8010ff2 <put_fat>
 801129a:	4603      	mov	r3, r0
 801129c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801129e:	7ffb      	ldrb	r3, [r7, #31]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d001      	beq.n	80112a8 <remove_chain+0x88>
 80112a4:	7ffb      	ldrb	r3, [r7, #31]
 80112a6:	e01c      	b.n	80112e2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	699a      	ldr	r2, [r3, #24]
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	69db      	ldr	r3, [r3, #28]
 80112b0:	3b02      	subs	r3, #2
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d20b      	bcs.n	80112ce <remove_chain+0xae>
			fs->free_clst++;
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	699b      	ldr	r3, [r3, #24]
 80112ba:	1c5a      	adds	r2, r3, #1
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80112c0:	69bb      	ldr	r3, [r7, #24]
 80112c2:	791b      	ldrb	r3, [r3, #4]
 80112c4:	f043 0301 	orr.w	r3, r3, #1
 80112c8:	b2da      	uxtb	r2, r3
 80112ca:	69bb      	ldr	r3, [r7, #24]
 80112cc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80112d2:	69bb      	ldr	r3, [r7, #24]
 80112d4:	69db      	ldr	r3, [r3, #28]
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	429a      	cmp	r2, r3
 80112da:	d3c6      	bcc.n	801126a <remove_chain+0x4a>
 80112dc:	e000      	b.n	80112e0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80112de:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80112e0:	2300      	movs	r3, #0
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3720      	adds	r7, #32
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}

080112ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80112ea:	b580      	push	{r7, lr}
 80112ec:	b088      	sub	sp, #32
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
 80112f2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d10d      	bne.n	801131c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	695b      	ldr	r3, [r3, #20]
 8011304:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011306:	69bb      	ldr	r3, [r7, #24]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d004      	beq.n	8011316 <create_chain+0x2c>
 801130c:	693b      	ldr	r3, [r7, #16]
 801130e:	69db      	ldr	r3, [r3, #28]
 8011310:	69ba      	ldr	r2, [r7, #24]
 8011312:	429a      	cmp	r2, r3
 8011314:	d31b      	bcc.n	801134e <create_chain+0x64>
 8011316:	2301      	movs	r3, #1
 8011318:	61bb      	str	r3, [r7, #24]
 801131a:	e018      	b.n	801134e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801131c:	6839      	ldr	r1, [r7, #0]
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7ff fd97 	bl	8010e52 <get_fat>
 8011324:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2b01      	cmp	r3, #1
 801132a:	d801      	bhi.n	8011330 <create_chain+0x46>
 801132c:	2301      	movs	r3, #1
 801132e:	e070      	b.n	8011412 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011336:	d101      	bne.n	801133c <create_chain+0x52>
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	e06a      	b.n	8011412 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	69db      	ldr	r3, [r3, #28]
 8011340:	68fa      	ldr	r2, [r7, #12]
 8011342:	429a      	cmp	r2, r3
 8011344:	d201      	bcs.n	801134a <create_chain+0x60>
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	e063      	b.n	8011412 <create_chain+0x128>
		scl = clst;
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	3301      	adds	r3, #1
 8011356:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	69db      	ldr	r3, [r3, #28]
 801135c:	69fa      	ldr	r2, [r7, #28]
 801135e:	429a      	cmp	r2, r3
 8011360:	d307      	bcc.n	8011372 <create_chain+0x88>
				ncl = 2;
 8011362:	2302      	movs	r3, #2
 8011364:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011366:	69fa      	ldr	r2, [r7, #28]
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	429a      	cmp	r2, r3
 801136c:	d901      	bls.n	8011372 <create_chain+0x88>
 801136e:	2300      	movs	r3, #0
 8011370:	e04f      	b.n	8011412 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011372:	69f9      	ldr	r1, [r7, #28]
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f7ff fd6c 	bl	8010e52 <get_fat>
 801137a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d00e      	beq.n	80113a0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2b01      	cmp	r3, #1
 8011386:	d003      	beq.n	8011390 <create_chain+0xa6>
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801138e:	d101      	bne.n	8011394 <create_chain+0xaa>
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	e03e      	b.n	8011412 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011394:	69fa      	ldr	r2, [r7, #28]
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	429a      	cmp	r2, r3
 801139a:	d1da      	bne.n	8011352 <create_chain+0x68>
 801139c:	2300      	movs	r3, #0
 801139e:	e038      	b.n	8011412 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80113a0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80113a2:	f04f 32ff 	mov.w	r2, #4294967295
 80113a6:	69f9      	ldr	r1, [r7, #28]
 80113a8:	6938      	ldr	r0, [r7, #16]
 80113aa:	f7ff fe22 	bl	8010ff2 <put_fat>
 80113ae:	4603      	mov	r3, r0
 80113b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80113b2:	7dfb      	ldrb	r3, [r7, #23]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d109      	bne.n	80113cc <create_chain+0xe2>
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d006      	beq.n	80113cc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80113be:	69fa      	ldr	r2, [r7, #28]
 80113c0:	6839      	ldr	r1, [r7, #0]
 80113c2:	6938      	ldr	r0, [r7, #16]
 80113c4:	f7ff fe15 	bl	8010ff2 <put_fat>
 80113c8:	4603      	mov	r3, r0
 80113ca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80113cc:	7dfb      	ldrb	r3, [r7, #23]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d116      	bne.n	8011400 <create_chain+0x116>
		fs->last_clst = ncl;
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	69fa      	ldr	r2, [r7, #28]
 80113d6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	699a      	ldr	r2, [r3, #24]
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	69db      	ldr	r3, [r3, #28]
 80113e0:	3b02      	subs	r3, #2
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d804      	bhi.n	80113f0 <create_chain+0x106>
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	699b      	ldr	r3, [r3, #24]
 80113ea:	1e5a      	subs	r2, r3, #1
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	791b      	ldrb	r3, [r3, #4]
 80113f4:	f043 0301 	orr.w	r3, r3, #1
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	711a      	strb	r2, [r3, #4]
 80113fe:	e007      	b.n	8011410 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011400:	7dfb      	ldrb	r3, [r7, #23]
 8011402:	2b01      	cmp	r3, #1
 8011404:	d102      	bne.n	801140c <create_chain+0x122>
 8011406:	f04f 33ff 	mov.w	r3, #4294967295
 801140a:	e000      	b.n	801140e <create_chain+0x124>
 801140c:	2301      	movs	r3, #1
 801140e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011410:	69fb      	ldr	r3, [r7, #28]
}
 8011412:	4618      	mov	r0, r3
 8011414:	3720      	adds	r7, #32
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}

0801141a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801141a:	b480      	push	{r7}
 801141c:	b087      	sub	sp, #28
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
 8011422:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142e:	3304      	adds	r3, #4
 8011430:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	899b      	ldrh	r3, [r3, #12]
 8011436:	461a      	mov	r2, r3
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	fbb3 f3f2 	udiv	r3, r3, r2
 801143e:	68fa      	ldr	r2, [r7, #12]
 8011440:	8952      	ldrh	r2, [r2, #10]
 8011442:	fbb3 f3f2 	udiv	r3, r3, r2
 8011446:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	1d1a      	adds	r2, r3, #4
 801144c:	613a      	str	r2, [r7, #16]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d101      	bne.n	801145c <clmt_clust+0x42>
 8011458:	2300      	movs	r3, #0
 801145a:	e010      	b.n	801147e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801145c:	697a      	ldr	r2, [r7, #20]
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	429a      	cmp	r2, r3
 8011462:	d307      	bcc.n	8011474 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011464:	697a      	ldr	r2, [r7, #20]
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	1ad3      	subs	r3, r2, r3
 801146a:	617b      	str	r3, [r7, #20]
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	3304      	adds	r3, #4
 8011470:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011472:	e7e9      	b.n	8011448 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011474:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	4413      	add	r3, r2
}
 801147e:	4618      	mov	r0, r3
 8011480:	371c      	adds	r7, #28
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b086      	sub	sp, #24
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
 8011492:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80114a0:	d204      	bcs.n	80114ac <dir_sdi+0x22>
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	f003 031f 	and.w	r3, r3, #31
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d001      	beq.n	80114b0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80114ac:	2302      	movs	r3, #2
 80114ae:	e071      	b.n	8011594 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	683a      	ldr	r2, [r7, #0]
 80114b4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	689b      	ldr	r3, [r3, #8]
 80114ba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d106      	bne.n	80114d0 <dir_sdi+0x46>
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	d902      	bls.n	80114d0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d10c      	bne.n	80114f0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	095b      	lsrs	r3, r3, #5
 80114da:	693a      	ldr	r2, [r7, #16]
 80114dc:	8912      	ldrh	r2, [r2, #8]
 80114de:	4293      	cmp	r3, r2
 80114e0:	d301      	bcc.n	80114e6 <dir_sdi+0x5c>
 80114e2:	2302      	movs	r3, #2
 80114e4:	e056      	b.n	8011594 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	61da      	str	r2, [r3, #28]
 80114ee:	e02d      	b.n	801154c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	895b      	ldrh	r3, [r3, #10]
 80114f4:	461a      	mov	r2, r3
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	899b      	ldrh	r3, [r3, #12]
 80114fa:	fb03 f302 	mul.w	r3, r3, r2
 80114fe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011500:	e019      	b.n	8011536 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6979      	ldr	r1, [r7, #20]
 8011506:	4618      	mov	r0, r3
 8011508:	f7ff fca3 	bl	8010e52 <get_fat>
 801150c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011514:	d101      	bne.n	801151a <dir_sdi+0x90>
 8011516:	2301      	movs	r3, #1
 8011518:	e03c      	b.n	8011594 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	2b01      	cmp	r3, #1
 801151e:	d904      	bls.n	801152a <dir_sdi+0xa0>
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	69db      	ldr	r3, [r3, #28]
 8011524:	697a      	ldr	r2, [r7, #20]
 8011526:	429a      	cmp	r2, r3
 8011528:	d301      	bcc.n	801152e <dir_sdi+0xa4>
 801152a:	2302      	movs	r3, #2
 801152c:	e032      	b.n	8011594 <dir_sdi+0x10a>
			ofs -= csz;
 801152e:	683a      	ldr	r2, [r7, #0]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011536:	683a      	ldr	r2, [r7, #0]
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	429a      	cmp	r2, r3
 801153c:	d2e1      	bcs.n	8011502 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801153e:	6979      	ldr	r1, [r7, #20]
 8011540:	6938      	ldr	r0, [r7, #16]
 8011542:	f7ff fc67 	bl	8010e14 <clust2sect>
 8011546:	4602      	mov	r2, r0
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	697a      	ldr	r2, [r7, #20]
 8011550:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	69db      	ldr	r3, [r3, #28]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d101      	bne.n	801155e <dir_sdi+0xd4>
 801155a:	2302      	movs	r3, #2
 801155c:	e01a      	b.n	8011594 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	69da      	ldr	r2, [r3, #28]
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	899b      	ldrh	r3, [r3, #12]
 8011566:	4619      	mov	r1, r3
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	fbb3 f3f1 	udiv	r3, r3, r1
 801156e:	441a      	add	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	899b      	ldrh	r3, [r3, #12]
 801157e:	461a      	mov	r2, r3
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	fbb3 f0f2 	udiv	r0, r3, r2
 8011586:	fb02 f200 	mul.w	r2, r2, r0
 801158a:	1a9b      	subs	r3, r3, r2
 801158c:	18ca      	adds	r2, r1, r3
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011592:	2300      	movs	r3, #0
}
 8011594:	4618      	mov	r0, r3
 8011596:	3718      	adds	r7, #24
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b086      	sub	sp, #24
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	695b      	ldr	r3, [r3, #20]
 80115b0:	3320      	adds	r3, #32
 80115b2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	69db      	ldr	r3, [r3, #28]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d003      	beq.n	80115c4 <dir_next+0x28>
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80115c2:	d301      	bcc.n	80115c8 <dir_next+0x2c>
 80115c4:	2304      	movs	r3, #4
 80115c6:	e0bb      	b.n	8011740 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	899b      	ldrh	r3, [r3, #12]
 80115cc:	461a      	mov	r2, r3
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80115d4:	fb02 f201 	mul.w	r2, r2, r1
 80115d8:	1a9b      	subs	r3, r3, r2
 80115da:	2b00      	cmp	r3, #0
 80115dc:	f040 809d 	bne.w	801171a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	69db      	ldr	r3, [r3, #28]
 80115e4:	1c5a      	adds	r2, r3, #1
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	699b      	ldr	r3, [r3, #24]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d10b      	bne.n	801160a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	095b      	lsrs	r3, r3, #5
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	8912      	ldrh	r2, [r2, #8]
 80115fa:	4293      	cmp	r3, r2
 80115fc:	f0c0 808d 	bcc.w	801171a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2200      	movs	r2, #0
 8011604:	61da      	str	r2, [r3, #28]
 8011606:	2304      	movs	r3, #4
 8011608:	e09a      	b.n	8011740 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	899b      	ldrh	r3, [r3, #12]
 801160e:	461a      	mov	r2, r3
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	fbb3 f3f2 	udiv	r3, r3, r2
 8011616:	68fa      	ldr	r2, [r7, #12]
 8011618:	8952      	ldrh	r2, [r2, #10]
 801161a:	3a01      	subs	r2, #1
 801161c:	4013      	ands	r3, r2
 801161e:	2b00      	cmp	r3, #0
 8011620:	d17b      	bne.n	801171a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	699b      	ldr	r3, [r3, #24]
 8011628:	4619      	mov	r1, r3
 801162a:	4610      	mov	r0, r2
 801162c:	f7ff fc11 	bl	8010e52 <get_fat>
 8011630:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	2b01      	cmp	r3, #1
 8011636:	d801      	bhi.n	801163c <dir_next+0xa0>
 8011638:	2302      	movs	r3, #2
 801163a:	e081      	b.n	8011740 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011642:	d101      	bne.n	8011648 <dir_next+0xac>
 8011644:	2301      	movs	r3, #1
 8011646:	e07b      	b.n	8011740 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	69db      	ldr	r3, [r3, #28]
 801164c:	697a      	ldr	r2, [r7, #20]
 801164e:	429a      	cmp	r2, r3
 8011650:	d359      	bcc.n	8011706 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d104      	bne.n	8011662 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2200      	movs	r2, #0
 801165c:	61da      	str	r2, [r3, #28]
 801165e:	2304      	movs	r3, #4
 8011660:	e06e      	b.n	8011740 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	699b      	ldr	r3, [r3, #24]
 8011668:	4619      	mov	r1, r3
 801166a:	4610      	mov	r0, r2
 801166c:	f7ff fe3d 	bl	80112ea <create_chain>
 8011670:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d101      	bne.n	801167c <dir_next+0xe0>
 8011678:	2307      	movs	r3, #7
 801167a:	e061      	b.n	8011740 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	2b01      	cmp	r3, #1
 8011680:	d101      	bne.n	8011686 <dir_next+0xea>
 8011682:	2302      	movs	r3, #2
 8011684:	e05c      	b.n	8011740 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801168c:	d101      	bne.n	8011692 <dir_next+0xf6>
 801168e:	2301      	movs	r3, #1
 8011690:	e056      	b.n	8011740 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f7ff fadc 	bl	8010c50 <sync_window>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	d001      	beq.n	80116a2 <dir_next+0x106>
 801169e:	2301      	movs	r3, #1
 80116a0:	e04e      	b.n	8011740 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	899b      	ldrh	r3, [r3, #12]
 80116ac:	461a      	mov	r2, r3
 80116ae:	2100      	movs	r1, #0
 80116b0:	f7ff f905 	bl	80108be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80116b4:	2300      	movs	r3, #0
 80116b6:	613b      	str	r3, [r7, #16]
 80116b8:	6979      	ldr	r1, [r7, #20]
 80116ba:	68f8      	ldr	r0, [r7, #12]
 80116bc:	f7ff fbaa 	bl	8010e14 <clust2sect>
 80116c0:	4602      	mov	r2, r0
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	635a      	str	r2, [r3, #52]	; 0x34
 80116c6:	e012      	b.n	80116ee <dir_next+0x152>
						fs->wflag = 1;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2201      	movs	r2, #1
 80116cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	f7ff fabe 	bl	8010c50 <sync_window>
 80116d4:	4603      	mov	r3, r0
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d001      	beq.n	80116de <dir_next+0x142>
 80116da:	2301      	movs	r3, #1
 80116dc:	e030      	b.n	8011740 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	3301      	adds	r3, #1
 80116e2:	613b      	str	r3, [r7, #16]
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116e8:	1c5a      	adds	r2, r3, #1
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	635a      	str	r2, [r3, #52]	; 0x34
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	895b      	ldrh	r3, [r3, #10]
 80116f2:	461a      	mov	r2, r3
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d3e6      	bcc.n	80116c8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80116fe:	693b      	ldr	r3, [r7, #16]
 8011700:	1ad2      	subs	r2, r2, r3
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	697a      	ldr	r2, [r7, #20]
 801170a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801170c:	6979      	ldr	r1, [r7, #20]
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	f7ff fb80 	bl	8010e14 <clust2sect>
 8011714:	4602      	mov	r2, r0
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	68ba      	ldr	r2, [r7, #8]
 801171e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	899b      	ldrh	r3, [r3, #12]
 801172a:	461a      	mov	r2, r3
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011732:	fb02 f200 	mul.w	r2, r2, r0
 8011736:	1a9b      	subs	r3, r3, r2
 8011738:	18ca      	adds	r2, r1, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801173e:	2300      	movs	r3, #0
}
 8011740:	4618      	mov	r0, r3
 8011742:	3718      	adds	r7, #24
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011758:	2100      	movs	r1, #0
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f7ff fe95 	bl	801148a <dir_sdi>
 8011760:	4603      	mov	r3, r0
 8011762:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011764:	7dfb      	ldrb	r3, [r7, #23]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d12b      	bne.n	80117c2 <dir_alloc+0x7a>
		n = 0;
 801176a:	2300      	movs	r3, #0
 801176c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	69db      	ldr	r3, [r3, #28]
 8011772:	4619      	mov	r1, r3
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f7ff faaf 	bl	8010cd8 <move_window>
 801177a:	4603      	mov	r3, r0
 801177c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801177e:	7dfb      	ldrb	r3, [r7, #23]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d11d      	bne.n	80117c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6a1b      	ldr	r3, [r3, #32]
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	2be5      	cmp	r3, #229	; 0xe5
 801178c:	d004      	beq.n	8011798 <dir_alloc+0x50>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a1b      	ldr	r3, [r3, #32]
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d107      	bne.n	80117a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	3301      	adds	r3, #1
 801179c:	613b      	str	r3, [r7, #16]
 801179e:	693a      	ldr	r2, [r7, #16]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d102      	bne.n	80117ac <dir_alloc+0x64>
 80117a6:	e00c      	b.n	80117c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80117a8:	2300      	movs	r3, #0
 80117aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80117ac:	2101      	movs	r1, #1
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7ff fef4 	bl	801159c <dir_next>
 80117b4:	4603      	mov	r3, r0
 80117b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80117b8:	7dfb      	ldrb	r3, [r7, #23]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d0d7      	beq.n	801176e <dir_alloc+0x26>
 80117be:	e000      	b.n	80117c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80117c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80117c2:	7dfb      	ldrb	r3, [r7, #23]
 80117c4:	2b04      	cmp	r3, #4
 80117c6:	d101      	bne.n	80117cc <dir_alloc+0x84>
 80117c8:	2307      	movs	r3, #7
 80117ca:	75fb      	strb	r3, [r7, #23]
	return res;
 80117cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3718      	adds	r7, #24
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}

080117d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80117d6:	b580      	push	{r7, lr}
 80117d8:	b084      	sub	sp, #16
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
 80117de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	331a      	adds	r3, #26
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fe ffc7 	bl	8010778 <ld_word>
 80117ea:	4603      	mov	r3, r0
 80117ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	2b03      	cmp	r3, #3
 80117f4:	d109      	bne.n	801180a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	3314      	adds	r3, #20
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fe ffbc 	bl	8010778 <ld_word>
 8011800:	4603      	mov	r3, r0
 8011802:	041b      	lsls	r3, r3, #16
 8011804:	68fa      	ldr	r2, [r7, #12]
 8011806:	4313      	orrs	r3, r2
 8011808:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801180a:	68fb      	ldr	r3, [r7, #12]
}
 801180c:	4618      	mov	r0, r3
 801180e:	3710      	adds	r7, #16
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	331a      	adds	r3, #26
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	b292      	uxth	r2, r2
 8011828:	4611      	mov	r1, r2
 801182a:	4618      	mov	r0, r3
 801182c:	f7fe ffdf 	bl	80107ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	2b03      	cmp	r3, #3
 8011836:	d109      	bne.n	801184c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	f103 0214 	add.w	r2, r3, #20
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	0c1b      	lsrs	r3, r3, #16
 8011842:	b29b      	uxth	r3, r3
 8011844:	4619      	mov	r1, r3
 8011846:	4610      	mov	r0, r2
 8011848:	f7fe ffd1 	bl	80107ee <st_word>
	}
}
 801184c:	bf00      	nop
 801184e:	3710      	adds	r7, #16
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011854:	b590      	push	{r4, r7, lr}
 8011856:	b087      	sub	sp, #28
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	331a      	adds	r3, #26
 8011862:	4618      	mov	r0, r3
 8011864:	f7fe ff88 	bl	8010778 <ld_word>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d001      	beq.n	8011872 <cmp_lfn+0x1e>
 801186e:	2300      	movs	r3, #0
 8011870:	e059      	b.n	8011926 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801187a:	1e5a      	subs	r2, r3, #1
 801187c:	4613      	mov	r3, r2
 801187e:	005b      	lsls	r3, r3, #1
 8011880:	4413      	add	r3, r2
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	4413      	add	r3, r2
 8011886:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011888:	2301      	movs	r3, #1
 801188a:	81fb      	strh	r3, [r7, #14]
 801188c:	2300      	movs	r3, #0
 801188e:	613b      	str	r3, [r7, #16]
 8011890:	e033      	b.n	80118fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011892:	4a27      	ldr	r2, [pc, #156]	; (8011930 <cmp_lfn+0xdc>)
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	4413      	add	r3, r2
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	461a      	mov	r2, r3
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	4413      	add	r3, r2
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fe ff69 	bl	8010778 <ld_word>
 80118a6:	4603      	mov	r3, r0
 80118a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80118aa:	89fb      	ldrh	r3, [r7, #14]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d01a      	beq.n	80118e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	2bfe      	cmp	r3, #254	; 0xfe
 80118b4:	d812      	bhi.n	80118dc <cmp_lfn+0x88>
 80118b6:	89bb      	ldrh	r3, [r7, #12]
 80118b8:	4618      	mov	r0, r3
 80118ba:	f002 fdd9 	bl	8014470 <ff_wtoupper>
 80118be:	4603      	mov	r3, r0
 80118c0:	461c      	mov	r4, r3
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	1c5a      	adds	r2, r3, #1
 80118c6:	617a      	str	r2, [r7, #20]
 80118c8:	005b      	lsls	r3, r3, #1
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	4413      	add	r3, r2
 80118ce:	881b      	ldrh	r3, [r3, #0]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f002 fdcd 	bl	8014470 <ff_wtoupper>
 80118d6:	4603      	mov	r3, r0
 80118d8:	429c      	cmp	r4, r3
 80118da:	d001      	beq.n	80118e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80118dc:	2300      	movs	r3, #0
 80118de:	e022      	b.n	8011926 <cmp_lfn+0xd2>
			}
			wc = uc;
 80118e0:	89bb      	ldrh	r3, [r7, #12]
 80118e2:	81fb      	strh	r3, [r7, #14]
 80118e4:	e006      	b.n	80118f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80118e6:	89bb      	ldrh	r3, [r7, #12]
 80118e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d001      	beq.n	80118f4 <cmp_lfn+0xa0>
 80118f0:	2300      	movs	r3, #0
 80118f2:	e018      	b.n	8011926 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	3301      	adds	r3, #1
 80118f8:	613b      	str	r3, [r7, #16]
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	2b0c      	cmp	r3, #12
 80118fe:	d9c8      	bls.n	8011892 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00b      	beq.n	8011924 <cmp_lfn+0xd0>
 801190c:	89fb      	ldrh	r3, [r7, #14]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d008      	beq.n	8011924 <cmp_lfn+0xd0>
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	005b      	lsls	r3, r3, #1
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	4413      	add	r3, r2
 801191a:	881b      	ldrh	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d001      	beq.n	8011924 <cmp_lfn+0xd0>
 8011920:	2300      	movs	r3, #0
 8011922:	e000      	b.n	8011926 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011924:	2301      	movs	r3, #1
}
 8011926:	4618      	mov	r0, r3
 8011928:	371c      	adds	r7, #28
 801192a:	46bd      	mov	sp, r7
 801192c:	bd90      	pop	{r4, r7, pc}
 801192e:	bf00      	nop
 8011930:	080530d8 	.word	0x080530d8

08011934 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b086      	sub	sp, #24
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	331a      	adds	r3, #26
 8011942:	4618      	mov	r0, r3
 8011944:	f7fe ff18 	bl	8010778 <ld_word>
 8011948:	4603      	mov	r3, r0
 801194a:	2b00      	cmp	r3, #0
 801194c:	d001      	beq.n	8011952 <pick_lfn+0x1e>
 801194e:	2300      	movs	r3, #0
 8011950:	e04d      	b.n	80119ee <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801195a:	1e5a      	subs	r2, r3, #1
 801195c:	4613      	mov	r3, r2
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	4413      	add	r3, r2
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	4413      	add	r3, r2
 8011966:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011968:	2301      	movs	r3, #1
 801196a:	81fb      	strh	r3, [r7, #14]
 801196c:	2300      	movs	r3, #0
 801196e:	613b      	str	r3, [r7, #16]
 8011970:	e028      	b.n	80119c4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011972:	4a21      	ldr	r2, [pc, #132]	; (80119f8 <pick_lfn+0xc4>)
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	4413      	add	r3, r2
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	461a      	mov	r2, r3
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	4413      	add	r3, r2
 8011980:	4618      	mov	r0, r3
 8011982:	f7fe fef9 	bl	8010778 <ld_word>
 8011986:	4603      	mov	r3, r0
 8011988:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801198a:	89fb      	ldrh	r3, [r7, #14]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d00f      	beq.n	80119b0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	2bfe      	cmp	r3, #254	; 0xfe
 8011994:	d901      	bls.n	801199a <pick_lfn+0x66>
 8011996:	2300      	movs	r3, #0
 8011998:	e029      	b.n	80119ee <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801199a:	89bb      	ldrh	r3, [r7, #12]
 801199c:	81fb      	strh	r3, [r7, #14]
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	1c5a      	adds	r2, r3, #1
 80119a2:	617a      	str	r2, [r7, #20]
 80119a4:	005b      	lsls	r3, r3, #1
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	4413      	add	r3, r2
 80119aa:	89fa      	ldrh	r2, [r7, #14]
 80119ac:	801a      	strh	r2, [r3, #0]
 80119ae:	e006      	b.n	80119be <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80119b0:	89bb      	ldrh	r3, [r7, #12]
 80119b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d001      	beq.n	80119be <pick_lfn+0x8a>
 80119ba:	2300      	movs	r3, #0
 80119bc:	e017      	b.n	80119ee <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	3301      	adds	r3, #1
 80119c2:	613b      	str	r3, [r7, #16]
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	2b0c      	cmp	r3, #12
 80119c8:	d9d3      	bls.n	8011972 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	781b      	ldrb	r3, [r3, #0]
 80119ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00a      	beq.n	80119ec <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	2bfe      	cmp	r3, #254	; 0xfe
 80119da:	d901      	bls.n	80119e0 <pick_lfn+0xac>
 80119dc:	2300      	movs	r3, #0
 80119de:	e006      	b.n	80119ee <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	005b      	lsls	r3, r3, #1
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	4413      	add	r3, r2
 80119e8:	2200      	movs	r2, #0
 80119ea:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80119ec:	2301      	movs	r3, #1
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3718      	adds	r7, #24
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	080530d8 	.word	0x080530d8

080119fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b088      	sub	sp, #32
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	4611      	mov	r1, r2
 8011a08:	461a      	mov	r2, r3
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	71fb      	strb	r3, [r7, #7]
 8011a0e:	4613      	mov	r3, r2
 8011a10:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	330d      	adds	r3, #13
 8011a16:	79ba      	ldrb	r2, [r7, #6]
 8011a18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	330b      	adds	r3, #11
 8011a1e:	220f      	movs	r2, #15
 8011a20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	330c      	adds	r3, #12
 8011a26:	2200      	movs	r2, #0
 8011a28:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	331a      	adds	r3, #26
 8011a2e:	2100      	movs	r1, #0
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fe fedc 	bl	80107ee <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011a36:	79fb      	ldrb	r3, [r7, #7]
 8011a38:	1e5a      	subs	r2, r3, #1
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	005b      	lsls	r3, r3, #1
 8011a3e:	4413      	add	r3, r2
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4413      	add	r3, r2
 8011a44:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011a46:	2300      	movs	r3, #0
 8011a48:	82fb      	strh	r3, [r7, #22]
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011a4e:	8afb      	ldrh	r3, [r7, #22]
 8011a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a54:	4293      	cmp	r3, r2
 8011a56:	d007      	beq.n	8011a68 <put_lfn+0x6c>
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	61fa      	str	r2, [r7, #28]
 8011a5e:	005b      	lsls	r3, r3, #1
 8011a60:	68fa      	ldr	r2, [r7, #12]
 8011a62:	4413      	add	r3, r2
 8011a64:	881b      	ldrh	r3, [r3, #0]
 8011a66:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011a68:	4a17      	ldr	r2, [pc, #92]	; (8011ac8 <put_lfn+0xcc>)
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	461a      	mov	r2, r3
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	4413      	add	r3, r2
 8011a76:	8afa      	ldrh	r2, [r7, #22]
 8011a78:	4611      	mov	r1, r2
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fe feb7 	bl	80107ee <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011a80:	8afb      	ldrh	r3, [r7, #22]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d102      	bne.n	8011a8c <put_lfn+0x90>
 8011a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a8a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011a8c:	69bb      	ldr	r3, [r7, #24]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	61bb      	str	r3, [r7, #24]
 8011a92:	69bb      	ldr	r3, [r7, #24]
 8011a94:	2b0c      	cmp	r3, #12
 8011a96:	d9da      	bls.n	8011a4e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011a98:	8afb      	ldrh	r3, [r7, #22]
 8011a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	d006      	beq.n	8011ab0 <put_lfn+0xb4>
 8011aa2:	69fb      	ldr	r3, [r7, #28]
 8011aa4:	005b      	lsls	r3, r3, #1
 8011aa6:	68fa      	ldr	r2, [r7, #12]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	881b      	ldrh	r3, [r3, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d103      	bne.n	8011ab8 <put_lfn+0xbc>
 8011ab0:	79fb      	ldrb	r3, [r7, #7]
 8011ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ab6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	79fa      	ldrb	r2, [r7, #7]
 8011abc:	701a      	strb	r2, [r3, #0]
}
 8011abe:	bf00      	nop
 8011ac0:	3720      	adds	r7, #32
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	080530d8 	.word	0x080530d8

08011acc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b08c      	sub	sp, #48	; 0x30
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	607a      	str	r2, [r7, #4]
 8011ad8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011ada:	220b      	movs	r2, #11
 8011adc:	68b9      	ldr	r1, [r7, #8]
 8011ade:	68f8      	ldr	r0, [r7, #12]
 8011ae0:	f7fe fecc 	bl	801087c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	2b05      	cmp	r3, #5
 8011ae8:	d92b      	bls.n	8011b42 <gen_numname+0x76>
		sr = seq;
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011aee:	e022      	b.n	8011b36 <gen_numname+0x6a>
			wc = *lfn++;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	1c9a      	adds	r2, r3, #2
 8011af4:	607a      	str	r2, [r7, #4]
 8011af6:	881b      	ldrh	r3, [r3, #0]
 8011af8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011afa:	2300      	movs	r3, #0
 8011afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8011afe:	e017      	b.n	8011b30 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	005a      	lsls	r2, r3, #1
 8011b04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b06:	f003 0301 	and.w	r3, r3, #1
 8011b0a:	4413      	add	r3, r2
 8011b0c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b10:	085b      	lsrs	r3, r3, #1
 8011b12:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d005      	beq.n	8011b2a <gen_numname+0x5e>
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8011b24:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8011b28:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b32:	2b0f      	cmp	r3, #15
 8011b34:	d9e4      	bls.n	8011b00 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	881b      	ldrh	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d1d8      	bne.n	8011af0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011b3e:	69fb      	ldr	r3, [r7, #28]
 8011b40:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011b42:	2307      	movs	r3, #7
 8011b44:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	f003 030f 	and.w	r3, r3, #15
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	3330      	adds	r3, #48	; 0x30
 8011b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b5a:	2b39      	cmp	r3, #57	; 0x39
 8011b5c:	d904      	bls.n	8011b68 <gen_numname+0x9c>
 8011b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b62:	3307      	adds	r3, #7
 8011b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6a:	1e5a      	subs	r2, r3, #1
 8011b6c:	62ba      	str	r2, [r7, #40]	; 0x28
 8011b6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b72:	4413      	add	r3, r2
 8011b74:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011b78:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	091b      	lsrs	r3, r3, #4
 8011b80:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d1de      	bne.n	8011b46 <gen_numname+0x7a>
	ns[i] = '~';
 8011b88:	f107 0214 	add.w	r2, r7, #20
 8011b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8e:	4413      	add	r3, r2
 8011b90:	227e      	movs	r2, #126	; 0x7e
 8011b92:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011b94:	2300      	movs	r3, #0
 8011b96:	627b      	str	r3, [r7, #36]	; 0x24
 8011b98:	e002      	b.n	8011ba0 <gen_numname+0xd4>
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8011ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d205      	bcs.n	8011bb4 <gen_numname+0xe8>
 8011ba8:	68fa      	ldr	r2, [r7, #12]
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	4413      	add	r3, r2
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	2b20      	cmp	r3, #32
 8011bb2:	d1f2      	bne.n	8011b9a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb6:	2b07      	cmp	r3, #7
 8011bb8:	d808      	bhi.n	8011bcc <gen_numname+0x100>
 8011bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bbc:	1c5a      	adds	r2, r3, #1
 8011bbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8011bc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bc4:	4413      	add	r3, r2
 8011bc6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011bca:	e000      	b.n	8011bce <gen_numname+0x102>
 8011bcc:	2120      	movs	r1, #32
 8011bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd0:	1c5a      	adds	r2, r3, #1
 8011bd2:	627a      	str	r2, [r7, #36]	; 0x24
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	460a      	mov	r2, r1
 8011bda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bde:	2b07      	cmp	r3, #7
 8011be0:	d9e8      	bls.n	8011bb4 <gen_numname+0xe8>
}
 8011be2:	bf00      	nop
 8011be4:	3730      	adds	r7, #48	; 0x30
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011bea:	b480      	push	{r7}
 8011bec:	b085      	sub	sp, #20
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011bf6:	230b      	movs	r3, #11
 8011bf8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011bfa:	7bfb      	ldrb	r3, [r7, #15]
 8011bfc:	b2da      	uxtb	r2, r3
 8011bfe:	0852      	lsrs	r2, r2, #1
 8011c00:	01db      	lsls	r3, r3, #7
 8011c02:	4313      	orrs	r3, r2
 8011c04:	b2da      	uxtb	r2, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	1c59      	adds	r1, r3, #1
 8011c0a:	6079      	str	r1, [r7, #4]
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	4413      	add	r3, r2
 8011c10:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	3b01      	subs	r3, #1
 8011c16:	60bb      	str	r3, [r7, #8]
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1ed      	bne.n	8011bfa <sum_sfn+0x10>
	return sum;
 8011c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3714      	adds	r7, #20
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr

08011c2c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b086      	sub	sp, #24
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011c36:	2304      	movs	r3, #4
 8011c38:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011c40:	23ff      	movs	r3, #255	; 0xff
 8011c42:	757b      	strb	r3, [r7, #21]
 8011c44:	23ff      	movs	r3, #255	; 0xff
 8011c46:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8011c48:	e081      	b.n	8011d4e <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	69db      	ldr	r3, [r3, #28]
 8011c4e:	4619      	mov	r1, r3
 8011c50:	6938      	ldr	r0, [r7, #16]
 8011c52:	f7ff f841 	bl	8010cd8 <move_window>
 8011c56:	4603      	mov	r3, r0
 8011c58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011c5a:	7dfb      	ldrb	r3, [r7, #23]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d17c      	bne.n	8011d5a <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6a1b      	ldr	r3, [r3, #32]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011c68:	7dbb      	ldrb	r3, [r7, #22]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d102      	bne.n	8011c74 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011c6e:	2304      	movs	r3, #4
 8011c70:	75fb      	strb	r3, [r7, #23]
 8011c72:	e077      	b.n	8011d64 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6a1b      	ldr	r3, [r3, #32]
 8011c78:	330b      	adds	r3, #11
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c80:	73fb      	strb	r3, [r7, #15]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	7bfa      	ldrb	r2, [r7, #15]
 8011c86:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011c88:	7dbb      	ldrb	r3, [r7, #22]
 8011c8a:	2be5      	cmp	r3, #229	; 0xe5
 8011c8c:	d00e      	beq.n	8011cac <dir_read+0x80>
 8011c8e:	7dbb      	ldrb	r3, [r7, #22]
 8011c90:	2b2e      	cmp	r3, #46	; 0x2e
 8011c92:	d00b      	beq.n	8011cac <dir_read+0x80>
 8011c94:	7bfb      	ldrb	r3, [r7, #15]
 8011c96:	f023 0320 	bic.w	r3, r3, #32
 8011c9a:	2b08      	cmp	r3, #8
 8011c9c:	bf0c      	ite	eq
 8011c9e:	2301      	moveq	r3, #1
 8011ca0:	2300      	movne	r3, #0
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	d002      	beq.n	8011cb2 <dir_read+0x86>
				ord = 0xFF;
 8011cac:	23ff      	movs	r3, #255	; 0xff
 8011cae:	757b      	strb	r3, [r7, #21]
 8011cb0:	e044      	b.n	8011d3c <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011cb2:	7bfb      	ldrb	r3, [r7, #15]
 8011cb4:	2b0f      	cmp	r3, #15
 8011cb6:	d12f      	bne.n	8011d18 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011cb8:	7dbb      	ldrb	r3, [r7, #22]
 8011cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d00d      	beq.n	8011cde <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6a1b      	ldr	r3, [r3, #32]
 8011cc6:	7b5b      	ldrb	r3, [r3, #13]
 8011cc8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011cca:	7dbb      	ldrb	r3, [r7, #22]
 8011ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cd0:	75bb      	strb	r3, [r7, #22]
 8011cd2:	7dbb      	ldrb	r3, [r7, #22]
 8011cd4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	695a      	ldr	r2, [r3, #20]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011cde:	7dba      	ldrb	r2, [r7, #22]
 8011ce0:	7d7b      	ldrb	r3, [r7, #21]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d115      	bne.n	8011d12 <dir_read+0xe6>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6a1b      	ldr	r3, [r3, #32]
 8011cea:	330d      	adds	r3, #13
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	7d3a      	ldrb	r2, [r7, #20]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d10e      	bne.n	8011d12 <dir_read+0xe6>
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	691a      	ldr	r2, [r3, #16]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6a1b      	ldr	r3, [r3, #32]
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	4610      	mov	r0, r2
 8011d00:	f7ff fe18 	bl	8011934 <pick_lfn>
 8011d04:	4603      	mov	r3, r0
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d003      	beq.n	8011d12 <dir_read+0xe6>
 8011d0a:	7d7b      	ldrb	r3, [r7, #21]
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	e000      	b.n	8011d14 <dir_read+0xe8>
 8011d12:	23ff      	movs	r3, #255	; 0xff
 8011d14:	757b      	strb	r3, [r7, #21]
 8011d16:	e011      	b.n	8011d3c <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011d18:	7d7b      	ldrb	r3, [r7, #21]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d109      	bne.n	8011d32 <dir_read+0x106>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6a1b      	ldr	r3, [r3, #32]
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7ff ff61 	bl	8011bea <sum_sfn>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	7d3b      	ldrb	r3, [r7, #20]
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d015      	beq.n	8011d5e <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f04f 32ff 	mov.w	r2, #4294967295
 8011d38:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8011d3a:	e010      	b.n	8011d5e <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011d3c:	2100      	movs	r1, #0
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f7ff fc2c 	bl	801159c <dir_next>
 8011d44:	4603      	mov	r3, r0
 8011d46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d48:	7dfb      	ldrb	r3, [r7, #23]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d109      	bne.n	8011d62 <dir_read+0x136>
	while (dp->sect) {
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	69db      	ldr	r3, [r3, #28]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f47f af79 	bne.w	8011c4a <dir_read+0x1e>
 8011d58:	e004      	b.n	8011d64 <dir_read+0x138>
		if (res != FR_OK) break;
 8011d5a:	bf00      	nop
 8011d5c:	e002      	b.n	8011d64 <dir_read+0x138>
					break;
 8011d5e:	bf00      	nop
 8011d60:	e000      	b.n	8011d64 <dir_read+0x138>
		if (res != FR_OK) break;
 8011d62:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011d64:	7dfb      	ldrb	r3, [r7, #23]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d002      	beq.n	8011d70 <dir_read+0x144>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	61da      	str	r2, [r3, #28]
	return res;
 8011d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3718      	adds	r7, #24
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}

08011d7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011d7a:	b580      	push	{r7, lr}
 8011d7c:	b086      	sub	sp, #24
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011d88:	2100      	movs	r1, #0
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f7ff fb7d 	bl	801148a <dir_sdi>
 8011d90:	4603      	mov	r3, r0
 8011d92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011d94:	7dfb      	ldrb	r3, [r7, #23]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <dir_find+0x24>
 8011d9a:	7dfb      	ldrb	r3, [r7, #23]
 8011d9c:	e0a9      	b.n	8011ef2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011d9e:	23ff      	movs	r3, #255	; 0xff
 8011da0:	753b      	strb	r3, [r7, #20]
 8011da2:	7d3b      	ldrb	r3, [r7, #20]
 8011da4:	757b      	strb	r3, [r7, #21]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	69db      	ldr	r3, [r3, #28]
 8011db2:	4619      	mov	r1, r3
 8011db4:	6938      	ldr	r0, [r7, #16]
 8011db6:	f7fe ff8f 	bl	8010cd8 <move_window>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011dbe:	7dfb      	ldrb	r3, [r7, #23]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	f040 8090 	bne.w	8011ee6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6a1b      	ldr	r3, [r3, #32]
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011dce:	7dbb      	ldrb	r3, [r7, #22]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d102      	bne.n	8011dda <dir_find+0x60>
 8011dd4:	2304      	movs	r3, #4
 8011dd6:	75fb      	strb	r3, [r7, #23]
 8011dd8:	e08a      	b.n	8011ef0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6a1b      	ldr	r3, [r3, #32]
 8011dde:	330b      	adds	r3, #11
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011de6:	73fb      	strb	r3, [r7, #15]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	7bfa      	ldrb	r2, [r7, #15]
 8011dec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011dee:	7dbb      	ldrb	r3, [r7, #22]
 8011df0:	2be5      	cmp	r3, #229	; 0xe5
 8011df2:	d007      	beq.n	8011e04 <dir_find+0x8a>
 8011df4:	7bfb      	ldrb	r3, [r7, #15]
 8011df6:	f003 0308 	and.w	r3, r3, #8
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d009      	beq.n	8011e12 <dir_find+0x98>
 8011dfe:	7bfb      	ldrb	r3, [r7, #15]
 8011e00:	2b0f      	cmp	r3, #15
 8011e02:	d006      	beq.n	8011e12 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011e04:	23ff      	movs	r3, #255	; 0xff
 8011e06:	757b      	strb	r3, [r7, #21]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8011e10:	e05e      	b.n	8011ed0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011e12:	7bfb      	ldrb	r3, [r7, #15]
 8011e14:	2b0f      	cmp	r3, #15
 8011e16:	d136      	bne.n	8011e86 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d154      	bne.n	8011ed0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011e26:	7dbb      	ldrb	r3, [r7, #22]
 8011e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00d      	beq.n	8011e4c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6a1b      	ldr	r3, [r3, #32]
 8011e34:	7b5b      	ldrb	r3, [r3, #13]
 8011e36:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011e38:	7dbb      	ldrb	r3, [r7, #22]
 8011e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e3e:	75bb      	strb	r3, [r7, #22]
 8011e40:	7dbb      	ldrb	r3, [r7, #22]
 8011e42:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	695a      	ldr	r2, [r3, #20]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011e4c:	7dba      	ldrb	r2, [r7, #22]
 8011e4e:	7d7b      	ldrb	r3, [r7, #21]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d115      	bne.n	8011e80 <dir_find+0x106>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6a1b      	ldr	r3, [r3, #32]
 8011e58:	330d      	adds	r3, #13
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	7d3a      	ldrb	r2, [r7, #20]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d10e      	bne.n	8011e80 <dir_find+0x106>
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	691a      	ldr	r2, [r3, #16]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6a1b      	ldr	r3, [r3, #32]
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	4610      	mov	r0, r2
 8011e6e:	f7ff fcf1 	bl	8011854 <cmp_lfn>
 8011e72:	4603      	mov	r3, r0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d003      	beq.n	8011e80 <dir_find+0x106>
 8011e78:	7d7b      	ldrb	r3, [r7, #21]
 8011e7a:	3b01      	subs	r3, #1
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	e000      	b.n	8011e82 <dir_find+0x108>
 8011e80:	23ff      	movs	r3, #255	; 0xff
 8011e82:	757b      	strb	r3, [r7, #21]
 8011e84:	e024      	b.n	8011ed0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011e86:	7d7b      	ldrb	r3, [r7, #21]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d109      	bne.n	8011ea0 <dir_find+0x126>
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6a1b      	ldr	r3, [r3, #32]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7ff feaa 	bl	8011bea <sum_sfn>
 8011e96:	4603      	mov	r3, r0
 8011e98:	461a      	mov	r2, r3
 8011e9a:	7d3b      	ldrb	r3, [r7, #20]
 8011e9c:	4293      	cmp	r3, r2
 8011e9e:	d024      	beq.n	8011eea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011ea6:	f003 0301 	and.w	r3, r3, #1
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d10a      	bne.n	8011ec4 <dir_find+0x14a>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6a18      	ldr	r0, [r3, #32]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	3324      	adds	r3, #36	; 0x24
 8011eb6:	220b      	movs	r2, #11
 8011eb8:	4619      	mov	r1, r3
 8011eba:	f7fe fd1a 	bl	80108f2 <mem_cmp>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d014      	beq.n	8011eee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011ec4:	23ff      	movs	r3, #255	; 0xff
 8011ec6:	757b      	strb	r3, [r7, #21]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f04f 32ff 	mov.w	r2, #4294967295
 8011ece:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011ed0:	2100      	movs	r1, #0
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f7ff fb62 	bl	801159c <dir_next>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011edc:	7dfb      	ldrb	r3, [r7, #23]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	f43f af65 	beq.w	8011dae <dir_find+0x34>
 8011ee4:	e004      	b.n	8011ef0 <dir_find+0x176>
		if (res != FR_OK) break;
 8011ee6:	bf00      	nop
 8011ee8:	e002      	b.n	8011ef0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011eea:	bf00      	nop
 8011eec:	e000      	b.n	8011ef0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011eee:	bf00      	nop

	return res;
 8011ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3718      	adds	r7, #24
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
	...

08011efc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b08c      	sub	sp, #48	; 0x30
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d001      	beq.n	8011f1c <dir_register+0x20>
 8011f18:	2306      	movs	r3, #6
 8011f1a:	e0e0      	b.n	80120de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8011f20:	e002      	b.n	8011f28 <dir_register+0x2c>
 8011f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f24:	3301      	adds	r3, #1
 8011f26:	627b      	str	r3, [r7, #36]	; 0x24
 8011f28:	69fb      	ldr	r3, [r7, #28]
 8011f2a:	691a      	ldr	r2, [r3, #16]
 8011f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	4413      	add	r3, r2
 8011f32:	881b      	ldrh	r3, [r3, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d1f4      	bne.n	8011f22 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8011f3e:	f107 030c 	add.w	r3, r7, #12
 8011f42:	220c      	movs	r2, #12
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fe fc99 	bl	801087c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011f4a:	7dfb      	ldrb	r3, [r7, #23]
 8011f4c:	f003 0301 	and.w	r3, r3, #1
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d032      	beq.n	8011fba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2240      	movs	r2, #64	; 0x40
 8011f58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f60:	e016      	b.n	8011f90 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8011f68:	69fb      	ldr	r3, [r7, #28]
 8011f6a:	691a      	ldr	r2, [r3, #16]
 8011f6c:	f107 010c 	add.w	r1, r7, #12
 8011f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f72:	f7ff fdab 	bl	8011acc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7ff feff 	bl	8011d7a <dir_find>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8011f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d106      	bne.n	8011f98 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f92:	2b63      	cmp	r3, #99	; 0x63
 8011f94:	d9e5      	bls.n	8011f62 <dir_register+0x66>
 8011f96:	e000      	b.n	8011f9a <dir_register+0x9e>
			if (res != FR_OK) break;
 8011f98:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f9c:	2b64      	cmp	r3, #100	; 0x64
 8011f9e:	d101      	bne.n	8011fa4 <dir_register+0xa8>
 8011fa0:	2307      	movs	r3, #7
 8011fa2:	e09c      	b.n	80120de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fa8:	2b04      	cmp	r3, #4
 8011faa:	d002      	beq.n	8011fb2 <dir_register+0xb6>
 8011fac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fb0:	e095      	b.n	80120de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011fb2:	7dfa      	ldrb	r2, [r7, #23]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011fba:	7dfb      	ldrb	r3, [r7, #23]
 8011fbc:	f003 0302 	and.w	r3, r3, #2
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d007      	beq.n	8011fd4 <dir_register+0xd8>
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc6:	330c      	adds	r3, #12
 8011fc8:	4a47      	ldr	r2, [pc, #284]	; (80120e8 <dir_register+0x1ec>)
 8011fca:	fba2 2303 	umull	r2, r3, r2, r3
 8011fce:	089b      	lsrs	r3, r3, #2
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	e000      	b.n	8011fd6 <dir_register+0xda>
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011fd8:	6a39      	ldr	r1, [r7, #32]
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7ff fbb4 	bl	8011748 <dir_alloc>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d148      	bne.n	8012080 <dir_register+0x184>
 8011fee:	6a3b      	ldr	r3, [r7, #32]
 8011ff0:	3b01      	subs	r3, #1
 8011ff2:	623b      	str	r3, [r7, #32]
 8011ff4:	6a3b      	ldr	r3, [r7, #32]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d042      	beq.n	8012080 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	695a      	ldr	r2, [r3, #20]
 8011ffe:	6a3b      	ldr	r3, [r7, #32]
 8012000:	015b      	lsls	r3, r3, #5
 8012002:	1ad3      	subs	r3, r2, r3
 8012004:	4619      	mov	r1, r3
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f7ff fa3f 	bl	801148a <dir_sdi>
 801200c:	4603      	mov	r3, r0
 801200e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012016:	2b00      	cmp	r3, #0
 8012018:	d132      	bne.n	8012080 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	3324      	adds	r3, #36	; 0x24
 801201e:	4618      	mov	r0, r3
 8012020:	f7ff fde3 	bl	8011bea <sum_sfn>
 8012024:	4603      	mov	r3, r0
 8012026:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	69db      	ldr	r3, [r3, #28]
 801202c:	4619      	mov	r1, r3
 801202e:	69f8      	ldr	r0, [r7, #28]
 8012030:	f7fe fe52 	bl	8010cd8 <move_window>
 8012034:	4603      	mov	r3, r0
 8012036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801203a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801203e:	2b00      	cmp	r3, #0
 8012040:	d11d      	bne.n	801207e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012042:	69fb      	ldr	r3, [r7, #28]
 8012044:	6918      	ldr	r0, [r3, #16]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6a19      	ldr	r1, [r3, #32]
 801204a:	6a3b      	ldr	r3, [r7, #32]
 801204c:	b2da      	uxtb	r2, r3
 801204e:	7efb      	ldrb	r3, [r7, #27]
 8012050:	f7ff fcd4 	bl	80119fc <put_lfn>
				fs->wflag = 1;
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	2201      	movs	r2, #1
 8012058:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801205a:	2100      	movs	r1, #0
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f7ff fa9d 	bl	801159c <dir_next>
 8012062:	4603      	mov	r3, r0
 8012064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8012068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801206c:	2b00      	cmp	r3, #0
 801206e:	d107      	bne.n	8012080 <dir_register+0x184>
 8012070:	6a3b      	ldr	r3, [r7, #32]
 8012072:	3b01      	subs	r3, #1
 8012074:	623b      	str	r3, [r7, #32]
 8012076:	6a3b      	ldr	r3, [r7, #32]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d1d5      	bne.n	8012028 <dir_register+0x12c>
 801207c:	e000      	b.n	8012080 <dir_register+0x184>
				if (res != FR_OK) break;
 801207e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012080:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012084:	2b00      	cmp	r3, #0
 8012086:	d128      	bne.n	80120da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	69db      	ldr	r3, [r3, #28]
 801208c:	4619      	mov	r1, r3
 801208e:	69f8      	ldr	r0, [r7, #28]
 8012090:	f7fe fe22 	bl	8010cd8 <move_window>
 8012094:	4603      	mov	r3, r0
 8012096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801209a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d11b      	bne.n	80120da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6a1b      	ldr	r3, [r3, #32]
 80120a6:	2220      	movs	r2, #32
 80120a8:	2100      	movs	r1, #0
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fe fc07 	bl	80108be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6a18      	ldr	r0, [r3, #32]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	3324      	adds	r3, #36	; 0x24
 80120b8:	220b      	movs	r2, #11
 80120ba:	4619      	mov	r1, r3
 80120bc:	f7fe fbde 	bl	801087c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6a1b      	ldr	r3, [r3, #32]
 80120ca:	330c      	adds	r3, #12
 80120cc:	f002 0218 	and.w	r2, r2, #24
 80120d0:	b2d2      	uxtb	r2, r2
 80120d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80120d4:	69fb      	ldr	r3, [r7, #28]
 80120d6:	2201      	movs	r2, #1
 80120d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80120da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3730      	adds	r7, #48	; 0x30
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	4ec4ec4f 	.word	0x4ec4ec4f

080120ec <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b086      	sub	sp, #24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	695b      	ldr	r3, [r3, #20]
 80120fe:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012108:	d007      	beq.n	801211a <dir_remove+0x2e>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801210e:	4619      	mov	r1, r3
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f7ff f9ba 	bl	801148a <dir_sdi>
 8012116:	4603      	mov	r3, r0
 8012118:	e000      	b.n	801211c <dir_remove+0x30>
 801211a:	2300      	movs	r3, #0
 801211c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801211e:	7dfb      	ldrb	r3, [r7, #23]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d128      	bne.n	8012176 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	69db      	ldr	r3, [r3, #28]
 8012128:	4619      	mov	r1, r3
 801212a:	6938      	ldr	r0, [r7, #16]
 801212c:	f7fe fdd4 	bl	8010cd8 <move_window>
 8012130:	4603      	mov	r3, r0
 8012132:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012134:	7dfb      	ldrb	r3, [r7, #23]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d115      	bne.n	8012166 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6a1b      	ldr	r3, [r3, #32]
 801213e:	22e5      	movs	r2, #229	; 0xe5
 8012140:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	2201      	movs	r2, #1
 8012146:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	695b      	ldr	r3, [r3, #20]
 801214c:	68fa      	ldr	r2, [r7, #12]
 801214e:	429a      	cmp	r2, r3
 8012150:	d90b      	bls.n	801216a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8012152:	2100      	movs	r1, #0
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7ff fa21 	bl	801159c <dir_next>
 801215a:	4603      	mov	r3, r0
 801215c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801215e:	7dfb      	ldrb	r3, [r7, #23]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d0df      	beq.n	8012124 <dir_remove+0x38>
 8012164:	e002      	b.n	801216c <dir_remove+0x80>
			if (res != FR_OK) break;
 8012166:	bf00      	nop
 8012168:	e000      	b.n	801216c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801216a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801216c:	7dfb      	ldrb	r3, [r7, #23]
 801216e:	2b04      	cmp	r3, #4
 8012170:	d101      	bne.n	8012176 <dir_remove+0x8a>
 8012172:	2302      	movs	r3, #2
 8012174:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8012176:	7dfb      	ldrb	r3, [r7, #23]
}
 8012178:	4618      	mov	r0, r3
 801217a:	3718      	adds	r7, #24
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b088      	sub	sp, #32
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	2200      	movs	r2, #0
 8012194:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	69db      	ldr	r3, [r3, #28]
 801219a:	2b00      	cmp	r3, #0
 801219c:	f000 80c9 	beq.w	8012332 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a8:	d032      	beq.n	8012210 <get_fileinfo+0x90>
			i = j = 0;
 80121aa:	2300      	movs	r3, #0
 80121ac:	61bb      	str	r3, [r7, #24]
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80121b2:	e01b      	b.n	80121ec <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80121b4:	89fb      	ldrh	r3, [r7, #14]
 80121b6:	2100      	movs	r1, #0
 80121b8:	4618      	mov	r0, r3
 80121ba:	f002 f91d 	bl	80143f8 <ff_convert>
 80121be:	4603      	mov	r3, r0
 80121c0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80121c2:	89fb      	ldrh	r3, [r7, #14]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d102      	bne.n	80121ce <get_fileinfo+0x4e>
 80121c8:	2300      	movs	r3, #0
 80121ca:	61fb      	str	r3, [r7, #28]
 80121cc:	e01a      	b.n	8012204 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	2bfe      	cmp	r3, #254	; 0xfe
 80121d2:	d902      	bls.n	80121da <get_fileinfo+0x5a>
 80121d4:	2300      	movs	r3, #0
 80121d6:	61fb      	str	r3, [r7, #28]
 80121d8:	e014      	b.n	8012204 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80121da:	69fb      	ldr	r3, [r7, #28]
 80121dc:	1c5a      	adds	r2, r3, #1
 80121de:	61fa      	str	r2, [r7, #28]
 80121e0:	89fa      	ldrh	r2, [r7, #14]
 80121e2:	b2d1      	uxtb	r1, r2
 80121e4:	683a      	ldr	r2, [r7, #0]
 80121e6:	4413      	add	r3, r2
 80121e8:	460a      	mov	r2, r1
 80121ea:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	691a      	ldr	r2, [r3, #16]
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	1c59      	adds	r1, r3, #1
 80121f4:	61b9      	str	r1, [r7, #24]
 80121f6:	005b      	lsls	r3, r3, #1
 80121f8:	4413      	add	r3, r2
 80121fa:	881b      	ldrh	r3, [r3, #0]
 80121fc:	81fb      	strh	r3, [r7, #14]
 80121fe:	89fb      	ldrh	r3, [r7, #14]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d1d7      	bne.n	80121b4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8012204:	683a      	ldr	r2, [r7, #0]
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	4413      	add	r3, r2
 801220a:	3316      	adds	r3, #22
 801220c:	2200      	movs	r2, #0
 801220e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012210:	2300      	movs	r3, #0
 8012212:	61bb      	str	r3, [r7, #24]
 8012214:	69bb      	ldr	r3, [r7, #24]
 8012216:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8012218:	683a      	ldr	r2, [r7, #0]
 801221a:	69fb      	ldr	r3, [r7, #28]
 801221c:	4413      	add	r3, r2
 801221e:	3316      	adds	r3, #22
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8012224:	e04c      	b.n	80122c0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6a1a      	ldr	r2, [r3, #32]
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	1c59      	adds	r1, r3, #1
 801222e:	61f9      	str	r1, [r7, #28]
 8012230:	4413      	add	r3, r2
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	2b20      	cmp	r3, #32
 801223a:	d100      	bne.n	801223e <get_fileinfo+0xbe>
 801223c:	e040      	b.n	80122c0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801223e:	7dfb      	ldrb	r3, [r7, #23]
 8012240:	2b05      	cmp	r3, #5
 8012242:	d101      	bne.n	8012248 <get_fileinfo+0xc8>
 8012244:	23e5      	movs	r3, #229	; 0xe5
 8012246:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	2b09      	cmp	r3, #9
 801224c:	d10f      	bne.n	801226e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801224e:	89bb      	ldrh	r3, [r7, #12]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d105      	bne.n	8012260 <get_fileinfo+0xe0>
 8012254:	683a      	ldr	r2, [r7, #0]
 8012256:	69bb      	ldr	r3, [r7, #24]
 8012258:	4413      	add	r3, r2
 801225a:	3316      	adds	r3, #22
 801225c:	222e      	movs	r2, #46	; 0x2e
 801225e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8012260:	69bb      	ldr	r3, [r7, #24]
 8012262:	1c5a      	adds	r2, r3, #1
 8012264:	61ba      	str	r2, [r7, #24]
 8012266:	683a      	ldr	r2, [r7, #0]
 8012268:	4413      	add	r3, r2
 801226a:	222e      	movs	r2, #46	; 0x2e
 801226c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801226e:	683a      	ldr	r2, [r7, #0]
 8012270:	69bb      	ldr	r3, [r7, #24]
 8012272:	4413      	add	r3, r2
 8012274:	3309      	adds	r3, #9
 8012276:	7dfa      	ldrb	r2, [r7, #23]
 8012278:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801227a:	89bb      	ldrh	r3, [r7, #12]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d11c      	bne.n	80122ba <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8012280:	7dfb      	ldrb	r3, [r7, #23]
 8012282:	2b40      	cmp	r3, #64	; 0x40
 8012284:	d913      	bls.n	80122ae <get_fileinfo+0x12e>
 8012286:	7dfb      	ldrb	r3, [r7, #23]
 8012288:	2b5a      	cmp	r3, #90	; 0x5a
 801228a:	d810      	bhi.n	80122ae <get_fileinfo+0x12e>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6a1b      	ldr	r3, [r3, #32]
 8012290:	330c      	adds	r3, #12
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	461a      	mov	r2, r3
 8012296:	69fb      	ldr	r3, [r7, #28]
 8012298:	2b08      	cmp	r3, #8
 801229a:	d901      	bls.n	80122a0 <get_fileinfo+0x120>
 801229c:	2310      	movs	r3, #16
 801229e:	e000      	b.n	80122a2 <get_fileinfo+0x122>
 80122a0:	2308      	movs	r3, #8
 80122a2:	4013      	ands	r3, r2
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d002      	beq.n	80122ae <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80122a8:	7dfb      	ldrb	r3, [r7, #23]
 80122aa:	3320      	adds	r3, #32
 80122ac:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80122ae:	683a      	ldr	r2, [r7, #0]
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	4413      	add	r3, r2
 80122b4:	3316      	adds	r3, #22
 80122b6:	7dfa      	ldrb	r2, [r7, #23]
 80122b8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80122ba:	69bb      	ldr	r3, [r7, #24]
 80122bc:	3301      	adds	r3, #1
 80122be:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80122c0:	69fb      	ldr	r3, [r7, #28]
 80122c2:	2b0a      	cmp	r3, #10
 80122c4:	d9af      	bls.n	8012226 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80122c6:	89bb      	ldrh	r3, [r7, #12]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d10d      	bne.n	80122e8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80122cc:	683a      	ldr	r2, [r7, #0]
 80122ce:	69bb      	ldr	r3, [r7, #24]
 80122d0:	4413      	add	r3, r2
 80122d2:	3316      	adds	r3, #22
 80122d4:	2200      	movs	r2, #0
 80122d6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6a1b      	ldr	r3, [r3, #32]
 80122dc:	330c      	adds	r3, #12
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d101      	bne.n	80122e8 <get_fileinfo+0x168>
 80122e4:	2300      	movs	r3, #0
 80122e6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80122e8:	683a      	ldr	r2, [r7, #0]
 80122ea:	69bb      	ldr	r3, [r7, #24]
 80122ec:	4413      	add	r3, r2
 80122ee:	3309      	adds	r3, #9
 80122f0:	2200      	movs	r2, #0
 80122f2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6a1b      	ldr	r3, [r3, #32]
 80122f8:	7ada      	ldrb	r2, [r3, #11]
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6a1b      	ldr	r3, [r3, #32]
 8012302:	331c      	adds	r3, #28
 8012304:	4618      	mov	r0, r3
 8012306:	f7fe fa4f 	bl	80107a8 <ld_dword>
 801230a:	4602      	mov	r2, r0
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6a1b      	ldr	r3, [r3, #32]
 8012314:	3316      	adds	r3, #22
 8012316:	4618      	mov	r0, r3
 8012318:	f7fe fa46 	bl	80107a8 <ld_dword>
 801231c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	b29a      	uxth	r2, r3
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	80da      	strh	r2, [r3, #6]
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	0c1b      	lsrs	r3, r3, #16
 801232a:	b29a      	uxth	r2, r3
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	809a      	strh	r2, [r3, #4]
 8012330:	e000      	b.n	8012334 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012332:	bf00      	nop
}
 8012334:	3720      	adds	r7, #32
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
	...

0801233c <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 801233c:	b480      	push	{r7}
 801233e:	b085      	sub	sp, #20
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	1c59      	adds	r1, r3, #1
 801234a:	687a      	ldr	r2, [r7, #4]
 801234c:	6011      	str	r1, [r2, #0]
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012352:	89fb      	ldrh	r3, [r7, #14]
 8012354:	2b60      	cmp	r3, #96	; 0x60
 8012356:	d905      	bls.n	8012364 <get_achar+0x28>
 8012358:	89fb      	ldrh	r3, [r7, #14]
 801235a:	2b7a      	cmp	r3, #122	; 0x7a
 801235c:	d802      	bhi.n	8012364 <get_achar+0x28>
 801235e:	89fb      	ldrh	r3, [r7, #14]
 8012360:	3b20      	subs	r3, #32
 8012362:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8012364:	89fb      	ldrh	r3, [r7, #14]
 8012366:	2b7f      	cmp	r3, #127	; 0x7f
 8012368:	d904      	bls.n	8012374 <get_achar+0x38>
 801236a:	89fb      	ldrh	r3, [r7, #14]
 801236c:	3b80      	subs	r3, #128	; 0x80
 801236e:	4a05      	ldr	r2, [pc, #20]	; (8012384 <get_achar+0x48>)
 8012370:	5cd3      	ldrb	r3, [r2, r3]
 8012372:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8012374:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8012376:	4618      	mov	r0, r3
 8012378:	3714      	adds	r7, #20
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr
 8012382:	bf00      	nop
 8012384:	08053058 	.word	0x08053058

08012388 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b08a      	sub	sp, #40	; 0x28
 801238c:	af00      	add	r7, sp, #0
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	60b9      	str	r1, [r7, #8]
 8012392:	607a      	str	r2, [r7, #4]
 8012394:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8012396:	e009      	b.n	80123ac <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8012398:	f107 0308 	add.w	r3, r7, #8
 801239c:	4618      	mov	r0, r3
 801239e:	f7ff ffcd 	bl	801233c <get_achar>
 80123a2:	4603      	mov	r3, r0
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d101      	bne.n	80123ac <pattern_matching+0x24>
 80123a8:	2300      	movs	r3, #0
 80123aa:	e064      	b.n	8012476 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	1e5a      	subs	r2, r3, #1
 80123b0:	607a      	str	r2, [r7, #4]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d1f0      	bne.n	8012398 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d104      	bne.n	80123c8 <pattern_matching+0x40>
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d001      	beq.n	80123c8 <pattern_matching+0x40>
 80123c4:	2301      	movs	r3, #1
 80123c6:	e056      	b.n	8012476 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	617b      	str	r3, [r7, #20]
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	2b3f      	cmp	r3, #63	; 0x3f
 80123d6:	d003      	beq.n	80123e0 <pattern_matching+0x58>
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	2b2a      	cmp	r3, #42	; 0x2a
 80123de:	d126      	bne.n	801242e <pattern_matching+0xa6>
				nm = nx = 0;
 80123e0:	2300      	movs	r3, #0
 80123e2:	61fb      	str	r3, [r7, #28]
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	1c5a      	adds	r2, r3, #1
 80123ec:	617a      	str	r2, [r7, #20]
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	2b3f      	cmp	r3, #63	; 0x3f
 80123f2:	d103      	bne.n	80123fc <pattern_matching+0x74>
 80123f4:	6a3b      	ldr	r3, [r7, #32]
 80123f6:	3301      	adds	r3, #1
 80123f8:	623b      	str	r3, [r7, #32]
 80123fa:	e001      	b.n	8012400 <pattern_matching+0x78>
 80123fc:	2301      	movs	r3, #1
 80123fe:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	2b3f      	cmp	r3, #63	; 0x3f
 8012406:	d0ef      	beq.n	80123e8 <pattern_matching+0x60>
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	2b2a      	cmp	r3, #42	; 0x2a
 801240e:	d0eb      	beq.n	80123e8 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8012410:	6978      	ldr	r0, [r7, #20]
 8012412:	6939      	ldr	r1, [r7, #16]
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	6a3a      	ldr	r2, [r7, #32]
 8012418:	f7ff ffb6 	bl	8012388 <pattern_matching>
 801241c:	4603      	mov	r3, r0
 801241e:	2b00      	cmp	r3, #0
 8012420:	d001      	beq.n	8012426 <pattern_matching+0x9e>
 8012422:	2301      	movs	r3, #1
 8012424:	e027      	b.n	8012476 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801242c:	e017      	b.n	801245e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 801242e:	f107 0314 	add.w	r3, r7, #20
 8012432:	4618      	mov	r0, r3
 8012434:	f7ff ff82 	bl	801233c <get_achar>
 8012438:	4603      	mov	r3, r0
 801243a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 801243c:	f107 0310 	add.w	r3, r7, #16
 8012440:	4618      	mov	r0, r3
 8012442:	f7ff ff7b 	bl	801233c <get_achar>
 8012446:	4603      	mov	r3, r0
 8012448:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 801244a:	8b7a      	ldrh	r2, [r7, #26]
 801244c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801244e:	429a      	cmp	r2, r3
 8012450:	d104      	bne.n	801245c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8012452:	8b7b      	ldrh	r3, [r7, #26]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d1bb      	bne.n	80123d0 <pattern_matching+0x48>
 8012458:	2301      	movs	r3, #1
 801245a:	e00c      	b.n	8012476 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 801245c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801245e:	f107 0308 	add.w	r3, r7, #8
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff ff6a 	bl	801233c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d002      	beq.n	8012474 <pattern_matching+0xec>
 801246e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012470:	2b00      	cmp	r3, #0
 8012472:	d1a9      	bne.n	80123c8 <pattern_matching+0x40>

	return 0;
 8012474:	2300      	movs	r3, #0
}
 8012476:	4618      	mov	r0, r3
 8012478:	3728      	adds	r7, #40	; 0x28
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
	...

08012480 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b08a      	sub	sp, #40	; 0x28
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	613b      	str	r3, [r7, #16]
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	691b      	ldr	r3, [r3, #16]
 8012496:	60fb      	str	r3, [r7, #12]
 8012498:	2300      	movs	r3, #0
 801249a:	617b      	str	r3, [r7, #20]
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	1c5a      	adds	r2, r3, #1
 80124a4:	61ba      	str	r2, [r7, #24]
 80124a6:	693a      	ldr	r2, [r7, #16]
 80124a8:	4413      	add	r3, r2
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80124ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124b0:	2b1f      	cmp	r3, #31
 80124b2:	d940      	bls.n	8012536 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80124b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124b6:	2b2f      	cmp	r3, #47	; 0x2f
 80124b8:	d006      	beq.n	80124c8 <create_name+0x48>
 80124ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124bc:	2b5c      	cmp	r3, #92	; 0x5c
 80124be:	d110      	bne.n	80124e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80124c0:	e002      	b.n	80124c8 <create_name+0x48>
 80124c2:	69bb      	ldr	r3, [r7, #24]
 80124c4:	3301      	adds	r3, #1
 80124c6:	61bb      	str	r3, [r7, #24]
 80124c8:	693a      	ldr	r2, [r7, #16]
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	4413      	add	r3, r2
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	2b2f      	cmp	r3, #47	; 0x2f
 80124d2:	d0f6      	beq.n	80124c2 <create_name+0x42>
 80124d4:	693a      	ldr	r2, [r7, #16]
 80124d6:	69bb      	ldr	r3, [r7, #24]
 80124d8:	4413      	add	r3, r2
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	2b5c      	cmp	r3, #92	; 0x5c
 80124de:	d0f0      	beq.n	80124c2 <create_name+0x42>
			break;
 80124e0:	e02a      	b.n	8012538 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	2bfe      	cmp	r3, #254	; 0xfe
 80124e6:	d901      	bls.n	80124ec <create_name+0x6c>
 80124e8:	2306      	movs	r3, #6
 80124ea:	e177      	b.n	80127dc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80124ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80124f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124f4:	2101      	movs	r1, #1
 80124f6:	4618      	mov	r0, r3
 80124f8:	f001 ff7e 	bl	80143f8 <ff_convert>
 80124fc:	4603      	mov	r3, r0
 80124fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012502:	2b00      	cmp	r3, #0
 8012504:	d101      	bne.n	801250a <create_name+0x8a>
 8012506:	2306      	movs	r3, #6
 8012508:	e168      	b.n	80127dc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801250a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801250c:	2b7f      	cmp	r3, #127	; 0x7f
 801250e:	d809      	bhi.n	8012524 <create_name+0xa4>
 8012510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012512:	4619      	mov	r1, r3
 8012514:	48b3      	ldr	r0, [pc, #716]	; (80127e4 <create_name+0x364>)
 8012516:	f7fe fa13 	bl	8010940 <chk_chr>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d001      	beq.n	8012524 <create_name+0xa4>
 8012520:	2306      	movs	r3, #6
 8012522:	e15b      	b.n	80127dc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	1c5a      	adds	r2, r3, #1
 8012528:	617a      	str	r2, [r7, #20]
 801252a:	005b      	lsls	r3, r3, #1
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	4413      	add	r3, r2
 8012530:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012532:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012534:	e7b4      	b.n	80124a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012536:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012538:	693a      	ldr	r2, [r7, #16]
 801253a:	69bb      	ldr	r3, [r7, #24]
 801253c:	441a      	add	r2, r3
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012544:	2b1f      	cmp	r3, #31
 8012546:	d801      	bhi.n	801254c <create_name+0xcc>
 8012548:	2304      	movs	r3, #4
 801254a:	e000      	b.n	801254e <create_name+0xce>
 801254c:	2300      	movs	r3, #0
 801254e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012552:	e011      	b.n	8012578 <create_name+0xf8>
		w = lfn[di - 1];
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801255a:	3b01      	subs	r3, #1
 801255c:	005b      	lsls	r3, r3, #1
 801255e:	68fa      	ldr	r2, [r7, #12]
 8012560:	4413      	add	r3, r2
 8012562:	881b      	ldrh	r3, [r3, #0]
 8012564:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8012566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012568:	2b20      	cmp	r3, #32
 801256a:	d002      	beq.n	8012572 <create_name+0xf2>
 801256c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801256e:	2b2e      	cmp	r3, #46	; 0x2e
 8012570:	d106      	bne.n	8012580 <create_name+0x100>
		di--;
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	3b01      	subs	r3, #1
 8012576:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d1ea      	bne.n	8012554 <create_name+0xd4>
 801257e:	e000      	b.n	8012582 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012580:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	005b      	lsls	r3, r3, #1
 8012586:	68fa      	ldr	r2, [r7, #12]
 8012588:	4413      	add	r3, r2
 801258a:	2200      	movs	r2, #0
 801258c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d101      	bne.n	8012598 <create_name+0x118>
 8012594:	2306      	movs	r3, #6
 8012596:	e121      	b.n	80127dc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	3324      	adds	r3, #36	; 0x24
 801259c:	220b      	movs	r2, #11
 801259e:	2120      	movs	r1, #32
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fe f98c 	bl	80108be <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80125a6:	2300      	movs	r3, #0
 80125a8:	61bb      	str	r3, [r7, #24]
 80125aa:	e002      	b.n	80125b2 <create_name+0x132>
 80125ac:	69bb      	ldr	r3, [r7, #24]
 80125ae:	3301      	adds	r3, #1
 80125b0:	61bb      	str	r3, [r7, #24]
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	005b      	lsls	r3, r3, #1
 80125b6:	68fa      	ldr	r2, [r7, #12]
 80125b8:	4413      	add	r3, r2
 80125ba:	881b      	ldrh	r3, [r3, #0]
 80125bc:	2b20      	cmp	r3, #32
 80125be:	d0f5      	beq.n	80125ac <create_name+0x12c>
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	005b      	lsls	r3, r3, #1
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	4413      	add	r3, r2
 80125c8:	881b      	ldrh	r3, [r3, #0]
 80125ca:	2b2e      	cmp	r3, #46	; 0x2e
 80125cc:	d0ee      	beq.n	80125ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d009      	beq.n	80125e8 <create_name+0x168>
 80125d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125d8:	f043 0303 	orr.w	r3, r3, #3
 80125dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80125e0:	e002      	b.n	80125e8 <create_name+0x168>
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	3b01      	subs	r3, #1
 80125e6:	617b      	str	r3, [r7, #20]
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d009      	beq.n	8012602 <create_name+0x182>
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80125f4:	3b01      	subs	r3, #1
 80125f6:	005b      	lsls	r3, r3, #1
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	4413      	add	r3, r2
 80125fc:	881b      	ldrh	r3, [r3, #0]
 80125fe:	2b2e      	cmp	r3, #46	; 0x2e
 8012600:	d1ef      	bne.n	80125e2 <create_name+0x162>

	i = b = 0; ni = 8;
 8012602:	2300      	movs	r3, #0
 8012604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012608:	2300      	movs	r3, #0
 801260a:	623b      	str	r3, [r7, #32]
 801260c:	2308      	movs	r3, #8
 801260e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012610:	69bb      	ldr	r3, [r7, #24]
 8012612:	1c5a      	adds	r2, r3, #1
 8012614:	61ba      	str	r2, [r7, #24]
 8012616:	005b      	lsls	r3, r3, #1
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	4413      	add	r3, r2
 801261c:	881b      	ldrh	r3, [r3, #0]
 801261e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012622:	2b00      	cmp	r3, #0
 8012624:	f000 8090 	beq.w	8012748 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801262a:	2b20      	cmp	r3, #32
 801262c:	d006      	beq.n	801263c <create_name+0x1bc>
 801262e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012630:	2b2e      	cmp	r3, #46	; 0x2e
 8012632:	d10a      	bne.n	801264a <create_name+0x1ca>
 8012634:	69ba      	ldr	r2, [r7, #24]
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	429a      	cmp	r2, r3
 801263a:	d006      	beq.n	801264a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801263c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012640:	f043 0303 	orr.w	r3, r3, #3
 8012644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012648:	e07d      	b.n	8012746 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801264a:	6a3a      	ldr	r2, [r7, #32]
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	429a      	cmp	r2, r3
 8012650:	d203      	bcs.n	801265a <create_name+0x1da>
 8012652:	69ba      	ldr	r2, [r7, #24]
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	429a      	cmp	r2, r3
 8012658:	d123      	bne.n	80126a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	2b0b      	cmp	r3, #11
 801265e:	d106      	bne.n	801266e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012664:	f043 0303 	orr.w	r3, r3, #3
 8012668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801266c:	e06f      	b.n	801274e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801266e:	69ba      	ldr	r2, [r7, #24]
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	429a      	cmp	r2, r3
 8012674:	d005      	beq.n	8012682 <create_name+0x202>
 8012676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801267a:	f043 0303 	orr.w	r3, r3, #3
 801267e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8012682:	69ba      	ldr	r2, [r7, #24]
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	429a      	cmp	r2, r3
 8012688:	d860      	bhi.n	801274c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	61bb      	str	r3, [r7, #24]
 801268e:	2308      	movs	r3, #8
 8012690:	623b      	str	r3, [r7, #32]
 8012692:	230b      	movs	r3, #11
 8012694:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801269a:	009b      	lsls	r3, r3, #2
 801269c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80126a0:	e051      	b.n	8012746 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80126a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126a4:	2b7f      	cmp	r3, #127	; 0x7f
 80126a6:	d914      	bls.n	80126d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80126a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126aa:	2100      	movs	r1, #0
 80126ac:	4618      	mov	r0, r3
 80126ae:	f001 fea3 	bl	80143f8 <ff_convert>
 80126b2:	4603      	mov	r3, r0
 80126b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80126b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d004      	beq.n	80126c6 <create_name+0x246>
 80126bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126be:	3b80      	subs	r3, #128	; 0x80
 80126c0:	4a49      	ldr	r2, [pc, #292]	; (80127e8 <create_name+0x368>)
 80126c2:	5cd3      	ldrb	r3, [r2, r3]
 80126c4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80126c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126ca:	f043 0302 	orr.w	r3, r3, #2
 80126ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80126d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d007      	beq.n	80126e8 <create_name+0x268>
 80126d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126da:	4619      	mov	r1, r3
 80126dc:	4843      	ldr	r0, [pc, #268]	; (80127ec <create_name+0x36c>)
 80126de:	f7fe f92f 	bl	8010940 <chk_chr>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d008      	beq.n	80126fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80126e8:	235f      	movs	r3, #95	; 0x5f
 80126ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80126ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126f0:	f043 0303 	orr.w	r3, r3, #3
 80126f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80126f8:	e01b      	b.n	8012732 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80126fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126fc:	2b40      	cmp	r3, #64	; 0x40
 80126fe:	d909      	bls.n	8012714 <create_name+0x294>
 8012700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012702:	2b5a      	cmp	r3, #90	; 0x5a
 8012704:	d806      	bhi.n	8012714 <create_name+0x294>
					b |= 2;
 8012706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801270a:	f043 0302 	orr.w	r3, r3, #2
 801270e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012712:	e00e      	b.n	8012732 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012716:	2b60      	cmp	r3, #96	; 0x60
 8012718:	d90b      	bls.n	8012732 <create_name+0x2b2>
 801271a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801271c:	2b7a      	cmp	r3, #122	; 0x7a
 801271e:	d808      	bhi.n	8012732 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012724:	f043 0301 	orr.w	r3, r3, #1
 8012728:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801272c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801272e:	3b20      	subs	r3, #32
 8012730:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012732:	6a3b      	ldr	r3, [r7, #32]
 8012734:	1c5a      	adds	r2, r3, #1
 8012736:	623a      	str	r2, [r7, #32]
 8012738:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801273a:	b2d1      	uxtb	r1, r2
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	4413      	add	r3, r2
 8012740:	460a      	mov	r2, r1
 8012742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012746:	e763      	b.n	8012610 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012748:	bf00      	nop
 801274a:	e000      	b.n	801274e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801274c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012754:	2be5      	cmp	r3, #229	; 0xe5
 8012756:	d103      	bne.n	8012760 <create_name+0x2e0>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2205      	movs	r2, #5
 801275c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	2b08      	cmp	r3, #8
 8012764:	d104      	bne.n	8012770 <create_name+0x2f0>
 8012766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012774:	f003 030c 	and.w	r3, r3, #12
 8012778:	2b0c      	cmp	r3, #12
 801277a:	d005      	beq.n	8012788 <create_name+0x308>
 801277c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012780:	f003 0303 	and.w	r3, r3, #3
 8012784:	2b03      	cmp	r3, #3
 8012786:	d105      	bne.n	8012794 <create_name+0x314>
 8012788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801278c:	f043 0302 	orr.w	r3, r3, #2
 8012790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012798:	f003 0302 	and.w	r3, r3, #2
 801279c:	2b00      	cmp	r3, #0
 801279e:	d117      	bne.n	80127d0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80127a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127a4:	f003 0303 	and.w	r3, r3, #3
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d105      	bne.n	80127b8 <create_name+0x338>
 80127ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127b0:	f043 0310 	orr.w	r3, r3, #16
 80127b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80127b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127bc:	f003 030c 	and.w	r3, r3, #12
 80127c0:	2b04      	cmp	r3, #4
 80127c2:	d105      	bne.n	80127d0 <create_name+0x350>
 80127c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127c8:	f043 0308 	orr.w	r3, r3, #8
 80127cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80127d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80127da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80127dc:	4618      	mov	r0, r3
 80127de:	3728      	adds	r7, #40	; 0x28
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	08018fc0 	.word	0x08018fc0
 80127e8:	08053058 	.word	0x08053058
 80127ec:	08018fcc 	.word	0x08018fcc

080127f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b086      	sub	sp, #24
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012804:	e002      	b.n	801280c <follow_path+0x1c>
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	3301      	adds	r3, #1
 801280a:	603b      	str	r3, [r7, #0]
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	2b2f      	cmp	r3, #47	; 0x2f
 8012812:	d0f8      	beq.n	8012806 <follow_path+0x16>
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	2b5c      	cmp	r3, #92	; 0x5c
 801281a:	d0f4      	beq.n	8012806 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	2200      	movs	r2, #0
 8012820:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	2b1f      	cmp	r3, #31
 8012828:	d80a      	bhi.n	8012840 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2280      	movs	r2, #128	; 0x80
 801282e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012832:	2100      	movs	r1, #0
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f7fe fe28 	bl	801148a <dir_sdi>
 801283a:	4603      	mov	r3, r0
 801283c:	75fb      	strb	r3, [r7, #23]
 801283e:	e048      	b.n	80128d2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012840:	463b      	mov	r3, r7
 8012842:	4619      	mov	r1, r3
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f7ff fe1b 	bl	8012480 <create_name>
 801284a:	4603      	mov	r3, r0
 801284c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801284e:	7dfb      	ldrb	r3, [r7, #23]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d139      	bne.n	80128c8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f7ff fa90 	bl	8011d7a <dir_find>
 801285a:	4603      	mov	r3, r0
 801285c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012864:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012866:	7dfb      	ldrb	r3, [r7, #23]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d00a      	beq.n	8012882 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801286c:	7dfb      	ldrb	r3, [r7, #23]
 801286e:	2b04      	cmp	r3, #4
 8012870:	d12c      	bne.n	80128cc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012872:	7afb      	ldrb	r3, [r7, #11]
 8012874:	f003 0304 	and.w	r3, r3, #4
 8012878:	2b00      	cmp	r3, #0
 801287a:	d127      	bne.n	80128cc <follow_path+0xdc>
 801287c:	2305      	movs	r3, #5
 801287e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012880:	e024      	b.n	80128cc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012882:	7afb      	ldrb	r3, [r7, #11]
 8012884:	f003 0304 	and.w	r3, r3, #4
 8012888:	2b00      	cmp	r3, #0
 801288a:	d121      	bne.n	80128d0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	799b      	ldrb	r3, [r3, #6]
 8012890:	f003 0310 	and.w	r3, r3, #16
 8012894:	2b00      	cmp	r3, #0
 8012896:	d102      	bne.n	801289e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012898:	2305      	movs	r3, #5
 801289a:	75fb      	strb	r3, [r7, #23]
 801289c:	e019      	b.n	80128d2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	695b      	ldr	r3, [r3, #20]
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	8992      	ldrh	r2, [r2, #12]
 80128ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80128b0:	fb02 f200 	mul.w	r2, r2, r0
 80128b4:	1a9b      	subs	r3, r3, r2
 80128b6:	440b      	add	r3, r1
 80128b8:	4619      	mov	r1, r3
 80128ba:	68f8      	ldr	r0, [r7, #12]
 80128bc:	f7fe ff8b 	bl	80117d6 <ld_clust>
 80128c0:	4602      	mov	r2, r0
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80128c6:	e7bb      	b.n	8012840 <follow_path+0x50>
			if (res != FR_OK) break;
 80128c8:	bf00      	nop
 80128ca:	e002      	b.n	80128d2 <follow_path+0xe2>
				break;
 80128cc:	bf00      	nop
 80128ce:	e000      	b.n	80128d2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80128d0:	bf00      	nop
			}
		}
	}

	return res;
 80128d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3718      	adds	r7, #24
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80128dc:	b480      	push	{r7}
 80128de:	b087      	sub	sp, #28
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80128e4:	f04f 33ff 	mov.w	r3, #4294967295
 80128e8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d031      	beq.n	8012956 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	617b      	str	r3, [r7, #20]
 80128f8:	e002      	b.n	8012900 <get_ldnumber+0x24>
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	3301      	adds	r3, #1
 80128fe:	617b      	str	r3, [r7, #20]
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	2b1f      	cmp	r3, #31
 8012906:	d903      	bls.n	8012910 <get_ldnumber+0x34>
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2b3a      	cmp	r3, #58	; 0x3a
 801290e:	d1f4      	bne.n	80128fa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	2b3a      	cmp	r3, #58	; 0x3a
 8012916:	d11c      	bne.n	8012952 <get_ldnumber+0x76>
			tp = *path;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	1c5a      	adds	r2, r3, #1
 8012922:	60fa      	str	r2, [r7, #12]
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	3b30      	subs	r3, #48	; 0x30
 8012928:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	2b09      	cmp	r3, #9
 801292e:	d80e      	bhi.n	801294e <get_ldnumber+0x72>
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	429a      	cmp	r2, r3
 8012936:	d10a      	bne.n	801294e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d107      	bne.n	801294e <get_ldnumber+0x72>
					vol = (int)i;
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	3301      	adds	r3, #1
 8012946:	617b      	str	r3, [r7, #20]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	697a      	ldr	r2, [r7, #20]
 801294c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	e002      	b.n	8012958 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012952:	2300      	movs	r3, #0
 8012954:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012956:	693b      	ldr	r3, [r7, #16]
}
 8012958:	4618      	mov	r0, r3
 801295a:	371c      	adds	r7, #28
 801295c:	46bd      	mov	sp, r7
 801295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012962:	4770      	bx	lr

08012964 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2200      	movs	r2, #0
 8012972:	70da      	strb	r2, [r3, #3]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f04f 32ff 	mov.w	r2, #4294967295
 801297a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801297c:	6839      	ldr	r1, [r7, #0]
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	f7fe f9aa 	bl	8010cd8 <move_window>
 8012984:	4603      	mov	r3, r0
 8012986:	2b00      	cmp	r3, #0
 8012988:	d001      	beq.n	801298e <check_fs+0x2a>
 801298a:	2304      	movs	r3, #4
 801298c:	e038      	b.n	8012a00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	3338      	adds	r3, #56	; 0x38
 8012992:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012996:	4618      	mov	r0, r3
 8012998:	f7fd feee 	bl	8010778 <ld_word>
 801299c:	4603      	mov	r3, r0
 801299e:	461a      	mov	r2, r3
 80129a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d001      	beq.n	80129ac <check_fs+0x48>
 80129a8:	2303      	movs	r3, #3
 80129aa:	e029      	b.n	8012a00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80129b2:	2be9      	cmp	r3, #233	; 0xe9
 80129b4:	d009      	beq.n	80129ca <check_fs+0x66>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80129bc:	2beb      	cmp	r3, #235	; 0xeb
 80129be:	d11e      	bne.n	80129fe <check_fs+0x9a>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80129c6:	2b90      	cmp	r3, #144	; 0x90
 80129c8:	d119      	bne.n	80129fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	3338      	adds	r3, #56	; 0x38
 80129ce:	3336      	adds	r3, #54	; 0x36
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7fd fee9 	bl	80107a8 <ld_dword>
 80129d6:	4603      	mov	r3, r0
 80129d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80129dc:	4a0a      	ldr	r2, [pc, #40]	; (8012a08 <check_fs+0xa4>)
 80129de:	4293      	cmp	r3, r2
 80129e0:	d101      	bne.n	80129e6 <check_fs+0x82>
 80129e2:	2300      	movs	r3, #0
 80129e4:	e00c      	b.n	8012a00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	3338      	adds	r3, #56	; 0x38
 80129ea:	3352      	adds	r3, #82	; 0x52
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7fd fedb 	bl	80107a8 <ld_dword>
 80129f2:	4602      	mov	r2, r0
 80129f4:	4b05      	ldr	r3, [pc, #20]	; (8012a0c <check_fs+0xa8>)
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d101      	bne.n	80129fe <check_fs+0x9a>
 80129fa:	2300      	movs	r3, #0
 80129fc:	e000      	b.n	8012a00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80129fe:	2302      	movs	r3, #2
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	00544146 	.word	0x00544146
 8012a0c:	33544146 	.word	0x33544146

08012a10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b096      	sub	sp, #88	; 0x58
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	60f8      	str	r0, [r7, #12]
 8012a18:	60b9      	str	r1, [r7, #8]
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	2200      	movs	r2, #0
 8012a22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012a24:	68f8      	ldr	r0, [r7, #12]
 8012a26:	f7ff ff59 	bl	80128dc <get_ldnumber>
 8012a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	da01      	bge.n	8012a36 <find_volume+0x26>
 8012a32:	230b      	movs	r3, #11
 8012a34:	e268      	b.n	8012f08 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012a36:	4ab0      	ldr	r2, [pc, #704]	; (8012cf8 <find_volume+0x2e8>)
 8012a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d101      	bne.n	8012a4a <find_volume+0x3a>
 8012a46:	230c      	movs	r3, #12
 8012a48:	e25e      	b.n	8012f08 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012a50:	79fb      	ldrb	r3, [r7, #7]
 8012a52:	f023 0301 	bic.w	r3, r3, #1
 8012a56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d01a      	beq.n	8012a96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a62:	785b      	ldrb	r3, [r3, #1]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fd fde9 	bl	801063c <disk_status>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a74:	f003 0301 	and.w	r3, r3, #1
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d10c      	bne.n	8012a96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012a7c:	79fb      	ldrb	r3, [r7, #7]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d007      	beq.n	8012a92 <find_volume+0x82>
 8012a82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a86:	f003 0304 	and.w	r3, r3, #4
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d001      	beq.n	8012a92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012a8e:	230a      	movs	r3, #10
 8012a90:	e23a      	b.n	8012f08 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012a92:	2300      	movs	r3, #0
 8012a94:	e238      	b.n	8012f08 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a98:	2200      	movs	r2, #0
 8012a9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a9e:	b2da      	uxtb	r2, r3
 8012aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa6:	785b      	ldrb	r3, [r3, #1]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7fd fde1 	bl	8010670 <disk_initialize>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ab8:	f003 0301 	and.w	r3, r3, #1
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d001      	beq.n	8012ac4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012ac0:	2303      	movs	r3, #3
 8012ac2:	e221      	b.n	8012f08 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012ac4:	79fb      	ldrb	r3, [r7, #7]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d007      	beq.n	8012ada <find_volume+0xca>
 8012aca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ace:	f003 0304 	and.w	r3, r3, #4
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d001      	beq.n	8012ada <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012ad6:	230a      	movs	r3, #10
 8012ad8:	e216      	b.n	8012f08 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012adc:	7858      	ldrb	r0, [r3, #1]
 8012ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae0:	330c      	adds	r3, #12
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	2102      	movs	r1, #2
 8012ae6:	f7fd fe29 	bl	801073c <disk_ioctl>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d001      	beq.n	8012af4 <find_volume+0xe4>
 8012af0:	2301      	movs	r3, #1
 8012af2:	e209      	b.n	8012f08 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af6:	899b      	ldrh	r3, [r3, #12]
 8012af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012afc:	d80d      	bhi.n	8012b1a <find_volume+0x10a>
 8012afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b00:	899b      	ldrh	r3, [r3, #12]
 8012b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b06:	d308      	bcc.n	8012b1a <find_volume+0x10a>
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	899b      	ldrh	r3, [r3, #12]
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b10:	899b      	ldrh	r3, [r3, #12]
 8012b12:	3b01      	subs	r3, #1
 8012b14:	4013      	ands	r3, r2
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d001      	beq.n	8012b1e <find_volume+0x10e>
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e1f4      	b.n	8012f08 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b26:	f7ff ff1d 	bl	8012964 <check_fs>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b34:	2b02      	cmp	r3, #2
 8012b36:	d14b      	bne.n	8012bd0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012b38:	2300      	movs	r3, #0
 8012b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8012b3c:	e01f      	b.n	8012b7e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b40:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b46:	011b      	lsls	r3, r3, #4
 8012b48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012b4c:	4413      	add	r3, r2
 8012b4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b52:	3304      	adds	r3, #4
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d006      	beq.n	8012b68 <find_volume+0x158>
 8012b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5c:	3308      	adds	r3, #8
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7fd fe22 	bl	80107a8 <ld_dword>
 8012b64:	4602      	mov	r2, r0
 8012b66:	e000      	b.n	8012b6a <find_volume+0x15a>
 8012b68:	2200      	movs	r2, #0
 8012b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012b72:	440b      	add	r3, r1
 8012b74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8012b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b80:	2b03      	cmp	r3, #3
 8012b82:	d9dc      	bls.n	8012b3e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012b84:	2300      	movs	r3, #0
 8012b86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d002      	beq.n	8012b94 <find_volume+0x184>
 8012b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b90:	3b01      	subs	r3, #1
 8012b92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012b9c:	4413      	add	r3, r2
 8012b9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ba2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d005      	beq.n	8012bb6 <find_volume+0x1a6>
 8012baa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012bae:	f7ff fed9 	bl	8012964 <check_fs>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	e000      	b.n	8012bb8 <find_volume+0x1a8>
 8012bb6:	2303      	movs	r3, #3
 8012bb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	d905      	bls.n	8012bd0 <find_volume+0x1c0>
 8012bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8012bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bcc:	2b03      	cmp	r3, #3
 8012bce:	d9e1      	bls.n	8012b94 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012bd4:	2b04      	cmp	r3, #4
 8012bd6:	d101      	bne.n	8012bdc <find_volume+0x1cc>
 8012bd8:	2301      	movs	r3, #1
 8012bda:	e195      	b.n	8012f08 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d901      	bls.n	8012be8 <find_volume+0x1d8>
 8012be4:	230d      	movs	r3, #13
 8012be6:	e18f      	b.n	8012f08 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bea:	3338      	adds	r3, #56	; 0x38
 8012bec:	330b      	adds	r3, #11
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fd fdc2 	bl	8010778 <ld_word>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfa:	899b      	ldrh	r3, [r3, #12]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d001      	beq.n	8012c04 <find_volume+0x1f4>
 8012c00:	230d      	movs	r3, #13
 8012c02:	e181      	b.n	8012f08 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c06:	3338      	adds	r3, #56	; 0x38
 8012c08:	3316      	adds	r3, #22
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fd fdb4 	bl	8010778 <ld_word>
 8012c10:	4603      	mov	r3, r0
 8012c12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d106      	bne.n	8012c28 <find_volume+0x218>
 8012c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1c:	3338      	adds	r3, #56	; 0x38
 8012c1e:	3324      	adds	r3, #36	; 0x24
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fd fdc1 	bl	80107a8 <ld_dword>
 8012c26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c2c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c30:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3a:	789b      	ldrb	r3, [r3, #2]
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	d005      	beq.n	8012c4c <find_volume+0x23c>
 8012c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c42:	789b      	ldrb	r3, [r3, #2]
 8012c44:	2b02      	cmp	r3, #2
 8012c46:	d001      	beq.n	8012c4c <find_volume+0x23c>
 8012c48:	230d      	movs	r3, #13
 8012c4a:	e15d      	b.n	8012f08 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c4e:	789b      	ldrb	r3, [r3, #2]
 8012c50:	461a      	mov	r2, r3
 8012c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c54:	fb02 f303 	mul.w	r3, r2, r3
 8012c58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c68:	895b      	ldrh	r3, [r3, #10]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d008      	beq.n	8012c80 <find_volume+0x270>
 8012c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c70:	895b      	ldrh	r3, [r3, #10]
 8012c72:	461a      	mov	r2, r3
 8012c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c76:	895b      	ldrh	r3, [r3, #10]
 8012c78:	3b01      	subs	r3, #1
 8012c7a:	4013      	ands	r3, r2
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d001      	beq.n	8012c84 <find_volume+0x274>
 8012c80:	230d      	movs	r3, #13
 8012c82:	e141      	b.n	8012f08 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c86:	3338      	adds	r3, #56	; 0x38
 8012c88:	3311      	adds	r3, #17
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7fd fd74 	bl	8010778 <ld_word>
 8012c90:	4603      	mov	r3, r0
 8012c92:	461a      	mov	r2, r3
 8012c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c9a:	891b      	ldrh	r3, [r3, #8]
 8012c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c9e:	8992      	ldrh	r2, [r2, #12]
 8012ca0:	0952      	lsrs	r2, r2, #5
 8012ca2:	b292      	uxth	r2, r2
 8012ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ca8:	fb02 f201 	mul.w	r2, r2, r1
 8012cac:	1a9b      	subs	r3, r3, r2
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d001      	beq.n	8012cb8 <find_volume+0x2a8>
 8012cb4:	230d      	movs	r3, #13
 8012cb6:	e127      	b.n	8012f08 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cba:	3338      	adds	r3, #56	; 0x38
 8012cbc:	3313      	adds	r3, #19
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7fd fd5a 	bl	8010778 <ld_word>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d106      	bne.n	8012cdc <find_volume+0x2cc>
 8012cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd0:	3338      	adds	r3, #56	; 0x38
 8012cd2:	3320      	adds	r3, #32
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7fd fd67 	bl	80107a8 <ld_dword>
 8012cda:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cde:	3338      	adds	r3, #56	; 0x38
 8012ce0:	330e      	adds	r3, #14
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7fd fd48 	bl	8010778 <ld_word>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012cec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d104      	bne.n	8012cfc <find_volume+0x2ec>
 8012cf2:	230d      	movs	r3, #13
 8012cf4:	e108      	b.n	8012f08 <find_volume+0x4f8>
 8012cf6:	bf00      	nop
 8012cf8:	20001e84 	.word	0x20001e84

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012cfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d00:	4413      	add	r3, r2
 8012d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d04:	8911      	ldrh	r1, [r2, #8]
 8012d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d08:	8992      	ldrh	r2, [r2, #12]
 8012d0a:	0952      	lsrs	r2, r2, #5
 8012d0c:	b292      	uxth	r2, r2
 8012d0e:	fbb1 f2f2 	udiv	r2, r1, r2
 8012d12:	b292      	uxth	r2, r2
 8012d14:	4413      	add	r3, r2
 8012d16:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d201      	bcs.n	8012d24 <find_volume+0x314>
 8012d20:	230d      	movs	r3, #13
 8012d22:	e0f1      	b.n	8012f08 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d2c:	8952      	ldrh	r2, [r2, #10]
 8012d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d32:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d101      	bne.n	8012d3e <find_volume+0x32e>
 8012d3a:	230d      	movs	r3, #13
 8012d3c:	e0e4      	b.n	8012f08 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012d3e:	2303      	movs	r3, #3
 8012d40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d46:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012d4a:	4293      	cmp	r3, r2
 8012d4c:	d802      	bhi.n	8012d54 <find_volume+0x344>
 8012d4e:	2302      	movs	r3, #2
 8012d50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d56:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012d5a:	4293      	cmp	r3, r2
 8012d5c:	d802      	bhi.n	8012d64 <find_volume+0x354>
 8012d5e:	2301      	movs	r3, #1
 8012d60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d66:	1c9a      	adds	r2, r3, #2
 8012d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d70:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012d72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d76:	441a      	add	r2, r3
 8012d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012d7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d80:	441a      	add	r2, r3
 8012d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d84:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d8a:	2b03      	cmp	r3, #3
 8012d8c:	d11e      	bne.n	8012dcc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d90:	3338      	adds	r3, #56	; 0x38
 8012d92:	332a      	adds	r3, #42	; 0x2a
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7fd fcef 	bl	8010778 <ld_word>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d001      	beq.n	8012da4 <find_volume+0x394>
 8012da0:	230d      	movs	r3, #13
 8012da2:	e0b1      	b.n	8012f08 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da6:	891b      	ldrh	r3, [r3, #8]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d001      	beq.n	8012db0 <find_volume+0x3a0>
 8012dac:	230d      	movs	r3, #13
 8012dae:	e0ab      	b.n	8012f08 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db2:	3338      	adds	r3, #56	; 0x38
 8012db4:	332c      	adds	r3, #44	; 0x2c
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7fd fcf6 	bl	80107a8 <ld_dword>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc4:	69db      	ldr	r3, [r3, #28]
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8012dca:	e01f      	b.n	8012e0c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dce:	891b      	ldrh	r3, [r3, #8]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d101      	bne.n	8012dd8 <find_volume+0x3c8>
 8012dd4:	230d      	movs	r3, #13
 8012dd6:	e097      	b.n	8012f08 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dde:	441a      	add	r2, r3
 8012de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d103      	bne.n	8012df4 <find_volume+0x3e4>
 8012dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dee:	69db      	ldr	r3, [r3, #28]
 8012df0:	005b      	lsls	r3, r3, #1
 8012df2:	e00a      	b.n	8012e0a <find_volume+0x3fa>
 8012df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df6:	69da      	ldr	r2, [r3, #28]
 8012df8:	4613      	mov	r3, r2
 8012dfa:	005b      	lsls	r3, r3, #1
 8012dfc:	4413      	add	r3, r2
 8012dfe:	085a      	lsrs	r2, r3, #1
 8012e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e02:	69db      	ldr	r3, [r3, #28]
 8012e04:	f003 0301 	and.w	r3, r3, #1
 8012e08:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012e0a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0e:	6a1a      	ldr	r2, [r3, #32]
 8012e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e12:	899b      	ldrh	r3, [r3, #12]
 8012e14:	4619      	mov	r1, r3
 8012e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e18:	440b      	add	r3, r1
 8012e1a:	3b01      	subs	r3, #1
 8012e1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e1e:	8989      	ldrh	r1, [r1, #12]
 8012e20:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d201      	bcs.n	8012e2c <find_volume+0x41c>
 8012e28:	230d      	movs	r3, #13
 8012e2a:	e06d      	b.n	8012f08 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e32:	619a      	str	r2, [r3, #24]
 8012e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e36:	699a      	ldr	r2, [r3, #24]
 8012e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8012e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3e:	2280      	movs	r2, #128	; 0x80
 8012e40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012e42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e46:	2b03      	cmp	r3, #3
 8012e48:	d149      	bne.n	8012ede <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4c:	3338      	adds	r3, #56	; 0x38
 8012e4e:	3330      	adds	r3, #48	; 0x30
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7fd fc91 	bl	8010778 <ld_word>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d140      	bne.n	8012ede <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e5e:	3301      	adds	r3, #1
 8012e60:	4619      	mov	r1, r3
 8012e62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e64:	f7fd ff38 	bl	8010cd8 <move_window>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d137      	bne.n	8012ede <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e70:	2200      	movs	r2, #0
 8012e72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e76:	3338      	adds	r3, #56	; 0x38
 8012e78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fd fc7b 	bl	8010778 <ld_word>
 8012e82:	4603      	mov	r3, r0
 8012e84:	461a      	mov	r2, r3
 8012e86:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d127      	bne.n	8012ede <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e90:	3338      	adds	r3, #56	; 0x38
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fd fc88 	bl	80107a8 <ld_dword>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	4b1d      	ldr	r3, [pc, #116]	; (8012f10 <find_volume+0x500>)
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d11e      	bne.n	8012ede <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea2:	3338      	adds	r3, #56	; 0x38
 8012ea4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7fd fc7d 	bl	80107a8 <ld_dword>
 8012eae:	4602      	mov	r2, r0
 8012eb0:	4b18      	ldr	r3, [pc, #96]	; (8012f14 <find_volume+0x504>)
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d113      	bne.n	8012ede <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb8:	3338      	adds	r3, #56	; 0x38
 8012eba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fd fc72 	bl	80107a8 <ld_dword>
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ecc:	3338      	adds	r3, #56	; 0x38
 8012ece:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7fd fc68 	bl	80107a8 <ld_dword>
 8012ed8:	4602      	mov	r2, r0
 8012eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012edc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012ee4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012ee6:	4b0c      	ldr	r3, [pc, #48]	; (8012f18 <find_volume+0x508>)
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	3301      	adds	r3, #1
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	4b0a      	ldr	r3, [pc, #40]	; (8012f18 <find_volume+0x508>)
 8012ef0:	801a      	strh	r2, [r3, #0]
 8012ef2:	4b09      	ldr	r3, [pc, #36]	; (8012f18 <find_volume+0x508>)
 8012ef4:	881a      	ldrh	r2, [r3, #0]
 8012ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8012efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efc:	4a07      	ldr	r2, [pc, #28]	; (8012f1c <find_volume+0x50c>)
 8012efe:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f02:	f7fd fe81 	bl	8010c08 <clear_lock>
#endif
	return FR_OK;
 8012f06:	2300      	movs	r3, #0
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3758      	adds	r7, #88	; 0x58
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	41615252 	.word	0x41615252
 8012f14:	61417272 	.word	0x61417272
 8012f18:	20001e88 	.word	0x20001e88
 8012f1c:	20001f2c 	.word	0x20001f2c

08012f20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b084      	sub	sp, #16
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012f2a:	2309      	movs	r3, #9
 8012f2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d01c      	beq.n	8012f6e <validate+0x4e>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d018      	beq.n	8012f6e <validate+0x4e>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d013      	beq.n	8012f6e <validate+0x4e>
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	889a      	ldrh	r2, [r3, #4]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	88db      	ldrh	r3, [r3, #6]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d10c      	bne.n	8012f6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	785b      	ldrb	r3, [r3, #1]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7fd fb6e 	bl	801063c <disk_status>
 8012f60:	4603      	mov	r3, r0
 8012f62:	f003 0301 	and.w	r3, r3, #1
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d101      	bne.n	8012f6e <validate+0x4e>
			res = FR_OK;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012f6e:	7bfb      	ldrb	r3, [r7, #15]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d102      	bne.n	8012f7a <validate+0x5a>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	e000      	b.n	8012f7c <validate+0x5c>
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	683a      	ldr	r2, [r7, #0]
 8012f7e:	6013      	str	r3, [r2, #0]
	return res;
 8012f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3710      	adds	r7, #16
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
	...

08012f8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b088      	sub	sp, #32
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	4613      	mov	r3, r2
 8012f98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012f9e:	f107 0310 	add.w	r3, r7, #16
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7ff fc9a 	bl	80128dc <get_ldnumber>
 8012fa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012faa:	69fb      	ldr	r3, [r7, #28]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	da01      	bge.n	8012fb4 <f_mount+0x28>
 8012fb0:	230b      	movs	r3, #11
 8012fb2:	e02b      	b.n	801300c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012fb4:	4a17      	ldr	r2, [pc, #92]	; (8013014 <f_mount+0x88>)
 8012fb6:	69fb      	ldr	r3, [r7, #28]
 8012fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d005      	beq.n	8012fd0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012fc4:	69b8      	ldr	r0, [r7, #24]
 8012fc6:	f7fd fe1f 	bl	8010c08 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d002      	beq.n	8012fdc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012fdc:	68fa      	ldr	r2, [r7, #12]
 8012fde:	490d      	ldr	r1, [pc, #52]	; (8013014 <f_mount+0x88>)
 8012fe0:	69fb      	ldr	r3, [r7, #28]
 8012fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d002      	beq.n	8012ff2 <f_mount+0x66>
 8012fec:	79fb      	ldrb	r3, [r7, #7]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d001      	beq.n	8012ff6 <f_mount+0x6a>
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	e00a      	b.n	801300c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012ff6:	f107 010c 	add.w	r1, r7, #12
 8012ffa:	f107 0308 	add.w	r3, r7, #8
 8012ffe:	2200      	movs	r2, #0
 8013000:	4618      	mov	r0, r3
 8013002:	f7ff fd05 	bl	8012a10 <find_volume>
 8013006:	4603      	mov	r3, r0
 8013008:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801300a:	7dfb      	ldrb	r3, [r7, #23]
}
 801300c:	4618      	mov	r0, r3
 801300e:	3720      	adds	r7, #32
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}
 8013014:	20001e84 	.word	0x20001e84

08013018 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b09a      	sub	sp, #104	; 0x68
 801301c:	af00      	add	r7, sp, #0
 801301e:	60f8      	str	r0, [r7, #12]
 8013020:	60b9      	str	r1, [r7, #8]
 8013022:	4613      	mov	r3, r2
 8013024:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d101      	bne.n	8013030 <f_open+0x18>
 801302c:	2309      	movs	r3, #9
 801302e:	e1bb      	b.n	80133a8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013030:	79fb      	ldrb	r3, [r7, #7]
 8013032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013036:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013038:	79fa      	ldrb	r2, [r7, #7]
 801303a:	f107 0110 	add.w	r1, r7, #16
 801303e:	f107 0308 	add.w	r3, r7, #8
 8013042:	4618      	mov	r0, r3
 8013044:	f7ff fce4 	bl	8012a10 <find_volume>
 8013048:	4603      	mov	r3, r0
 801304a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801304e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013052:	2b00      	cmp	r3, #0
 8013054:	f040 819f 	bne.w	8013396 <f_open+0x37e>
		dj.obj.fs = fs;
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801305c:	68ba      	ldr	r2, [r7, #8]
 801305e:	f107 0314 	add.w	r3, r7, #20
 8013062:	4611      	mov	r1, r2
 8013064:	4618      	mov	r0, r3
 8013066:	f7ff fbc3 	bl	80127f0 <follow_path>
 801306a:	4603      	mov	r3, r0
 801306c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013070:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013074:	2b00      	cmp	r3, #0
 8013076:	d11a      	bne.n	80130ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013078:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801307c:	b25b      	sxtb	r3, r3
 801307e:	2b00      	cmp	r3, #0
 8013080:	da03      	bge.n	801308a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013082:	2306      	movs	r3, #6
 8013084:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013088:	e011      	b.n	80130ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801308a:	79fb      	ldrb	r3, [r7, #7]
 801308c:	f023 0301 	bic.w	r3, r3, #1
 8013090:	2b00      	cmp	r3, #0
 8013092:	bf14      	ite	ne
 8013094:	2301      	movne	r3, #1
 8013096:	2300      	moveq	r3, #0
 8013098:	b2db      	uxtb	r3, r3
 801309a:	461a      	mov	r2, r3
 801309c:	f107 0314 	add.w	r3, r7, #20
 80130a0:	4611      	mov	r1, r2
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7fd fc68 	bl	8010978 <chk_lock>
 80130a8:	4603      	mov	r3, r0
 80130aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80130ae:	79fb      	ldrb	r3, [r7, #7]
 80130b0:	f003 031c 	and.w	r3, r3, #28
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d07f      	beq.n	80131b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80130b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d017      	beq.n	80130f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80130c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80130c4:	2b04      	cmp	r3, #4
 80130c6:	d10e      	bne.n	80130e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80130c8:	f7fd fcb2 	bl	8010a30 <enq_lock>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d006      	beq.n	80130e0 <f_open+0xc8>
 80130d2:	f107 0314 	add.w	r3, r7, #20
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7fe ff10 	bl	8011efc <dir_register>
 80130dc:	4603      	mov	r3, r0
 80130de:	e000      	b.n	80130e2 <f_open+0xca>
 80130e0:	2312      	movs	r3, #18
 80130e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80130e6:	79fb      	ldrb	r3, [r7, #7]
 80130e8:	f043 0308 	orr.w	r3, r3, #8
 80130ec:	71fb      	strb	r3, [r7, #7]
 80130ee:	e010      	b.n	8013112 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80130f0:	7ebb      	ldrb	r3, [r7, #26]
 80130f2:	f003 0311 	and.w	r3, r3, #17
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d003      	beq.n	8013102 <f_open+0xea>
					res = FR_DENIED;
 80130fa:	2307      	movs	r3, #7
 80130fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013100:	e007      	b.n	8013112 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013102:	79fb      	ldrb	r3, [r7, #7]
 8013104:	f003 0304 	and.w	r3, r3, #4
 8013108:	2b00      	cmp	r3, #0
 801310a:	d002      	beq.n	8013112 <f_open+0xfa>
 801310c:	2308      	movs	r3, #8
 801310e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013112:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013116:	2b00      	cmp	r3, #0
 8013118:	d168      	bne.n	80131ec <f_open+0x1d4>
 801311a:	79fb      	ldrb	r3, [r7, #7]
 801311c:	f003 0308 	and.w	r3, r3, #8
 8013120:	2b00      	cmp	r3, #0
 8013122:	d063      	beq.n	80131ec <f_open+0x1d4>
				dw = GET_FATTIME();
 8013124:	f7fa fb70 	bl	800d808 <get_fattime>
 8013128:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801312c:	330e      	adds	r3, #14
 801312e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013130:	4618      	mov	r0, r3
 8013132:	f7fd fb77 	bl	8010824 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013138:	3316      	adds	r3, #22
 801313a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801313c:	4618      	mov	r0, r3
 801313e:	f7fd fb71 	bl	8010824 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013144:	330b      	adds	r3, #11
 8013146:	2220      	movs	r2, #32
 8013148:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801314e:	4611      	mov	r1, r2
 8013150:	4618      	mov	r0, r3
 8013152:	f7fe fb40 	bl	80117d6 <ld_clust>
 8013156:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801315c:	2200      	movs	r2, #0
 801315e:	4618      	mov	r0, r3
 8013160:	f7fe fb58 	bl	8011814 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013166:	331c      	adds	r3, #28
 8013168:	2100      	movs	r1, #0
 801316a:	4618      	mov	r0, r3
 801316c:	f7fd fb5a 	bl	8010824 <st_dword>
					fs->wflag = 1;
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	2201      	movs	r2, #1
 8013174:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013178:	2b00      	cmp	r3, #0
 801317a:	d037      	beq.n	80131ec <f_open+0x1d4>
						dw = fs->winsect;
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013180:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8013182:	f107 0314 	add.w	r3, r7, #20
 8013186:	2200      	movs	r2, #0
 8013188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801318a:	4618      	mov	r0, r3
 801318c:	f7fe f848 	bl	8011220 <remove_chain>
 8013190:	4603      	mov	r3, r0
 8013192:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8013196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801319a:	2b00      	cmp	r3, #0
 801319c:	d126      	bne.n	80131ec <f_open+0x1d4>
							res = move_window(fs, dw);
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7fd fd98 	bl	8010cd8 <move_window>
 80131a8:	4603      	mov	r3, r0
 80131aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131b2:	3a01      	subs	r2, #1
 80131b4:	615a      	str	r2, [r3, #20]
 80131b6:	e019      	b.n	80131ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80131b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d115      	bne.n	80131ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80131c0:	7ebb      	ldrb	r3, [r7, #26]
 80131c2:	f003 0310 	and.w	r3, r3, #16
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d003      	beq.n	80131d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80131ca:	2304      	movs	r3, #4
 80131cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80131d0:	e00c      	b.n	80131ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80131d2:	79fb      	ldrb	r3, [r7, #7]
 80131d4:	f003 0302 	and.w	r3, r3, #2
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d007      	beq.n	80131ec <f_open+0x1d4>
 80131dc:	7ebb      	ldrb	r3, [r7, #26]
 80131de:	f003 0301 	and.w	r3, r3, #1
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d002      	beq.n	80131ec <f_open+0x1d4>
						res = FR_DENIED;
 80131e6:	2307      	movs	r3, #7
 80131e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80131ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d128      	bne.n	8013246 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80131f4:	79fb      	ldrb	r3, [r7, #7]
 80131f6:	f003 0308 	and.w	r3, r3, #8
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d003      	beq.n	8013206 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80131fe:	79fb      	ldrb	r3, [r7, #7]
 8013200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013204:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801320e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013214:	79fb      	ldrb	r3, [r7, #7]
 8013216:	f023 0301 	bic.w	r3, r3, #1
 801321a:	2b00      	cmp	r3, #0
 801321c:	bf14      	ite	ne
 801321e:	2301      	movne	r3, #1
 8013220:	2300      	moveq	r3, #0
 8013222:	b2db      	uxtb	r3, r3
 8013224:	461a      	mov	r2, r3
 8013226:	f107 0314 	add.w	r3, r7, #20
 801322a:	4611      	mov	r1, r2
 801322c:	4618      	mov	r0, r3
 801322e:	f7fd fc21 	bl	8010a74 <inc_lock>
 8013232:	4602      	mov	r2, r0
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	691b      	ldr	r3, [r3, #16]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d102      	bne.n	8013246 <f_open+0x22e>
 8013240:	2302      	movs	r3, #2
 8013242:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013246:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801324a:	2b00      	cmp	r3, #0
 801324c:	f040 80a3 	bne.w	8013396 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013254:	4611      	mov	r1, r2
 8013256:	4618      	mov	r0, r3
 8013258:	f7fe fabd 	bl	80117d6 <ld_clust>
 801325c:	4602      	mov	r2, r0
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013264:	331c      	adds	r3, #28
 8013266:	4618      	mov	r0, r3
 8013268:	f7fd fa9e 	bl	80107a8 <ld_dword>
 801326c:	4602      	mov	r2, r0
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2200      	movs	r2, #0
 8013276:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013278:	693a      	ldr	r2, [r7, #16]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	88da      	ldrh	r2, [r3, #6]
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	79fa      	ldrb	r2, [r7, #7]
 801328a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	2200      	movs	r2, #0
 8013290:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	2200      	movs	r2, #0
 8013296:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	2200      	movs	r2, #0
 801329c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	3330      	adds	r3, #48	; 0x30
 80132a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80132a6:	2100      	movs	r1, #0
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fd fb08 	bl	80108be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80132ae:	79fb      	ldrb	r3, [r7, #7]
 80132b0:	f003 0320 	and.w	r3, r3, #32
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d06e      	beq.n	8013396 <f_open+0x37e>
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d06a      	beq.n	8013396 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	68da      	ldr	r2, [r3, #12]
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	895b      	ldrh	r3, [r3, #10]
 80132cc:	461a      	mov	r2, r3
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	899b      	ldrh	r3, [r3, #12]
 80132d2:	fb03 f302 	mul.w	r3, r3, r2
 80132d6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	689b      	ldr	r3, [r3, #8]
 80132dc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80132e4:	e016      	b.n	8013314 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fd fdb1 	bl	8010e52 <get_fat>
 80132f0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80132f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132f4:	2b01      	cmp	r3, #1
 80132f6:	d802      	bhi.n	80132fe <f_open+0x2e6>
 80132f8:	2302      	movs	r3, #2
 80132fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80132fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013304:	d102      	bne.n	801330c <f_open+0x2f4>
 8013306:	2301      	movs	r3, #1
 8013308:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801330c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801330e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013310:	1ad3      	subs	r3, r2, r3
 8013312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013314:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013318:	2b00      	cmp	r3, #0
 801331a:	d103      	bne.n	8013324 <f_open+0x30c>
 801331c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801331e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013320:	429a      	cmp	r2, r3
 8013322:	d8e0      	bhi.n	80132e6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013328:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801332a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801332e:	2b00      	cmp	r3, #0
 8013330:	d131      	bne.n	8013396 <f_open+0x37e>
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	899b      	ldrh	r3, [r3, #12]
 8013336:	461a      	mov	r2, r3
 8013338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801333a:	fbb3 f1f2 	udiv	r1, r3, r2
 801333e:	fb02 f201 	mul.w	r2, r2, r1
 8013342:	1a9b      	subs	r3, r3, r2
 8013344:	2b00      	cmp	r3, #0
 8013346:	d026      	beq.n	8013396 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801334c:	4618      	mov	r0, r3
 801334e:	f7fd fd61 	bl	8010e14 <clust2sect>
 8013352:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013356:	2b00      	cmp	r3, #0
 8013358:	d103      	bne.n	8013362 <f_open+0x34a>
						res = FR_INT_ERR;
 801335a:	2302      	movs	r3, #2
 801335c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013360:	e019      	b.n	8013396 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	899b      	ldrh	r3, [r3, #12]
 8013366:	461a      	mov	r2, r3
 8013368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801336a:	fbb3 f2f2 	udiv	r2, r3, r2
 801336e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013370:	441a      	add	r2, r3
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	7858      	ldrb	r0, [r3, #1]
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	6a1a      	ldr	r2, [r3, #32]
 8013384:	2301      	movs	r3, #1
 8013386:	f7fd f999 	bl	80106bc <disk_read>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <f_open+0x37e>
 8013390:	2301      	movs	r3, #1
 8013392:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013396:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801339a:	2b00      	cmp	r3, #0
 801339c:	d002      	beq.n	80133a4 <f_open+0x38c>
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2200      	movs	r2, #0
 80133a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80133a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3768      	adds	r7, #104	; 0x68
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b08e      	sub	sp, #56	; 0x38
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	607a      	str	r2, [r7, #4]
 80133bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	2200      	movs	r2, #0
 80133c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	f107 0214 	add.w	r2, r7, #20
 80133ce:	4611      	mov	r1, r2
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7ff fda5 	bl	8012f20 <validate>
 80133d6:	4603      	mov	r3, r0
 80133d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80133dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d107      	bne.n	80133f4 <f_read+0x44>
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	7d5b      	ldrb	r3, [r3, #21]
 80133e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80133ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d002      	beq.n	80133fa <f_read+0x4a>
 80133f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133f8:	e135      	b.n	8013666 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	7d1b      	ldrb	r3, [r3, #20]
 80133fe:	f003 0301 	and.w	r3, r3, #1
 8013402:	2b00      	cmp	r3, #0
 8013404:	d101      	bne.n	801340a <f_read+0x5a>
 8013406:	2307      	movs	r3, #7
 8013408:	e12d      	b.n	8013666 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	68da      	ldr	r2, [r3, #12]
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	699b      	ldr	r3, [r3, #24]
 8013412:	1ad3      	subs	r3, r2, r3
 8013414:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	6a3b      	ldr	r3, [r7, #32]
 801341a:	429a      	cmp	r2, r3
 801341c:	f240 811e 	bls.w	801365c <f_read+0x2ac>
 8013420:	6a3b      	ldr	r3, [r7, #32]
 8013422:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013424:	e11a      	b.n	801365c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	699b      	ldr	r3, [r3, #24]
 801342a:	697a      	ldr	r2, [r7, #20]
 801342c:	8992      	ldrh	r2, [r2, #12]
 801342e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013432:	fb02 f201 	mul.w	r2, r2, r1
 8013436:	1a9b      	subs	r3, r3, r2
 8013438:	2b00      	cmp	r3, #0
 801343a:	f040 80d5 	bne.w	80135e8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	699b      	ldr	r3, [r3, #24]
 8013442:	697a      	ldr	r2, [r7, #20]
 8013444:	8992      	ldrh	r2, [r2, #12]
 8013446:	fbb3 f3f2 	udiv	r3, r3, r2
 801344a:	697a      	ldr	r2, [r7, #20]
 801344c:	8952      	ldrh	r2, [r2, #10]
 801344e:	3a01      	subs	r2, #1
 8013450:	4013      	ands	r3, r2
 8013452:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013454:	69fb      	ldr	r3, [r7, #28]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d12f      	bne.n	80134ba <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	699b      	ldr	r3, [r3, #24]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d103      	bne.n	801346a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	689b      	ldr	r3, [r3, #8]
 8013466:	633b      	str	r3, [r7, #48]	; 0x30
 8013468:	e013      	b.n	8013492 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801346e:	2b00      	cmp	r3, #0
 8013470:	d007      	beq.n	8013482 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	699b      	ldr	r3, [r3, #24]
 8013476:	4619      	mov	r1, r3
 8013478:	68f8      	ldr	r0, [r7, #12]
 801347a:	f7fd ffce 	bl	801141a <clmt_clust>
 801347e:	6338      	str	r0, [r7, #48]	; 0x30
 8013480:	e007      	b.n	8013492 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013482:	68fa      	ldr	r2, [r7, #12]
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	69db      	ldr	r3, [r3, #28]
 8013488:	4619      	mov	r1, r3
 801348a:	4610      	mov	r0, r2
 801348c:	f7fd fce1 	bl	8010e52 <get_fat>
 8013490:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013494:	2b01      	cmp	r3, #1
 8013496:	d804      	bhi.n	80134a2 <f_read+0xf2>
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	2202      	movs	r2, #2
 801349c:	755a      	strb	r2, [r3, #21]
 801349e:	2302      	movs	r3, #2
 80134a0:	e0e1      	b.n	8013666 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80134a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134a8:	d104      	bne.n	80134b4 <f_read+0x104>
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2201      	movs	r2, #1
 80134ae:	755a      	strb	r2, [r3, #21]
 80134b0:	2301      	movs	r3, #1
 80134b2:	e0d8      	b.n	8013666 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134b8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80134ba:	697a      	ldr	r2, [r7, #20]
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	69db      	ldr	r3, [r3, #28]
 80134c0:	4619      	mov	r1, r3
 80134c2:	4610      	mov	r0, r2
 80134c4:	f7fd fca6 	bl	8010e14 <clust2sect>
 80134c8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80134ca:	69bb      	ldr	r3, [r7, #24]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d104      	bne.n	80134da <f_read+0x12a>
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	2202      	movs	r2, #2
 80134d4:	755a      	strb	r2, [r3, #21]
 80134d6:	2302      	movs	r3, #2
 80134d8:	e0c5      	b.n	8013666 <f_read+0x2b6>
			sect += csect;
 80134da:	69ba      	ldr	r2, [r7, #24]
 80134dc:	69fb      	ldr	r3, [r7, #28]
 80134de:	4413      	add	r3, r2
 80134e0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	899b      	ldrh	r3, [r3, #12]
 80134e6:	461a      	mov	r2, r3
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80134ee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80134f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d041      	beq.n	801357a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80134f6:	69fa      	ldr	r2, [r7, #28]
 80134f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fa:	4413      	add	r3, r2
 80134fc:	697a      	ldr	r2, [r7, #20]
 80134fe:	8952      	ldrh	r2, [r2, #10]
 8013500:	4293      	cmp	r3, r2
 8013502:	d905      	bls.n	8013510 <f_read+0x160>
					cc = fs->csize - csect;
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	895b      	ldrh	r3, [r3, #10]
 8013508:	461a      	mov	r2, r3
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	1ad3      	subs	r3, r2, r3
 801350e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	7858      	ldrb	r0, [r3, #1]
 8013514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013516:	69ba      	ldr	r2, [r7, #24]
 8013518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801351a:	f7fd f8cf 	bl	80106bc <disk_read>
 801351e:	4603      	mov	r3, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d004      	beq.n	801352e <f_read+0x17e>
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2201      	movs	r2, #1
 8013528:	755a      	strb	r2, [r3, #21]
 801352a:	2301      	movs	r3, #1
 801352c:	e09b      	b.n	8013666 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	7d1b      	ldrb	r3, [r3, #20]
 8013532:	b25b      	sxtb	r3, r3
 8013534:	2b00      	cmp	r3, #0
 8013536:	da18      	bge.n	801356a <f_read+0x1ba>
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	6a1a      	ldr	r2, [r3, #32]
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	1ad3      	subs	r3, r2, r3
 8013540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013542:	429a      	cmp	r2, r3
 8013544:	d911      	bls.n	801356a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	6a1a      	ldr	r2, [r3, #32]
 801354a:	69bb      	ldr	r3, [r7, #24]
 801354c:	1ad3      	subs	r3, r2, r3
 801354e:	697a      	ldr	r2, [r7, #20]
 8013550:	8992      	ldrh	r2, [r2, #12]
 8013552:	fb02 f303 	mul.w	r3, r2, r3
 8013556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013558:	18d0      	adds	r0, r2, r3
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	899b      	ldrh	r3, [r3, #12]
 8013564:	461a      	mov	r2, r3
 8013566:	f7fd f989 	bl	801087c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	899b      	ldrh	r3, [r3, #12]
 801356e:	461a      	mov	r2, r3
 8013570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013572:	fb02 f303 	mul.w	r3, r2, r3
 8013576:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013578:	e05c      	b.n	8013634 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	6a1b      	ldr	r3, [r3, #32]
 801357e:	69ba      	ldr	r2, [r7, #24]
 8013580:	429a      	cmp	r2, r3
 8013582:	d02e      	beq.n	80135e2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	7d1b      	ldrb	r3, [r3, #20]
 8013588:	b25b      	sxtb	r3, r3
 801358a:	2b00      	cmp	r3, #0
 801358c:	da18      	bge.n	80135c0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	7858      	ldrb	r0, [r3, #1]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	6a1a      	ldr	r2, [r3, #32]
 801359c:	2301      	movs	r3, #1
 801359e:	f7fd f8ad 	bl	80106fc <disk_write>
 80135a2:	4603      	mov	r3, r0
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d004      	beq.n	80135b2 <f_read+0x202>
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	2201      	movs	r2, #1
 80135ac:	755a      	strb	r2, [r3, #21]
 80135ae:	2301      	movs	r3, #1
 80135b0:	e059      	b.n	8013666 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	7d1b      	ldrb	r3, [r3, #20]
 80135b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135ba:	b2da      	uxtb	r2, r3
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	7858      	ldrb	r0, [r3, #1]
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135ca:	2301      	movs	r3, #1
 80135cc:	69ba      	ldr	r2, [r7, #24]
 80135ce:	f7fd f875 	bl	80106bc <disk_read>
 80135d2:	4603      	mov	r3, r0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d004      	beq.n	80135e2 <f_read+0x232>
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2201      	movs	r2, #1
 80135dc:	755a      	strb	r2, [r3, #21]
 80135de:	2301      	movs	r3, #1
 80135e0:	e041      	b.n	8013666 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	69ba      	ldr	r2, [r7, #24]
 80135e6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80135e8:	697b      	ldr	r3, [r7, #20]
 80135ea:	899b      	ldrh	r3, [r3, #12]
 80135ec:	4618      	mov	r0, r3
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	699b      	ldr	r3, [r3, #24]
 80135f2:	697a      	ldr	r2, [r7, #20]
 80135f4:	8992      	ldrh	r2, [r2, #12]
 80135f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80135fa:	fb02 f201 	mul.w	r2, r2, r1
 80135fe:	1a9b      	subs	r3, r3, r2
 8013600:	1ac3      	subs	r3, r0, r3
 8013602:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	429a      	cmp	r2, r3
 801360a:	d901      	bls.n	8013610 <f_read+0x260>
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	699b      	ldr	r3, [r3, #24]
 801361a:	697a      	ldr	r2, [r7, #20]
 801361c:	8992      	ldrh	r2, [r2, #12]
 801361e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013622:	fb02 f200 	mul.w	r2, r2, r0
 8013626:	1a9b      	subs	r3, r3, r2
 8013628:	440b      	add	r3, r1
 801362a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801362c:	4619      	mov	r1, r3
 801362e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013630:	f7fd f924 	bl	801087c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013638:	4413      	add	r3, r2
 801363a:	627b      	str	r3, [r7, #36]	; 0x24
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	699a      	ldr	r2, [r3, #24]
 8013640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013642:	441a      	add	r2, r3
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	619a      	str	r2, [r3, #24]
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364e:	441a      	add	r2, r3
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	601a      	str	r2, [r3, #0]
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013658:	1ad3      	subs	r3, r2, r3
 801365a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2b00      	cmp	r3, #0
 8013660:	f47f aee1 	bne.w	8013426 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013664:	2300      	movs	r3, #0
}
 8013666:	4618      	mov	r0, r3
 8013668:	3738      	adds	r7, #56	; 0x38
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}

0801366e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801366e:	b580      	push	{r7, lr}
 8013670:	b08c      	sub	sp, #48	; 0x30
 8013672:	af00      	add	r7, sp, #0
 8013674:	60f8      	str	r0, [r7, #12]
 8013676:	60b9      	str	r1, [r7, #8]
 8013678:	607a      	str	r2, [r7, #4]
 801367a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	2200      	movs	r2, #0
 8013684:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	f107 0210 	add.w	r2, r7, #16
 801368c:	4611      	mov	r1, r2
 801368e:	4618      	mov	r0, r3
 8013690:	f7ff fc46 	bl	8012f20 <validate>
 8013694:	4603      	mov	r3, r0
 8013696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801369a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d107      	bne.n	80136b2 <f_write+0x44>
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	7d5b      	ldrb	r3, [r3, #21]
 80136a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80136aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d002      	beq.n	80136b8 <f_write+0x4a>
 80136b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136b6:	e16a      	b.n	801398e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	7d1b      	ldrb	r3, [r3, #20]
 80136bc:	f003 0302 	and.w	r3, r3, #2
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d101      	bne.n	80136c8 <f_write+0x5a>
 80136c4:	2307      	movs	r3, #7
 80136c6:	e162      	b.n	801398e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	699a      	ldr	r2, [r3, #24]
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	441a      	add	r2, r3
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	699b      	ldr	r3, [r3, #24]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	f080 814c 	bcs.w	8013972 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	699b      	ldr	r3, [r3, #24]
 80136de:	43db      	mvns	r3, r3
 80136e0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80136e2:	e146      	b.n	8013972 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	699b      	ldr	r3, [r3, #24]
 80136e8:	693a      	ldr	r2, [r7, #16]
 80136ea:	8992      	ldrh	r2, [r2, #12]
 80136ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80136f0:	fb02 f201 	mul.w	r2, r2, r1
 80136f4:	1a9b      	subs	r3, r3, r2
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	f040 80f1 	bne.w	80138de <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	699b      	ldr	r3, [r3, #24]
 8013700:	693a      	ldr	r2, [r7, #16]
 8013702:	8992      	ldrh	r2, [r2, #12]
 8013704:	fbb3 f3f2 	udiv	r3, r3, r2
 8013708:	693a      	ldr	r2, [r7, #16]
 801370a:	8952      	ldrh	r2, [r2, #10]
 801370c:	3a01      	subs	r2, #1
 801370e:	4013      	ands	r3, r2
 8013710:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d143      	bne.n	80137a0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	699b      	ldr	r3, [r3, #24]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d10c      	bne.n	801373a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	689b      	ldr	r3, [r3, #8]
 8013724:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013728:	2b00      	cmp	r3, #0
 801372a:	d11a      	bne.n	8013762 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2100      	movs	r1, #0
 8013730:	4618      	mov	r0, r3
 8013732:	f7fd fdda 	bl	80112ea <create_chain>
 8013736:	62b8      	str	r0, [r7, #40]	; 0x28
 8013738:	e013      	b.n	8013762 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801373e:	2b00      	cmp	r3, #0
 8013740:	d007      	beq.n	8013752 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	699b      	ldr	r3, [r3, #24]
 8013746:	4619      	mov	r1, r3
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f7fd fe66 	bl	801141a <clmt_clust>
 801374e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013750:	e007      	b.n	8013762 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	69db      	ldr	r3, [r3, #28]
 8013758:	4619      	mov	r1, r3
 801375a:	4610      	mov	r0, r2
 801375c:	f7fd fdc5 	bl	80112ea <create_chain>
 8013760:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013764:	2b00      	cmp	r3, #0
 8013766:	f000 8109 	beq.w	801397c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376c:	2b01      	cmp	r3, #1
 801376e:	d104      	bne.n	801377a <f_write+0x10c>
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2202      	movs	r2, #2
 8013774:	755a      	strb	r2, [r3, #21]
 8013776:	2302      	movs	r3, #2
 8013778:	e109      	b.n	801398e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013780:	d104      	bne.n	801378c <f_write+0x11e>
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2201      	movs	r2, #1
 8013786:	755a      	strb	r2, [r3, #21]
 8013788:	2301      	movs	r3, #1
 801378a:	e100      	b.n	801398e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013790:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	689b      	ldr	r3, [r3, #8]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d102      	bne.n	80137a0 <f_write+0x132>
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801379e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	7d1b      	ldrb	r3, [r3, #20]
 80137a4:	b25b      	sxtb	r3, r3
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	da18      	bge.n	80137dc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	7858      	ldrb	r0, [r3, #1]
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	6a1a      	ldr	r2, [r3, #32]
 80137b8:	2301      	movs	r3, #1
 80137ba:	f7fc ff9f 	bl	80106fc <disk_write>
 80137be:	4603      	mov	r3, r0
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d004      	beq.n	80137ce <f_write+0x160>
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2201      	movs	r2, #1
 80137c8:	755a      	strb	r2, [r3, #21]
 80137ca:	2301      	movs	r3, #1
 80137cc:	e0df      	b.n	801398e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	7d1b      	ldrb	r3, [r3, #20]
 80137d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137d6:	b2da      	uxtb	r2, r3
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80137dc:	693a      	ldr	r2, [r7, #16]
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	69db      	ldr	r3, [r3, #28]
 80137e2:	4619      	mov	r1, r3
 80137e4:	4610      	mov	r0, r2
 80137e6:	f7fd fb15 	bl	8010e14 <clust2sect>
 80137ea:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d104      	bne.n	80137fc <f_write+0x18e>
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	2202      	movs	r2, #2
 80137f6:	755a      	strb	r2, [r3, #21]
 80137f8:	2302      	movs	r3, #2
 80137fa:	e0c8      	b.n	801398e <f_write+0x320>
			sect += csect;
 80137fc:	697a      	ldr	r2, [r7, #20]
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	4413      	add	r3, r2
 8013802:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	899b      	ldrh	r3, [r3, #12]
 8013808:	461a      	mov	r2, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013810:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013812:	6a3b      	ldr	r3, [r7, #32]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d043      	beq.n	80138a0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013818:	69ba      	ldr	r2, [r7, #24]
 801381a:	6a3b      	ldr	r3, [r7, #32]
 801381c:	4413      	add	r3, r2
 801381e:	693a      	ldr	r2, [r7, #16]
 8013820:	8952      	ldrh	r2, [r2, #10]
 8013822:	4293      	cmp	r3, r2
 8013824:	d905      	bls.n	8013832 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	895b      	ldrh	r3, [r3, #10]
 801382a:	461a      	mov	r2, r3
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	1ad3      	subs	r3, r2, r3
 8013830:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	7858      	ldrb	r0, [r3, #1]
 8013836:	6a3b      	ldr	r3, [r7, #32]
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	69f9      	ldr	r1, [r7, #28]
 801383c:	f7fc ff5e 	bl	80106fc <disk_write>
 8013840:	4603      	mov	r3, r0
 8013842:	2b00      	cmp	r3, #0
 8013844:	d004      	beq.n	8013850 <f_write+0x1e2>
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	2201      	movs	r2, #1
 801384a:	755a      	strb	r2, [r3, #21]
 801384c:	2301      	movs	r3, #1
 801384e:	e09e      	b.n	801398e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	6a1a      	ldr	r2, [r3, #32]
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	1ad3      	subs	r3, r2, r3
 8013858:	6a3a      	ldr	r2, [r7, #32]
 801385a:	429a      	cmp	r2, r3
 801385c:	d918      	bls.n	8013890 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	6a1a      	ldr	r2, [r3, #32]
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	1ad3      	subs	r3, r2, r3
 801386c:	693a      	ldr	r2, [r7, #16]
 801386e:	8992      	ldrh	r2, [r2, #12]
 8013870:	fb02 f303 	mul.w	r3, r2, r3
 8013874:	69fa      	ldr	r2, [r7, #28]
 8013876:	18d1      	adds	r1, r2, r3
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	899b      	ldrh	r3, [r3, #12]
 801387c:	461a      	mov	r2, r3
 801387e:	f7fc fffd 	bl	801087c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	7d1b      	ldrb	r3, [r3, #20]
 8013886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801388a:	b2da      	uxtb	r2, r3
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	899b      	ldrh	r3, [r3, #12]
 8013894:	461a      	mov	r2, r3
 8013896:	6a3b      	ldr	r3, [r7, #32]
 8013898:	fb02 f303 	mul.w	r3, r2, r3
 801389c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801389e:	e04b      	b.n	8013938 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	6a1b      	ldr	r3, [r3, #32]
 80138a4:	697a      	ldr	r2, [r7, #20]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d016      	beq.n	80138d8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	699a      	ldr	r2, [r3, #24]
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d210      	bcs.n	80138d8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	7858      	ldrb	r0, [r3, #1]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138c0:	2301      	movs	r3, #1
 80138c2:	697a      	ldr	r2, [r7, #20]
 80138c4:	f7fc fefa 	bl	80106bc <disk_read>
 80138c8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d004      	beq.n	80138d8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2201      	movs	r2, #1
 80138d2:	755a      	strb	r2, [r3, #21]
 80138d4:	2301      	movs	r3, #1
 80138d6:	e05a      	b.n	801398e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	697a      	ldr	r2, [r7, #20]
 80138dc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	899b      	ldrh	r3, [r3, #12]
 80138e2:	4618      	mov	r0, r3
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	699b      	ldr	r3, [r3, #24]
 80138e8:	693a      	ldr	r2, [r7, #16]
 80138ea:	8992      	ldrh	r2, [r2, #12]
 80138ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80138f0:	fb02 f201 	mul.w	r2, r2, r1
 80138f4:	1a9b      	subs	r3, r3, r2
 80138f6:	1ac3      	subs	r3, r0, r3
 80138f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80138fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	429a      	cmp	r2, r3
 8013900:	d901      	bls.n	8013906 <f_write+0x298>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	699b      	ldr	r3, [r3, #24]
 8013910:	693a      	ldr	r2, [r7, #16]
 8013912:	8992      	ldrh	r2, [r2, #12]
 8013914:	fbb3 f0f2 	udiv	r0, r3, r2
 8013918:	fb02 f200 	mul.w	r2, r2, r0
 801391c:	1a9b      	subs	r3, r3, r2
 801391e:	440b      	add	r3, r1
 8013920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013922:	69f9      	ldr	r1, [r7, #28]
 8013924:	4618      	mov	r0, r3
 8013926:	f7fc ffa9 	bl	801087c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	7d1b      	ldrb	r3, [r3, #20]
 801392e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013932:	b2da      	uxtb	r2, r3
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013938:	69fa      	ldr	r2, [r7, #28]
 801393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393c:	4413      	add	r3, r2
 801393e:	61fb      	str	r3, [r7, #28]
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	699a      	ldr	r2, [r3, #24]
 8013944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013946:	441a      	add	r2, r3
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	619a      	str	r2, [r3, #24]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	68da      	ldr	r2, [r3, #12]
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	699b      	ldr	r3, [r3, #24]
 8013954:	429a      	cmp	r2, r3
 8013956:	bf38      	it	cc
 8013958:	461a      	movcc	r2, r3
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	60da      	str	r2, [r3, #12]
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	681a      	ldr	r2, [r3, #0]
 8013962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013964:	441a      	add	r2, r3
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	601a      	str	r2, [r3, #0]
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396e:	1ad3      	subs	r3, r2, r3
 8013970:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2b00      	cmp	r3, #0
 8013976:	f47f aeb5 	bne.w	80136e4 <f_write+0x76>
 801397a:	e000      	b.n	801397e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801397c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	7d1b      	ldrb	r3, [r3, #20]
 8013982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013986:	b2da      	uxtb	r2, r3
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801398c:	2300      	movs	r3, #0
}
 801398e:	4618      	mov	r0, r3
 8013990:	3730      	adds	r7, #48	; 0x30
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}

08013996 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013996:	b580      	push	{r7, lr}
 8013998:	b086      	sub	sp, #24
 801399a:	af00      	add	r7, sp, #0
 801399c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f107 0208 	add.w	r2, r7, #8
 80139a4:	4611      	mov	r1, r2
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7ff faba 	bl	8012f20 <validate>
 80139ac:	4603      	mov	r3, r0
 80139ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80139b0:	7dfb      	ldrb	r3, [r7, #23]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d168      	bne.n	8013a88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	7d1b      	ldrb	r3, [r3, #20]
 80139ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d062      	beq.n	8013a88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	7d1b      	ldrb	r3, [r3, #20]
 80139c6:	b25b      	sxtb	r3, r3
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	da15      	bge.n	80139f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	7858      	ldrb	r0, [r3, #1]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	6a1a      	ldr	r2, [r3, #32]
 80139da:	2301      	movs	r3, #1
 80139dc:	f7fc fe8e 	bl	80106fc <disk_write>
 80139e0:	4603      	mov	r3, r0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d001      	beq.n	80139ea <f_sync+0x54>
 80139e6:	2301      	movs	r3, #1
 80139e8:	e04f      	b.n	8013a8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	7d1b      	ldrb	r3, [r3, #20]
 80139ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139f2:	b2da      	uxtb	r2, r3
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80139f8:	f7f9 ff06 	bl	800d808 <get_fattime>
 80139fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80139fe:	68ba      	ldr	r2, [r7, #8]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a04:	4619      	mov	r1, r3
 8013a06:	4610      	mov	r0, r2
 8013a08:	f7fd f966 	bl	8010cd8 <move_window>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013a10:	7dfb      	ldrb	r3, [r7, #23]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d138      	bne.n	8013a88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	330b      	adds	r3, #11
 8013a20:	781a      	ldrb	r2, [r3, #0]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	330b      	adds	r3, #11
 8013a26:	f042 0220 	orr.w	r2, r2, #32
 8013a2a:	b2d2      	uxtb	r2, r2
 8013a2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6818      	ldr	r0, [r3, #0]
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	689b      	ldr	r3, [r3, #8]
 8013a36:	461a      	mov	r2, r3
 8013a38:	68f9      	ldr	r1, [r7, #12]
 8013a3a:	f7fd feeb 	bl	8011814 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	f103 021c 	add.w	r2, r3, #28
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	4619      	mov	r1, r3
 8013a4a:	4610      	mov	r0, r2
 8013a4c:	f7fc feea 	bl	8010824 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	3316      	adds	r3, #22
 8013a54:	6939      	ldr	r1, [r7, #16]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7fc fee4 	bl	8010824 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	3312      	adds	r3, #18
 8013a60:	2100      	movs	r1, #0
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7fc fec3 	bl	80107ee <st_word>
					fs->wflag = 1;
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7fd f95f 	bl	8010d34 <sync_fs>
 8013a76:	4603      	mov	r3, r0
 8013a78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	7d1b      	ldrb	r3, [r3, #20]
 8013a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a82:	b2da      	uxtb	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3718      	adds	r7, #24
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}

08013a92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013a92:	b580      	push	{r7, lr}
 8013a94:	b084      	sub	sp, #16
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f7ff ff7b 	bl	8013996 <f_sync>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013aa4:	7bfb      	ldrb	r3, [r7, #15]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d118      	bne.n	8013adc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f107 0208 	add.w	r2, r7, #8
 8013ab0:	4611      	mov	r1, r2
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7ff fa34 	bl	8012f20 <validate>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013abc:	7bfb      	ldrb	r3, [r7, #15]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d10c      	bne.n	8013adc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	691b      	ldr	r3, [r3, #16]
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fd f862 	bl	8010b90 <dec_lock>
 8013acc:	4603      	mov	r3, r0
 8013ace:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013ad0:	7bfb      	ldrb	r3, [r7, #15]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d102      	bne.n	8013adc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3710      	adds	r7, #16
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}

08013ae6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013ae6:	b580      	push	{r7, lr}
 8013ae8:	b090      	sub	sp, #64	; 0x40
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	6078      	str	r0, [r7, #4]
 8013aee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f107 0208 	add.w	r2, r7, #8
 8013af6:	4611      	mov	r1, r2
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7ff fa11 	bl	8012f20 <validate>
 8013afe:	4603      	mov	r3, r0
 8013b00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013b04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d103      	bne.n	8013b14 <f_lseek+0x2e>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	7d5b      	ldrb	r3, [r3, #21]
 8013b10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013b14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d002      	beq.n	8013b22 <f_lseek+0x3c>
 8013b1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013b20:	e201      	b.n	8013f26 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	f000 80d9 	beq.w	8013cde <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b32:	d15a      	bne.n	8013bea <f_lseek+0x104>
			tbl = fp->cltbl;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b38:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3c:	1d1a      	adds	r2, r3, #4
 8013b3e:	627a      	str	r2, [r7, #36]	; 0x24
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	617b      	str	r3, [r7, #20]
 8013b44:	2302      	movs	r3, #2
 8013b46:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	689b      	ldr	r3, [r3, #8]
 8013b4c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d03a      	beq.n	8013bca <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b56:	613b      	str	r3, [r7, #16]
 8013b58:	2300      	movs	r3, #0
 8013b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b5e:	3302      	adds	r3, #2
 8013b60:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b64:	60fb      	str	r3, [r7, #12]
 8013b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b68:	3301      	adds	r3, #1
 8013b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7fd f96e 	bl	8010e52 <get_fat>
 8013b76:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b7a:	2b01      	cmp	r3, #1
 8013b7c:	d804      	bhi.n	8013b88 <f_lseek+0xa2>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2202      	movs	r2, #2
 8013b82:	755a      	strb	r2, [r3, #21]
 8013b84:	2302      	movs	r3, #2
 8013b86:	e1ce      	b.n	8013f26 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b8e:	d104      	bne.n	8013b9a <f_lseek+0xb4>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2201      	movs	r2, #1
 8013b94:	755a      	strb	r2, [r3, #21]
 8013b96:	2301      	movs	r3, #1
 8013b98:	e1c5      	b.n	8013f26 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d0de      	beq.n	8013b62 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d809      	bhi.n	8013bc0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bae:	1d1a      	adds	r2, r3, #4
 8013bb0:	627a      	str	r2, [r7, #36]	; 0x24
 8013bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bb4:	601a      	str	r2, [r3, #0]
 8013bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb8:	1d1a      	adds	r2, r3, #4
 8013bba:	627a      	str	r2, [r7, #36]	; 0x24
 8013bbc:	693a      	ldr	r2, [r7, #16]
 8013bbe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	69db      	ldr	r3, [r3, #28]
 8013bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bc6:	429a      	cmp	r2, r3
 8013bc8:	d3c4      	bcc.n	8013b54 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bd0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d803      	bhi.n	8013be2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bdc:	2200      	movs	r2, #0
 8013bde:	601a      	str	r2, [r3, #0]
 8013be0:	e19f      	b.n	8013f22 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013be2:	2311      	movs	r3, #17
 8013be4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013be8:	e19b      	b.n	8013f22 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	68db      	ldr	r3, [r3, #12]
 8013bee:	683a      	ldr	r2, [r7, #0]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d902      	bls.n	8013bfa <f_lseek+0x114>
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	683a      	ldr	r2, [r7, #0]
 8013bfe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	f000 818d 	beq.w	8013f22 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	3b01      	subs	r3, #1
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f7fd fc03 	bl	801141a <clmt_clust>
 8013c14:	4602      	mov	r2, r0
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013c1a:	68ba      	ldr	r2, [r7, #8]
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	69db      	ldr	r3, [r3, #28]
 8013c20:	4619      	mov	r1, r3
 8013c22:	4610      	mov	r0, r2
 8013c24:	f7fd f8f6 	bl	8010e14 <clust2sect>
 8013c28:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013c2a:	69bb      	ldr	r3, [r7, #24]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d104      	bne.n	8013c3a <f_lseek+0x154>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2202      	movs	r2, #2
 8013c34:	755a      	strb	r2, [r3, #21]
 8013c36:	2302      	movs	r3, #2
 8013c38:	e175      	b.n	8013f26 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	3b01      	subs	r3, #1
 8013c3e:	68ba      	ldr	r2, [r7, #8]
 8013c40:	8992      	ldrh	r2, [r2, #12]
 8013c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c46:	68ba      	ldr	r2, [r7, #8]
 8013c48:	8952      	ldrh	r2, [r2, #10]
 8013c4a:	3a01      	subs	r2, #1
 8013c4c:	4013      	ands	r3, r2
 8013c4e:	69ba      	ldr	r2, [r7, #24]
 8013c50:	4413      	add	r3, r2
 8013c52:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	699b      	ldr	r3, [r3, #24]
 8013c58:	68ba      	ldr	r2, [r7, #8]
 8013c5a:	8992      	ldrh	r2, [r2, #12]
 8013c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c60:	fb02 f201 	mul.w	r2, r2, r1
 8013c64:	1a9b      	subs	r3, r3, r2
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	f000 815b 	beq.w	8013f22 <f_lseek+0x43c>
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6a1b      	ldr	r3, [r3, #32]
 8013c70:	69ba      	ldr	r2, [r7, #24]
 8013c72:	429a      	cmp	r2, r3
 8013c74:	f000 8155 	beq.w	8013f22 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	7d1b      	ldrb	r3, [r3, #20]
 8013c7c:	b25b      	sxtb	r3, r3
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	da18      	bge.n	8013cb4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	7858      	ldrb	r0, [r3, #1]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6a1a      	ldr	r2, [r3, #32]
 8013c90:	2301      	movs	r3, #1
 8013c92:	f7fc fd33 	bl	80106fc <disk_write>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d004      	beq.n	8013ca6 <f_lseek+0x1c0>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	755a      	strb	r2, [r3, #21]
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	e13f      	b.n	8013f26 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	7d1b      	ldrb	r3, [r3, #20]
 8013caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cae:	b2da      	uxtb	r2, r3
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	7858      	ldrb	r0, [r3, #1]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	69ba      	ldr	r2, [r7, #24]
 8013cc2:	f7fc fcfb 	bl	80106bc <disk_read>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d004      	beq.n	8013cd6 <f_lseek+0x1f0>
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2201      	movs	r2, #1
 8013cd0:	755a      	strb	r2, [r3, #21]
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	e127      	b.n	8013f26 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	69ba      	ldr	r2, [r7, #24]
 8013cda:	621a      	str	r2, [r3, #32]
 8013cdc:	e121      	b.n	8013f22 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	68db      	ldr	r3, [r3, #12]
 8013ce2:	683a      	ldr	r2, [r7, #0]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d908      	bls.n	8013cfa <f_lseek+0x214>
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	7d1b      	ldrb	r3, [r3, #20]
 8013cec:	f003 0302 	and.w	r3, r3, #2
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d102      	bne.n	8013cfa <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	699b      	ldr	r3, [r3, #24]
 8013cfe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013d00:	2300      	movs	r3, #0
 8013d02:	637b      	str	r3, [r7, #52]	; 0x34
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d08:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	f000 80b5 	beq.w	8013e7c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	895b      	ldrh	r3, [r3, #10]
 8013d16:	461a      	mov	r2, r3
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	899b      	ldrh	r3, [r3, #12]
 8013d1c:	fb03 f302 	mul.w	r3, r3, r2
 8013d20:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013d22:	6a3b      	ldr	r3, [r7, #32]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d01b      	beq.n	8013d60 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	1e5a      	subs	r2, r3, #1
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8013d32:	6a3b      	ldr	r3, [r7, #32]
 8013d34:	1e59      	subs	r1, r3, #1
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d30f      	bcc.n	8013d60 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013d40:	6a3b      	ldr	r3, [r7, #32]
 8013d42:	1e5a      	subs	r2, r3, #1
 8013d44:	69fb      	ldr	r3, [r7, #28]
 8013d46:	425b      	negs	r3, r3
 8013d48:	401a      	ands	r2, r3
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	699b      	ldr	r3, [r3, #24]
 8013d52:	683a      	ldr	r2, [r7, #0]
 8013d54:	1ad3      	subs	r3, r2, r3
 8013d56:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	69db      	ldr	r3, [r3, #28]
 8013d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d5e:	e022      	b.n	8013da6 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	689b      	ldr	r3, [r3, #8]
 8013d64:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d119      	bne.n	8013da0 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2100      	movs	r1, #0
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7fd faba 	bl	80112ea <create_chain>
 8013d76:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d7a:	2b01      	cmp	r3, #1
 8013d7c:	d104      	bne.n	8013d88 <f_lseek+0x2a2>
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2202      	movs	r2, #2
 8013d82:	755a      	strb	r2, [r3, #21]
 8013d84:	2302      	movs	r3, #2
 8013d86:	e0ce      	b.n	8013f26 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d8e:	d104      	bne.n	8013d9a <f_lseek+0x2b4>
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2201      	movs	r2, #1
 8013d94:	755a      	strb	r2, [r3, #21]
 8013d96:	2301      	movs	r3, #1
 8013d98:	e0c5      	b.n	8013f26 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d9e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013da4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d067      	beq.n	8013e7c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013dac:	e03a      	b.n	8013e24 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013dae:	683a      	ldr	r2, [r7, #0]
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	1ad3      	subs	r3, r2, r3
 8013db4:	603b      	str	r3, [r7, #0]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	699a      	ldr	r2, [r3, #24]
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	441a      	add	r2, r3
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	7d1b      	ldrb	r3, [r3, #20]
 8013dc6:	f003 0302 	and.w	r3, r3, #2
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d00b      	beq.n	8013de6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7fd fa89 	bl	80112ea <create_chain>
 8013dd8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d108      	bne.n	8013df2 <f_lseek+0x30c>
							ofs = 0; break;
 8013de0:	2300      	movs	r3, #0
 8013de2:	603b      	str	r3, [r7, #0]
 8013de4:	e022      	b.n	8013e2c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7fd f831 	bl	8010e52 <get_fat>
 8013df0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013df8:	d104      	bne.n	8013e04 <f_lseek+0x31e>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	755a      	strb	r2, [r3, #21]
 8013e00:	2301      	movs	r3, #1
 8013e02:	e090      	b.n	8013f26 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d904      	bls.n	8013e14 <f_lseek+0x32e>
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	69db      	ldr	r3, [r3, #28]
 8013e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d304      	bcc.n	8013e1e <f_lseek+0x338>
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2202      	movs	r2, #2
 8013e18:	755a      	strb	r2, [r3, #21]
 8013e1a:	2302      	movs	r3, #2
 8013e1c:	e083      	b.n	8013f26 <f_lseek+0x440>
					fp->clust = clst;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e22:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013e24:	683a      	ldr	r2, [r7, #0]
 8013e26:	69fb      	ldr	r3, [r7, #28]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d8c0      	bhi.n	8013dae <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	699a      	ldr	r2, [r3, #24]
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	441a      	add	r2, r3
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	899b      	ldrh	r3, [r3, #12]
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e44:	fb02 f201 	mul.w	r2, r2, r1
 8013e48:	1a9b      	subs	r3, r3, r2
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d016      	beq.n	8013e7c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7fc ffde 	bl	8010e14 <clust2sect>
 8013e58:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d104      	bne.n	8013e6a <f_lseek+0x384>
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2202      	movs	r2, #2
 8013e64:	755a      	strb	r2, [r3, #21]
 8013e66:	2302      	movs	r3, #2
 8013e68:	e05d      	b.n	8013f26 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	899b      	ldrh	r3, [r3, #12]
 8013e6e:	461a      	mov	r2, r3
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e78:	4413      	add	r3, r2
 8013e7a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	699a      	ldr	r2, [r3, #24]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	68db      	ldr	r3, [r3, #12]
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d90a      	bls.n	8013e9e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	699a      	ldr	r2, [r3, #24]
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	7d1b      	ldrb	r3, [r3, #20]
 8013e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e98:	b2da      	uxtb	r2, r3
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	699b      	ldr	r3, [r3, #24]
 8013ea2:	68ba      	ldr	r2, [r7, #8]
 8013ea4:	8992      	ldrh	r2, [r2, #12]
 8013ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8013eaa:	fb02 f201 	mul.w	r2, r2, r1
 8013eae:	1a9b      	subs	r3, r3, r2
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d036      	beq.n	8013f22 <f_lseek+0x43c>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6a1b      	ldr	r3, [r3, #32]
 8013eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d031      	beq.n	8013f22 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	7d1b      	ldrb	r3, [r3, #20]
 8013ec2:	b25b      	sxtb	r3, r3
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	da18      	bge.n	8013efa <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	7858      	ldrb	r0, [r3, #1]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6a1a      	ldr	r2, [r3, #32]
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	f7fc fc10 	bl	80106fc <disk_write>
 8013edc:	4603      	mov	r3, r0
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d004      	beq.n	8013eec <f_lseek+0x406>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2201      	movs	r2, #1
 8013ee6:	755a      	strb	r2, [r3, #21]
 8013ee8:	2301      	movs	r3, #1
 8013eea:	e01c      	b.n	8013f26 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	7d1b      	ldrb	r3, [r3, #20]
 8013ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ef4:	b2da      	uxtb	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	7858      	ldrb	r0, [r3, #1]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f04:	2301      	movs	r3, #1
 8013f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f08:	f7fc fbd8 	bl	80106bc <disk_read>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d004      	beq.n	8013f1c <f_lseek+0x436>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2201      	movs	r2, #1
 8013f16:	755a      	strb	r2, [r3, #21]
 8013f18:	2301      	movs	r3, #1
 8013f1a:	e004      	b.n	8013f26 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f20:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013f22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3740      	adds	r7, #64	; 0x40
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}

08013f2e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013f2e:	b580      	push	{r7, lr}
 8013f30:	b086      	sub	sp, #24
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d101      	bne.n	8013f42 <f_opendir+0x14>
 8013f3e:	2309      	movs	r3, #9
 8013f40:	e064      	b.n	801400c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013f46:	f107 010c 	add.w	r1, r7, #12
 8013f4a:	463b      	mov	r3, r7
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fe fd5e 	bl	8012a10 <find_volume>
 8013f54:	4603      	mov	r3, r0
 8013f56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013f58:	7dfb      	ldrb	r3, [r7, #23]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d14f      	bne.n	8013ffe <f_opendir+0xd0>
		obj->fs = fs;
 8013f5e:	68fa      	ldr	r2, [r7, #12]
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	4619      	mov	r1, r3
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f7fe fc41 	bl	80127f0 <follow_path>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8013f72:	7dfb      	ldrb	r3, [r7, #23]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d13d      	bne.n	8013ff4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013f7e:	b25b      	sxtb	r3, r3
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	db12      	blt.n	8013faa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	799b      	ldrb	r3, [r3, #6]
 8013f88:	f003 0310 	and.w	r3, r3, #16
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d00a      	beq.n	8013fa6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013f90:	68fa      	ldr	r2, [r7, #12]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6a1b      	ldr	r3, [r3, #32]
 8013f96:	4619      	mov	r1, r3
 8013f98:	4610      	mov	r0, r2
 8013f9a:	f7fd fc1c 	bl	80117d6 <ld_clust>
 8013f9e:	4602      	mov	r2, r0
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	609a      	str	r2, [r3, #8]
 8013fa4:	e001      	b.n	8013faa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8013fa6:	2305      	movs	r3, #5
 8013fa8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8013faa:	7dfb      	ldrb	r3, [r7, #23]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d121      	bne.n	8013ff4 <f_opendir+0xc6>
				obj->id = fs->id;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	88da      	ldrh	r2, [r3, #6]
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013fb8:	2100      	movs	r1, #0
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7fd fa65 	bl	801148a <dir_sdi>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013fc4:	7dfb      	ldrb	r3, [r7, #23]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d114      	bne.n	8013ff4 <f_opendir+0xc6>
					if (obj->sclust) {
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	689b      	ldr	r3, [r3, #8]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d00d      	beq.n	8013fee <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013fd2:	2100      	movs	r1, #0
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7fc fd4d 	bl	8010a74 <inc_lock>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	691b      	ldr	r3, [r3, #16]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d105      	bne.n	8013ff4 <f_opendir+0xc6>
 8013fe8:	2312      	movs	r3, #18
 8013fea:	75fb      	strb	r3, [r7, #23]
 8013fec:	e002      	b.n	8013ff4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013ff4:	7dfb      	ldrb	r3, [r7, #23]
 8013ff6:	2b04      	cmp	r3, #4
 8013ff8:	d101      	bne.n	8013ffe <f_opendir+0xd0>
 8013ffa:	2305      	movs	r3, #5
 8013ffc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013ffe:	7dfb      	ldrb	r3, [r7, #23]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d002      	beq.n	801400a <f_opendir+0xdc>
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	2200      	movs	r2, #0
 8014008:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801400a:	7dfb      	ldrb	r3, [r7, #23]
}
 801400c:	4618      	mov	r0, r3
 801400e:	3718      	adds	r7, #24
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b084      	sub	sp, #16
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f107 0208 	add.w	r2, r7, #8
 8014022:	4611      	mov	r1, r2
 8014024:	4618      	mov	r0, r3
 8014026:	f7fe ff7b 	bl	8012f20 <validate>
 801402a:	4603      	mov	r3, r0
 801402c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801402e:	7bfb      	ldrb	r3, [r7, #15]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d110      	bne.n	8014056 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	691b      	ldr	r3, [r3, #16]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d006      	beq.n	801404a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	691b      	ldr	r3, [r3, #16]
 8014040:	4618      	mov	r0, r3
 8014042:	f7fc fda5 	bl	8010b90 <dec_lock>
 8014046:	4603      	mov	r3, r0
 8014048:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801404a:	7bfb      	ldrb	r3, [r7, #15]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d102      	bne.n	8014056 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2200      	movs	r2, #0
 8014054:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8014056:	7bfb      	ldrb	r3, [r7, #15]
}
 8014058:	4618      	mov	r0, r3
 801405a:	3710      	adds	r7, #16
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}

08014060 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b084      	sub	sp, #16
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f107 0208 	add.w	r2, r7, #8
 8014070:	4611      	mov	r1, r2
 8014072:	4618      	mov	r0, r3
 8014074:	f7fe ff54 	bl	8012f20 <validate>
 8014078:	4603      	mov	r3, r0
 801407a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801407c:	7bfb      	ldrb	r3, [r7, #15]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d126      	bne.n	80140d0 <f_readdir+0x70>
		if (!fno) {
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d106      	bne.n	8014096 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014088:	2100      	movs	r1, #0
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f7fd f9fd 	bl	801148a <dir_sdi>
 8014090:	4603      	mov	r3, r0
 8014092:	73fb      	strb	r3, [r7, #15]
 8014094:	e01c      	b.n	80140d0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014096:	2100      	movs	r1, #0
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f7fd fdc7 	bl	8011c2c <dir_read>
 801409e:	4603      	mov	r3, r0
 80140a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80140a2:	7bfb      	ldrb	r3, [r7, #15]
 80140a4:	2b04      	cmp	r3, #4
 80140a6:	d101      	bne.n	80140ac <f_readdir+0x4c>
 80140a8:	2300      	movs	r3, #0
 80140aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80140ac:	7bfb      	ldrb	r3, [r7, #15]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d10e      	bne.n	80140d0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80140b2:	6839      	ldr	r1, [r7, #0]
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f7fe f863 	bl	8012180 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80140ba:	2100      	movs	r1, #0
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f7fd fa6d 	bl	801159c <dir_next>
 80140c2:	4603      	mov	r3, r0
 80140c4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80140c6:	7bfb      	ldrb	r3, [r7, #15]
 80140c8:	2b04      	cmp	r3, #4
 80140ca:	d101      	bne.n	80140d0 <f_readdir+0x70>
 80140cc:	2300      	movs	r3, #0
 80140ce:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80140d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}

080140da <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80140da:	b580      	push	{r7, lr}
 80140dc:	b084      	sub	sp, #16
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
 80140e2:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80140e4:	6839      	ldr	r1, [r7, #0]
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7ff ffba 	bl	8014060 <f_readdir>
 80140ec:	4603      	mov	r3, r0
 80140ee:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80140f0:	7bfb      	ldrb	r3, [r7, #15]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d114      	bne.n	8014120 <f_findnext+0x46>
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d011      	beq.n	8014120 <f_findnext+0x46>
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	7d9b      	ldrb	r3, [r3, #22]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d00d      	beq.n	8014120 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	f103 0116 	add.w	r1, r3, #22
 801410e:	2300      	movs	r3, #0
 8014110:	2200      	movs	r2, #0
 8014112:	f7fe f939 	bl	8012388 <pattern_matching>
 8014116:	4603      	mov	r3, r0
 8014118:	2b00      	cmp	r3, #0
 801411a:	d100      	bne.n	801411e <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801411c:	e7e2      	b.n	80140e4 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801411e:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8014120:	7bfb      	ldrb	r3, [r7, #15]
}
 8014122:	4618      	mov	r0, r3
 8014124:	3710      	adds	r7, #16
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 801412a:	b580      	push	{r7, lr}
 801412c:	b086      	sub	sp, #24
 801412e:	af00      	add	r7, sp, #0
 8014130:	60f8      	str	r0, [r7, #12]
 8014132:	60b9      	str	r1, [r7, #8]
 8014134:	607a      	str	r2, [r7, #4]
 8014136:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	683a      	ldr	r2, [r7, #0]
 801413c:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 801413e:	6879      	ldr	r1, [r7, #4]
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	f7ff fef4 	bl	8013f2e <f_opendir>
 8014146:	4603      	mov	r3, r0
 8014148:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801414a:	7dfb      	ldrb	r3, [r7, #23]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d105      	bne.n	801415c <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8014150:	68b9      	ldr	r1, [r7, #8]
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f7ff ffc1 	bl	80140da <f_findnext>
 8014158:	4603      	mov	r3, r0
 801415a:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 801415c:	7dfb      	ldrb	r3, [r7, #23]
}
 801415e:	4618      	mov	r0, r3
 8014160:	3718      	adds	r7, #24
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}

08014166 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014166:	b580      	push	{r7, lr}
 8014168:	b0a2      	sub	sp, #136	; 0x88
 801416a:	af00      	add	r7, sp, #0
 801416c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801416e:	2300      	movs	r3, #0
 8014170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014174:	f107 010c 	add.w	r1, r7, #12
 8014178:	1d3b      	adds	r3, r7, #4
 801417a:	2202      	movs	r2, #2
 801417c:	4618      	mov	r0, r3
 801417e:	f7fe fc47 	bl	8012a10 <find_volume>
 8014182:	4603      	mov	r3, r0
 8014184:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	dj.obj.fs = fs;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (res == FR_OK) {
 801418c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014190:	2b00      	cmp	r3, #0
 8014192:	f040 8092 	bne.w	80142ba <f_unlink+0x154>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801419c:	4611      	mov	r1, r2
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fe fb26 	bl	80127f0 <follow_path>
 80141a4:	4603      	mov	r3, r0
 80141a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80141aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d108      	bne.n	80141c4 <f_unlink+0x5e>
 80141b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141b6:	2102      	movs	r1, #2
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fc fbdd 	bl	8010978 <chk_lock>
 80141be:	4603      	mov	r3, r0
 80141c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80141c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d176      	bne.n	80142ba <f_unlink+0x154>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80141cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80141d0:	b25b      	sxtb	r3, r3
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	da03      	bge.n	80141de <f_unlink+0x78>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80141d6:	2306      	movs	r3, #6
 80141d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80141dc:	e008      	b.n	80141f0 <f_unlink+0x8a>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80141de:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80141e2:	f003 0301 	and.w	r3, r3, #1
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d002      	beq.n	80141f0 <f_unlink+0x8a>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80141ea:	2307      	movs	r3, #7
 80141ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK) {
 80141f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d136      	bne.n	8014266 <f_unlink+0x100>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80141fc:	4611      	mov	r1, r2
 80141fe:	4618      	mov	r0, r3
 8014200:	f7fd fae9 	bl	80117d6 <ld_clust>
 8014204:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8014208:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801420c:	f003 0310 	and.w	r3, r3, #16
 8014210:	2b00      	cmp	r3, #0
 8014212:	d028      	beq.n	8014266 <f_unlink+0x100>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8014218:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801421c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801421e:	f107 0310 	add.w	r3, r7, #16
 8014222:	2100      	movs	r1, #0
 8014224:	4618      	mov	r0, r3
 8014226:	f7fd f930 	bl	801148a <dir_sdi>
 801422a:	4603      	mov	r3, r0
 801422c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8014230:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014234:	2b00      	cmp	r3, #0
 8014236:	d116      	bne.n	8014266 <f_unlink+0x100>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014238:	f107 0310 	add.w	r3, r7, #16
 801423c:	2100      	movs	r1, #0
 801423e:	4618      	mov	r0, r3
 8014240:	f7fd fcf4 	bl	8011c2c <dir_read>
 8014244:	4603      	mov	r3, r0
 8014246:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801424a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801424e:	2b00      	cmp	r3, #0
 8014250:	d102      	bne.n	8014258 <f_unlink+0xf2>
 8014252:	2307      	movs	r3, #7
 8014254:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014258:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801425c:	2b04      	cmp	r3, #4
 801425e:	d102      	bne.n	8014266 <f_unlink+0x100>
 8014260:	2300      	movs	r3, #0
 8014262:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						}
					}
				}
			}
			if (res == FR_OK) {
 8014266:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801426a:	2b00      	cmp	r3, #0
 801426c:	d125      	bne.n	80142ba <f_unlink+0x154>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801426e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014272:	4618      	mov	r0, r3
 8014274:	f7fd ff3a 	bl	80120ec <dir_remove>
 8014278:	4603      	mov	r3, r0
 801427a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801427e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8014282:	2b00      	cmp	r3, #0
 8014284:	d10e      	bne.n	80142a4 <f_unlink+0x13e>
 8014286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801428a:	2b00      	cmp	r3, #0
 801428c:	d00a      	beq.n	80142a4 <f_unlink+0x13e>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801428e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014292:	2200      	movs	r2, #0
 8014294:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8014298:	4618      	mov	r0, r3
 801429a:	f7fc ffc1 	bl	8011220 <remove_chain>
 801429e:	4603      	mov	r3, r0
 80142a0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80142a4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d106      	bne.n	80142ba <f_unlink+0x154>
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7fc fd40 	bl	8010d34 <sync_fs>
 80142b4:	4603      	mov	r3, r0
 80142b6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80142ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3788      	adds	r7, #136	; 0x88
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}

080142c6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80142c6:	b580      	push	{r7, lr}
 80142c8:	b088      	sub	sp, #32
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	60f8      	str	r0, [r7, #12]
 80142ce:	60b9      	str	r1, [r7, #8]
 80142d0:	607a      	str	r2, [r7, #4]
	int n = 0;
 80142d2:	2300      	movs	r3, #0
 80142d4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80142da:	e01b      	b.n	8014314 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80142dc:	f107 0310 	add.w	r3, r7, #16
 80142e0:	f107 0114 	add.w	r1, r7, #20
 80142e4:	2201      	movs	r2, #1
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f7ff f862 	bl	80133b0 <f_read>
		if (rc != 1) break;
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	2b01      	cmp	r3, #1
 80142f0:	d116      	bne.n	8014320 <f_gets+0x5a>
		c = s[0];
 80142f2:	7d3b      	ldrb	r3, [r7, #20]
 80142f4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80142f6:	7dfb      	ldrb	r3, [r7, #23]
 80142f8:	2b0d      	cmp	r3, #13
 80142fa:	d100      	bne.n	80142fe <f_gets+0x38>
 80142fc:	e00a      	b.n	8014314 <f_gets+0x4e>
		*p++ = c;
 80142fe:	69bb      	ldr	r3, [r7, #24]
 8014300:	1c5a      	adds	r2, r3, #1
 8014302:	61ba      	str	r2, [r7, #24]
 8014304:	7dfa      	ldrb	r2, [r7, #23]
 8014306:	701a      	strb	r2, [r3, #0]
		n++;
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	3301      	adds	r3, #1
 801430c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801430e:	7dfb      	ldrb	r3, [r7, #23]
 8014310:	2b0a      	cmp	r3, #10
 8014312:	d007      	beq.n	8014324 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	3b01      	subs	r3, #1
 8014318:	69fa      	ldr	r2, [r7, #28]
 801431a:	429a      	cmp	r2, r3
 801431c:	dbde      	blt.n	80142dc <f_gets+0x16>
 801431e:	e002      	b.n	8014326 <f_gets+0x60>
		if (rc != 1) break;
 8014320:	bf00      	nop
 8014322:	e000      	b.n	8014326 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8014324:	bf00      	nop
	}
	*p = 0;
 8014326:	69bb      	ldr	r3, [r7, #24]
 8014328:	2200      	movs	r2, #0
 801432a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d001      	beq.n	8014336 <f_gets+0x70>
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	e000      	b.n	8014338 <f_gets+0x72>
 8014336:	2300      	movs	r3, #0
}
 8014338:	4618      	mov	r0, r3
 801433a:	3720      	adds	r7, #32
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}

08014340 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014340:	b480      	push	{r7}
 8014342:	b087      	sub	sp, #28
 8014344:	af00      	add	r7, sp, #0
 8014346:	60f8      	str	r0, [r7, #12]
 8014348:	60b9      	str	r1, [r7, #8]
 801434a:	4613      	mov	r3, r2
 801434c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801434e:	2301      	movs	r3, #1
 8014350:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014352:	2300      	movs	r3, #0
 8014354:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014356:	4b1f      	ldr	r3, [pc, #124]	; (80143d4 <FATFS_LinkDriverEx+0x94>)
 8014358:	7a5b      	ldrb	r3, [r3, #9]
 801435a:	b2db      	uxtb	r3, r3
 801435c:	2b00      	cmp	r3, #0
 801435e:	d131      	bne.n	80143c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014360:	4b1c      	ldr	r3, [pc, #112]	; (80143d4 <FATFS_LinkDriverEx+0x94>)
 8014362:	7a5b      	ldrb	r3, [r3, #9]
 8014364:	b2db      	uxtb	r3, r3
 8014366:	461a      	mov	r2, r3
 8014368:	4b1a      	ldr	r3, [pc, #104]	; (80143d4 <FATFS_LinkDriverEx+0x94>)
 801436a:	2100      	movs	r1, #0
 801436c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801436e:	4b19      	ldr	r3, [pc, #100]	; (80143d4 <FATFS_LinkDriverEx+0x94>)
 8014370:	7a5b      	ldrb	r3, [r3, #9]
 8014372:	b2db      	uxtb	r3, r3
 8014374:	4a17      	ldr	r2, [pc, #92]	; (80143d4 <FATFS_LinkDriverEx+0x94>)
 8014376:	009b      	lsls	r3, r3, #2
 8014378:	4413      	add	r3, r2
 801437a:	68fa      	ldr	r2, [r7, #12]
 801437c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801437e:	4b15      	ldr	r3, [pc, #84]	; (80143d4 <FATFS_LinkDriverEx+0x94>)
 8014380:	7a5b      	ldrb	r3, [r3, #9]
 8014382:	b2db      	uxtb	r3, r3
 8014384:	461a      	mov	r2, r3
 8014386:	4b13      	ldr	r3, [pc, #76]	; (80143d4 <FATFS_LinkDriverEx+0x94>)
 8014388:	4413      	add	r3, r2
 801438a:	79fa      	ldrb	r2, [r7, #7]
 801438c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801438e:	4b11      	ldr	r3, [pc, #68]	; (80143d4 <FATFS_LinkDriverEx+0x94>)
 8014390:	7a5b      	ldrb	r3, [r3, #9]
 8014392:	b2db      	uxtb	r3, r3
 8014394:	1c5a      	adds	r2, r3, #1
 8014396:	b2d1      	uxtb	r1, r2
 8014398:	4a0e      	ldr	r2, [pc, #56]	; (80143d4 <FATFS_LinkDriverEx+0x94>)
 801439a:	7251      	strb	r1, [r2, #9]
 801439c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801439e:	7dbb      	ldrb	r3, [r7, #22]
 80143a0:	3330      	adds	r3, #48	; 0x30
 80143a2:	b2da      	uxtb	r2, r3
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	3301      	adds	r3, #1
 80143ac:	223a      	movs	r2, #58	; 0x3a
 80143ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	3302      	adds	r3, #2
 80143b4:	222f      	movs	r2, #47	; 0x2f
 80143b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	3303      	adds	r3, #3
 80143bc:	2200      	movs	r2, #0
 80143be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80143c0:	2300      	movs	r3, #0
 80143c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80143c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	371c      	adds	r7, #28
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr
 80143d2:	bf00      	nop
 80143d4:	2000212c 	.word	0x2000212c

080143d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80143e2:	2200      	movs	r2, #0
 80143e4:	6839      	ldr	r1, [r7, #0]
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f7ff ffaa 	bl	8014340 <FATFS_LinkDriverEx>
 80143ec:	4603      	mov	r3, r0
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	3708      	adds	r7, #8
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}
	...

080143f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80143f8:	b480      	push	{r7}
 80143fa:	b085      	sub	sp, #20
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	4603      	mov	r3, r0
 8014400:	6039      	str	r1, [r7, #0]
 8014402:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014404:	88fb      	ldrh	r3, [r7, #6]
 8014406:	2b7f      	cmp	r3, #127	; 0x7f
 8014408:	d802      	bhi.n	8014410 <ff_convert+0x18>
		c = chr;
 801440a:	88fb      	ldrh	r3, [r7, #6]
 801440c:	81fb      	strh	r3, [r7, #14]
 801440e:	e025      	b.n	801445c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d00b      	beq.n	801442e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014416:	88fb      	ldrh	r3, [r7, #6]
 8014418:	2bff      	cmp	r3, #255	; 0xff
 801441a:	d805      	bhi.n	8014428 <ff_convert+0x30>
 801441c:	88fb      	ldrh	r3, [r7, #6]
 801441e:	3b80      	subs	r3, #128	; 0x80
 8014420:	4a12      	ldr	r2, [pc, #72]	; (801446c <ff_convert+0x74>)
 8014422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014426:	e000      	b.n	801442a <ff_convert+0x32>
 8014428:	2300      	movs	r3, #0
 801442a:	81fb      	strh	r3, [r7, #14]
 801442c:	e016      	b.n	801445c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801442e:	2300      	movs	r3, #0
 8014430:	81fb      	strh	r3, [r7, #14]
 8014432:	e009      	b.n	8014448 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014434:	89fb      	ldrh	r3, [r7, #14]
 8014436:	4a0d      	ldr	r2, [pc, #52]	; (801446c <ff_convert+0x74>)
 8014438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801443c:	88fa      	ldrh	r2, [r7, #6]
 801443e:	429a      	cmp	r2, r3
 8014440:	d006      	beq.n	8014450 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014442:	89fb      	ldrh	r3, [r7, #14]
 8014444:	3301      	adds	r3, #1
 8014446:	81fb      	strh	r3, [r7, #14]
 8014448:	89fb      	ldrh	r3, [r7, #14]
 801444a:	2b7f      	cmp	r3, #127	; 0x7f
 801444c:	d9f2      	bls.n	8014434 <ff_convert+0x3c>
 801444e:	e000      	b.n	8014452 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014450:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014452:	89fb      	ldrh	r3, [r7, #14]
 8014454:	3380      	adds	r3, #128	; 0x80
 8014456:	b29b      	uxth	r3, r3
 8014458:	b2db      	uxtb	r3, r3
 801445a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801445c:	89fb      	ldrh	r3, [r7, #14]
}
 801445e:	4618      	mov	r0, r3
 8014460:	3714      	adds	r7, #20
 8014462:	46bd      	mov	sp, r7
 8014464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014468:	4770      	bx	lr
 801446a:	bf00      	nop
 801446c:	080530e8 	.word	0x080530e8

08014470 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014470:	b480      	push	{r7}
 8014472:	b087      	sub	sp, #28
 8014474:	af00      	add	r7, sp, #0
 8014476:	4603      	mov	r3, r0
 8014478:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801447a:	88fb      	ldrh	r3, [r7, #6]
 801447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014480:	d201      	bcs.n	8014486 <ff_wtoupper+0x16>
 8014482:	4b3e      	ldr	r3, [pc, #248]	; (801457c <ff_wtoupper+0x10c>)
 8014484:	e000      	b.n	8014488 <ff_wtoupper+0x18>
 8014486:	4b3e      	ldr	r3, [pc, #248]	; (8014580 <ff_wtoupper+0x110>)
 8014488:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	1c9a      	adds	r2, r3, #2
 801448e:	617a      	str	r2, [r7, #20]
 8014490:	881b      	ldrh	r3, [r3, #0]
 8014492:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014494:	8a7b      	ldrh	r3, [r7, #18]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d068      	beq.n	801456c <ff_wtoupper+0xfc>
 801449a:	88fa      	ldrh	r2, [r7, #6]
 801449c:	8a7b      	ldrh	r3, [r7, #18]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d364      	bcc.n	801456c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	1c9a      	adds	r2, r3, #2
 80144a6:	617a      	str	r2, [r7, #20]
 80144a8:	881b      	ldrh	r3, [r3, #0]
 80144aa:	823b      	strh	r3, [r7, #16]
 80144ac:	8a3b      	ldrh	r3, [r7, #16]
 80144ae:	0a1b      	lsrs	r3, r3, #8
 80144b0:	81fb      	strh	r3, [r7, #14]
 80144b2:	8a3b      	ldrh	r3, [r7, #16]
 80144b4:	b2db      	uxtb	r3, r3
 80144b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80144b8:	88fa      	ldrh	r2, [r7, #6]
 80144ba:	8a79      	ldrh	r1, [r7, #18]
 80144bc:	8a3b      	ldrh	r3, [r7, #16]
 80144be:	440b      	add	r3, r1
 80144c0:	429a      	cmp	r2, r3
 80144c2:	da49      	bge.n	8014558 <ff_wtoupper+0xe8>
			switch (cmd) {
 80144c4:	89fb      	ldrh	r3, [r7, #14]
 80144c6:	2b08      	cmp	r3, #8
 80144c8:	d84f      	bhi.n	801456a <ff_wtoupper+0xfa>
 80144ca:	a201      	add	r2, pc, #4	; (adr r2, 80144d0 <ff_wtoupper+0x60>)
 80144cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144d0:	080144f5 	.word	0x080144f5
 80144d4:	08014507 	.word	0x08014507
 80144d8:	0801451d 	.word	0x0801451d
 80144dc:	08014525 	.word	0x08014525
 80144e0:	0801452d 	.word	0x0801452d
 80144e4:	08014535 	.word	0x08014535
 80144e8:	0801453d 	.word	0x0801453d
 80144ec:	08014545 	.word	0x08014545
 80144f0:	0801454d 	.word	0x0801454d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80144f4:	88fa      	ldrh	r2, [r7, #6]
 80144f6:	8a7b      	ldrh	r3, [r7, #18]
 80144f8:	1ad3      	subs	r3, r2, r3
 80144fa:	005b      	lsls	r3, r3, #1
 80144fc:	697a      	ldr	r2, [r7, #20]
 80144fe:	4413      	add	r3, r2
 8014500:	881b      	ldrh	r3, [r3, #0]
 8014502:	80fb      	strh	r3, [r7, #6]
 8014504:	e027      	b.n	8014556 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014506:	88fa      	ldrh	r2, [r7, #6]
 8014508:	8a7b      	ldrh	r3, [r7, #18]
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	b29b      	uxth	r3, r3
 801450e:	f003 0301 	and.w	r3, r3, #1
 8014512:	b29b      	uxth	r3, r3
 8014514:	88fa      	ldrh	r2, [r7, #6]
 8014516:	1ad3      	subs	r3, r2, r3
 8014518:	80fb      	strh	r3, [r7, #6]
 801451a:	e01c      	b.n	8014556 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801451c:	88fb      	ldrh	r3, [r7, #6]
 801451e:	3b10      	subs	r3, #16
 8014520:	80fb      	strh	r3, [r7, #6]
 8014522:	e018      	b.n	8014556 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014524:	88fb      	ldrh	r3, [r7, #6]
 8014526:	3b20      	subs	r3, #32
 8014528:	80fb      	strh	r3, [r7, #6]
 801452a:	e014      	b.n	8014556 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801452c:	88fb      	ldrh	r3, [r7, #6]
 801452e:	3b30      	subs	r3, #48	; 0x30
 8014530:	80fb      	strh	r3, [r7, #6]
 8014532:	e010      	b.n	8014556 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014534:	88fb      	ldrh	r3, [r7, #6]
 8014536:	3b1a      	subs	r3, #26
 8014538:	80fb      	strh	r3, [r7, #6]
 801453a:	e00c      	b.n	8014556 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801453c:	88fb      	ldrh	r3, [r7, #6]
 801453e:	3308      	adds	r3, #8
 8014540:	80fb      	strh	r3, [r7, #6]
 8014542:	e008      	b.n	8014556 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014544:	88fb      	ldrh	r3, [r7, #6]
 8014546:	3b50      	subs	r3, #80	; 0x50
 8014548:	80fb      	strh	r3, [r7, #6]
 801454a:	e004      	b.n	8014556 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801454c:	88fb      	ldrh	r3, [r7, #6]
 801454e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8014552:	80fb      	strh	r3, [r7, #6]
 8014554:	bf00      	nop
			}
			break;
 8014556:	e008      	b.n	801456a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014558:	89fb      	ldrh	r3, [r7, #14]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d195      	bne.n	801448a <ff_wtoupper+0x1a>
 801455e:	8a3b      	ldrh	r3, [r7, #16]
 8014560:	005b      	lsls	r3, r3, #1
 8014562:	697a      	ldr	r2, [r7, #20]
 8014564:	4413      	add	r3, r2
 8014566:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014568:	e78f      	b.n	801448a <ff_wtoupper+0x1a>
			break;
 801456a:	bf00      	nop
	}

	return chr;
 801456c:	88fb      	ldrh	r3, [r7, #6]
}
 801456e:	4618      	mov	r0, r3
 8014570:	371c      	adds	r7, #28
 8014572:	46bd      	mov	sp, r7
 8014574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014578:	4770      	bx	lr
 801457a:	bf00      	nop
 801457c:	080531e8 	.word	0x080531e8
 8014580:	080533dc 	.word	0x080533dc

08014584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014588:	2200      	movs	r2, #0
 801458a:	4912      	ldr	r1, [pc, #72]	; (80145d4 <MX_USB_DEVICE_Init+0x50>)
 801458c:	4812      	ldr	r0, [pc, #72]	; (80145d8 <MX_USB_DEVICE_Init+0x54>)
 801458e:	f7fa ff48 	bl	800f422 <USBD_Init>
 8014592:	4603      	mov	r3, r0
 8014594:	2b00      	cmp	r3, #0
 8014596:	d001      	beq.n	801459c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014598:	f7ee fc1c 	bl	8002dd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801459c:	490f      	ldr	r1, [pc, #60]	; (80145dc <MX_USB_DEVICE_Init+0x58>)
 801459e:	480e      	ldr	r0, [pc, #56]	; (80145d8 <MX_USB_DEVICE_Init+0x54>)
 80145a0:	f7fa ff75 	bl	800f48e <USBD_RegisterClass>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d001      	beq.n	80145ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80145aa:	f7ee fc13 	bl	8002dd4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80145ae:	490c      	ldr	r1, [pc, #48]	; (80145e0 <MX_USB_DEVICE_Init+0x5c>)
 80145b0:	4809      	ldr	r0, [pc, #36]	; (80145d8 <MX_USB_DEVICE_Init+0x54>)
 80145b2:	f7f9 fc71 	bl	800de98 <USBD_MSC_RegisterStorage>
 80145b6:	4603      	mov	r3, r0
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d001      	beq.n	80145c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80145bc:	f7ee fc0a 	bl	8002dd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80145c0:	4805      	ldr	r0, [pc, #20]	; (80145d8 <MX_USB_DEVICE_Init+0x54>)
 80145c2:	f7fa ff85 	bl	800f4d0 <USBD_Start>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d001      	beq.n	80145d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80145cc:	f7ee fc02 	bl	8002dd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80145d0:	bf00      	nop
 80145d2:	bd80      	pop	{r7, pc}
 80145d4:	20000104 	.word	0x20000104
 80145d8:	2000b1b0 	.word	0x2000b1b0
 80145dc:	2000001c 	.word	0x2000001c
 80145e0:	20000154 	.word	0x20000154

080145e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80145e4:	b480      	push	{r7}
 80145e6:	b083      	sub	sp, #12
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	4603      	mov	r3, r0
 80145ec:	6039      	str	r1, [r7, #0]
 80145ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	2212      	movs	r2, #18
 80145f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80145f6:	4b03      	ldr	r3, [pc, #12]	; (8014604 <USBD_FS_DeviceDescriptor+0x20>)
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	370c      	adds	r7, #12
 80145fc:	46bd      	mov	sp, r7
 80145fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014602:	4770      	bx	lr
 8014604:	20000120 	.word	0x20000120

08014608 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014608:	b480      	push	{r7}
 801460a:	b083      	sub	sp, #12
 801460c:	af00      	add	r7, sp, #0
 801460e:	4603      	mov	r3, r0
 8014610:	6039      	str	r1, [r7, #0]
 8014612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	2204      	movs	r2, #4
 8014618:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801461a:	4b03      	ldr	r3, [pc, #12]	; (8014628 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801461c:	4618      	mov	r0, r3
 801461e:	370c      	adds	r7, #12
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr
 8014628:	20000134 	.word	0x20000134

0801462c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b082      	sub	sp, #8
 8014630:	af00      	add	r7, sp, #0
 8014632:	4603      	mov	r3, r0
 8014634:	6039      	str	r1, [r7, #0]
 8014636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014638:	79fb      	ldrb	r3, [r7, #7]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d105      	bne.n	801464a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801463e:	683a      	ldr	r2, [r7, #0]
 8014640:	4907      	ldr	r1, [pc, #28]	; (8014660 <USBD_FS_ProductStrDescriptor+0x34>)
 8014642:	4808      	ldr	r0, [pc, #32]	; (8014664 <USBD_FS_ProductStrDescriptor+0x38>)
 8014644:	f7fb ff37 	bl	80104b6 <USBD_GetString>
 8014648:	e004      	b.n	8014654 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801464a:	683a      	ldr	r2, [r7, #0]
 801464c:	4904      	ldr	r1, [pc, #16]	; (8014660 <USBD_FS_ProductStrDescriptor+0x34>)
 801464e:	4805      	ldr	r0, [pc, #20]	; (8014664 <USBD_FS_ProductStrDescriptor+0x38>)
 8014650:	f7fb ff31 	bl	80104b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014654:	4b02      	ldr	r3, [pc, #8]	; (8014660 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014656:	4618      	mov	r0, r3
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	2000b480 	.word	0x2000b480
 8014664:	08019008 	.word	0x08019008

08014668 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	4603      	mov	r3, r0
 8014670:	6039      	str	r1, [r7, #0]
 8014672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014674:	683a      	ldr	r2, [r7, #0]
 8014676:	4904      	ldr	r1, [pc, #16]	; (8014688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014678:	4804      	ldr	r0, [pc, #16]	; (801468c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801467a:	f7fb ff1c 	bl	80104b6 <USBD_GetString>
  return USBD_StrDesc;
 801467e:	4b02      	ldr	r3, [pc, #8]	; (8014688 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014680:	4618      	mov	r0, r3
 8014682:	3708      	adds	r7, #8
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}
 8014688:	2000b480 	.word	0x2000b480
 801468c:	08019020 	.word	0x08019020

08014690 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b082      	sub	sp, #8
 8014694:	af00      	add	r7, sp, #0
 8014696:	4603      	mov	r3, r0
 8014698:	6039      	str	r1, [r7, #0]
 801469a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	221a      	movs	r2, #26
 80146a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80146a2:	f000 f843 	bl	801472c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80146a6:	4b02      	ldr	r3, [pc, #8]	; (80146b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3708      	adds	r7, #8
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	20000138 	.word	0x20000138

080146b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	4603      	mov	r3, r0
 80146bc:	6039      	str	r1, [r7, #0]
 80146be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80146c0:	79fb      	ldrb	r3, [r7, #7]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d105      	bne.n	80146d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80146c6:	683a      	ldr	r2, [r7, #0]
 80146c8:	4907      	ldr	r1, [pc, #28]	; (80146e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80146ca:	4808      	ldr	r0, [pc, #32]	; (80146ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80146cc:	f7fb fef3 	bl	80104b6 <USBD_GetString>
 80146d0:	e004      	b.n	80146dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80146d2:	683a      	ldr	r2, [r7, #0]
 80146d4:	4904      	ldr	r1, [pc, #16]	; (80146e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80146d6:	4805      	ldr	r0, [pc, #20]	; (80146ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80146d8:	f7fb feed 	bl	80104b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80146dc:	4b02      	ldr	r3, [pc, #8]	; (80146e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	2000b480 	.word	0x2000b480
 80146ec:	08019034 	.word	0x08019034

080146f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	4603      	mov	r3, r0
 80146f8:	6039      	str	r1, [r7, #0]
 80146fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80146fc:	79fb      	ldrb	r3, [r7, #7]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d105      	bne.n	801470e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014702:	683a      	ldr	r2, [r7, #0]
 8014704:	4907      	ldr	r1, [pc, #28]	; (8014724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014706:	4808      	ldr	r0, [pc, #32]	; (8014728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014708:	f7fb fed5 	bl	80104b6 <USBD_GetString>
 801470c:	e004      	b.n	8014718 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801470e:	683a      	ldr	r2, [r7, #0]
 8014710:	4904      	ldr	r1, [pc, #16]	; (8014724 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014712:	4805      	ldr	r0, [pc, #20]	; (8014728 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014714:	f7fb fecf 	bl	80104b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014718:	4b02      	ldr	r3, [pc, #8]	; (8014724 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801471a:	4618      	mov	r0, r3
 801471c:	3708      	adds	r7, #8
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	2000b480 	.word	0x2000b480
 8014728:	08019040 	.word	0x08019040

0801472c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b084      	sub	sp, #16
 8014730:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014732:	4b0f      	ldr	r3, [pc, #60]	; (8014770 <Get_SerialNum+0x44>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014738:	4b0e      	ldr	r3, [pc, #56]	; (8014774 <Get_SerialNum+0x48>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801473e:	4b0e      	ldr	r3, [pc, #56]	; (8014778 <Get_SerialNum+0x4c>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014744:	68fa      	ldr	r2, [r7, #12]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	4413      	add	r3, r2
 801474a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d009      	beq.n	8014766 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014752:	2208      	movs	r2, #8
 8014754:	4909      	ldr	r1, [pc, #36]	; (801477c <Get_SerialNum+0x50>)
 8014756:	68f8      	ldr	r0, [r7, #12]
 8014758:	f000 f814 	bl	8014784 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801475c:	2204      	movs	r2, #4
 801475e:	4908      	ldr	r1, [pc, #32]	; (8014780 <Get_SerialNum+0x54>)
 8014760:	68b8      	ldr	r0, [r7, #8]
 8014762:	f000 f80f 	bl	8014784 <IntToUnicode>
  }
}
 8014766:	bf00      	nop
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	1fff7a10 	.word	0x1fff7a10
 8014774:	1fff7a14 	.word	0x1fff7a14
 8014778:	1fff7a18 	.word	0x1fff7a18
 801477c:	2000013a 	.word	0x2000013a
 8014780:	2000014a 	.word	0x2000014a

08014784 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014784:	b480      	push	{r7}
 8014786:	b087      	sub	sp, #28
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	60b9      	str	r1, [r7, #8]
 801478e:	4613      	mov	r3, r2
 8014790:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014792:	2300      	movs	r3, #0
 8014794:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014796:	2300      	movs	r3, #0
 8014798:	75fb      	strb	r3, [r7, #23]
 801479a:	e027      	b.n	80147ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	0f1b      	lsrs	r3, r3, #28
 80147a0:	2b09      	cmp	r3, #9
 80147a2:	d80b      	bhi.n	80147bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	0f1b      	lsrs	r3, r3, #28
 80147a8:	b2da      	uxtb	r2, r3
 80147aa:	7dfb      	ldrb	r3, [r7, #23]
 80147ac:	005b      	lsls	r3, r3, #1
 80147ae:	4619      	mov	r1, r3
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	440b      	add	r3, r1
 80147b4:	3230      	adds	r2, #48	; 0x30
 80147b6:	b2d2      	uxtb	r2, r2
 80147b8:	701a      	strb	r2, [r3, #0]
 80147ba:	e00a      	b.n	80147d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	0f1b      	lsrs	r3, r3, #28
 80147c0:	b2da      	uxtb	r2, r3
 80147c2:	7dfb      	ldrb	r3, [r7, #23]
 80147c4:	005b      	lsls	r3, r3, #1
 80147c6:	4619      	mov	r1, r3
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	440b      	add	r3, r1
 80147cc:	3237      	adds	r2, #55	; 0x37
 80147ce:	b2d2      	uxtb	r2, r2
 80147d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	011b      	lsls	r3, r3, #4
 80147d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80147d8:	7dfb      	ldrb	r3, [r7, #23]
 80147da:	005b      	lsls	r3, r3, #1
 80147dc:	3301      	adds	r3, #1
 80147de:	68ba      	ldr	r2, [r7, #8]
 80147e0:	4413      	add	r3, r2
 80147e2:	2200      	movs	r2, #0
 80147e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80147e6:	7dfb      	ldrb	r3, [r7, #23]
 80147e8:	3301      	adds	r3, #1
 80147ea:	75fb      	strb	r3, [r7, #23]
 80147ec:	7dfa      	ldrb	r2, [r7, #23]
 80147ee:	79fb      	ldrb	r3, [r7, #7]
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d3d3      	bcc.n	801479c <IntToUnicode+0x18>
  }
}
 80147f4:	bf00      	nop
 80147f6:	371c      	adds	r7, #28
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8014800:	b480      	push	{r7}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
 8014806:	4603      	mov	r3, r0
 8014808:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	return (USBD_OK);
 801480a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801480c:	4618      	mov	r0, r3
 801480e:	370c      	adds	r7, #12
 8014810:	46bd      	mov	sp, r7
 8014812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014816:	4770      	bx	lr

08014818 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b084      	sub	sp, #16
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	60b9      	str	r1, [r7, #8]
 8014822:	607a      	str	r2, [r7, #4]
 8014824:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	//int tmp;
	//tmp =HAL_SD_GetCardState(&hsd);

	HAL_SD_GetCardInfo(&hsd, &SDCardInfo);
 8014826:	490b      	ldr	r1, [pc, #44]	; (8014854 <STORAGE_GetCapacity_FS+0x3c>)
 8014828:	480b      	ldr	r0, [pc, #44]	; (8014858 <STORAGE_GetCapacity_FS+0x40>)
 801482a:	f7f4 ff4b 	bl	80096c4 <HAL_SD_GetCardInfo>
	//*block_num = SDCardInfo.BlockNbr;
	//*block_size = SDCardInfo.BlockSize;
	*block_num = SDCardInfo.LogBlockNbr-1;
 801482e:	4b09      	ldr	r3, [pc, #36]	; (8014854 <STORAGE_GetCapacity_FS+0x3c>)
 8014830:	699b      	ldr	r3, [r3, #24]
 8014832:	1e5a      	subs	r2, r3, #1
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	601a      	str	r2, [r3, #0]
	*block_size = SDCardInfo.LogBlockSize;
 8014838:	4b06      	ldr	r3, [pc, #24]	; (8014854 <STORAGE_GetCapacity_FS+0x3c>)
 801483a:	69db      	ldr	r3, [r3, #28]
 801483c:	b29a      	uxth	r2, r3
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	801a      	strh	r2, [r3, #0]
	//*block_num = STORAGE_BLK_NBR;
	//*block_size = STORAGE_BLK_SIZ;
	usbPcConnected = 1;
 8014842:	4b06      	ldr	r3, [pc, #24]	; (801485c <STORAGE_GetCapacity_FS+0x44>)
 8014844:	2201      	movs	r2, #1
 8014846:	601a      	str	r2, [r3, #0]
	return (USBD_OK);
 8014848:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801484a:	4618      	mov	r0, r3
 801484c:	3710      	adds	r7, #16
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
 8014852:	bf00      	nop
 8014854:	20002444 	.word	0x20002444
 8014858:	20002500 	.word	0x20002500
 801485c:	20000364 	.word	0x20000364

08014860 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8014860:	b480      	push	{r7}
 8014862:	b083      	sub	sp, #12
 8014864:	af00      	add	r7, sp, #0
 8014866:	4603      	mov	r3, r0
 8014868:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 801486a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801486c:	4618      	mov	r0, r3
 801486e:	370c      	adds	r7, #12
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr

08014878 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014878:	b480      	push	{r7}
 801487a:	b083      	sub	sp, #12
 801487c:	af00      	add	r7, sp, #0
 801487e:	4603      	mov	r3, r0
 8014880:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
	return (USBD_OK);
 8014882:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014884:	4618      	mov	r0, r3
 8014886:	370c      	adds	r7, #12
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr

08014890 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b086      	sub	sp, #24
 8014894:	af02      	add	r7, sp, #8
 8014896:	60b9      	str	r1, [r7, #8]
 8014898:	607a      	str	r2, [r7, #4]
 801489a:	461a      	mov	r2, r3
 801489c:	4603      	mov	r3, r0
 801489e:	73fb      	strb	r3, [r7, #15]
 80148a0:	4613      	mov	r3, r2
 80148a2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80148a4:	89ba      	ldrh	r2, [r7, #12]
 80148a6:	f04f 33ff 	mov.w	r3, #4294967295
 80148aa:	9300      	str	r3, [sp, #0]
 80148ac:	4613      	mov	r3, r2
 80148ae:	687a      	ldr	r2, [r7, #4]
 80148b0:	68b9      	ldr	r1, [r7, #8]
 80148b2:	4807      	ldr	r0, [pc, #28]	; (80148d0 <STORAGE_Read_FS+0x40>)
 80148b4:	f7f4 f9ca 	bl	8008c4c <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 80148b8:	bf00      	nop
 80148ba:	4805      	ldr	r0, [pc, #20]	; (80148d0 <STORAGE_Read_FS+0x40>)
 80148bc:	f7f4 ff2e 	bl	800971c <HAL_SD_GetCardState>
 80148c0:	4603      	mov	r3, r0
 80148c2:	2b04      	cmp	r3, #4
 80148c4:	d1f9      	bne.n	80148ba <STORAGE_Read_FS+0x2a>

	//HAL_SD_ReadBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
	//memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
	return (USBD_OK);
 80148c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3710      	adds	r7, #16
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	20002500 	.word	0x20002500

080148d4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b086      	sub	sp, #24
 80148d8:	af02      	add	r7, sp, #8
 80148da:	60b9      	str	r1, [r7, #8]
 80148dc:	607a      	str	r2, [r7, #4]
 80148de:	461a      	mov	r2, r3
 80148e0:	4603      	mov	r3, r0
 80148e2:	73fb      	strb	r3, [r7, #15]
 80148e4:	4613      	mov	r3, r2
 80148e6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */


HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80148e8:	89ba      	ldrh	r2, [r7, #12]
 80148ea:	f04f 33ff 	mov.w	r3, #4294967295
 80148ee:	9300      	str	r3, [sp, #0]
 80148f0:	4613      	mov	r3, r2
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	68b9      	ldr	r1, [r7, #8]
 80148f6:	4807      	ldr	r0, [pc, #28]	; (8014914 <STORAGE_Write_FS+0x40>)
 80148f8:	f7f4 fba0 	bl	800903c <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 80148fc:	bf00      	nop
 80148fe:	4805      	ldr	r0, [pc, #20]	; (8014914 <STORAGE_Write_FS+0x40>)
 8014900:	f7f4 ff0c 	bl	800971c <HAL_SD_GetCardState>
 8014904:	4603      	mov	r3, r0
 8014906:	2b04      	cmp	r3, #4
 8014908:	d1f9      	bne.n	80148fe <STORAGE_Write_FS+0x2a>

	//HAL_SD_WriteBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
	//memcpy( &buffer[blk_addr*STORAGE_BLK_SIZ],buf, blk_len*STORAGE_BLK_SIZ);
	return (USBD_OK);
 801490a:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801490c:	4618      	mov	r0, r3
 801490e:	3710      	adds	r7, #16
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}
 8014914:	20002500 	.word	0x20002500

08014918 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8014918:	b480      	push	{r7}
 801491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	return (STORAGE_LUN_NBR - 1);
 801491c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801491e:	4618      	mov	r0, r3
 8014920:	46bd      	mov	sp, r7
 8014922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014926:	4770      	bx	lr

08014928 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b08a      	sub	sp, #40	; 0x28
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014930:	f107 0314 	add.w	r3, r7, #20
 8014934:	2200      	movs	r2, #0
 8014936:	601a      	str	r2, [r3, #0]
 8014938:	605a      	str	r2, [r3, #4]
 801493a:	609a      	str	r2, [r3, #8]
 801493c:	60da      	str	r2, [r3, #12]
 801493e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014948:	d13a      	bne.n	80149c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801494a:	2300      	movs	r3, #0
 801494c:	613b      	str	r3, [r7, #16]
 801494e:	4b1e      	ldr	r3, [pc, #120]	; (80149c8 <HAL_PCD_MspInit+0xa0>)
 8014950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014952:	4a1d      	ldr	r2, [pc, #116]	; (80149c8 <HAL_PCD_MspInit+0xa0>)
 8014954:	f043 0301 	orr.w	r3, r3, #1
 8014958:	6313      	str	r3, [r2, #48]	; 0x30
 801495a:	4b1b      	ldr	r3, [pc, #108]	; (80149c8 <HAL_PCD_MspInit+0xa0>)
 801495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801495e:	f003 0301 	and.w	r3, r3, #1
 8014962:	613b      	str	r3, [r7, #16]
 8014964:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014966:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801496a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801496c:	2302      	movs	r3, #2
 801496e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014970:	2300      	movs	r3, #0
 8014972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014974:	2303      	movs	r3, #3
 8014976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014978:	230a      	movs	r3, #10
 801497a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801497c:	f107 0314 	add.w	r3, r7, #20
 8014980:	4619      	mov	r1, r3
 8014982:	4812      	ldr	r0, [pc, #72]	; (80149cc <HAL_PCD_MspInit+0xa4>)
 8014984:	f7f1 f856 	bl	8005a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014988:	4b0f      	ldr	r3, [pc, #60]	; (80149c8 <HAL_PCD_MspInit+0xa0>)
 801498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801498c:	4a0e      	ldr	r2, [pc, #56]	; (80149c8 <HAL_PCD_MspInit+0xa0>)
 801498e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014992:	6353      	str	r3, [r2, #52]	; 0x34
 8014994:	2300      	movs	r3, #0
 8014996:	60fb      	str	r3, [r7, #12]
 8014998:	4b0b      	ldr	r3, [pc, #44]	; (80149c8 <HAL_PCD_MspInit+0xa0>)
 801499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801499c:	4a0a      	ldr	r2, [pc, #40]	; (80149c8 <HAL_PCD_MspInit+0xa0>)
 801499e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80149a2:	6453      	str	r3, [r2, #68]	; 0x44
 80149a4:	4b08      	ldr	r3, [pc, #32]	; (80149c8 <HAL_PCD_MspInit+0xa0>)
 80149a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80149ac:	60fb      	str	r3, [r7, #12]
 80149ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80149b0:	2200      	movs	r2, #0
 80149b2:	2100      	movs	r1, #0
 80149b4:	2043      	movs	r0, #67	; 0x43
 80149b6:	f7f0 fc98 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80149ba:	2043      	movs	r0, #67	; 0x43
 80149bc:	f7f0 fcb1 	bl	8005322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80149c0:	bf00      	nop
 80149c2:	3728      	adds	r7, #40	; 0x28
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}
 80149c8:	40023800 	.word	0x40023800
 80149cc:	40020000 	.word	0x40020000

080149d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b082      	sub	sp, #8
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80149e4:	4619      	mov	r1, r3
 80149e6:	4610      	mov	r0, r2
 80149e8:	f7fa fde3 	bl	800f5b2 <USBD_LL_SetupStage>
}
 80149ec:	bf00      	nop
 80149ee:	3708      	adds	r7, #8
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}

080149f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	460b      	mov	r3, r1
 80149fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014a06:	78fa      	ldrb	r2, [r7, #3]
 8014a08:	6879      	ldr	r1, [r7, #4]
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	00db      	lsls	r3, r3, #3
 8014a0e:	1a9b      	subs	r3, r3, r2
 8014a10:	009b      	lsls	r3, r3, #2
 8014a12:	440b      	add	r3, r1
 8014a14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014a18:	681a      	ldr	r2, [r3, #0]
 8014a1a:	78fb      	ldrb	r3, [r7, #3]
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	f7fa fe1b 	bl	800f658 <USBD_LL_DataOutStage>
}
 8014a22:	bf00      	nop
 8014a24:	3708      	adds	r7, #8
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}

08014a2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a2a:	b580      	push	{r7, lr}
 8014a2c:	b082      	sub	sp, #8
 8014a2e:	af00      	add	r7, sp, #0
 8014a30:	6078      	str	r0, [r7, #4]
 8014a32:	460b      	mov	r3, r1
 8014a34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014a3c:	78fa      	ldrb	r2, [r7, #3]
 8014a3e:	6879      	ldr	r1, [r7, #4]
 8014a40:	4613      	mov	r3, r2
 8014a42:	00db      	lsls	r3, r3, #3
 8014a44:	1a9b      	subs	r3, r3, r2
 8014a46:	009b      	lsls	r3, r3, #2
 8014a48:	440b      	add	r3, r1
 8014a4a:	3348      	adds	r3, #72	; 0x48
 8014a4c:	681a      	ldr	r2, [r3, #0]
 8014a4e:	78fb      	ldrb	r3, [r7, #3]
 8014a50:	4619      	mov	r1, r3
 8014a52:	f7fa fe64 	bl	800f71e <USBD_LL_DataInStage>
}
 8014a56:	bf00      	nop
 8014a58:	3708      	adds	r7, #8
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}

08014a5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a5e:	b580      	push	{r7, lr}
 8014a60:	b082      	sub	sp, #8
 8014a62:	af00      	add	r7, sp, #0
 8014a64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f7fa ff68 	bl	800f942 <USBD_LL_SOF>
}
 8014a72:	bf00      	nop
 8014a74:	3708      	adds	r7, #8
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}

08014a7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a7a:	b580      	push	{r7, lr}
 8014a7c:	b084      	sub	sp, #16
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014a82:	2301      	movs	r3, #1
 8014a84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	68db      	ldr	r3, [r3, #12]
 8014a8a:	2b02      	cmp	r3, #2
 8014a8c:	d001      	beq.n	8014a92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014a8e:	f7ee f9a1 	bl	8002dd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014a98:	7bfa      	ldrb	r2, [r7, #15]
 8014a9a:	4611      	mov	r1, r2
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7fa ff15 	bl	800f8cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7fa fece 	bl	800f84a <USBD_LL_Reset>
}
 8014aae:	bf00      	nop
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
	...

08014ab8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b082      	sub	sp, #8
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7fa ff10 	bl	800f8ec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	6812      	ldr	r2, [r2, #0]
 8014ada:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014ade:	f043 0301 	orr.w	r3, r3, #1
 8014ae2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6a1b      	ldr	r3, [r3, #32]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d005      	beq.n	8014af8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014aec:	4b04      	ldr	r3, [pc, #16]	; (8014b00 <HAL_PCD_SuspendCallback+0x48>)
 8014aee:	691b      	ldr	r3, [r3, #16]
 8014af0:	4a03      	ldr	r2, [pc, #12]	; (8014b00 <HAL_PCD_SuspendCallback+0x48>)
 8014af2:	f043 0306 	orr.w	r3, r3, #6
 8014af6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014af8:	bf00      	nop
 8014afa:	3708      	adds	r7, #8
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	e000ed00 	.word	0xe000ed00

08014b04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b082      	sub	sp, #8
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7fa feff 	bl	800f916 <USBD_LL_Resume>
}
 8014b18:	bf00      	nop
 8014b1a:	3708      	adds	r7, #8
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}

08014b20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	460b      	mov	r3, r1
 8014b2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b32:	78fa      	ldrb	r2, [r7, #3]
 8014b34:	4611      	mov	r1, r2
 8014b36:	4618      	mov	r0, r3
 8014b38:	f7fa ff2a 	bl	800f990 <USBD_LL_IsoOUTIncomplete>
}
 8014b3c:	bf00      	nop
 8014b3e:	3708      	adds	r7, #8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}

08014b44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	460b      	mov	r3, r1
 8014b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b56:	78fa      	ldrb	r2, [r7, #3]
 8014b58:	4611      	mov	r1, r2
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7fa ff0b 	bl	800f976 <USBD_LL_IsoINIncomplete>
}
 8014b60:	bf00      	nop
 8014b62:	3708      	adds	r7, #8
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}

08014b68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7fa ff17 	bl	800f9aa <USBD_LL_DevConnected>
}
 8014b7c:	bf00      	nop
 8014b7e:	3708      	adds	r7, #8
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}

08014b84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7fa ff14 	bl	800f9c0 <USBD_LL_DevDisconnected>
}
 8014b98:	bf00      	nop
 8014b9a:	3708      	adds	r7, #8
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b082      	sub	sp, #8
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	781b      	ldrb	r3, [r3, #0]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d13f      	bne.n	8014c30 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014bb0:	4a22      	ldr	r2, [pc, #136]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	4a20      	ldr	r2, [pc, #128]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014bc0:	4b1e      	ldr	r3, [pc, #120]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014bc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8014bc8:	4b1c      	ldr	r3, [pc, #112]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bca:	2206      	movs	r2, #6
 8014bcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014bce:	4b1b      	ldr	r3, [pc, #108]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bd0:	2202      	movs	r2, #2
 8014bd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014bd4:	4b19      	ldr	r3, [pc, #100]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014bda:	4b18      	ldr	r3, [pc, #96]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bdc:	2202      	movs	r2, #2
 8014bde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014be0:	4b16      	ldr	r3, [pc, #88]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014be2:	2200      	movs	r2, #0
 8014be4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014be6:	4b15      	ldr	r3, [pc, #84]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014be8:	2200      	movs	r2, #0
 8014bea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014bec:	4b13      	ldr	r3, [pc, #76]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bee:	2200      	movs	r2, #0
 8014bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014bf2:	4b12      	ldr	r3, [pc, #72]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014bf8:	4b10      	ldr	r3, [pc, #64]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014bfe:	4b0f      	ldr	r3, [pc, #60]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014c00:	2200      	movs	r2, #0
 8014c02:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014c04:	480d      	ldr	r0, [pc, #52]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014c06:	f7f1 fdf5 	bl	80067f4 <HAL_PCD_Init>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d001      	beq.n	8014c14 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8014c10:	f7ee f8e0 	bl	8002dd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014c14:	2180      	movs	r1, #128	; 0x80
 8014c16:	4809      	ldr	r0, [pc, #36]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014c18:	f7f2 ffed 	bl	8007bf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014c1c:	2240      	movs	r2, #64	; 0x40
 8014c1e:	2100      	movs	r1, #0
 8014c20:	4806      	ldr	r0, [pc, #24]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014c22:	f7f2 ffa1 	bl	8007b68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014c26:	2280      	movs	r2, #128	; 0x80
 8014c28:	2101      	movs	r1, #1
 8014c2a:	4804      	ldr	r0, [pc, #16]	; (8014c3c <USBD_LL_Init+0x9c>)
 8014c2c:	f7f2 ff9c 	bl	8007b68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014c30:	2300      	movs	r3, #0
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	3708      	adds	r7, #8
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	2000b680 	.word	0x2000b680

08014c40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b084      	sub	sp, #16
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7f1 fef0 	bl	8006a3c <HAL_PCD_Start>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c60:	7bfb      	ldrb	r3, [r7, #15]
 8014c62:	4618      	mov	r0, r3
 8014c64:	f000 f964 	bl	8014f30 <USBD_Get_USB_Status>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3710      	adds	r7, #16
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b084      	sub	sp, #16
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c82:	2300      	movs	r3, #0
 8014c84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7f1 ff08 	bl	8006aa2 <HAL_PCD_Stop>
 8014c92:	4603      	mov	r3, r0
 8014c94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c96:	7bfb      	ldrb	r3, [r7, #15]
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f000 f949 	bl	8014f30 <USBD_Get_USB_Status>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3710      	adds	r7, #16
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b084      	sub	sp, #16
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	4608      	mov	r0, r1
 8014cb6:	4611      	mov	r1, r2
 8014cb8:	461a      	mov	r2, r3
 8014cba:	4603      	mov	r3, r0
 8014cbc:	70fb      	strb	r3, [r7, #3]
 8014cbe:	460b      	mov	r3, r1
 8014cc0:	70bb      	strb	r3, [r7, #2]
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cca:	2300      	movs	r3, #0
 8014ccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014cd4:	78bb      	ldrb	r3, [r7, #2]
 8014cd6:	883a      	ldrh	r2, [r7, #0]
 8014cd8:	78f9      	ldrb	r1, [r7, #3]
 8014cda:	f7f2 fb1f 	bl	800731c <HAL_PCD_EP_Open>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ce2:	7bfb      	ldrb	r3, [r7, #15]
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f000 f923 	bl	8014f30 <USBD_Get_USB_Status>
 8014cea:	4603      	mov	r3, r0
 8014cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3710      	adds	r7, #16
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}

08014cf8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b084      	sub	sp, #16
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	460b      	mov	r3, r1
 8014d02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d04:	2300      	movs	r3, #0
 8014d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d12:	78fa      	ldrb	r2, [r7, #3]
 8014d14:	4611      	mov	r1, r2
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7f2 fb68 	bl	80073ec <HAL_PCD_EP_Close>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d20:	7bfb      	ldrb	r3, [r7, #15]
 8014d22:	4618      	mov	r0, r3
 8014d24:	f000 f904 	bl	8014f30 <USBD_Get_USB_Status>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}

08014d36 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d36:	b580      	push	{r7, lr}
 8014d38:	b084      	sub	sp, #16
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	6078      	str	r0, [r7, #4]
 8014d3e:	460b      	mov	r3, r1
 8014d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d42:	2300      	movs	r3, #0
 8014d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d46:	2300      	movs	r3, #0
 8014d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d50:	78fa      	ldrb	r2, [r7, #3]
 8014d52:	4611      	mov	r1, r2
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7f2 fcfa 	bl	800774e <HAL_PCD_EP_Flush>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d5e:	7bfb      	ldrb	r3, [r7, #15]
 8014d60:	4618      	mov	r0, r3
 8014d62:	f000 f8e5 	bl	8014f30 <USBD_Get_USB_Status>
 8014d66:	4603      	mov	r3, r0
 8014d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b084      	sub	sp, #16
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d80:	2300      	movs	r3, #0
 8014d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d84:	2300      	movs	r3, #0
 8014d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d8e:	78fa      	ldrb	r2, [r7, #3]
 8014d90:	4611      	mov	r1, r2
 8014d92:	4618      	mov	r0, r3
 8014d94:	f7f2 fc21 	bl	80075da <HAL_PCD_EP_SetStall>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d9c:	7bfb      	ldrb	r3, [r7, #15]
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f000 f8c6 	bl	8014f30 <USBD_Get_USB_Status>
 8014da4:	4603      	mov	r3, r0
 8014da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3710      	adds	r7, #16
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}

08014db2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014db2:	b580      	push	{r7, lr}
 8014db4:	b084      	sub	sp, #16
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	6078      	str	r0, [r7, #4]
 8014dba:	460b      	mov	r3, r1
 8014dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014dcc:	78fa      	ldrb	r2, [r7, #3]
 8014dce:	4611      	mov	r1, r2
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7f2 fc66 	bl	80076a2 <HAL_PCD_EP_ClrStall>
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014dda:	7bfb      	ldrb	r3, [r7, #15]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f000 f8a7 	bl	8014f30 <USBD_Get_USB_Status>
 8014de2:	4603      	mov	r3, r0
 8014de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3710      	adds	r7, #16
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014df0:	b480      	push	{r7}
 8014df2:	b085      	sub	sp, #20
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
 8014df8:	460b      	mov	r3, r1
 8014dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014e02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	da0b      	bge.n	8014e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014e0c:	78fb      	ldrb	r3, [r7, #3]
 8014e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014e12:	68f9      	ldr	r1, [r7, #12]
 8014e14:	4613      	mov	r3, r2
 8014e16:	00db      	lsls	r3, r3, #3
 8014e18:	1a9b      	subs	r3, r3, r2
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	440b      	add	r3, r1
 8014e1e:	333e      	adds	r3, #62	; 0x3e
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	e00b      	b.n	8014e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014e24:	78fb      	ldrb	r3, [r7, #3]
 8014e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014e2a:	68f9      	ldr	r1, [r7, #12]
 8014e2c:	4613      	mov	r3, r2
 8014e2e:	00db      	lsls	r3, r3, #3
 8014e30:	1a9b      	subs	r3, r3, r2
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	440b      	add	r3, r1
 8014e36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3714      	adds	r7, #20
 8014e40:	46bd      	mov	sp, r7
 8014e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e46:	4770      	bx	lr

08014e48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b084      	sub	sp, #16
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	460b      	mov	r3, r1
 8014e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e54:	2300      	movs	r3, #0
 8014e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e58:	2300      	movs	r3, #0
 8014e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014e62:	78fa      	ldrb	r2, [r7, #3]
 8014e64:	4611      	mov	r1, r2
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7f2 fa33 	bl	80072d2 <HAL_PCD_SetAddress>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e70:	7bfb      	ldrb	r3, [r7, #15]
 8014e72:	4618      	mov	r0, r3
 8014e74:	f000 f85c 	bl	8014f30 <USBD_Get_USB_Status>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3710      	adds	r7, #16
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}

08014e86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014e86:	b580      	push	{r7, lr}
 8014e88:	b086      	sub	sp, #24
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	60f8      	str	r0, [r7, #12]
 8014e8e:	607a      	str	r2, [r7, #4]
 8014e90:	603b      	str	r3, [r7, #0]
 8014e92:	460b      	mov	r3, r1
 8014e94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e96:	2300      	movs	r3, #0
 8014e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014ea4:	7af9      	ldrb	r1, [r7, #11]
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	687a      	ldr	r2, [r7, #4]
 8014eaa:	f7f2 fb4c 	bl	8007546 <HAL_PCD_EP_Transmit>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014eb2:	7dfb      	ldrb	r3, [r7, #23]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f000 f83b 	bl	8014f30 <USBD_Get_USB_Status>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	3718      	adds	r7, #24
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}

08014ec8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b086      	sub	sp, #24
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	607a      	str	r2, [r7, #4]
 8014ed2:	603b      	str	r3, [r7, #0]
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014edc:	2300      	movs	r3, #0
 8014ede:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014ee6:	7af9      	ldrb	r1, [r7, #11]
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	687a      	ldr	r2, [r7, #4]
 8014eec:	f7f2 fac8 	bl	8007480 <HAL_PCD_EP_Receive>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ef4:	7dfb      	ldrb	r3, [r7, #23]
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f000 f81a 	bl	8014f30 <USBD_Get_USB_Status>
 8014efc:	4603      	mov	r3, r0
 8014efe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014f00:	7dbb      	ldrb	r3, [r7, #22]
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	3718      	adds	r7, #24
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}

08014f0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f0a:	b580      	push	{r7, lr}
 8014f0c:	b082      	sub	sp, #8
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	6078      	str	r0, [r7, #4]
 8014f12:	460b      	mov	r3, r1
 8014f14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f1c:	78fa      	ldrb	r2, [r7, #3]
 8014f1e:	4611      	mov	r1, r2
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7f2 faf8 	bl	8007516 <HAL_PCD_EP_GetRxCount>
 8014f26:	4603      	mov	r3, r0
}
 8014f28:	4618      	mov	r0, r3
 8014f2a:	3708      	adds	r7, #8
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}

08014f30 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014f30:	b480      	push	{r7}
 8014f32:	b085      	sub	sp, #20
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	4603      	mov	r3, r0
 8014f38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014f3e:	79fb      	ldrb	r3, [r7, #7]
 8014f40:	2b03      	cmp	r3, #3
 8014f42:	d817      	bhi.n	8014f74 <USBD_Get_USB_Status+0x44>
 8014f44:	a201      	add	r2, pc, #4	; (adr r2, 8014f4c <USBD_Get_USB_Status+0x1c>)
 8014f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f4a:	bf00      	nop
 8014f4c:	08014f5d 	.word	0x08014f5d
 8014f50:	08014f63 	.word	0x08014f63
 8014f54:	08014f69 	.word	0x08014f69
 8014f58:	08014f6f 	.word	0x08014f6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8014f60:	e00b      	b.n	8014f7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014f62:	2303      	movs	r3, #3
 8014f64:	73fb      	strb	r3, [r7, #15]
    break;
 8014f66:	e008      	b.n	8014f7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014f68:	2301      	movs	r3, #1
 8014f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8014f6c:	e005      	b.n	8014f7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014f6e:	2303      	movs	r3, #3
 8014f70:	73fb      	strb	r3, [r7, #15]
    break;
 8014f72:	e002      	b.n	8014f7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014f74:	2303      	movs	r3, #3
 8014f76:	73fb      	strb	r3, [r7, #15]
    break;
 8014f78:	bf00      	nop
  }
  return usb_status;
 8014f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3714      	adds	r7, #20
 8014f80:	46bd      	mov	sp, r7
 8014f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f86:	4770      	bx	lr

08014f88 <src236_reset>:
 8014f88:	b510      	push	{r4, lr}
 8014f8a:	2400      	movs	r4, #0
 8014f8c:	e880 0012 	stmia.w	r0, {r1, r4}
 8014f90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014f94:	4621      	mov	r1, r4
 8014f96:	300c      	adds	r0, #12
 8014f98:	f001 fe0b 	bl	8016bb2 <memset>
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	bd10      	pop	{r4, pc}

08014fa0 <src236_setParam>:
 8014fa0:	6803      	ldr	r3, [r0, #0]
 8014fa2:	604b      	str	r3, [r1, #4]
 8014fa4:	2000      	movs	r0, #0
 8014fa6:	4770      	bx	lr

08014fa8 <src236_process>:
 8014fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fac:	b091      	sub	sp, #68	; 0x44
 8014fae:	4616      	mov	r6, r2
 8014fb0:	920f      	str	r2, [sp, #60]	; 0x3c
 8014fb2:	f852 3b0c 	ldr.w	r3, [r2], #12
 8014fb6:	9302      	str	r3, [sp, #8]
 8014fb8:	4607      	mov	r7, r0
 8014fba:	461d      	mov	r5, r3
 8014fbc:	460c      	mov	r4, r1
 8014fbe:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8014fc2:	920d      	str	r2, [sp, #52]	; 0x34
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	497f      	ldr	r1, [pc, #508]	; (80151c4 <src236_process+0x21c>)
 8014fc8:	9305      	str	r3, [sp, #20]
 8014fca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014fce:	f001 fde5 	bl	8016b9c <memcpy>
 8014fd2:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8014fd6:	4b7c      	ldr	r3, [pc, #496]	; (80151c8 <src236_process+0x220>)
 8014fd8:	68b9      	ldr	r1, [r7, #8]
 8014fda:	f8c5 3780 	str.w	r3, [r5, #1920]	; 0x780
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	930a      	str	r3, [sp, #40]	; 0x28
 8014fe2:	4551      	cmp	r1, sl
 8014fe4:	f000 8200 	beq.w	80153e8 <src236_process+0x440>
 8014fe8:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8014fec:	f1be 0f02 	cmp.w	lr, #2
 8014ff0:	f040 81e8 	bne.w	80153c4 <src236_process+0x41c>
 8014ff4:	2bf0      	cmp	r3, #240	; 0xf0
 8014ff6:	f300 81ef 	bgt.w	80153d8 <src236_process+0x430>
 8014ffa:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8014ffe:	f1bc 0f07 	cmp.w	ip, #7
 8015002:	f200 81ee 	bhi.w	80153e2 <src236_process+0x43a>
 8015006:	e8df f01c 	tbh	[pc, ip, lsl #1]
 801500a:	019b      	.short	0x019b
 801500c:	01b301a6 	.word	0x01b301a6
 8015010:	01c801bc 	.word	0x01c801bc
 8015014:	000801ce 	.word	0x000801ce
 8015018:	0183      	.short	0x0183
 801501a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801501c:	2001      	movs	r0, #1
 801501e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8015022:	4103      	asrs	r3, r0
 8015024:	9309      	str	r3, [sp, #36]	; 0x24
 8015026:	f06f 0301 	mvn.w	r3, #1
 801502a:	9003      	str	r0, [sp, #12]
 801502c:	4666      	mov	r6, ip
 801502e:	9008      	str	r0, [sp, #32]
 8015030:	f04f 0806 	mov.w	r8, #6
 8015034:	250a      	movs	r5, #10
 8015036:	9306      	str	r3, [sp, #24]
 8015038:	f04f 0900 	mov.w	r9, #0
 801503c:	683b      	ldr	r3, [r7, #0]
 801503e:	2b02      	cmp	r3, #2
 8015040:	f000 80c4 	beq.w	80151cc <src236_process+0x224>
 8015044:	2b01      	cmp	r3, #1
 8015046:	f040 81c2 	bne.w	80153ce <src236_process+0x426>
 801504a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801504c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801504e:	1c6a      	adds	r2, r5, #1
 8015050:	920f      	str	r2, [sp, #60]	; 0x3c
 8015052:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 8015056:	9a02      	ldr	r2, [sp, #8]
 8015058:	3310      	adds	r3, #16
 801505a:	930e      	str	r3, [sp, #56]	; 0x38
 801505c:	3208      	adds	r2, #8
 801505e:	f933 4c04 	ldrsh.w	r4, [r3, #-4]
 8015062:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
 8015066:	3304      	adds	r3, #4
 8015068:	0424      	lsls	r4, r4, #16
 801506a:	0400      	lsls	r0, r0, #16
 801506c:	429f      	cmp	r7, r3
 801506e:	f842 4c08 	str.w	r4, [r2, #-8]
 8015072:	f842 0c04 	str.w	r0, [r2, #-4]
 8015076:	f102 0208 	add.w	r2, r2, #8
 801507a:	d1f0      	bne.n	801505e <src236_process+0xb6>
 801507c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801507e:	ea4f 0c62 	mov.w	ip, r2, asr #1
 8015082:	9a02      	ldr	r2, [sp, #8]
 8015084:	00eb      	lsls	r3, r5, #3
 8015086:	f1bc 0f00 	cmp.w	ip, #0
 801508a:	9304      	str	r3, [sp, #16]
 801508c:	eb02 0703 	add.w	r7, r2, r3
 8015090:	dd1c      	ble.n	80150cc <src236_process+0x124>
 8015092:	f10c 0301 	add.w	r3, ip, #1
 8015096:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 801509a:	eb07 050b 	add.w	r5, r7, fp
 801509e:	f107 0308 	add.w	r3, r7, #8
 80150a2:	1d0a      	adds	r2, r1, #4
 80150a4:	f932 4c04 	ldrsh.w	r4, [r2, #-4]
 80150a8:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
 80150ac:	0424      	lsls	r4, r4, #16
 80150ae:	0400      	lsls	r0, r0, #16
 80150b0:	f843 4c08 	str.w	r4, [r3, #-8]
 80150b4:	f843 0c04 	str.w	r0, [r3, #-4]
 80150b8:	3308      	adds	r3, #8
 80150ba:	429d      	cmp	r5, r3
 80150bc:	f102 0204 	add.w	r2, r2, #4
 80150c0:	d1f0      	bne.n	80150a4 <src236_process+0xfc>
 80150c2:	f1ab 0308 	sub.w	r3, fp, #8
 80150c6:	441f      	add	r7, r3
 80150c8:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80150cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ce:	07db      	lsls	r3, r3, #31
 80150d0:	d503      	bpl.n	80150da <src236_process+0x132>
 80150d2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80150d6:	041b      	lsls	r3, r3, #16
 80150d8:	603b      	str	r3, [r7, #0]
 80150da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150dc:	2b00      	cmp	r3, #0
 80150de:	dd55      	ble.n	801518c <src236_process+0x1e4>
 80150e0:	f10e 0201 	add.w	r2, lr, #1
 80150e4:	0052      	lsls	r2, r2, #1
 80150e6:	9806      	ldr	r0, [sp, #24]
 80150e8:	920c      	str	r2, [sp, #48]	; 0x30
 80150ea:	9a03      	ldr	r2, [sp, #12]
 80150ec:	f10e 33ff 	add.w	r3, lr, #4294967295
 80150f0:	f04f 0b00 	mov.w	fp, #0
 80150f4:	fb0e 8100 	mla	r1, lr, r0, r8
 80150f8:	fb02 9303 	mla	r3, r2, r3, r9
 80150fc:	46d8      	mov	r8, fp
 80150fe:	f8cd b018 	str.w	fp, [sp, #24]
 8015102:	f1aa 0702 	sub.w	r7, sl, #2
 8015106:	910b      	str	r1, [sp, #44]	; 0x2c
 8015108:	9307      	str	r3, [sp, #28]
 801510a:	00f5      	lsls	r5, r6, #3
 801510c:	4683      	mov	fp, r0
 801510e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015110:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8015114:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8015118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801511c:	eb07 0a03 	add.w	sl, r7, r3
 8015120:	2100      	movs	r1, #0
 8015122:	9b02      	ldr	r3, [sp, #8]
 8015124:	f8cd b004 	str.w	fp, [sp, #4]
 8015128:	eb03 0088 	add.w	r0, r3, r8, lsl #2
 801512c:	9b05      	ldr	r3, [sp, #20]
 801512e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8015132:	9b04      	ldr	r3, [sp, #16]
 8015134:	18c4      	adds	r4, r0, r3
 8015136:	2300      	movs	r3, #0
 8015138:	f850 bb08 	ldr.w	fp, [r0], #8
 801513c:	680a      	ldr	r2, [r1, #0]
 801513e:	fb52 331b 	smmlar	r3, r2, fp, r3
 8015142:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
 8015146:	4693      	mov	fp, r2
 8015148:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801514c:	fb5b 3312 	smmlar	r3, fp, r2, r3
 8015150:	4284      	cmp	r4, r0
 8015152:	4429      	add	r1, r5
 8015154:	d1f0      	bne.n	8015138 <src236_process+0x190>
 8015156:	fb06 f303 	mul.w	r3, r6, r3
 801515a:	f303 031e 	ssat	r3, #31, r3
 801515e:	f343 33cf 	sbfx	r3, r3, #15, #16
 8015162:	f827 3f02 	strh.w	r3, [r7, #2]!
 8015166:	f8dd b004 	ldr.w	fp, [sp, #4]
 801516a:	9b03      	ldr	r3, [sp, #12]
 801516c:	45ba      	cmp	sl, r7
 801516e:	44c8      	add	r8, r9
 8015170:	4671      	mov	r1, lr
 8015172:	46e1      	mov	r9, ip
 8015174:	ebcb 0e0e 	rsb	lr, fp, lr
 8015178:	ebc3 0c0c 	rsb	ip, r3, ip
 801517c:	d1d1      	bne.n	8015122 <src236_process+0x17a>
 801517e:	9b06      	ldr	r3, [sp, #24]
 8015180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015182:	3301      	adds	r3, #1
 8015184:	4293      	cmp	r3, r2
 8015186:	9306      	str	r3, [sp, #24]
 8015188:	4657      	mov	r7, sl
 801518a:	d1c0      	bne.n	801510e <src236_process+0x166>
 801518c:	9b02      	ldr	r3, [sp, #8]
 801518e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015190:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015192:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015194:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801519a:	3208      	adds	r2, #8
 801519c:	eb01 0480 	add.w	r4, r1, r0, lsl #2
 80151a0:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 80151a4:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 80151a8:	f823 1c02 	strh.w	r1, [r3, #-2]
 80151ac:	f823 0c04 	strh.w	r0, [r3, #-4]
 80151b0:	3304      	adds	r3, #4
 80151b2:	429c      	cmp	r4, r3
 80151b4:	f102 0208 	add.w	r2, r2, #8
 80151b8:	d1f2      	bne.n	80151a0 <src236_process+0x1f8>
 80151ba:	2000      	movs	r0, #0
 80151bc:	b011      	add	sp, #68	; 0x44
 80151be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151c2:	bf00      	nop
 80151c4:	08019050 	.word	0x08019050
 80151c8:	ffffe619 	.word	0xffffe619
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	f000 8107 	beq.w	80153e2 <src236_process+0x43a>
 80151d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151d6:	00eb      	lsls	r3, r5, #3
 80151d8:	18d4      	adds	r4, r2, r3
 80151da:	9304      	str	r3, [sp, #16]
 80151dc:	9b02      	ldr	r3, [sp, #8]
 80151de:	f1a3 0008 	sub.w	r0, r3, #8
 80151e2:	4613      	mov	r3, r2
 80151e4:	4622      	mov	r2, r4
 80151e6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 80151ea:	4293      	cmp	r3, r2
 80151ec:	e9e0 4502 	strd	r4, r5, [r0, #8]!
 80151f0:	d1f9      	bne.n	80151e6 <src236_process+0x23e>
 80151f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151f4:	9a02      	ldr	r2, [sp, #8]
 80151f6:	9c04      	ldr	r4, [sp, #16]
 80151f8:	07dd      	lsls	r5, r3, #31
 80151fa:	eb02 0004 	add.w	r0, r2, r4
 80151fe:	f100 8081 	bmi.w	8015304 <src236_process+0x35c>
 8015202:	105c      	asrs	r4, r3, #1
 8015204:	2c00      	cmp	r4, #0
 8015206:	dd08      	ble.n	801521a <src236_process+0x272>
 8015208:	3808      	subs	r0, #8
 801520a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801520e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8015212:	42a1      	cmp	r1, r4
 8015214:	e9e0 2302 	strd	r2, r3, [r0, #8]!
 8015218:	d1f9      	bne.n	801520e <src236_process+0x266>
 801521a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801521c:	2b00      	cmp	r3, #0
 801521e:	dd61      	ble.n	80152e4 <src236_process+0x33c>
 8015220:	f10e 0201 	add.w	r2, lr, #1
 8015224:	0092      	lsls	r2, r2, #2
 8015226:	9806      	ldr	r0, [sp, #24]
 8015228:	920d      	str	r2, [sp, #52]	; 0x34
 801522a:	9a03      	ldr	r2, [sp, #12]
 801522c:	f10e 33ff 	add.w	r3, lr, #4294967295
 8015230:	2100      	movs	r1, #0
 8015232:	fb0e 8000 	mla	r0, lr, r0, r8
 8015236:	fb02 9303 	mla	r3, r2, r3, r9
 801523a:	f10a 0c04 	add.w	ip, sl, #4
 801523e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015240:	900c      	str	r0, [sp, #48]	; 0x30
 8015242:	930e      	str	r3, [sp, #56]	; 0x38
 8015244:	468a      	mov	sl, r1
 8015246:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
 801524a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801524c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8015250:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8015254:	4463      	add	r3, ip
 8015256:	9307      	str	r3, [sp, #28]
 8015258:	9b08      	ldr	r3, [sp, #32]
 801525a:	9301      	str	r3, [sp, #4]
 801525c:	2400      	movs	r4, #0
 801525e:	9b02      	ldr	r3, [sp, #8]
 8015260:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8015264:	9b05      	ldr	r3, [sp, #20]
 8015266:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801526a:	9b04      	ldr	r3, [sp, #16]
 801526c:	2100      	movs	r1, #0
 801526e:	eb05 0e03 	add.w	lr, r5, r3
 8015272:	4608      	mov	r0, r1
 8015274:	f855 7b08 	ldr.w	r7, [r5], #8
 8015278:	6823      	ldr	r3, [r4, #0]
 801527a:	f855 2c04 	ldr.w	r2, [r5, #-4]
 801527e:	fb33 0007 	smlawb	r0, r3, r7, r0
 8015282:	fb33 1117 	smlawt	r1, r3, r7, r1
 8015286:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 801528a:	fb33 0002 	smlawb	r0, r3, r2, r0
 801528e:	fb33 1112 	smlawt	r1, r3, r2, r1
 8015292:	4575      	cmp	r5, lr
 8015294:	445c      	add	r4, fp
 8015296:	d1ed      	bne.n	8015274 <src236_process+0x2cc>
 8015298:	9b01      	ldr	r3, [sp, #4]
 801529a:	f8cd 9004 	str.w	r9, [sp, #4]
 801529e:	449a      	add	sl, r3
 80152a0:	9b06      	ldr	r3, [sp, #24]
 80152a2:	4644      	mov	r4, r8
 80152a4:	ebc3 0808 	rsb	r8, r3, r8
 80152a8:	9b03      	ldr	r3, [sp, #12]
 80152aa:	fb06 f000 	mul.w	r0, r6, r0
 80152ae:	fb06 f101 	mul.w	r1, r6, r1
 80152b2:	f300 001e 	ssat	r0, #31, r0
 80152b6:	f301 011e 	ssat	r1, #31, r1
 80152ba:	f340 30cf 	sbfx	r0, r0, #15, #16
 80152be:	f341 31cf 	sbfx	r1, r1, #15, #16
 80152c2:	ebc3 0909 	rsb	r9, r3, r9
 80152c6:	9b07      	ldr	r3, [sp, #28]
 80152c8:	f82c 0c04 	strh.w	r0, [ip, #-4]
 80152cc:	f82c 1c02 	strh.w	r1, [ip, #-2]
 80152d0:	f10c 0c04 	add.w	ip, ip, #4
 80152d4:	459c      	cmp	ip, r3
 80152d6:	d1c2      	bne.n	801525e <src236_process+0x2b6>
 80152d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152dc:	3301      	adds	r3, #1
 80152de:	4293      	cmp	r3, r2
 80152e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80152e2:	d1b2      	bne.n	801524a <src236_process+0x2a2>
 80152e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152e6:	9b02      	ldr	r3, [sp, #8]
 80152e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80152ec:	9a04      	ldr	r2, [sp, #16]
 80152ee:	441a      	add	r2, r3
 80152f0:	4614      	mov	r4, r2
 80152f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80152f4:	3204      	adds	r2, #4
 80152f6:	e8f3 0102 	ldrd	r0, r1, [r3], #8
 80152fa:	42a3      	cmp	r3, r4
 80152fc:	e9e2 0102 	strd	r0, r1, [r2, #8]!
 8015300:	d1f9      	bne.n	80152f6 <src236_process+0x34e>
 8015302:	e75a      	b.n	80151ba <src236_process+0x212>
 8015304:	680b      	ldr	r3, [r1, #0]
 8015306:	5113      	str	r3, [r2, r4]
 8015308:	3004      	adds	r0, #4
 801530a:	3104      	adds	r1, #4
 801530c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801530e:	e778      	b.n	8015202 <src236_process+0x25a>
 8015310:	2302      	movs	r3, #2
 8015312:	2403      	movs	r4, #3
 8015314:	9306      	str	r3, [sp, #24]
 8015316:	9308      	str	r3, [sp, #32]
 8015318:	201e      	movs	r0, #30
 801531a:	4623      	mov	r3, r4
 801531c:	250f      	movs	r5, #15
 801531e:	2604      	movs	r6, #4
 8015320:	f04f 0e01 	mov.w	lr, #1
 8015324:	f1bc 0f07 	cmp.w	ip, #7
 8015328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801532a:	fb92 f2f4 	sdiv	r2, r2, r4
 801532e:	f04f 0800 	mov.w	r8, #0
 8015332:	9209      	str	r2, [sp, #36]	; 0x24
 8015334:	d041      	beq.n	80153ba <src236_process+0x412>
 8015336:	4605      	mov	r5, r0
 8015338:	9308      	str	r3, [sp, #32]
 801533a:	f8cd 800c 	str.w	r8, [sp, #12]
 801533e:	e67b      	b.n	8015038 <src236_process+0x90>
 8015340:	2203      	movs	r2, #3
 8015342:	2401      	movs	r4, #1
 8015344:	9206      	str	r2, [sp, #24]
 8015346:	2202      	movs	r2, #2
 8015348:	46a6      	mov	lr, r4
 801534a:	4623      	mov	r3, r4
 801534c:	200a      	movs	r0, #10
 801534e:	2505      	movs	r5, #5
 8015350:	2606      	movs	r6, #6
 8015352:	9208      	str	r2, [sp, #32]
 8015354:	e7e6      	b.n	8015324 <src236_process+0x37c>
 8015356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015358:	9309      	str	r3, [sp, #36]	; 0x24
 801535a:	2301      	movs	r3, #1
 801535c:	f04f 0800 	mov.w	r8, #0
 8015360:	9308      	str	r3, [sp, #32]
 8015362:	2302      	movs	r3, #2
 8015364:	f8cd 800c 	str.w	r8, [sp, #12]
 8015368:	250a      	movs	r5, #10
 801536a:	2606      	movs	r6, #6
 801536c:	9306      	str	r3, [sp, #24]
 801536e:	e663      	b.n	8015038 <src236_process+0x90>
 8015370:	2301      	movs	r3, #1
 8015372:	2505      	movs	r5, #5
 8015374:	2606      	movs	r6, #6
 8015376:	9306      	str	r3, [sp, #24]
 8015378:	46ae      	mov	lr, r5
 801537a:	461c      	mov	r4, r3
 801537c:	9608      	str	r6, [sp, #32]
 801537e:	200a      	movs	r0, #10
 8015380:	e7d0      	b.n	8015324 <src236_process+0x37c>
 8015382:	2402      	movs	r4, #2
 8015384:	4623      	mov	r3, r4
 8015386:	4666      	mov	r6, ip
 8015388:	2014      	movs	r0, #20
 801538a:	250a      	movs	r5, #10
 801538c:	2206      	movs	r2, #6
 801538e:	9206      	str	r2, [sp, #24]
 8015390:	2201      	movs	r2, #1
 8015392:	f04f 0e00 	mov.w	lr, #0
 8015396:	9208      	str	r2, [sp, #32]
 8015398:	e7c4      	b.n	8015324 <src236_process+0x37c>
 801539a:	2403      	movs	r4, #3
 801539c:	4623      	mov	r3, r4
 801539e:	2602      	movs	r6, #2
 80153a0:	201e      	movs	r0, #30
 80153a2:	250f      	movs	r5, #15
 80153a4:	e7f2      	b.n	801538c <src236_process+0x3e4>
 80153a6:	2306      	movs	r3, #6
 80153a8:	2601      	movs	r6, #1
 80153aa:	9306      	str	r3, [sp, #24]
 80153ac:	461c      	mov	r4, r3
 80153ae:	9608      	str	r6, [sp, #32]
 80153b0:	203c      	movs	r0, #60	; 0x3c
 80153b2:	251e      	movs	r5, #30
 80153b4:	f04f 0e00 	mov.w	lr, #0
 80153b8:	e7b4      	b.n	8015324 <src236_process+0x37c>
 80153ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80153be:	f04f 0901 	mov.w	r9, #1
 80153c2:	e63b      	b.n	801503c <src236_process+0x94>
 80153c4:	f06f 0001 	mvn.w	r0, #1
 80153c8:	b011      	add	sp, #68	; 0x44
 80153ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ce:	f06f 0002 	mvn.w	r0, #2
 80153d2:	b011      	add	sp, #68	; 0x44
 80153d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d8:	f06f 0004 	mvn.w	r0, #4
 80153dc:	b011      	add	sp, #68	; 0x44
 80153de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153e2:	f04f 30ff 	mov.w	r0, #4294967295
 80153e6:	e6e9      	b.n	80151bc <src236_process+0x214>
 80153e8:	f06f 0003 	mvn.w	r0, #3
 80153ec:	e6e6      	b.n	80151bc <src236_process+0x214>
 80153ee:	bf00      	nop

080153f0 <src441_reset>:
 80153f0:	b510      	push	{r4, lr}
 80153f2:	2280      	movs	r2, #128	; 0x80
 80153f4:	4604      	mov	r4, r0
 80153f6:	f840 1b08 	str.w	r1, [r0], #8
 80153fa:	2100      	movs	r1, #0
 80153fc:	f001 fbd9 	bl	8016bb2 <memset>
 8015400:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8015404:	2260      	movs	r2, #96	; 0x60
 8015406:	2100      	movs	r1, #0
 8015408:	f001 fbd3 	bl	8016bb2 <memset>
 801540c:	2000      	movs	r0, #0
 801540e:	bd10      	pop	{r4, pc}

08015410 <src441_setParam>:
 8015410:	2000      	movs	r0, #0
 8015412:	4770      	bx	lr

08015414 <src441_process>:
 8015414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015418:	6813      	ldr	r3, [r2, #0]
 801541a:	b099      	sub	sp, #100	; 0x64
 801541c:	461e      	mov	r6, r3
 801541e:	9311      	str	r3, [sp, #68]	; 0x44
 8015420:	460d      	mov	r5, r1
 8015422:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8015426:	4604      	mov	r4, r0
 8015428:	9212      	str	r2, [sp, #72]	; 0x48
 801542a:	4618      	mov	r0, r3
 801542c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015430:	49ae      	ldr	r1, [pc, #696]	; (80156ec <src441_process+0x2d8>)
 8015432:	9304      	str	r3, [sp, #16]
 8015434:	f001 fbb2 	bl	8016b9c <memcpy>
 8015438:	68ab      	ldr	r3, [r5, #8]
 801543a:	68a1      	ldr	r1, [r4, #8]
 801543c:	9317      	str	r3, [sp, #92]	; 0x5c
 801543e:	461f      	mov	r7, r3
 8015440:	4bab      	ldr	r3, [pc, #684]	; (80156f0 <src441_process+0x2dc>)
 8015442:	f8c6 3bb8 	str.w	r3, [r6, #3000]	; 0xbb8
 8015446:	42b9      	cmp	r1, r7
 8015448:	f506 63a3 	add.w	r3, r6, #1304	; 0x518
 801544c:	68e2      	ldr	r2, [r4, #12]
 801544e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015450:	f000 8599 	beq.w	8015f86 <src441_process+0xb72>
 8015454:	6863      	ldr	r3, [r4, #4]
 8015456:	2b02      	cmp	r3, #2
 8015458:	f040 8587 	bne.w	8015f6a <src441_process+0xb56>
 801545c:	2a93      	cmp	r2, #147	; 0x93
 801545e:	f040 8589 	bne.w	8015f74 <src441_process+0xb60>
 8015462:	6823      	ldr	r3, [r4, #0]
 8015464:	2b02      	cmp	r3, #2
 8015466:	f000 821b 	beq.w	80158a0 <src441_process+0x48c>
 801546a:	2b01      	cmp	r3, #1
 801546c:	f040 8585 	bne.w	8015f7a <src441_process+0xb66>
 8015470:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015472:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015474:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015478:	e9c4 2300 	strd	r2, r3, [r4]
 801547c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8015480:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8015484:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 8015488:	e9c4 2304 	strd	r2, r3, [r4, #16]
 801548c:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8015490:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015494:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8015498:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801549c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80154a0:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 80154a4:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 80154a8:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80154ac:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 80154b0:	3902      	subs	r1, #2
 80154b2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 80154b6:	f504 7022 	add.w	r0, r4, #648	; 0x288
 80154ba:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80154be:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
 80154c2:	041b      	lsls	r3, r3, #16
 80154c4:	f842 3f04 	str.w	r3, [r2, #4]!
 80154c8:	4282      	cmp	r2, r0
 80154ca:	d1f8      	bne.n	80154be <src441_process+0xaa>
 80154cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80154ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154d0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80154d2:	e9d5 2322 	ldrd	r2, r3, [r5, #136]	; 0x88
 80154d6:	e9c1 2300 	strd	r2, r3, [r1]
 80154da:	e9d5 2324 	ldrd	r2, r3, [r5, #144]	; 0x90
 80154de:	f504 61a4 	add.w	r1, r4, #1312	; 0x520
 80154e2:	e9c1 2300 	strd	r2, r3, [r1]
 80154e6:	e9d5 2326 	ldrd	r2, r3, [r5, #152]	; 0x98
 80154ea:	f504 61a5 	add.w	r1, r4, #1320	; 0x528
 80154ee:	e9c1 2300 	strd	r2, r3, [r1]
 80154f2:	e9d5 2328 	ldrd	r2, r3, [r5, #160]	; 0xa0
 80154f6:	f504 61a6 	add.w	r1, r4, #1328	; 0x530
 80154fa:	e9c1 2300 	strd	r2, r3, [r1]
 80154fe:	e9d5 232a 	ldrd	r2, r3, [r5, #168]	; 0xa8
 8015502:	f504 61a7 	add.w	r1, r4, #1336	; 0x538
 8015506:	e9c1 2300 	strd	r2, r3, [r1]
 801550a:	e9d5 232c 	ldrd	r2, r3, [r5, #176]	; 0xb0
 801550e:	f504 61a8 	add.w	r1, r4, #1344	; 0x540
 8015512:	e9c1 2300 	strd	r2, r3, [r1]
 8015516:	1f23      	subs	r3, r4, #4
 8015518:	9301      	str	r3, [sp, #4]
 801551a:	f504 63fd 	add.w	r3, r4, #2024	; 0x7e8
 801551e:	f604 22d4 	addw	r2, r4, #2772	; 0xad4
 8015522:	9309      	str	r3, [sp, #36]	; 0x24
 8015524:	f604 33bc 	addw	r3, r4, #3004	; 0xbbc
 8015528:	9308      	str	r3, [sp, #32]
 801552a:	9202      	str	r2, [sp, #8]
 801552c:	f604 337c 	addw	r3, r4, #2940	; 0xb7c
 8015530:	f604 329c 	addw	r2, r4, #2972	; 0xb9c
 8015534:	9207      	str	r2, [sp, #28]
 8015536:	9306      	str	r3, [sp, #24]
 8015538:	f604 22f4 	addw	r2, r4, #2804	; 0xaf4
 801553c:	f604 3314 	addw	r3, r4, #2836	; 0xb14
 8015540:	f504 6ba9 	add.w	fp, r4, #1352	; 0x548
 8015544:	9203      	str	r2, [sp, #12]
 8015546:	9305      	str	r3, [sp, #20]
 8015548:	9d04      	ldr	r5, [sp, #16]
 801554a:	f8dd a020 	ldr.w	sl, [sp, #32]
 801554e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8015552:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015556:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801555a:	f8dd e018 	ldr.w	lr, [sp, #24]
 801555e:	9f05      	ldr	r7, [sp, #20]
 8015560:	9c01      	ldr	r4, [sp, #4]
 8015562:	f10b 0320 	add.w	r3, fp, #32
 8015566:	9300      	str	r3, [sp, #0]
 8015568:	462e      	mov	r6, r5
 801556a:	682b      	ldr	r3, [r5, #0]
 801556c:	6862      	ldr	r2, [r4, #4]
 801556e:	2100      	movs	r1, #0
 8015570:	fb53 1212 	smmlar	r2, r3, r2, r1
 8015574:	f85a 0d04 	ldr.w	r0, [sl, #-4]!
 8015578:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801557a:	fb50 2111 	smmlar	r1, r0, r1, r2
 801557e:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8015582:	68a3      	ldr	r3, [r4, #8]
 8015584:	fb50 1113 	smmlar	r1, r0, r3, r1
 8015588:	f858 2d04 	ldr.w	r2, [r8, #-4]!
 801558c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801558e:	fb52 1210 	smmlar	r2, r2, r0, r1
 8015592:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8015596:	68e1      	ldr	r1, [r4, #12]
 8015598:	fb53 2111 	smmlar	r1, r3, r1, r2
 801559c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80155a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80155a2:	fb53 1212 	smmlar	r2, r3, r2, r1
 80155a6:	f857 3f04 	ldr.w	r3, [r7, #4]!
 80155aa:	6921      	ldr	r1, [r4, #16]
 80155ac:	fb53 2211 	smmlar	r2, r3, r1, r2
 80155b0:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
 80155b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80155b6:	fb51 2113 	smmlar	r1, r1, r3, r2
 80155ba:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 80155be:	6960      	ldr	r0, [r4, #20]
 80155c0:	fb52 1210 	smmlar	r2, r2, r0, r1
 80155c4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80155c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80155ca:	fb53 2210 	smmlar	r2, r3, r0, r2
 80155ce:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80155d2:	69a0      	ldr	r0, [r4, #24]
 80155d4:	fb51 2110 	smmlar	r1, r1, r0, r2
 80155d8:	6e32      	ldr	r2, [r6, #96]	; 0x60
 80155da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80155dc:	fb52 1210 	smmlar	r2, r2, r0, r1
 80155e0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 80155e4:	69e0      	ldr	r0, [r4, #28]
 80155e6:	fb53 2210 	smmlar	r2, r3, r0, r2
 80155ea:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80155ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80155ee:	fb51 2110 	smmlar	r1, r1, r0, r2
 80155f2:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 80155f6:	6a20      	ldr	r0, [r4, #32]
 80155f8:	fb52 1210 	smmlar	r2, r2, r0, r1
 80155fc:	6a33      	ldr	r3, [r6, #32]
 80155fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015600:	fb53 2010 	smmlar	r0, r3, r0, r2
 8015604:	f300 001e 	ssat	r0, #31, r0
 8015608:	0040      	lsls	r0, r0, #1
 801560a:	f84b 0b04 	str.w	r0, [fp], #4
 801560e:	9b00      	ldr	r3, [sp, #0]
 8015610:	459b      	cmp	fp, r3
 8015612:	f105 0504 	add.w	r5, r5, #4
 8015616:	f104 0404 	add.w	r4, r4, #4
 801561a:	f1a6 0604 	sub.w	r6, r6, #4
 801561e:	d1a4      	bne.n	801556a <src441_process+0x156>
 8015620:	9b01      	ldr	r3, [sp, #4]
 8015622:	331c      	adds	r3, #28
 8015624:	9301      	str	r3, [sp, #4]
 8015626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015628:	455b      	cmp	r3, fp
 801562a:	d18d      	bne.n	8015548 <src441_process+0x134>
 801562c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801562e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015630:	f501 7313 	add.w	r3, r1, #588	; 0x24c
 8015634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015638:	e9c5 2302 	strd	r2, r3, [r5, #8]
 801563c:	f501 7315 	add.w	r3, r1, #596	; 0x254
 8015640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015644:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8015648:	f501 7317 	add.w	r3, r1, #604	; 0x25c
 801564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015650:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8015654:	f501 7319 	add.w	r3, r1, #612	; 0x264
 8015658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801565c:	e9c5 2308 	strd	r2, r3, [r5, #32]
 8015660:	f501 731b 	add.w	r3, r1, #620	; 0x26c
 8015664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015668:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
 801566c:	f501 731d 	add.w	r3, r1, #628	; 0x274
 8015670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015674:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8015678:	f501 731f 	add.w	r3, r1, #636	; 0x27c
 801567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015680:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
 8015684:	f501 7321 	add.w	r3, r1, #644	; 0x284
 8015688:	460c      	mov	r4, r1
 801568a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801568e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015692:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
 8015696:	4917      	ldr	r1, [pc, #92]	; (80156f4 <src441_process+0x2e0>)
 8015698:	9804      	ldr	r0, [sp, #16]
 801569a:	f001 fa7f 	bl	8016b9c <memcpy>
 801569e:	f8d4 1ab8 	ldr.w	r1, [r4, #2744]	; 0xab8
 80156a2:	9105      	str	r1, [sp, #20]
 80156a4:	f8d4 1c48 	ldr.w	r1, [r4, #3144]	; 0xc48
 80156a8:	910d      	str	r1, [sp, #52]	; 0x34
 80156aa:	f8d4 1bf8 	ldr.w	r1, [r4, #3064]	; 0xbf8
 80156ae:	910f      	str	r1, [sp, #60]	; 0x3c
 80156b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80156b2:	4b11      	ldr	r3, [pc, #68]	; (80156f8 <src441_process+0x2e4>)
 80156b4:	f8d4 2b08 	ldr.w	r2, [r4, #2824]	; 0xb08
 80156b8:	f8c4 3c98 	str.w	r3, [r4, #3224]	; 0xc98
 80156bc:	3128      	adds	r1, #40	; 0x28
 80156be:	9100      	str	r1, [sp, #0]
 80156c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80156c4:	f604 4398 	addw	r3, r4, #3224	; 0xc98
 80156c8:	920c      	str	r2, [sp, #48]	; 0x30
 80156ca:	9310      	str	r3, [sp, #64]	; 0x40
 80156cc:	f8d4 2b58 	ldr.w	r2, [r4, #2904]	; 0xb58
 80156d0:	920e      	str	r2, [sp, #56]	; 0x38
 80156d2:	f504 63f7 	add.w	r3, r4, #1976	; 0x7b8
 80156d6:	f8d4 2ba8 	ldr.w	r2, [r4, #2984]	; 0xba8
 80156da:	9303      	str	r3, [sp, #12]
 80156dc:	f604 3308 	addw	r3, r4, #2824	; 0xb08
 80156e0:	9202      	str	r2, [sp, #8]
 80156e2:	9308      	str	r3, [sp, #32]
 80156e4:	f604 32a8 	addw	r2, r4, #2984	; 0xba8
 80156e8:	e008      	b.n	80156fc <src441_process+0x2e8>
 80156ea:	bf00      	nop
 80156ec:	0801925c 	.word	0x0801925c
 80156f0:	7145f41f 	.word	0x7145f41f
 80156f4:	08019360 	.word	0x08019360
 80156f8:	68e11d54 	.word	0x68e11d54
 80156fc:	f604 3358 	addw	r3, r4, #2904	; 0xb58
 8015700:	9309      	str	r3, [sp, #36]	; 0x24
 8015702:	920a      	str	r2, [sp, #40]	; 0x28
 8015704:	f604 4348 	addw	r3, r4, #3144	; 0xc48
 8015708:	f604 32f8 	addw	r2, r4, #3064	; 0xbf8
 801570c:	9101      	str	r1, [sp, #4]
 801570e:	9206      	str	r2, [sp, #24]
 8015710:	9307      	str	r3, [sp, #28]
 8015712:	9801      	ldr	r0, [sp, #4]
 8015714:	9a05      	ldr	r2, [sp, #20]
 8015716:	6803      	ldr	r3, [r0, #0]
 8015718:	2100      	movs	r1, #0
 801571a:	fb52 1313 	smmlar	r3, r2, r3, r1
 801571e:	6982      	ldr	r2, [r0, #24]
 8015720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015722:	fb51 3312 	smmlar	r3, r1, r2, r3
 8015726:	6842      	ldr	r2, [r0, #4]
 8015728:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801572a:	fb54 3212 	smmlar	r2, r4, r2, r3
 801572e:	4601      	mov	r1, r0
 8015730:	69c3      	ldr	r3, [r0, #28]
 8015732:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015734:	fb55 2213 	smmlar	r2, r5, r3, r2
 8015738:	688b      	ldr	r3, [r1, #8]
 801573a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801573c:	fb56 2213 	smmlar	r2, r6, r3, r2
 8015740:	4608      	mov	r0, r1
 8015742:	6a0b      	ldr	r3, [r1, #32]
 8015744:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015746:	fb57 2213 	smmlar	r2, r7, r3, r2
 801574a:	4601      	mov	r1, r0
 801574c:	68c3      	ldr	r3, [r0, #12]
 801574e:	9802      	ldr	r0, [sp, #8]
 8015750:	fb50 2213 	smmlar	r2, r0, r3, r2
 8015754:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8015756:	9802      	ldr	r0, [sp, #8]
 8015758:	fb50 2213 	smmlar	r2, r0, r3, r2
 801575c:	4608      	mov	r0, r1
 801575e:	690b      	ldr	r3, [r1, #16]
 8015760:	fb57 2213 	smmlar	r2, r7, r3, r2
 8015764:	4601      	mov	r1, r0
 8015766:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015768:	fb56 2213 	smmlar	r2, r6, r3, r2
 801576c:	694b      	ldr	r3, [r1, #20]
 801576e:	fb55 2213 	smmlar	r2, r5, r3, r2
 8015772:	4608      	mov	r0, r1
 8015774:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8015776:	fb54 2313 	smmlar	r3, r4, r3, r2
 801577a:	9900      	ldr	r1, [sp, #0]
 801577c:	f303 031e 	ssat	r3, #31, r3
 8015780:	f8dd b020 	ldr.w	fp, [sp, #32]
 8015784:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8015788:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801578c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8015790:	9f07      	ldr	r7, [sp, #28]
 8015792:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015794:	9c04      	ldr	r4, [sp, #16]
 8015796:	f343 33cf 	sbfx	r3, r3, #15, #16
 801579a:	f821 3c28 	strh.w	r3, [r1, #-40]
 801579e:	f1a1 0526 	sub.w	r5, r1, #38	; 0x26
 80157a2:	f100 0908 	add.w	r9, r0, #8
 80157a6:	f100 0820 	add.w	r8, r0, #32
 80157aa:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80157ae:	6883      	ldr	r3, [r0, #8]
 80157b0:	2200      	movs	r2, #0
 80157b2:	fb51 2113 	smmlar	r1, r1, r3, r2
 80157b6:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 80157ba:	6a02      	ldr	r2, [r0, #32]
 80157bc:	fb53 1312 	smmlar	r3, r3, r2, r1
 80157c0:	f85a 2d04 	ldr.w	r2, [sl, #-4]!
 80157c4:	f859 1f04 	ldr.w	r1, [r9, #4]!
 80157c8:	fb52 3311 	smmlar	r3, r2, r1, r3
 80157cc:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80157d0:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80157d4:	fb52 3311 	smmlar	r3, r2, r1, r3
 80157d8:	f85c 2d04 	ldr.w	r2, [ip, #-4]!
 80157dc:	6901      	ldr	r1, [r0, #16]
 80157de:	fb52 3111 	smmlar	r1, r2, r1, r3
 80157e2:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
 80157e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80157e8:	fb52 1313 	smmlar	r3, r2, r3, r1
 80157ec:	f85e 1d04 	ldr.w	r1, [lr, #-4]!
 80157f0:	6942      	ldr	r2, [r0, #20]
 80157f2:	fb51 3212 	smmlar	r2, r1, r2, r3
 80157f6:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80157fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80157fc:	fb51 2313 	smmlar	r3, r1, r3, r2
 8015800:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8015804:	6981      	ldr	r1, [r0, #24]
 8015806:	fb52 3111 	smmlar	r1, r2, r1, r3
 801580a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801580c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801580e:	fb53 1312 	smmlar	r3, r3, r2, r1
 8015812:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 8015816:	69c2      	ldr	r2, [r0, #28]
 8015818:	fb51 3312 	smmlar	r3, r1, r2, r3
 801581c:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8015820:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015822:	fb51 3312 	smmlar	r3, r1, r2, r3
 8015826:	f303 031e 	ssat	r3, #31, r3
 801582a:	f343 33cf 	sbfx	r3, r3, #15, #16
 801582e:	f825 3b02 	strh.w	r3, [r5], #2
 8015832:	9b00      	ldr	r3, [sp, #0]
 8015834:	42ab      	cmp	r3, r5
 8015836:	f100 0004 	add.w	r0, r0, #4
 801583a:	d1b6      	bne.n	80157aa <src441_process+0x396>
 801583c:	461a      	mov	r2, r3
 801583e:	3228      	adds	r2, #40	; 0x28
 8015840:	9b01      	ldr	r3, [sp, #4]
 8015842:	9200      	str	r2, [sp, #0]
 8015844:	9a03      	ldr	r2, [sp, #12]
 8015846:	3354      	adds	r3, #84	; 0x54
 8015848:	429a      	cmp	r2, r3
 801584a:	9301      	str	r3, [sp, #4]
 801584c:	f47f af61 	bne.w	8015712 <src441_process+0x2fe>
 8015850:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015854:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015856:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015858:	e9c0 2322 	strd	r2, r3, [r0, #136]	; 0x88
 801585c:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 8015860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015864:	e9c0 2324 	strd	r2, r3, [r0, #144]	; 0x90
 8015868:	f504 63f9 	add.w	r3, r4, #1992	; 0x7c8
 801586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015870:	e9c0 2326 	strd	r2, r3, [r0, #152]	; 0x98
 8015874:	f504 63fa 	add.w	r3, r4, #2000	; 0x7d0
 8015878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801587c:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
 8015880:	f504 63fb 	add.w	r3, r4, #2008	; 0x7d8
 8015884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015888:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
 801588c:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 8015890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015894:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
 8015898:	2000      	movs	r0, #0
 801589a:	b019      	add	sp, #100	; 0x64
 801589c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158a0:	6923      	ldr	r3, [r4, #16]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	f000 836c 	beq.w	8015f80 <src441_process+0xb6c>
 80158a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80158aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80158ac:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80158b0:	e9c4 2300 	strd	r2, r3, [r4]
 80158b4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80158b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80158bc:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 80158c0:	e9c4 2304 	strd	r2, r3, [r4, #16]
 80158c4:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 80158c8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80158cc:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 80158d0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80158d4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80158d8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 80158dc:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 80158e0:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80158e4:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	; 0x40
 80158e8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 80158ec:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	; 0x48
 80158f0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 80158f4:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
 80158f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80158fc:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
 8015900:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8015904:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
 8015908:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
 801590c:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	; 0x68
 8015910:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
 8015914:	e9d5 231c 	ldrd	r2, r3, [r5, #112]	; 0x70
 8015918:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 801591c:	e9d5 231e 	ldrd	r2, r3, [r5, #120]	; 0x78
 8015920:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
 8015924:	e9d5 2320 	ldrd	r2, r3, [r5, #128]	; 0x80
 8015928:	e9c4 231e 	strd	r2, r3, [r4, #120]	; 0x78
 801592c:	4623      	mov	r3, r4
 801592e:	3104      	adds	r1, #4
 8015930:	3388      	adds	r3, #136	; 0x88
 8015932:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 8015936:	f931 4c04 	ldrsh.w	r4, [r1, #-4]
 801593a:	f931 2c02 	ldrsh.w	r2, [r1, #-2]
 801593e:	0424      	lsls	r4, r4, #16
 8015940:	0412      	lsls	r2, r2, #16
 8015942:	f843 4c08 	str.w	r4, [r3, #-8]
 8015946:	f843 2c04 	str.w	r2, [r3, #-4]
 801594a:	3308      	adds	r3, #8
 801594c:	4298      	cmp	r0, r3
 801594e:	f101 0104 	add.w	r1, r1, #4
 8015952:	d1f0      	bne.n	8015936 <src441_process+0x522>
 8015954:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015956:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015958:	e9d5 2322 	ldrd	r2, r3, [r5, #136]	; 0x88
 801595c:	e9c4 2300 	strd	r2, r3, [r4]
 8015960:	e9d5 2324 	ldrd	r2, r3, [r5, #144]	; 0x90
 8015964:	e9c0 2300 	strd	r2, r3, [r0]
 8015968:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801596a:	e9d5 2326 	ldrd	r2, r3, [r5, #152]	; 0x98
 801596e:	f504 61a5 	add.w	r1, r4, #1320	; 0x528
 8015972:	e9c1 2300 	strd	r2, r3, [r1]
 8015976:	e9d5 2328 	ldrd	r2, r3, [r5, #160]	; 0xa0
 801597a:	f504 61a6 	add.w	r1, r4, #1328	; 0x530
 801597e:	e9c1 2300 	strd	r2, r3, [r1]
 8015982:	e9d5 232a 	ldrd	r2, r3, [r5, #168]	; 0xa8
 8015986:	f504 61a7 	add.w	r1, r4, #1336	; 0x538
 801598a:	e9c1 2300 	strd	r2, r3, [r1]
 801598e:	e9d5 232c 	ldrd	r2, r3, [r5, #176]	; 0xb0
 8015992:	f504 61a8 	add.w	r1, r4, #1344	; 0x540
 8015996:	e9c1 2300 	strd	r2, r3, [r1]
 801599a:	e9d5 232e 	ldrd	r2, r3, [r5, #184]	; 0xb8
 801599e:	f504 61a9 	add.w	r1, r4, #1352	; 0x548
 80159a2:	e9c1 2300 	strd	r2, r3, [r1]
 80159a6:	e9d5 2330 	ldrd	r2, r3, [r5, #192]	; 0xc0
 80159aa:	f504 61aa 	add.w	r1, r4, #1360	; 0x550
 80159ae:	e9c1 2300 	strd	r2, r3, [r1]
 80159b2:	e9d5 2332 	ldrd	r2, r3, [r5, #200]	; 0xc8
 80159b6:	f504 61ab 	add.w	r1, r4, #1368	; 0x558
 80159ba:	e9c1 2300 	strd	r2, r3, [r1]
 80159be:	e9d5 2334 	ldrd	r2, r3, [r5, #208]	; 0xd0
 80159c2:	f504 61ac 	add.w	r1, r4, #1376	; 0x560
 80159c6:	e9c1 2300 	strd	r2, r3, [r1]
 80159ca:	e9d5 2336 	ldrd	r2, r3, [r5, #216]	; 0xd8
 80159ce:	f504 61ad 	add.w	r1, r4, #1384	; 0x568
 80159d2:	e9c1 2300 	strd	r2, r3, [r1]
 80159d6:	e9d5 2338 	ldrd	r2, r3, [r5, #224]	; 0xe0
 80159da:	f504 61ae 	add.w	r1, r4, #1392	; 0x570
 80159de:	e9c1 2300 	strd	r2, r3, [r1]
 80159e2:	f1a4 0308 	sub.w	r3, r4, #8
 80159e6:	9309      	str	r3, [sp, #36]	; 0x24
 80159e8:	f504 632c 	add.w	r3, r4, #2752	; 0xac0
 80159ec:	930a      	str	r3, [sp, #40]	; 0x28
 80159ee:	f604 329c 	addw	r2, r4, #2972	; 0xb9c
 80159f2:	f604 33bc 	addw	r3, r4, #3004	; 0xbbc
 80159f6:	9308      	str	r3, [sp, #32]
 80159f8:	9207      	str	r2, [sp, #28]
 80159fa:	f604 23d4 	addw	r3, r4, #2772	; 0xad4
 80159fe:	f604 22f4 	addw	r2, r4, #2804	; 0xaf4
 8015a02:	9302      	str	r3, [sp, #8]
 8015a04:	9203      	str	r2, [sp, #12]
 8015a06:	f604 3314 	addw	r3, r4, #2836	; 0xb14
 8015a0a:	f604 327c 	addw	r2, r4, #2940	; 0xb7c
 8015a0e:	f504 6bb0 	add.w	fp, r4, #1408	; 0x580
 8015a12:	9206      	str	r2, [sp, #24]
 8015a14:	9305      	str	r3, [sp, #20]
 8015a16:	9b08      	ldr	r3, [sp, #32]
 8015a18:	9d04      	ldr	r5, [sp, #16]
 8015a1a:	9300      	str	r3, [sp, #0]
 8015a1c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8015a20:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015a24:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8015a28:	f8dd e018 	ldr.w	lr, [sp, #24]
 8015a2c:	9f05      	ldr	r7, [sp, #20]
 8015a2e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015a30:	f10b 0340 	add.w	r3, fp, #64	; 0x40
 8015a34:	9301      	str	r3, [sp, #4]
 8015a36:	462e      	mov	r6, r5
 8015a38:	6828      	ldr	r0, [r5, #0]
 8015a3a:	68a3      	ldr	r3, [r4, #8]
 8015a3c:	68e2      	ldr	r2, [r4, #12]
 8015a3e:	2100      	movs	r1, #0
 8015a40:	fb50 1913 	smmlar	r9, r0, r3, r1
 8015a44:	fb50 1212 	smmlar	r2, r0, r2, r1
 8015a48:	9b00      	ldr	r3, [sp, #0]
 8015a4a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015a4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015a50:	9300      	str	r3, [sp, #0]
 8015a52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8015a54:	fb51 9913 	smmlar	r9, r1, r3, r9
 8015a58:	fb51 2010 	smmlar	r0, r1, r0, r2
 8015a5c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
 8015a60:	6961      	ldr	r1, [r4, #20]
 8015a62:	6922      	ldr	r2, [r4, #16]
 8015a64:	fb53 9912 	smmlar	r9, r3, r2, r9
 8015a68:	fb53 0011 	smmlar	r0, r3, r1, r0
 8015a6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015a70:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8015a72:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8015a74:	fb53 9911 	smmlar	r9, r3, r1, r9
 8015a78:	fb53 0212 	smmlar	r2, r3, r2, r0
 8015a7c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8015a80:	69e0      	ldr	r0, [r4, #28]
 8015a82:	69a1      	ldr	r1, [r4, #24]
 8015a84:	fb53 9911 	smmlar	r9, r3, r1, r9
 8015a88:	fb53 2010 	smmlar	r0, r3, r0, r2
 8015a8c:	f85e 2d04 	ldr.w	r2, [lr, #-4]!
 8015a90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a92:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015a94:	fb52 9913 	smmlar	r9, r2, r3, r9
 8015a98:	fb52 0111 	smmlar	r1, r2, r1, r0
 8015a9c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8015aa0:	6a23      	ldr	r3, [r4, #32]
 8015aa2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015aa4:	fb50 9913 	smmlar	r9, r0, r3, r9
 8015aa8:	fb50 1212 	smmlar	r2, r0, r2, r1
 8015aac:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
 8015ab0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015ab2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8015ab4:	fb51 9913 	smmlar	r9, r1, r3, r9
 8015ab8:	fb51 2010 	smmlar	r0, r1, r0, r2
 8015abc:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 8015ac0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015ac2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015ac4:	fb52 9913 	smmlar	r9, r2, r3, r9
 8015ac8:	fb52 0111 	smmlar	r1, r2, r1, r0
 8015acc:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 8015ad0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015ad2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8015ad4:	fb50 9913 	smmlar	r9, r0, r3, r9
 8015ad8:	fb50 1212 	smmlar	r2, r0, r2, r1
 8015adc:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8015ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ae2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8015ae4:	fb51 9913 	smmlar	r9, r1, r3, r9
 8015ae8:	fb51 2010 	smmlar	r0, r1, r0, r2
 8015aec:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8015aee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015af0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8015af2:	fb52 9913 	smmlar	r9, r2, r3, r9
 8015af6:	fb52 0111 	smmlar	r1, r2, r1, r0
 8015afa:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
 8015afe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015b00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015b02:	fb50 9913 	smmlar	r9, r0, r3, r9
 8015b06:	fb50 1212 	smmlar	r2, r0, r2, r1
 8015b0a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8015b0c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015b0e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8015b10:	fb51 9913 	smmlar	r9, r1, r3, r9
 8015b14:	fb51 2010 	smmlar	r0, r1, r0, r2
 8015b18:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8015b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b1e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8015b20:	fb52 9913 	smmlar	r9, r2, r3, r9
 8015b24:	fb52 0111 	smmlar	r1, r2, r1, r0
 8015b28:	6a30      	ldr	r0, [r6, #32]
 8015b2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015b2e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8015b32:	fb50 9313 	smmlar	r3, r0, r3, r9
 8015b36:	fb50 1112 	smmlar	r1, r0, r2, r1
 8015b3a:	f303 031e 	ssat	r3, #31, r3
 8015b3e:	005b      	lsls	r3, r3, #1
 8015b40:	f84b 3c08 	str.w	r3, [fp, #-8]
 8015b44:	f301 011e 	ssat	r1, #31, r1
 8015b48:	9b01      	ldr	r3, [sp, #4]
 8015b4a:	0049      	lsls	r1, r1, #1
 8015b4c:	f84b 1c04 	str.w	r1, [fp, #-4]
 8015b50:	f10b 0b08 	add.w	fp, fp, #8
 8015b54:	455b      	cmp	r3, fp
 8015b56:	f105 0504 	add.w	r5, r5, #4
 8015b5a:	f104 0408 	add.w	r4, r4, #8
 8015b5e:	f1a6 0604 	sub.w	r6, r6, #4
 8015b62:	f47f af69 	bne.w	8015a38 <src441_process+0x624>
 8015b66:	469b      	mov	fp, r3
 8015b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b6a:	3338      	adds	r3, #56	; 0x38
 8015b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8015b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b70:	459b      	cmp	fp, r3
 8015b72:	f47f af50 	bne.w	8015a16 <src441_process+0x602>
 8015b76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015b78:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015b7a:	f501 6393 	add.w	r3, r1, #1176	; 0x498
 8015b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b82:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8015b86:	f501 6394 	add.w	r3, r1, #1184	; 0x4a0
 8015b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b8e:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8015b92:	f501 6395 	add.w	r3, r1, #1192	; 0x4a8
 8015b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9a:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8015b9e:	f501 6396 	add.w	r3, r1, #1200	; 0x4b0
 8015ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba6:	e9c5 2308 	strd	r2, r3, [r5, #32]
 8015baa:	f501 6397 	add.w	r3, r1, #1208	; 0x4b8
 8015bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb2:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
 8015bb6:	f501 6398 	add.w	r3, r1, #1216	; 0x4c0
 8015bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bbe:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8015bc2:	f501 6399 	add.w	r3, r1, #1224	; 0x4c8
 8015bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bca:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
 8015bce:	f501 639a 	add.w	r3, r1, #1232	; 0x4d0
 8015bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd6:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
 8015bda:	f501 639b 	add.w	r3, r1, #1240	; 0x4d8
 8015bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be2:	e9c5 2312 	strd	r2, r3, [r5, #72]	; 0x48
 8015be6:	f501 639c 	add.w	r3, r1, #1248	; 0x4e0
 8015bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bee:	e9c5 2314 	strd	r2, r3, [r5, #80]	; 0x50
 8015bf2:	f501 639d 	add.w	r3, r1, #1256	; 0x4e8
 8015bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bfa:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
 8015bfe:	f501 639e 	add.w	r3, r1, #1264	; 0x4f0
 8015c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c06:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 8015c0a:	f501 639f 	add.w	r3, r1, #1272	; 0x4f8
 8015c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c12:	e9c5 231a 	strd	r2, r3, [r5, #104]	; 0x68
 8015c16:	f501 63a0 	add.w	r3, r1, #1280	; 0x500
 8015c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1e:	e9c5 231c 	strd	r2, r3, [r5, #112]	; 0x70
 8015c22:	f501 63a1 	add.w	r3, r1, #1288	; 0x508
 8015c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2a:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 8015c2e:	f501 63a2 	add.w	r3, r1, #1296	; 0x510
 8015c32:	460c      	mov	r4, r1
 8015c34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c38:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015c3c:	e9c5 0120 	strd	r0, r1, [r5, #128]	; 0x80
 8015c40:	4960      	ldr	r1, [pc, #384]	; (8015dc4 <src441_process+0x9b0>)
 8015c42:	9804      	ldr	r0, [sp, #16]
 8015c44:	f000 ffaa 	bl	8016b9c <memcpy>
 8015c48:	f8d4 2ab8 	ldr.w	r2, [r4, #2744]	; 0xab8
 8015c4c:	9210      	str	r2, [sp, #64]	; 0x40
 8015c4e:	f8d4 2b08 	ldr.w	r2, [r4, #2824]	; 0xb08
 8015c52:	920c      	str	r2, [sp, #48]	; 0x30
 8015c54:	f8d4 2c48 	ldr.w	r2, [r4, #3144]	; 0xc48
 8015c58:	9214      	str	r2, [sp, #80]	; 0x50
 8015c5a:	f8d4 2b58 	ldr.w	r2, [r4, #2904]	; 0xb58
 8015c5e:	4b5a      	ldr	r3, [pc, #360]	; (8015dc8 <src441_process+0x9b4>)
 8015c60:	920d      	str	r2, [sp, #52]	; 0x34
 8015c62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015c64:	f8c4 3c98 	str.w	r3, [r4, #3224]	; 0xc98
 8015c68:	9313      	str	r3, [sp, #76]	; 0x4c
 8015c6a:	f604 4398 	addw	r3, r4, #3224	; 0xc98
 8015c6e:	9316      	str	r3, [sp, #88]	; 0x58
 8015c70:	4613      	mov	r3, r2
 8015c72:	3308      	adds	r3, #8
 8015c74:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c78:	f502 7322 	add.w	r3, r2, #648	; 0x288
 8015c7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c7e:	f604 3308 	addw	r3, r4, #2824	; 0xb08
 8015c82:	9308      	str	r3, [sp, #32]
 8015c84:	f604 3358 	addw	r3, r4, #2904	; 0xb58
 8015c88:	9309      	str	r3, [sp, #36]	; 0x24
 8015c8a:	f604 33a8 	addw	r3, r4, #2984	; 0xba8
 8015c8e:	f8d4 1bf8 	ldr.w	r1, [r4, #3064]	; 0xbf8
 8015c92:	930a      	str	r3, [sp, #40]	; 0x28
 8015c94:	f604 33f8 	addw	r3, r4, #3064	; 0xbf8
 8015c98:	9115      	str	r1, [sp, #84]	; 0x54
 8015c9a:	9306      	str	r3, [sp, #24]
 8015c9c:	f8d4 1ba8 	ldr.w	r1, [r4, #2984]	; 0xba8
 8015ca0:	9105      	str	r1, [sp, #20]
 8015ca2:	f604 4348 	addw	r3, r4, #3144	; 0xc48
 8015ca6:	9307      	str	r3, [sp, #28]
 8015ca8:	2600      	movs	r6, #0
 8015caa:	46b9      	mov	r9, r7
 8015cac:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015cb0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015cb2:	fb50 6212 	smmlar	r2, r0, r2, r6
 8015cb6:	fb50 6313 	smmlar	r3, r0, r3, r6
 8015cba:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8015cbe:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 8015cc2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015cc4:	fb55 2210 	smmlar	r2, r5, r0, r2
 8015cc8:	fb55 3311 	smmlar	r3, r5, r1, r3
 8015ccc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8015cd0:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8015cd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015cd6:	fb55 2010 	smmlar	r0, r5, r0, r2
 8015cda:	fb55 3111 	smmlar	r1, r5, r1, r3
 8015cde:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8015ce0:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8015ce4:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8015ce8:	463d      	mov	r5, r7
 8015cea:	fb57 0012 	smmlar	r0, r7, r2, r0
 8015cee:	fb57 1113 	smmlar	r1, r7, r3, r1
 8015cf2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015cf6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015cfa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015cfc:	fb54 0012 	smmlar	r0, r4, r2, r0
 8015d00:	fb54 1113 	smmlar	r1, r4, r3, r1
 8015d04:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8015d06:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 8015d0a:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8015d0e:	463c      	mov	r4, r7
 8015d10:	fb57 0012 	smmlar	r0, r7, r2, r0
 8015d14:	fb57 1113 	smmlar	r1, r7, r3, r1
 8015d18:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8015d1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015d20:	9f05      	ldr	r7, [sp, #20]
 8015d22:	fb57 0012 	smmlar	r0, r7, r2, r0
 8015d26:	fb57 1113 	smmlar	r1, r7, r3, r1
 8015d2a:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
 8015d2e:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8015d32:	fb57 0012 	smmlar	r0, r7, r2, r0
 8015d36:	fb57 1113 	smmlar	r1, r7, r3, r1
 8015d3a:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8015d3e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8015d42:	fb54 0012 	smmlar	r0, r4, r2, r0
 8015d46:	fb54 1113 	smmlar	r1, r4, r3, r1
 8015d4a:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 8015d4e:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8015d52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015d54:	fb54 0012 	smmlar	r0, r4, r2, r0
 8015d58:	fb54 1113 	smmlar	r1, r4, r3, r1
 8015d5c:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8015d60:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8015d64:	fb55 0012 	smmlar	r0, r5, r2, r0
 8015d68:	fb55 1313 	smmlar	r3, r5, r3, r1
 8015d6c:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
 8015d70:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8015d74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015d76:	fb54 0212 	smmlar	r2, r4, r2, r0
 8015d7a:	fb54 3311 	smmlar	r3, r4, r1, r3
 8015d7e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015d80:	f303 031e 	ssat	r3, #31, r3
 8015d84:	f343 33cf 	sbfx	r3, r3, #15, #16
 8015d88:	f827 3c06 	strh.w	r3, [r7, #-6]
 8015d8c:	9b08      	ldr	r3, [sp, #32]
 8015d8e:	9300      	str	r3, [sp, #0]
 8015d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d92:	f302 021e 	ssat	r2, #31, r2
 8015d96:	9301      	str	r3, [sp, #4]
 8015d98:	f342 32cf 	sbfx	r2, r2, #15, #16
 8015d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d9e:	f827 2c08 	strh.w	r2, [r7, #-8]
 8015da2:	f8dd b018 	ldr.w	fp, [sp, #24]
 8015da6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015daa:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015dae:	9d04      	ldr	r5, [sp, #16]
 8015db0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015db4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015db8:	f109 0e10 	add.w	lr, r9, #16
 8015dbc:	9203      	str	r2, [sp, #12]
 8015dbe:	464c      	mov	r4, r9
 8015dc0:	469a      	mov	sl, r3
 8015dc2:	e003      	b.n	8015dcc <src441_process+0x9b8>
 8015dc4:	08019360 	.word	0x08019360
 8015dc8:	68e11d54 	.word	0x68e11d54
 8015dcc:	9b00      	ldr	r3, [sp, #0]
 8015dce:	6962      	ldr	r2, [r4, #20]
 8015dd0:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8015dd4:	9300      	str	r3, [sp, #0]
 8015dd6:	6923      	ldr	r3, [r4, #16]
 8015dd8:	fb50 6313 	smmlar	r3, r0, r3, r6
 8015ddc:	fb50 6912 	smmlar	r9, r0, r2, r6
 8015de0:	f8d5 0194 	ldr.w	r0, [r5, #404]	; 0x194
 8015de4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015de6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8015de8:	fb50 3311 	smmlar	r3, r0, r1, r3
 8015dec:	9302      	str	r3, [sp, #8]
 8015dee:	fb50 9212 	smmlar	r2, r0, r2, r9
 8015df2:	9b01      	ldr	r3, [sp, #4]
 8015df4:	f85e 0f08 	ldr.w	r0, [lr, #8]!
 8015df8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015dfc:	9301      	str	r3, [sp, #4]
 8015dfe:	9b02      	ldr	r3, [sp, #8]
 8015e00:	fb51 3910 	smmlar	r9, r1, r0, r3
 8015e04:	f8de 3004 	ldr.w	r3, [lr, #4]
 8015e08:	fb51 2113 	smmlar	r1, r1, r3, r2
 8015e0c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 8015e10:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015e12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8015e14:	fb53 9912 	smmlar	r9, r3, r2, r9
 8015e18:	fb53 1010 	smmlar	r0, r3, r0, r1
 8015e1c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 8015e20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015e22:	6a22      	ldr	r2, [r4, #32]
 8015e24:	fb53 9912 	smmlar	r9, r3, r2, r9
 8015e28:	fb53 0111 	smmlar	r1, r3, r1, r0
 8015e2c:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
 8015e30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8015e32:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8015e34:	fb50 9913 	smmlar	r9, r0, r3, r9
 8015e38:	fb50 1212 	smmlar	r2, r0, r2, r1
 8015e3c:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8015e40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015e42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015e44:	fb51 9913 	smmlar	r9, r1, r3, r9
 8015e48:	fb51 2010 	smmlar	r0, r1, r0, r2
 8015e4c:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
 8015e50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015e52:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015e54:	fb52 9913 	smmlar	r9, r2, r3, r9
 8015e58:	fb52 0111 	smmlar	r1, r2, r1, r0
 8015e5c:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 8015e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015e62:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015e64:	fb50 9913 	smmlar	r9, r0, r3, r9
 8015e68:	fb50 1212 	smmlar	r2, r0, r2, r1
 8015e6c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8015e6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015e70:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8015e72:	fb51 9913 	smmlar	r9, r1, r3, r9
 8015e76:	fb51 2010 	smmlar	r0, r1, r0, r2
 8015e7a:	f85c 2d04 	ldr.w	r2, [ip, #-4]!
 8015e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015e80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015e82:	fb52 9913 	smmlar	r9, r2, r3, r9
 8015e86:	fb52 0111 	smmlar	r1, r2, r1, r0
 8015e8a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015e8e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015e90:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8015e92:	fb50 9313 	smmlar	r3, r0, r3, r9
 8015e96:	fb50 1212 	smmlar	r2, r0, r2, r1
 8015e9a:	f303 031e 	ssat	r3, #31, r3
 8015e9e:	f343 33cf 	sbfx	r3, r3, #15, #16
 8015ea2:	f827 3c04 	strh.w	r3, [r7, #-4]
 8015ea6:	f302 021e 	ssat	r2, #31, r2
 8015eaa:	9b03      	ldr	r3, [sp, #12]
 8015eac:	f342 32cf 	sbfx	r2, r2, #15, #16
 8015eb0:	f827 2c02 	strh.w	r2, [r7, #-2]
 8015eb4:	3704      	adds	r7, #4
 8015eb6:	42bb      	cmp	r3, r7
 8015eb8:	f104 0408 	add.w	r4, r4, #8
 8015ebc:	d186      	bne.n	8015dcc <src441_process+0x9b8>
 8015ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ec0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ec2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8015ec6:	3350      	adds	r3, #80	; 0x50
 8015ec8:	429a      	cmp	r2, r3
 8015eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ecc:	f109 09a8 	add.w	r9, r9, #168	; 0xa8
 8015ed0:	f47f aeec 	bne.w	8015cac <src441_process+0x898>
 8015ed4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015ed6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015ed8:	f601 2358 	addw	r3, r1, #2648	; 0xa58
 8015edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ee0:	e9c4 2322 	strd	r2, r3, [r4, #136]	; 0x88
 8015ee4:	f501 6326 	add.w	r3, r1, #2656	; 0xa60
 8015ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eec:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
 8015ef0:	f601 2368 	addw	r3, r1, #2664	; 0xa68
 8015ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ef8:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
 8015efc:	f501 6327 	add.w	r3, r1, #2672	; 0xa70
 8015f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f04:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
 8015f08:	f601 2378 	addw	r3, r1, #2680	; 0xa78
 8015f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f10:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 8015f14:	f501 6328 	add.w	r3, r1, #2688	; 0xa80
 8015f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f1c:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
 8015f20:	f601 2388 	addw	r3, r1, #2696	; 0xa88
 8015f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f28:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
 8015f2c:	f501 6329 	add.w	r3, r1, #2704	; 0xa90
 8015f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f34:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
 8015f38:	f601 2398 	addw	r3, r1, #2712	; 0xa98
 8015f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f40:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
 8015f44:	f501 632a 	add.w	r3, r1, #2720	; 0xaa0
 8015f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f4c:	e9c4 2334 	strd	r2, r3, [r4, #208]	; 0xd0
 8015f50:	f601 23a8 	addw	r3, r1, #2728	; 0xaa8
 8015f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f58:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
 8015f5c:	f501 632b 	add.w	r3, r1, #2736	; 0xab0
 8015f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f64:	e9c4 2338 	strd	r2, r3, [r4, #224]	; 0xe0
 8015f68:	e496      	b.n	8015898 <src441_process+0x484>
 8015f6a:	f06f 0002 	mvn.w	r0, #2
 8015f6e:	b019      	add	sp, #100	; 0x64
 8015f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f74:	f06f 0001 	mvn.w	r0, #1
 8015f78:	e48f      	b.n	801589a <src441_process+0x486>
 8015f7a:	f06f 0003 	mvn.w	r0, #3
 8015f7e:	e48c      	b.n	801589a <src441_process+0x486>
 8015f80:	f04f 30ff 	mov.w	r0, #4294967295
 8015f84:	e489      	b.n	801589a <src441_process+0x486>
 8015f86:	f06f 0004 	mvn.w	r0, #4
 8015f8a:	e486      	b.n	801589a <src441_process+0x486>

08015f8c <gam_reset>:
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	1d02      	adds	r2, r0, #4
 8015f90:	b430      	push	{r4, r5}
 8015f92:	f840 1b44 	str.w	r1, [r0], #68
 8015f96:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8015f9a:	4302      	orrs	r2, r0
 8015f9c:	4311      	orrs	r1, r2
 8015f9e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8015fa2:	430a      	orrs	r2, r1
 8015fa4:	0752      	lsls	r2, r2, #29
 8015fa6:	d12b      	bne.n	8016000 <gam_reset+0x74>
 8015fa8:	f640 501b 	movw	r0, #3355	; 0xd1b
 8015fac:	f640 511b 	movw	r1, #3355	; 0xd1b
 8015fb0:	f06f 149f 	mvn.w	r4, #10420383	; 0x9f009f
 8015fb4:	f06f 159f 	mvn.w	r5, #10420383	; 0x9f009f
 8015fb8:	e9c3 4511 	strd	r4, r5, [r3, #68]	; 0x44
 8015fbc:	e9c3 451d 	strd	r4, r5, [r3, #116]	; 0x74
 8015fc0:	e9c3 4513 	strd	r4, r5, [r3, #76]	; 0x4c
 8015fc4:	e9c3 451f 	strd	r4, r5, [r3, #124]	; 0x7c
 8015fc8:	e9c3 0101 	strd	r0, r1, [r3, #4]
 8015fcc:	e9c3 0103 	strd	r0, r1, [r3, #12]
 8015fd0:	e9c3 0109 	strd	r0, r1, [r3, #36]	; 0x24
 8015fd4:	e9c3 010b 	strd	r0, r1, [r3, #44]	; 0x2c
 8015fd8:	e9c3 0105 	strd	r0, r1, [r3, #20]
 8015fdc:	e9c3 0107 	strd	r0, r1, [r3, #28]
 8015fe0:	e9c3 010d 	strd	r0, r1, [r3, #52]	; 0x34
 8015fe4:	e9c3 010f 	strd	r0, r1, [r3, #60]	; 0x3c
 8015fe8:	2200      	movs	r2, #0
 8015fea:	665a      	str	r2, [r3, #100]	; 0x64
 8015fec:	669a      	str	r2, [r3, #104]	; 0x68
 8015fee:	66da      	str	r2, [r3, #108]	; 0x6c
 8015ff0:	671a      	str	r2, [r3, #112]	; 0x70
 8015ff2:	655a      	str	r2, [r3, #84]	; 0x54
 8015ff4:	659a      	str	r2, [r3, #88]	; 0x58
 8015ff6:	65da      	str	r2, [r3, #92]	; 0x5c
 8015ff8:	661a      	str	r2, [r3, #96]	; 0x60
 8015ffa:	4610      	mov	r0, r2
 8015ffc:	bc30      	pop	{r4, r5}
 8015ffe:	4770      	bx	lr
 8016000:	f64f 7160 	movw	r1, #65376	; 0xff60
 8016004:	f640 521b 	movw	r2, #3355	; 0xd1b
 8016008:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
 801600c:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
 8016010:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
 8016014:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
 8016018:	f8a3 1048 	strh.w	r1, [r3, #72]	; 0x48
 801601c:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
 8016020:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
 8016024:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
 8016028:	f8a3 104c 	strh.w	r1, [r3, #76]	; 0x4c
 801602c:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
 8016030:	f8a3 104e 	strh.w	r1, [r3, #78]	; 0x4e
 8016034:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
 8016038:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 801603c:	f8a3 1080 	strh.w	r1, [r3, #128]	; 0x80
 8016040:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
 8016044:	f8a3 1082 	strh.w	r1, [r3, #130]	; 0x82
 8016048:	605a      	str	r2, [r3, #4]
 801604a:	625a      	str	r2, [r3, #36]	; 0x24
 801604c:	609a      	str	r2, [r3, #8]
 801604e:	629a      	str	r2, [r3, #40]	; 0x28
 8016050:	60da      	str	r2, [r3, #12]
 8016052:	62da      	str	r2, [r3, #44]	; 0x2c
 8016054:	611a      	str	r2, [r3, #16]
 8016056:	631a      	str	r2, [r3, #48]	; 0x30
 8016058:	615a      	str	r2, [r3, #20]
 801605a:	635a      	str	r2, [r3, #52]	; 0x34
 801605c:	619a      	str	r2, [r3, #24]
 801605e:	639a      	str	r2, [r3, #56]	; 0x38
 8016060:	61da      	str	r2, [r3, #28]
 8016062:	63da      	str	r2, [r3, #60]	; 0x3c
 8016064:	621a      	str	r2, [r3, #32]
 8016066:	641a      	str	r2, [r3, #64]	; 0x40
 8016068:	e7be      	b.n	8015fe8 <gam_reset+0x5c>
 801606a:	bf00      	nop

0801606c <gam_setConfig>:
 801606c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016070:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8016074:	b292      	uxth	r2, r2
 8016076:	2aa0      	cmp	r2, #160	; 0xa0
 8016078:	f200 8160 	bhi.w	801633c <gam_setConfig+0x2d0>
 801607c:	b430      	push	{r4, r5}
 801607e:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8016082:	2d01      	cmp	r5, #1
 8016084:	f000 80fa 	beq.w	801627c <gam_setConfig+0x210>
 8016088:	2d00      	cmp	r5, #0
 801608a:	f040 8139 	bne.w	8016300 <gam_setConfig+0x294>
 801608e:	f9b1 2044 	ldrsh.w	r2, [r1, #68]	; 0x44
 8016092:	429a      	cmp	r2, r3
 8016094:	d002      	beq.n	801609c <gam_setConfig+0x30>
 8016096:	2201      	movs	r2, #1
 8016098:	f8a1 2064 	strh.w	r2, [r1, #100]	; 0x64
 801609c:	f8a1 3074 	strh.w	r3, [r1, #116]	; 0x74
 80160a0:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
 80160a4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80160a8:	4aa6      	ldr	r2, [pc, #664]	; (8016344 <gam_setConfig+0x2d8>)
 80160aa:	f8a1 5054 	strh.w	r5, [r1, #84]	; 0x54
 80160ae:	425b      	negs	r3, r3
 80160b0:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 80160b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80160b8:	604b      	str	r3, [r1, #4]
 80160ba:	b2ab      	uxth	r3, r5
 80160bc:	2ba0      	cmp	r3, #160	; 0xa0
 80160be:	f200 8139 	bhi.w	8016334 <gam_setConfig+0x2c8>
 80160c2:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 80160c6:	2d01      	cmp	r5, #1
 80160c8:	f000 80e3 	beq.w	8016292 <gam_setConfig+0x226>
 80160cc:	2d00      	cmp	r5, #0
 80160ce:	f040 8117 	bne.w	8016300 <gam_setConfig+0x294>
 80160d2:	f9b1 3046 	ldrsh.w	r3, [r1, #70]	; 0x46
 80160d6:	42a3      	cmp	r3, r4
 80160d8:	d002      	beq.n	80160e0 <gam_setConfig+0x74>
 80160da:	2301      	movs	r3, #1
 80160dc:	f8a1 3066 	strh.w	r3, [r1, #102]	; 0x66
 80160e0:	f8a1 4076 	strh.w	r4, [r1, #118]	; 0x76
 80160e4:	f8a1 4046 	strh.w	r4, [r1, #70]	; 0x46
 80160e8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80160ec:	f8a1 5056 	strh.w	r5, [r1, #86]	; 0x56
 80160f0:	4264      	negs	r4, r4
 80160f2:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 80160f6:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80160fa:	608c      	str	r4, [r1, #8]
 80160fc:	b2ac      	uxth	r4, r5
 80160fe:	2ca0      	cmp	r4, #160	; 0xa0
 8016100:	f200 8118 	bhi.w	8016334 <gam_setConfig+0x2c8>
 8016104:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
 8016108:	2d01      	cmp	r5, #1
 801610a:	f000 80cd 	beq.w	80162a8 <gam_setConfig+0x23c>
 801610e:	2d00      	cmp	r5, #0
 8016110:	f040 80f6 	bne.w	8016300 <gam_setConfig+0x294>
 8016114:	f9b1 4048 	ldrsh.w	r4, [r1, #72]	; 0x48
 8016118:	429c      	cmp	r4, r3
 801611a:	d002      	beq.n	8016122 <gam_setConfig+0xb6>
 801611c:	2401      	movs	r4, #1
 801611e:	f8a1 4068 	strh.w	r4, [r1, #104]	; 0x68
 8016122:	f8a1 3078 	strh.w	r3, [r1, #120]	; 0x78
 8016126:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
 801612a:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801612e:	f8a1 5058 	strh.w	r5, [r1, #88]	; 0x58
 8016132:	425b      	negs	r3, r3
 8016134:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8016138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801613c:	60cb      	str	r3, [r1, #12]
 801613e:	b2ab      	uxth	r3, r5
 8016140:	2ba0      	cmp	r3, #160	; 0xa0
 8016142:	f200 80f7 	bhi.w	8016334 <gam_setConfig+0x2c8>
 8016146:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
 801614a:	2d01      	cmp	r5, #1
 801614c:	f000 80b7 	beq.w	80162be <gam_setConfig+0x252>
 8016150:	2d00      	cmp	r5, #0
 8016152:	f040 80d5 	bne.w	8016300 <gam_setConfig+0x294>
 8016156:	f9b1 304a 	ldrsh.w	r3, [r1, #74]	; 0x4a
 801615a:	42a3      	cmp	r3, r4
 801615c:	d002      	beq.n	8016164 <gam_setConfig+0xf8>
 801615e:	2301      	movs	r3, #1
 8016160:	f8a1 306a 	strh.w	r3, [r1, #106]	; 0x6a
 8016164:	f8a1 407a 	strh.w	r4, [r1, #122]	; 0x7a
 8016168:	f8a1 404a 	strh.w	r4, [r1, #74]	; 0x4a
 801616c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016170:	f8a1 505a 	strh.w	r5, [r1, #90]	; 0x5a
 8016174:	4264      	negs	r4, r4
 8016176:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 801617a:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801617e:	610c      	str	r4, [r1, #16]
 8016180:	b2ac      	uxth	r4, r5
 8016182:	2ca0      	cmp	r4, #160	; 0xa0
 8016184:	f200 80d6 	bhi.w	8016334 <gam_setConfig+0x2c8>
 8016188:	f9b0 5018 	ldrsh.w	r5, [r0, #24]
 801618c:	2d01      	cmp	r5, #1
 801618e:	f000 80a1 	beq.w	80162d4 <gam_setConfig+0x268>
 8016192:	2d00      	cmp	r5, #0
 8016194:	f040 80b4 	bne.w	8016300 <gam_setConfig+0x294>
 8016198:	f9b1 404c 	ldrsh.w	r4, [r1, #76]	; 0x4c
 801619c:	429c      	cmp	r4, r3
 801619e:	d002      	beq.n	80161a6 <gam_setConfig+0x13a>
 80161a0:	2401      	movs	r4, #1
 80161a2:	f8a1 406c 	strh.w	r4, [r1, #108]	; 0x6c
 80161a6:	f8a1 307c 	strh.w	r3, [r1, #124]	; 0x7c
 80161aa:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
 80161ae:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80161b2:	f8a1 505c 	strh.w	r5, [r1, #92]	; 0x5c
 80161b6:	425b      	negs	r3, r3
 80161b8:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 80161bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80161c0:	614b      	str	r3, [r1, #20]
 80161c2:	b2ab      	uxth	r3, r5
 80161c4:	2ba0      	cmp	r3, #160	; 0xa0
 80161c6:	f200 80b5 	bhi.w	8016334 <gam_setConfig+0x2c8>
 80161ca:	f9b0 501a 	ldrsh.w	r5, [r0, #26]
 80161ce:	2d01      	cmp	r5, #1
 80161d0:	f000 808b 	beq.w	80162ea <gam_setConfig+0x27e>
 80161d4:	2d00      	cmp	r5, #0
 80161d6:	f040 8093 	bne.w	8016300 <gam_setConfig+0x294>
 80161da:	f9b1 304e 	ldrsh.w	r3, [r1, #78]	; 0x4e
 80161de:	42a3      	cmp	r3, r4
 80161e0:	d002      	beq.n	80161e8 <gam_setConfig+0x17c>
 80161e2:	2301      	movs	r3, #1
 80161e4:	f8a1 306e 	strh.w	r3, [r1, #110]	; 0x6e
 80161e8:	f8a1 407e 	strh.w	r4, [r1, #126]	; 0x7e
 80161ec:	f8a1 404e 	strh.w	r4, [r1, #78]	; 0x4e
 80161f0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80161f4:	f8a1 505e 	strh.w	r5, [r1, #94]	; 0x5e
 80161f8:	4264      	negs	r4, r4
 80161fa:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 80161fe:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8016202:	618c      	str	r4, [r1, #24]
 8016204:	b2ac      	uxth	r4, r5
 8016206:	2ca0      	cmp	r4, #160	; 0xa0
 8016208:	f200 8094 	bhi.w	8016334 <gam_setConfig+0x2c8>
 801620c:	f9b0 501c 	ldrsh.w	r5, [r0, #28]
 8016210:	2d01      	cmp	r5, #1
 8016212:	d079      	beq.n	8016308 <gam_setConfig+0x29c>
 8016214:	2d00      	cmp	r5, #0
 8016216:	d173      	bne.n	8016300 <gam_setConfig+0x294>
 8016218:	f9b1 4050 	ldrsh.w	r4, [r1, #80]	; 0x50
 801621c:	429c      	cmp	r4, r3
 801621e:	d002      	beq.n	8016226 <gam_setConfig+0x1ba>
 8016220:	2401      	movs	r4, #1
 8016222:	f8a1 4070 	strh.w	r4, [r1, #112]	; 0x70
 8016226:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
 801622a:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
 801622e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 8016232:	f8a1 5060 	strh.w	r5, [r1, #96]	; 0x60
 8016236:	425b      	negs	r3, r3
 8016238:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 801623c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016240:	61cb      	str	r3, [r1, #28]
 8016242:	b2ab      	uxth	r3, r5
 8016244:	2ba0      	cmp	r3, #160	; 0xa0
 8016246:	d875      	bhi.n	8016334 <gam_setConfig+0x2c8>
 8016248:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
 801624c:	2b01      	cmp	r3, #1
 801624e:	d066      	beq.n	801631e <gam_setConfig+0x2b2>
 8016250:	2b00      	cmp	r3, #0
 8016252:	d155      	bne.n	8016300 <gam_setConfig+0x294>
 8016254:	f9b1 0052 	ldrsh.w	r0, [r1, #82]	; 0x52
 8016258:	f8a1 4082 	strh.w	r4, [r1, #130]	; 0x82
 801625c:	42a0      	cmp	r0, r4
 801625e:	bf1c      	itt	ne
 8016260:	2001      	movne	r0, #1
 8016262:	f8a1 0072 	strhne.w	r0, [r1, #114]	; 0x72
 8016266:	f8a1 4052 	strh.w	r4, [r1, #82]	; 0x52
 801626a:	4264      	negs	r4, r4
 801626c:	f8a1 3062 	strh.w	r3, [r1, #98]	; 0x62
 8016270:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8016274:	620b      	str	r3, [r1, #32]
 8016276:	2000      	movs	r0, #0
 8016278:	bc30      	pop	{r4, r5}
 801627a:	4770      	bx	lr
 801627c:	f64f 7260 	movw	r2, #65376	; 0xff60
 8016280:	f8a1 3074 	strh.w	r3, [r1, #116]	; 0x74
 8016284:	f8a1 5064 	strh.w	r5, [r1, #100]	; 0x64
 8016288:	f8a1 2044 	strh.w	r2, [r1, #68]	; 0x44
 801628c:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 8016290:	e708      	b.n	80160a4 <gam_setConfig+0x38>
 8016292:	f64f 7360 	movw	r3, #65376	; 0xff60
 8016296:	f8a1 4076 	strh.w	r4, [r1, #118]	; 0x76
 801629a:	f8a1 5066 	strh.w	r5, [r1, #102]	; 0x66
 801629e:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
 80162a2:	f06f 049f 	mvn.w	r4, #159	; 0x9f
 80162a6:	e71f      	b.n	80160e8 <gam_setConfig+0x7c>
 80162a8:	f64f 7460 	movw	r4, #65376	; 0xff60
 80162ac:	f8a1 3078 	strh.w	r3, [r1, #120]	; 0x78
 80162b0:	f8a1 5068 	strh.w	r5, [r1, #104]	; 0x68
 80162b4:	f8a1 4048 	strh.w	r4, [r1, #72]	; 0x48
 80162b8:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 80162bc:	e735      	b.n	801612a <gam_setConfig+0xbe>
 80162be:	f64f 7360 	movw	r3, #65376	; 0xff60
 80162c2:	f8a1 407a 	strh.w	r4, [r1, #122]	; 0x7a
 80162c6:	f8a1 506a 	strh.w	r5, [r1, #106]	; 0x6a
 80162ca:	f8a1 304a 	strh.w	r3, [r1, #74]	; 0x4a
 80162ce:	f06f 049f 	mvn.w	r4, #159	; 0x9f
 80162d2:	e74b      	b.n	801616c <gam_setConfig+0x100>
 80162d4:	f64f 7460 	movw	r4, #65376	; 0xff60
 80162d8:	f8a1 307c 	strh.w	r3, [r1, #124]	; 0x7c
 80162dc:	f8a1 506c 	strh.w	r5, [r1, #108]	; 0x6c
 80162e0:	f8a1 404c 	strh.w	r4, [r1, #76]	; 0x4c
 80162e4:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 80162e8:	e761      	b.n	80161ae <gam_setConfig+0x142>
 80162ea:	f64f 7360 	movw	r3, #65376	; 0xff60
 80162ee:	f8a1 407e 	strh.w	r4, [r1, #126]	; 0x7e
 80162f2:	f8a1 506e 	strh.w	r5, [r1, #110]	; 0x6e
 80162f6:	f8a1 304e 	strh.w	r3, [r1, #78]	; 0x4e
 80162fa:	f06f 049f 	mvn.w	r4, #159	; 0x9f
 80162fe:	e777      	b.n	80161f0 <gam_setConfig+0x184>
 8016300:	f06f 0001 	mvn.w	r0, #1
 8016304:	bc30      	pop	{r4, r5}
 8016306:	4770      	bx	lr
 8016308:	f64f 7460 	movw	r4, #65376	; 0xff60
 801630c:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
 8016310:	f8a1 5070 	strh.w	r5, [r1, #112]	; 0x70
 8016314:	f8a1 4050 	strh.w	r4, [r1, #80]	; 0x50
 8016318:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 801631c:	e787      	b.n	801622e <gam_setConfig+0x1c2>
 801631e:	f64f 7060 	movw	r0, #65376	; 0xff60
 8016322:	f8a1 4082 	strh.w	r4, [r1, #130]	; 0x82
 8016326:	f8a1 3072 	strh.w	r3, [r1, #114]	; 0x72
 801632a:	f8a1 0052 	strh.w	r0, [r1, #82]	; 0x52
 801632e:	f06f 049f 	mvn.w	r4, #159	; 0x9f
 8016332:	e79a      	b.n	801626a <gam_setConfig+0x1fe>
 8016334:	f04f 30ff 	mov.w	r0, #4294967295
 8016338:	bc30      	pop	{r4, r5}
 801633a:	4770      	bx	lr
 801633c:	f04f 30ff 	mov.w	r0, #4294967295
 8016340:	4770      	bx	lr
 8016342:	bf00      	nop
 8016344:	0801954c 	.word	0x0801954c

08016348 <gam_process>:
 8016348:	6843      	ldr	r3, [r0, #4]
 801634a:	2b02      	cmp	r3, #2
 801634c:	f040 81e2 	bne.w	8016714 <gam_process+0x3cc>
 8016350:	684b      	ldr	r3, [r1, #4]
 8016352:	2b02      	cmp	r3, #2
 8016354:	f040 81de 	bne.w	8016714 <gam_process+0x3cc>
 8016358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635c:	6903      	ldr	r3, [r0, #16]
 801635e:	688f      	ldr	r7, [r1, #8]
 8016360:	6805      	ldr	r5, [r0, #0]
 8016362:	6886      	ldr	r6, [r0, #8]
 8016364:	b091      	sub	sp, #68	; 0x44
 8016366:	2b01      	cmp	r3, #1
 8016368:	4614      	mov	r4, r2
 801636a:	9007      	str	r0, [sp, #28]
 801636c:	4602      	mov	r2, r0
 801636e:	f000 81c2 	beq.w	80166f6 <gam_process+0x3ae>
 8016372:	2d01      	cmp	r5, #1
 8016374:	bf18      	it	ne
 8016376:	f06f 0003 	mvnne.w	r0, #3
 801637a:	f040 8159 	bne.w	8016630 <gam_process+0x2e8>
 801637e:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8016382:	2d01      	cmp	r5, #1
 8016384:	462a      	mov	r2, r5
 8016386:	bfb8      	it	lt
 8016388:	2201      	movlt	r2, #1
 801638a:	0092      	lsls	r2, r2, #2
 801638c:	2100      	movs	r1, #0
 801638e:	a808      	add	r0, sp, #32
 8016390:	f000 fc0f 	bl	8016bb2 <memset>
 8016394:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 8016398:	2b00      	cmp	r3, #0
 801639a:	f040 81a4 	bne.w	80166e6 <gam_process+0x39e>
 801639e:	2d01      	cmp	r5, #1
 80163a0:	dd2e      	ble.n	8016400 <gam_process+0xb8>
 80163a2:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	f040 8195 	bne.w	80166d6 <gam_process+0x38e>
 80163ac:	2d02      	cmp	r5, #2
 80163ae:	d027      	beq.n	8016400 <gam_process+0xb8>
 80163b0:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	f040 8186 	bne.w	80166c6 <gam_process+0x37e>
 80163ba:	2d03      	cmp	r5, #3
 80163bc:	d020      	beq.n	8016400 <gam_process+0xb8>
 80163be:	f9b4 306a 	ldrsh.w	r3, [r4, #106]	; 0x6a
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	f040 8177 	bne.w	80166b6 <gam_process+0x36e>
 80163c8:	2d04      	cmp	r5, #4
 80163ca:	d019      	beq.n	8016400 <gam_process+0xb8>
 80163cc:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f040 8168 	bne.w	80166a6 <gam_process+0x35e>
 80163d6:	2d05      	cmp	r5, #5
 80163d8:	d012      	beq.n	8016400 <gam_process+0xb8>
 80163da:	f9b4 306e 	ldrsh.w	r3, [r4, #110]	; 0x6e
 80163de:	2b00      	cmp	r3, #0
 80163e0:	f040 8159 	bne.w	8016696 <gam_process+0x34e>
 80163e4:	2d06      	cmp	r5, #6
 80163e6:	d00b      	beq.n	8016400 <gam_process+0xb8>
 80163e8:	f9b4 3070 	ldrsh.w	r3, [r4, #112]	; 0x70
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	f040 814a 	bne.w	8016686 <gam_process+0x33e>
 80163f2:	2d07      	cmp	r5, #7
 80163f4:	d004      	beq.n	8016400 <gam_process+0xb8>
 80163f6:	f9b4 3072 	ldrsh.w	r3, [r4, #114]	; 0x72
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	f040 813b 	bne.w	8016676 <gam_process+0x32e>
 8016400:	f1b8 0f00 	cmp.w	r8, #0
 8016404:	f340 80a6 	ble.w	8016554 <gam_process+0x20c>
 8016408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801640a:	9202      	str	r2, [sp, #8]
 801640c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801640e:	9203      	str	r2, [sp, #12]
 8016410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016412:	9204      	str	r2, [sp, #16]
 8016414:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016416:	9205      	str	r2, [sp, #20]
 8016418:	2300      	movs	r3, #0
 801641a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801641c:	f8dd b020 	ldr.w	fp, [sp, #32]
 8016420:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8016424:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8016428:	9206      	str	r2, [sp, #24]
 801642a:	9301      	str	r3, [sp, #4]
 801642c:	2d00      	cmp	r5, #0
 801642e:	f340 8088 	ble.w	8016542 <gam_process+0x1fa>
 8016432:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016434:	f936 2013 	ldrsh.w	r2, [r6, r3, lsl #1]
 8016438:	fb31 f202 	smulwb	r2, r1, r2
 801643c:	4459      	add	r1, fp
 801643e:	2d01      	cmp	r5, #1
 8016440:	ea4f 2262 	mov.w	r2, r2, asr #9
 8016444:	f103 0e01 	add.w	lr, r3, #1
 8016448:	f302 020f 	ssat	r2, #16, r2
 801644c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016450:	6261      	str	r1, [r4, #36]	; 0x24
 8016452:	d076      	beq.n	8016542 <gam_process+0x1fa>
 8016454:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016456:	f936 201e 	ldrsh.w	r2, [r6, lr, lsl #1]
 801645a:	fb31 f202 	smulwb	r2, r1, r2
 801645e:	4451      	add	r1, sl
 8016460:	2d02      	cmp	r5, #2
 8016462:	ea4f 2262 	mov.w	r2, r2, asr #9
 8016466:	f103 0c02 	add.w	ip, r3, #2
 801646a:	f302 020f 	ssat	r2, #16, r2
 801646e:	f827 201e 	strh.w	r2, [r7, lr, lsl #1]
 8016472:	62a1      	str	r1, [r4, #40]	; 0x28
 8016474:	d065      	beq.n	8016542 <gam_process+0x1fa>
 8016476:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016478:	f936 201c 	ldrsh.w	r2, [r6, ip, lsl #1]
 801647c:	fb31 f202 	smulwb	r2, r1, r2
 8016480:	4449      	add	r1, r9
 8016482:	2d03      	cmp	r5, #3
 8016484:	ea4f 2262 	mov.w	r2, r2, asr #9
 8016488:	f103 0e03 	add.w	lr, r3, #3
 801648c:	f302 020f 	ssat	r2, #16, r2
 8016490:	f827 201c 	strh.w	r2, [r7, ip, lsl #1]
 8016494:	62e1      	str	r1, [r4, #44]	; 0x2c
 8016496:	d054      	beq.n	8016542 <gam_process+0x1fa>
 8016498:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801649a:	f936 201e 	ldrsh.w	r2, [r6, lr, lsl #1]
 801649e:	fb31 f202 	smulwb	r2, r1, r2
 80164a2:	9802      	ldr	r0, [sp, #8]
 80164a4:	2d04      	cmp	r5, #4
 80164a6:	4401      	add	r1, r0
 80164a8:	ea4f 2262 	mov.w	r2, r2, asr #9
 80164ac:	f103 0c04 	add.w	ip, r3, #4
 80164b0:	f302 020f 	ssat	r2, #16, r2
 80164b4:	f827 201e 	strh.w	r2, [r7, lr, lsl #1]
 80164b8:	6321      	str	r1, [r4, #48]	; 0x30
 80164ba:	d042      	beq.n	8016542 <gam_process+0x1fa>
 80164bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80164be:	f936 201c 	ldrsh.w	r2, [r6, ip, lsl #1]
 80164c2:	fb31 f202 	smulwb	r2, r1, r2
 80164c6:	9803      	ldr	r0, [sp, #12]
 80164c8:	2d05      	cmp	r5, #5
 80164ca:	4401      	add	r1, r0
 80164cc:	ea4f 2262 	mov.w	r2, r2, asr #9
 80164d0:	f103 0e05 	add.w	lr, r3, #5
 80164d4:	f302 020f 	ssat	r2, #16, r2
 80164d8:	f827 201c 	strh.w	r2, [r7, ip, lsl #1]
 80164dc:	6361      	str	r1, [r4, #52]	; 0x34
 80164de:	d030      	beq.n	8016542 <gam_process+0x1fa>
 80164e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80164e2:	f936 201e 	ldrsh.w	r2, [r6, lr, lsl #1]
 80164e6:	fb31 f202 	smulwb	r2, r1, r2
 80164ea:	9804      	ldr	r0, [sp, #16]
 80164ec:	2d06      	cmp	r5, #6
 80164ee:	4401      	add	r1, r0
 80164f0:	ea4f 2262 	mov.w	r2, r2, asr #9
 80164f4:	f103 0c06 	add.w	ip, r3, #6
 80164f8:	f302 020f 	ssat	r2, #16, r2
 80164fc:	f827 201e 	strh.w	r2, [r7, lr, lsl #1]
 8016500:	63a1      	str	r1, [r4, #56]	; 0x38
 8016502:	d01e      	beq.n	8016542 <gam_process+0x1fa>
 8016504:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016506:	f936 201c 	ldrsh.w	r2, [r6, ip, lsl #1]
 801650a:	fb31 f202 	smulwb	r2, r1, r2
 801650e:	9805      	ldr	r0, [sp, #20]
 8016510:	2d08      	cmp	r5, #8
 8016512:	4401      	add	r1, r0
 8016514:	ea4f 2262 	mov.w	r2, r2, asr #9
 8016518:	f103 0e07 	add.w	lr, r3, #7
 801651c:	f302 020f 	ssat	r2, #16, r2
 8016520:	f827 201c 	strh.w	r2, [r7, ip, lsl #1]
 8016524:	63e1      	str	r1, [r4, #60]	; 0x3c
 8016526:	d10c      	bne.n	8016542 <gam_process+0x1fa>
 8016528:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801652a:	f936 201e 	ldrsh.w	r2, [r6, lr, lsl #1]
 801652e:	fb31 f202 	smulwb	r2, r1, r2
 8016532:	9806      	ldr	r0, [sp, #24]
 8016534:	4401      	add	r1, r0
 8016536:	1252      	asrs	r2, r2, #9
 8016538:	f302 020f 	ssat	r2, #16, r2
 801653c:	f827 201e 	strh.w	r2, [r7, lr, lsl #1]
 8016540:	6421      	str	r1, [r4, #64]	; 0x40
 8016542:	9a01      	ldr	r2, [sp, #4]
 8016544:	3201      	adds	r2, #1
 8016546:	4542      	cmp	r2, r8
 8016548:	9201      	str	r2, [sp, #4]
 801654a:	442b      	add	r3, r5
 801654c:	f47f af6e 	bne.w	801642c <gam_process+0xe4>
 8016550:	9b07      	ldr	r3, [sp, #28]
 8016552:	681d      	ldr	r5, [r3, #0]
 8016554:	2d00      	cmp	r5, #0
 8016556:	dd6a      	ble.n	801662e <gam_process+0x2e6>
 8016558:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801655c:	f9b4 2064 	ldrsh.w	r2, [r4, #100]	; 0x64
 8016560:	2b01      	cmp	r3, #1
 8016562:	bf0a      	itet	eq
 8016564:	2300      	moveq	r3, #0
 8016566:	6863      	ldrne	r3, [r4, #4]
 8016568:	6063      	streq	r3, [r4, #4]
 801656a:	6263      	str	r3, [r4, #36]	; 0x24
 801656c:	2a00      	cmp	r2, #0
 801656e:	d17e      	bne.n	801666e <gam_process+0x326>
 8016570:	2d01      	cmp	r5, #1
 8016572:	d05c      	beq.n	801662e <gam_process+0x2e6>
 8016574:	f9b4 3056 	ldrsh.w	r3, [r4, #86]	; 0x56
 8016578:	f9b4 2066 	ldrsh.w	r2, [r4, #102]	; 0x66
 801657c:	2b01      	cmp	r3, #1
 801657e:	bf0a      	itet	eq
 8016580:	2300      	moveq	r3, #0
 8016582:	68a3      	ldrne	r3, [r4, #8]
 8016584:	60a3      	streq	r3, [r4, #8]
 8016586:	62a3      	str	r3, [r4, #40]	; 0x28
 8016588:	2a00      	cmp	r2, #0
 801658a:	d16c      	bne.n	8016666 <gam_process+0x31e>
 801658c:	2d02      	cmp	r5, #2
 801658e:	d04e      	beq.n	801662e <gam_process+0x2e6>
 8016590:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 8016594:	f9b4 2068 	ldrsh.w	r2, [r4, #104]	; 0x68
 8016598:	2b01      	cmp	r3, #1
 801659a:	bf0a      	itet	eq
 801659c:	2300      	moveq	r3, #0
 801659e:	68e3      	ldrne	r3, [r4, #12]
 80165a0:	60e3      	streq	r3, [r4, #12]
 80165a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80165a4:	2a00      	cmp	r2, #0
 80165a6:	d15a      	bne.n	801665e <gam_process+0x316>
 80165a8:	2d03      	cmp	r5, #3
 80165aa:	d040      	beq.n	801662e <gam_process+0x2e6>
 80165ac:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80165b0:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	; 0x6a
 80165b4:	2b01      	cmp	r3, #1
 80165b6:	bf0a      	itet	eq
 80165b8:	2300      	moveq	r3, #0
 80165ba:	6923      	ldrne	r3, [r4, #16]
 80165bc:	6123      	streq	r3, [r4, #16]
 80165be:	6323      	str	r3, [r4, #48]	; 0x30
 80165c0:	2a00      	cmp	r2, #0
 80165c2:	d148      	bne.n	8016656 <gam_process+0x30e>
 80165c4:	2d04      	cmp	r5, #4
 80165c6:	d032      	beq.n	801662e <gam_process+0x2e6>
 80165c8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80165cc:	f9b4 206c 	ldrsh.w	r2, [r4, #108]	; 0x6c
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	bf0a      	itet	eq
 80165d4:	2300      	moveq	r3, #0
 80165d6:	6963      	ldrne	r3, [r4, #20]
 80165d8:	6163      	streq	r3, [r4, #20]
 80165da:	6363      	str	r3, [r4, #52]	; 0x34
 80165dc:	2a00      	cmp	r2, #0
 80165de:	d136      	bne.n	801664e <gam_process+0x306>
 80165e0:	2d05      	cmp	r5, #5
 80165e2:	d024      	beq.n	801662e <gam_process+0x2e6>
 80165e4:	f9b4 305e 	ldrsh.w	r3, [r4, #94]	; 0x5e
 80165e8:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 80165ec:	2b01      	cmp	r3, #1
 80165ee:	bf0a      	itet	eq
 80165f0:	2300      	moveq	r3, #0
 80165f2:	69a3      	ldrne	r3, [r4, #24]
 80165f4:	61a3      	streq	r3, [r4, #24]
 80165f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80165f8:	bb2a      	cbnz	r2, 8016646 <gam_process+0x2fe>
 80165fa:	2d06      	cmp	r5, #6
 80165fc:	d017      	beq.n	801662e <gam_process+0x2e6>
 80165fe:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016602:	f9b4 2070 	ldrsh.w	r2, [r4, #112]	; 0x70
 8016606:	2b01      	cmp	r3, #1
 8016608:	bf0a      	itet	eq
 801660a:	2300      	moveq	r3, #0
 801660c:	69e3      	ldrne	r3, [r4, #28]
 801660e:	61e3      	streq	r3, [r4, #28]
 8016610:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016612:	b9a2      	cbnz	r2, 801663e <gam_process+0x2f6>
 8016614:	2d07      	cmp	r5, #7
 8016616:	d00a      	beq.n	801662e <gam_process+0x2e6>
 8016618:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801661c:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	; 0x72
 8016620:	2b01      	cmp	r3, #1
 8016622:	bf0a      	itet	eq
 8016624:	2300      	moveq	r3, #0
 8016626:	6a23      	ldrne	r3, [r4, #32]
 8016628:	6223      	streq	r3, [r4, #32]
 801662a:	6423      	str	r3, [r4, #64]	; 0x40
 801662c:	b91a      	cbnz	r2, 8016636 <gam_process+0x2ee>
 801662e:	2000      	movs	r0, #0
 8016630:	b011      	add	sp, #68	; 0x44
 8016632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016636:	2300      	movs	r3, #0
 8016638:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 801663c:	e7f7      	b.n	801662e <gam_process+0x2e6>
 801663e:	2300      	movs	r3, #0
 8016640:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 8016644:	e7e6      	b.n	8016614 <gam_process+0x2cc>
 8016646:	2300      	movs	r3, #0
 8016648:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801664c:	e7d5      	b.n	80165fa <gam_process+0x2b2>
 801664e:	2300      	movs	r3, #0
 8016650:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8016654:	e7c4      	b.n	80165e0 <gam_process+0x298>
 8016656:	2300      	movs	r3, #0
 8016658:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 801665c:	e7b2      	b.n	80165c4 <gam_process+0x27c>
 801665e:	2300      	movs	r3, #0
 8016660:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8016664:	e7a0      	b.n	80165a8 <gam_process+0x260>
 8016666:	2300      	movs	r3, #0
 8016668:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
 801666c:	e78e      	b.n	801658c <gam_process+0x244>
 801666e:	2300      	movs	r3, #0
 8016670:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8016674:	e77c      	b.n	8016570 <gam_process+0x228>
 8016676:	6a23      	ldr	r3, [r4, #32]
 8016678:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801667a:	1a9b      	subs	r3, r3, r2
 801667c:	bf18      	it	ne
 801667e:	fb93 f3f8 	sdivne	r3, r3, r8
 8016682:	930f      	str	r3, [sp, #60]	; 0x3c
 8016684:	e6bc      	b.n	8016400 <gam_process+0xb8>
 8016686:	69e3      	ldr	r3, [r4, #28]
 8016688:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801668a:	1a9b      	subs	r3, r3, r2
 801668c:	bf18      	it	ne
 801668e:	fb93 f3f8 	sdivne	r3, r3, r8
 8016692:	930e      	str	r3, [sp, #56]	; 0x38
 8016694:	e6ad      	b.n	80163f2 <gam_process+0xaa>
 8016696:	69a3      	ldr	r3, [r4, #24]
 8016698:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801669a:	1a9b      	subs	r3, r3, r2
 801669c:	bf18      	it	ne
 801669e:	fb93 f3f8 	sdivne	r3, r3, r8
 80166a2:	930d      	str	r3, [sp, #52]	; 0x34
 80166a4:	e69e      	b.n	80163e4 <gam_process+0x9c>
 80166a6:	6963      	ldr	r3, [r4, #20]
 80166a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80166aa:	1a9b      	subs	r3, r3, r2
 80166ac:	bf18      	it	ne
 80166ae:	fb93 f3f8 	sdivne	r3, r3, r8
 80166b2:	930c      	str	r3, [sp, #48]	; 0x30
 80166b4:	e68f      	b.n	80163d6 <gam_process+0x8e>
 80166b6:	6923      	ldr	r3, [r4, #16]
 80166b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80166ba:	1a9b      	subs	r3, r3, r2
 80166bc:	bf18      	it	ne
 80166be:	fb93 f3f8 	sdivne	r3, r3, r8
 80166c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80166c4:	e680      	b.n	80163c8 <gam_process+0x80>
 80166c6:	68e3      	ldr	r3, [r4, #12]
 80166c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80166ca:	1a9b      	subs	r3, r3, r2
 80166cc:	bf18      	it	ne
 80166ce:	fb93 f3f8 	sdivne	r3, r3, r8
 80166d2:	930a      	str	r3, [sp, #40]	; 0x28
 80166d4:	e671      	b.n	80163ba <gam_process+0x72>
 80166d6:	68a3      	ldr	r3, [r4, #8]
 80166d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80166da:	1a9b      	subs	r3, r3, r2
 80166dc:	bf18      	it	ne
 80166de:	fb93 f3f8 	sdivne	r3, r3, r8
 80166e2:	9309      	str	r3, [sp, #36]	; 0x24
 80166e4:	e662      	b.n	80163ac <gam_process+0x64>
 80166e6:	6863      	ldr	r3, [r4, #4]
 80166e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80166ea:	1a9b      	subs	r3, r3, r2
 80166ec:	bf18      	it	ne
 80166ee:	fb93 f3f8 	sdivne	r3, r3, r8
 80166f2:	9308      	str	r3, [sp, #32]
 80166f4:	e653      	b.n	801639e <gam_process+0x56>
 80166f6:	2d08      	cmp	r5, #8
 80166f8:	dc09      	bgt.n	801670e <gam_process+0x3c6>
 80166fa:	2d00      	cmp	r5, #0
 80166fc:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016700:	f73f ae3f 	bgt.w	8016382 <gam_process+0x3a>
 8016704:	f1b8 0f00 	cmp.w	r8, #0
 8016708:	f73f ae7e 	bgt.w	8016408 <gam_process+0xc0>
 801670c:	e78f      	b.n	801662e <gam_process+0x2e6>
 801670e:	f06f 0004 	mvn.w	r0, #4
 8016712:	e78d      	b.n	8016630 <gam_process+0x2e8>
 8016714:	f06f 0002 	mvn.w	r0, #2
 8016718:	4770      	bx	lr
 801671a:	bf00      	nop

0801671c <atoi>:
 801671c:	220a      	movs	r2, #10
 801671e:	2100      	movs	r1, #0
 8016720:	f000 bf38 	b.w	8017594 <strtol>

08016724 <__errno>:
 8016724:	4b01      	ldr	r3, [pc, #4]	; (801672c <__errno+0x8>)
 8016726:	6818      	ldr	r0, [r3, #0]
 8016728:	4770      	bx	lr
 801672a:	bf00      	nop
 801672c:	20000174 	.word	0x20000174

08016730 <__sflush_r>:
 8016730:	898a      	ldrh	r2, [r1, #12]
 8016732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016736:	4605      	mov	r5, r0
 8016738:	0710      	lsls	r0, r2, #28
 801673a:	460c      	mov	r4, r1
 801673c:	d458      	bmi.n	80167f0 <__sflush_r+0xc0>
 801673e:	684b      	ldr	r3, [r1, #4]
 8016740:	2b00      	cmp	r3, #0
 8016742:	dc05      	bgt.n	8016750 <__sflush_r+0x20>
 8016744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016746:	2b00      	cmp	r3, #0
 8016748:	dc02      	bgt.n	8016750 <__sflush_r+0x20>
 801674a:	2000      	movs	r0, #0
 801674c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016752:	2e00      	cmp	r6, #0
 8016754:	d0f9      	beq.n	801674a <__sflush_r+0x1a>
 8016756:	2300      	movs	r3, #0
 8016758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801675c:	682f      	ldr	r7, [r5, #0]
 801675e:	6a21      	ldr	r1, [r4, #32]
 8016760:	602b      	str	r3, [r5, #0]
 8016762:	d032      	beq.n	80167ca <__sflush_r+0x9a>
 8016764:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016766:	89a3      	ldrh	r3, [r4, #12]
 8016768:	075a      	lsls	r2, r3, #29
 801676a:	d505      	bpl.n	8016778 <__sflush_r+0x48>
 801676c:	6863      	ldr	r3, [r4, #4]
 801676e:	1ac0      	subs	r0, r0, r3
 8016770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016772:	b10b      	cbz	r3, 8016778 <__sflush_r+0x48>
 8016774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016776:	1ac0      	subs	r0, r0, r3
 8016778:	2300      	movs	r3, #0
 801677a:	4602      	mov	r2, r0
 801677c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801677e:	6a21      	ldr	r1, [r4, #32]
 8016780:	4628      	mov	r0, r5
 8016782:	47b0      	blx	r6
 8016784:	1c43      	adds	r3, r0, #1
 8016786:	89a3      	ldrh	r3, [r4, #12]
 8016788:	d106      	bne.n	8016798 <__sflush_r+0x68>
 801678a:	6829      	ldr	r1, [r5, #0]
 801678c:	291d      	cmp	r1, #29
 801678e:	d848      	bhi.n	8016822 <__sflush_r+0xf2>
 8016790:	4a29      	ldr	r2, [pc, #164]	; (8016838 <__sflush_r+0x108>)
 8016792:	40ca      	lsrs	r2, r1
 8016794:	07d6      	lsls	r6, r2, #31
 8016796:	d544      	bpl.n	8016822 <__sflush_r+0xf2>
 8016798:	2200      	movs	r2, #0
 801679a:	6062      	str	r2, [r4, #4]
 801679c:	04d9      	lsls	r1, r3, #19
 801679e:	6922      	ldr	r2, [r4, #16]
 80167a0:	6022      	str	r2, [r4, #0]
 80167a2:	d504      	bpl.n	80167ae <__sflush_r+0x7e>
 80167a4:	1c42      	adds	r2, r0, #1
 80167a6:	d101      	bne.n	80167ac <__sflush_r+0x7c>
 80167a8:	682b      	ldr	r3, [r5, #0]
 80167aa:	b903      	cbnz	r3, 80167ae <__sflush_r+0x7e>
 80167ac:	6560      	str	r0, [r4, #84]	; 0x54
 80167ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167b0:	602f      	str	r7, [r5, #0]
 80167b2:	2900      	cmp	r1, #0
 80167b4:	d0c9      	beq.n	801674a <__sflush_r+0x1a>
 80167b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167ba:	4299      	cmp	r1, r3
 80167bc:	d002      	beq.n	80167c4 <__sflush_r+0x94>
 80167be:	4628      	mov	r0, r5
 80167c0:	f000 fa00 	bl	8016bc4 <_free_r>
 80167c4:	2000      	movs	r0, #0
 80167c6:	6360      	str	r0, [r4, #52]	; 0x34
 80167c8:	e7c0      	b.n	801674c <__sflush_r+0x1c>
 80167ca:	2301      	movs	r3, #1
 80167cc:	4628      	mov	r0, r5
 80167ce:	47b0      	blx	r6
 80167d0:	1c41      	adds	r1, r0, #1
 80167d2:	d1c8      	bne.n	8016766 <__sflush_r+0x36>
 80167d4:	682b      	ldr	r3, [r5, #0]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d0c5      	beq.n	8016766 <__sflush_r+0x36>
 80167da:	2b1d      	cmp	r3, #29
 80167dc:	d001      	beq.n	80167e2 <__sflush_r+0xb2>
 80167de:	2b16      	cmp	r3, #22
 80167e0:	d101      	bne.n	80167e6 <__sflush_r+0xb6>
 80167e2:	602f      	str	r7, [r5, #0]
 80167e4:	e7b1      	b.n	801674a <__sflush_r+0x1a>
 80167e6:	89a3      	ldrh	r3, [r4, #12]
 80167e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167ec:	81a3      	strh	r3, [r4, #12]
 80167ee:	e7ad      	b.n	801674c <__sflush_r+0x1c>
 80167f0:	690f      	ldr	r7, [r1, #16]
 80167f2:	2f00      	cmp	r7, #0
 80167f4:	d0a9      	beq.n	801674a <__sflush_r+0x1a>
 80167f6:	0793      	lsls	r3, r2, #30
 80167f8:	680e      	ldr	r6, [r1, #0]
 80167fa:	bf08      	it	eq
 80167fc:	694b      	ldreq	r3, [r1, #20]
 80167fe:	600f      	str	r7, [r1, #0]
 8016800:	bf18      	it	ne
 8016802:	2300      	movne	r3, #0
 8016804:	eba6 0807 	sub.w	r8, r6, r7
 8016808:	608b      	str	r3, [r1, #8]
 801680a:	f1b8 0f00 	cmp.w	r8, #0
 801680e:	dd9c      	ble.n	801674a <__sflush_r+0x1a>
 8016810:	4643      	mov	r3, r8
 8016812:	463a      	mov	r2, r7
 8016814:	6a21      	ldr	r1, [r4, #32]
 8016816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016818:	4628      	mov	r0, r5
 801681a:	47b0      	blx	r6
 801681c:	2800      	cmp	r0, #0
 801681e:	dc06      	bgt.n	801682e <__sflush_r+0xfe>
 8016820:	89a3      	ldrh	r3, [r4, #12]
 8016822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016826:	81a3      	strh	r3, [r4, #12]
 8016828:	f04f 30ff 	mov.w	r0, #4294967295
 801682c:	e78e      	b.n	801674c <__sflush_r+0x1c>
 801682e:	4407      	add	r7, r0
 8016830:	eba8 0800 	sub.w	r8, r8, r0
 8016834:	e7e9      	b.n	801680a <__sflush_r+0xda>
 8016836:	bf00      	nop
 8016838:	20400001 	.word	0x20400001

0801683c <_fflush_r>:
 801683c:	b538      	push	{r3, r4, r5, lr}
 801683e:	690b      	ldr	r3, [r1, #16]
 8016840:	4605      	mov	r5, r0
 8016842:	460c      	mov	r4, r1
 8016844:	b1db      	cbz	r3, 801687e <_fflush_r+0x42>
 8016846:	b118      	cbz	r0, 8016850 <_fflush_r+0x14>
 8016848:	6983      	ldr	r3, [r0, #24]
 801684a:	b90b      	cbnz	r3, 8016850 <_fflush_r+0x14>
 801684c:	f000 f860 	bl	8016910 <__sinit>
 8016850:	4b0c      	ldr	r3, [pc, #48]	; (8016884 <_fflush_r+0x48>)
 8016852:	429c      	cmp	r4, r3
 8016854:	d109      	bne.n	801686a <_fflush_r+0x2e>
 8016856:	686c      	ldr	r4, [r5, #4]
 8016858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801685c:	b17b      	cbz	r3, 801687e <_fflush_r+0x42>
 801685e:	4621      	mov	r1, r4
 8016860:	4628      	mov	r0, r5
 8016862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016866:	f7ff bf63 	b.w	8016730 <__sflush_r>
 801686a:	4b07      	ldr	r3, [pc, #28]	; (8016888 <_fflush_r+0x4c>)
 801686c:	429c      	cmp	r4, r3
 801686e:	d101      	bne.n	8016874 <_fflush_r+0x38>
 8016870:	68ac      	ldr	r4, [r5, #8]
 8016872:	e7f1      	b.n	8016858 <_fflush_r+0x1c>
 8016874:	4b05      	ldr	r3, [pc, #20]	; (801688c <_fflush_r+0x50>)
 8016876:	429c      	cmp	r4, r3
 8016878:	bf08      	it	eq
 801687a:	68ec      	ldreq	r4, [r5, #12]
 801687c:	e7ec      	b.n	8016858 <_fflush_r+0x1c>
 801687e:	2000      	movs	r0, #0
 8016880:	bd38      	pop	{r3, r4, r5, pc}
 8016882:	bf00      	nop
 8016884:	080534dc 	.word	0x080534dc
 8016888:	080534fc 	.word	0x080534fc
 801688c:	080534bc 	.word	0x080534bc

08016890 <std>:
 8016890:	2300      	movs	r3, #0
 8016892:	b510      	push	{r4, lr}
 8016894:	4604      	mov	r4, r0
 8016896:	e9c0 3300 	strd	r3, r3, [r0]
 801689a:	6083      	str	r3, [r0, #8]
 801689c:	8181      	strh	r1, [r0, #12]
 801689e:	6643      	str	r3, [r0, #100]	; 0x64
 80168a0:	81c2      	strh	r2, [r0, #14]
 80168a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80168a6:	6183      	str	r3, [r0, #24]
 80168a8:	4619      	mov	r1, r3
 80168aa:	2208      	movs	r2, #8
 80168ac:	305c      	adds	r0, #92	; 0x5c
 80168ae:	f000 f980 	bl	8016bb2 <memset>
 80168b2:	4b05      	ldr	r3, [pc, #20]	; (80168c8 <std+0x38>)
 80168b4:	6263      	str	r3, [r4, #36]	; 0x24
 80168b6:	4b05      	ldr	r3, [pc, #20]	; (80168cc <std+0x3c>)
 80168b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80168ba:	4b05      	ldr	r3, [pc, #20]	; (80168d0 <std+0x40>)
 80168bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80168be:	4b05      	ldr	r3, [pc, #20]	; (80168d4 <std+0x44>)
 80168c0:	6224      	str	r4, [r4, #32]
 80168c2:	6323      	str	r3, [r4, #48]	; 0x30
 80168c4:	bd10      	pop	{r4, pc}
 80168c6:	bf00      	nop
 80168c8:	080173fd 	.word	0x080173fd
 80168cc:	0801741f 	.word	0x0801741f
 80168d0:	08017457 	.word	0x08017457
 80168d4:	0801747b 	.word	0x0801747b

080168d8 <_cleanup_r>:
 80168d8:	4901      	ldr	r1, [pc, #4]	; (80168e0 <_cleanup_r+0x8>)
 80168da:	f000 b885 	b.w	80169e8 <_fwalk_reent>
 80168de:	bf00      	nop
 80168e0:	0801683d 	.word	0x0801683d

080168e4 <__sfmoreglue>:
 80168e4:	b570      	push	{r4, r5, r6, lr}
 80168e6:	1e4a      	subs	r2, r1, #1
 80168e8:	2568      	movs	r5, #104	; 0x68
 80168ea:	4355      	muls	r5, r2
 80168ec:	460e      	mov	r6, r1
 80168ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80168f2:	f000 f9b5 	bl	8016c60 <_malloc_r>
 80168f6:	4604      	mov	r4, r0
 80168f8:	b140      	cbz	r0, 801690c <__sfmoreglue+0x28>
 80168fa:	2100      	movs	r1, #0
 80168fc:	e9c0 1600 	strd	r1, r6, [r0]
 8016900:	300c      	adds	r0, #12
 8016902:	60a0      	str	r0, [r4, #8]
 8016904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016908:	f000 f953 	bl	8016bb2 <memset>
 801690c:	4620      	mov	r0, r4
 801690e:	bd70      	pop	{r4, r5, r6, pc}

08016910 <__sinit>:
 8016910:	6983      	ldr	r3, [r0, #24]
 8016912:	b510      	push	{r4, lr}
 8016914:	4604      	mov	r4, r0
 8016916:	bb33      	cbnz	r3, 8016966 <__sinit+0x56>
 8016918:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801691c:	6503      	str	r3, [r0, #80]	; 0x50
 801691e:	4b12      	ldr	r3, [pc, #72]	; (8016968 <__sinit+0x58>)
 8016920:	4a12      	ldr	r2, [pc, #72]	; (801696c <__sinit+0x5c>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	6282      	str	r2, [r0, #40]	; 0x28
 8016926:	4298      	cmp	r0, r3
 8016928:	bf04      	itt	eq
 801692a:	2301      	moveq	r3, #1
 801692c:	6183      	streq	r3, [r0, #24]
 801692e:	f000 f81f 	bl	8016970 <__sfp>
 8016932:	6060      	str	r0, [r4, #4]
 8016934:	4620      	mov	r0, r4
 8016936:	f000 f81b 	bl	8016970 <__sfp>
 801693a:	60a0      	str	r0, [r4, #8]
 801693c:	4620      	mov	r0, r4
 801693e:	f000 f817 	bl	8016970 <__sfp>
 8016942:	2200      	movs	r2, #0
 8016944:	60e0      	str	r0, [r4, #12]
 8016946:	2104      	movs	r1, #4
 8016948:	6860      	ldr	r0, [r4, #4]
 801694a:	f7ff ffa1 	bl	8016890 <std>
 801694e:	2201      	movs	r2, #1
 8016950:	2109      	movs	r1, #9
 8016952:	68a0      	ldr	r0, [r4, #8]
 8016954:	f7ff ff9c 	bl	8016890 <std>
 8016958:	2202      	movs	r2, #2
 801695a:	2112      	movs	r1, #18
 801695c:	68e0      	ldr	r0, [r4, #12]
 801695e:	f7ff ff97 	bl	8016890 <std>
 8016962:	2301      	movs	r3, #1
 8016964:	61a3      	str	r3, [r4, #24]
 8016966:	bd10      	pop	{r4, pc}
 8016968:	0805351c 	.word	0x0805351c
 801696c:	080168d9 	.word	0x080168d9

08016970 <__sfp>:
 8016970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016972:	4b1b      	ldr	r3, [pc, #108]	; (80169e0 <__sfp+0x70>)
 8016974:	681e      	ldr	r6, [r3, #0]
 8016976:	69b3      	ldr	r3, [r6, #24]
 8016978:	4607      	mov	r7, r0
 801697a:	b913      	cbnz	r3, 8016982 <__sfp+0x12>
 801697c:	4630      	mov	r0, r6
 801697e:	f7ff ffc7 	bl	8016910 <__sinit>
 8016982:	3648      	adds	r6, #72	; 0x48
 8016984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016988:	3b01      	subs	r3, #1
 801698a:	d503      	bpl.n	8016994 <__sfp+0x24>
 801698c:	6833      	ldr	r3, [r6, #0]
 801698e:	b133      	cbz	r3, 801699e <__sfp+0x2e>
 8016990:	6836      	ldr	r6, [r6, #0]
 8016992:	e7f7      	b.n	8016984 <__sfp+0x14>
 8016994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016998:	b16d      	cbz	r5, 80169b6 <__sfp+0x46>
 801699a:	3468      	adds	r4, #104	; 0x68
 801699c:	e7f4      	b.n	8016988 <__sfp+0x18>
 801699e:	2104      	movs	r1, #4
 80169a0:	4638      	mov	r0, r7
 80169a2:	f7ff ff9f 	bl	80168e4 <__sfmoreglue>
 80169a6:	6030      	str	r0, [r6, #0]
 80169a8:	2800      	cmp	r0, #0
 80169aa:	d1f1      	bne.n	8016990 <__sfp+0x20>
 80169ac:	230c      	movs	r3, #12
 80169ae:	603b      	str	r3, [r7, #0]
 80169b0:	4604      	mov	r4, r0
 80169b2:	4620      	mov	r0, r4
 80169b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169b6:	4b0b      	ldr	r3, [pc, #44]	; (80169e4 <__sfp+0x74>)
 80169b8:	6665      	str	r5, [r4, #100]	; 0x64
 80169ba:	e9c4 5500 	strd	r5, r5, [r4]
 80169be:	60a5      	str	r5, [r4, #8]
 80169c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80169c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80169c8:	2208      	movs	r2, #8
 80169ca:	4629      	mov	r1, r5
 80169cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80169d0:	f000 f8ef 	bl	8016bb2 <memset>
 80169d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80169d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80169dc:	e7e9      	b.n	80169b2 <__sfp+0x42>
 80169de:	bf00      	nop
 80169e0:	0805351c 	.word	0x0805351c
 80169e4:	ffff0001 	.word	0xffff0001

080169e8 <_fwalk_reent>:
 80169e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169ec:	4680      	mov	r8, r0
 80169ee:	4689      	mov	r9, r1
 80169f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80169f4:	2600      	movs	r6, #0
 80169f6:	b914      	cbnz	r4, 80169fe <_fwalk_reent+0x16>
 80169f8:	4630      	mov	r0, r6
 80169fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016a02:	3f01      	subs	r7, #1
 8016a04:	d501      	bpl.n	8016a0a <_fwalk_reent+0x22>
 8016a06:	6824      	ldr	r4, [r4, #0]
 8016a08:	e7f5      	b.n	80169f6 <_fwalk_reent+0xe>
 8016a0a:	89ab      	ldrh	r3, [r5, #12]
 8016a0c:	2b01      	cmp	r3, #1
 8016a0e:	d907      	bls.n	8016a20 <_fwalk_reent+0x38>
 8016a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a14:	3301      	adds	r3, #1
 8016a16:	d003      	beq.n	8016a20 <_fwalk_reent+0x38>
 8016a18:	4629      	mov	r1, r5
 8016a1a:	4640      	mov	r0, r8
 8016a1c:	47c8      	blx	r9
 8016a1e:	4306      	orrs	r6, r0
 8016a20:	3568      	adds	r5, #104	; 0x68
 8016a22:	e7ee      	b.n	8016a02 <_fwalk_reent+0x1a>

08016a24 <__libc_init_array>:
 8016a24:	b570      	push	{r4, r5, r6, lr}
 8016a26:	4e0d      	ldr	r6, [pc, #52]	; (8016a5c <__libc_init_array+0x38>)
 8016a28:	4c0d      	ldr	r4, [pc, #52]	; (8016a60 <__libc_init_array+0x3c>)
 8016a2a:	1ba4      	subs	r4, r4, r6
 8016a2c:	10a4      	asrs	r4, r4, #2
 8016a2e:	2500      	movs	r5, #0
 8016a30:	42a5      	cmp	r5, r4
 8016a32:	d109      	bne.n	8016a48 <__libc_init_array+0x24>
 8016a34:	4e0b      	ldr	r6, [pc, #44]	; (8016a64 <__libc_init_array+0x40>)
 8016a36:	4c0c      	ldr	r4, [pc, #48]	; (8016a68 <__libc_init_array+0x44>)
 8016a38:	f002 f8a8 	bl	8018b8c <_init>
 8016a3c:	1ba4      	subs	r4, r4, r6
 8016a3e:	10a4      	asrs	r4, r4, #2
 8016a40:	2500      	movs	r5, #0
 8016a42:	42a5      	cmp	r5, r4
 8016a44:	d105      	bne.n	8016a52 <__libc_init_array+0x2e>
 8016a46:	bd70      	pop	{r4, r5, r6, pc}
 8016a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016a4c:	4798      	blx	r3
 8016a4e:	3501      	adds	r5, #1
 8016a50:	e7ee      	b.n	8016a30 <__libc_init_array+0xc>
 8016a52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016a56:	4798      	blx	r3
 8016a58:	3501      	adds	r5, #1
 8016a5a:	e7f2      	b.n	8016a42 <__libc_init_array+0x1e>
 8016a5c:	08053840 	.word	0x08053840
 8016a60:	08053840 	.word	0x08053840
 8016a64:	08053840 	.word	0x08053840
 8016a68:	08053844 	.word	0x08053844

08016a6c <__locale_ctype_ptr_l>:
 8016a6c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016a70:	4770      	bx	lr
	...

08016a74 <__locale_ctype_ptr>:
 8016a74:	4b04      	ldr	r3, [pc, #16]	; (8016a88 <__locale_ctype_ptr+0x14>)
 8016a76:	4a05      	ldr	r2, [pc, #20]	; (8016a8c <__locale_ctype_ptr+0x18>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	6a1b      	ldr	r3, [r3, #32]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	bf08      	it	eq
 8016a80:	4613      	moveq	r3, r2
 8016a82:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016a86:	4770      	bx	lr
 8016a88:	20000174 	.word	0x20000174
 8016a8c:	200001d8 	.word	0x200001d8

08016a90 <__swhatbuf_r>:
 8016a90:	b570      	push	{r4, r5, r6, lr}
 8016a92:	460e      	mov	r6, r1
 8016a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a98:	2900      	cmp	r1, #0
 8016a9a:	b096      	sub	sp, #88	; 0x58
 8016a9c:	4614      	mov	r4, r2
 8016a9e:	461d      	mov	r5, r3
 8016aa0:	da07      	bge.n	8016ab2 <__swhatbuf_r+0x22>
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	602b      	str	r3, [r5, #0]
 8016aa6:	89b3      	ldrh	r3, [r6, #12]
 8016aa8:	061a      	lsls	r2, r3, #24
 8016aaa:	d410      	bmi.n	8016ace <__swhatbuf_r+0x3e>
 8016aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ab0:	e00e      	b.n	8016ad0 <__swhatbuf_r+0x40>
 8016ab2:	466a      	mov	r2, sp
 8016ab4:	f000 fe74 	bl	80177a0 <_fstat_r>
 8016ab8:	2800      	cmp	r0, #0
 8016aba:	dbf2      	blt.n	8016aa2 <__swhatbuf_r+0x12>
 8016abc:	9a01      	ldr	r2, [sp, #4]
 8016abe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016ac2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016ac6:	425a      	negs	r2, r3
 8016ac8:	415a      	adcs	r2, r3
 8016aca:	602a      	str	r2, [r5, #0]
 8016acc:	e7ee      	b.n	8016aac <__swhatbuf_r+0x1c>
 8016ace:	2340      	movs	r3, #64	; 0x40
 8016ad0:	2000      	movs	r0, #0
 8016ad2:	6023      	str	r3, [r4, #0]
 8016ad4:	b016      	add	sp, #88	; 0x58
 8016ad6:	bd70      	pop	{r4, r5, r6, pc}

08016ad8 <__smakebuf_r>:
 8016ad8:	898b      	ldrh	r3, [r1, #12]
 8016ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016adc:	079d      	lsls	r5, r3, #30
 8016ade:	4606      	mov	r6, r0
 8016ae0:	460c      	mov	r4, r1
 8016ae2:	d507      	bpl.n	8016af4 <__smakebuf_r+0x1c>
 8016ae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016ae8:	6023      	str	r3, [r4, #0]
 8016aea:	6123      	str	r3, [r4, #16]
 8016aec:	2301      	movs	r3, #1
 8016aee:	6163      	str	r3, [r4, #20]
 8016af0:	b002      	add	sp, #8
 8016af2:	bd70      	pop	{r4, r5, r6, pc}
 8016af4:	ab01      	add	r3, sp, #4
 8016af6:	466a      	mov	r2, sp
 8016af8:	f7ff ffca 	bl	8016a90 <__swhatbuf_r>
 8016afc:	9900      	ldr	r1, [sp, #0]
 8016afe:	4605      	mov	r5, r0
 8016b00:	4630      	mov	r0, r6
 8016b02:	f000 f8ad 	bl	8016c60 <_malloc_r>
 8016b06:	b948      	cbnz	r0, 8016b1c <__smakebuf_r+0x44>
 8016b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b0c:	059a      	lsls	r2, r3, #22
 8016b0e:	d4ef      	bmi.n	8016af0 <__smakebuf_r+0x18>
 8016b10:	f023 0303 	bic.w	r3, r3, #3
 8016b14:	f043 0302 	orr.w	r3, r3, #2
 8016b18:	81a3      	strh	r3, [r4, #12]
 8016b1a:	e7e3      	b.n	8016ae4 <__smakebuf_r+0xc>
 8016b1c:	4b0d      	ldr	r3, [pc, #52]	; (8016b54 <__smakebuf_r+0x7c>)
 8016b1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b20:	89a3      	ldrh	r3, [r4, #12]
 8016b22:	6020      	str	r0, [r4, #0]
 8016b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b28:	81a3      	strh	r3, [r4, #12]
 8016b2a:	9b00      	ldr	r3, [sp, #0]
 8016b2c:	6163      	str	r3, [r4, #20]
 8016b2e:	9b01      	ldr	r3, [sp, #4]
 8016b30:	6120      	str	r0, [r4, #16]
 8016b32:	b15b      	cbz	r3, 8016b4c <__smakebuf_r+0x74>
 8016b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b38:	4630      	mov	r0, r6
 8016b3a:	f000 fe43 	bl	80177c4 <_isatty_r>
 8016b3e:	b128      	cbz	r0, 8016b4c <__smakebuf_r+0x74>
 8016b40:	89a3      	ldrh	r3, [r4, #12]
 8016b42:	f023 0303 	bic.w	r3, r3, #3
 8016b46:	f043 0301 	orr.w	r3, r3, #1
 8016b4a:	81a3      	strh	r3, [r4, #12]
 8016b4c:	89a3      	ldrh	r3, [r4, #12]
 8016b4e:	431d      	orrs	r5, r3
 8016b50:	81a5      	strh	r5, [r4, #12]
 8016b52:	e7cd      	b.n	8016af0 <__smakebuf_r+0x18>
 8016b54:	080168d9 	.word	0x080168d9

08016b58 <malloc>:
 8016b58:	4b02      	ldr	r3, [pc, #8]	; (8016b64 <malloc+0xc>)
 8016b5a:	4601      	mov	r1, r0
 8016b5c:	6818      	ldr	r0, [r3, #0]
 8016b5e:	f000 b87f 	b.w	8016c60 <_malloc_r>
 8016b62:	bf00      	nop
 8016b64:	20000174 	.word	0x20000174

08016b68 <free>:
 8016b68:	4b02      	ldr	r3, [pc, #8]	; (8016b74 <free+0xc>)
 8016b6a:	4601      	mov	r1, r0
 8016b6c:	6818      	ldr	r0, [r3, #0]
 8016b6e:	f000 b829 	b.w	8016bc4 <_free_r>
 8016b72:	bf00      	nop
 8016b74:	20000174 	.word	0x20000174

08016b78 <__ascii_mbtowc>:
 8016b78:	b082      	sub	sp, #8
 8016b7a:	b901      	cbnz	r1, 8016b7e <__ascii_mbtowc+0x6>
 8016b7c:	a901      	add	r1, sp, #4
 8016b7e:	b142      	cbz	r2, 8016b92 <__ascii_mbtowc+0x1a>
 8016b80:	b14b      	cbz	r3, 8016b96 <__ascii_mbtowc+0x1e>
 8016b82:	7813      	ldrb	r3, [r2, #0]
 8016b84:	600b      	str	r3, [r1, #0]
 8016b86:	7812      	ldrb	r2, [r2, #0]
 8016b88:	1c10      	adds	r0, r2, #0
 8016b8a:	bf18      	it	ne
 8016b8c:	2001      	movne	r0, #1
 8016b8e:	b002      	add	sp, #8
 8016b90:	4770      	bx	lr
 8016b92:	4610      	mov	r0, r2
 8016b94:	e7fb      	b.n	8016b8e <__ascii_mbtowc+0x16>
 8016b96:	f06f 0001 	mvn.w	r0, #1
 8016b9a:	e7f8      	b.n	8016b8e <__ascii_mbtowc+0x16>

08016b9c <memcpy>:
 8016b9c:	b510      	push	{r4, lr}
 8016b9e:	1e43      	subs	r3, r0, #1
 8016ba0:	440a      	add	r2, r1
 8016ba2:	4291      	cmp	r1, r2
 8016ba4:	d100      	bne.n	8016ba8 <memcpy+0xc>
 8016ba6:	bd10      	pop	{r4, pc}
 8016ba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016bb0:	e7f7      	b.n	8016ba2 <memcpy+0x6>

08016bb2 <memset>:
 8016bb2:	4402      	add	r2, r0
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	4293      	cmp	r3, r2
 8016bb8:	d100      	bne.n	8016bbc <memset+0xa>
 8016bba:	4770      	bx	lr
 8016bbc:	f803 1b01 	strb.w	r1, [r3], #1
 8016bc0:	e7f9      	b.n	8016bb6 <memset+0x4>
	...

08016bc4 <_free_r>:
 8016bc4:	b538      	push	{r3, r4, r5, lr}
 8016bc6:	4605      	mov	r5, r0
 8016bc8:	2900      	cmp	r1, #0
 8016bca:	d045      	beq.n	8016c58 <_free_r+0x94>
 8016bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bd0:	1f0c      	subs	r4, r1, #4
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	bfb8      	it	lt
 8016bd6:	18e4      	addlt	r4, r4, r3
 8016bd8:	f000 fe2f 	bl	801783a <__malloc_lock>
 8016bdc:	4a1f      	ldr	r2, [pc, #124]	; (8016c5c <_free_r+0x98>)
 8016bde:	6813      	ldr	r3, [r2, #0]
 8016be0:	4610      	mov	r0, r2
 8016be2:	b933      	cbnz	r3, 8016bf2 <_free_r+0x2e>
 8016be4:	6063      	str	r3, [r4, #4]
 8016be6:	6014      	str	r4, [r2, #0]
 8016be8:	4628      	mov	r0, r5
 8016bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bee:	f000 be25 	b.w	801783c <__malloc_unlock>
 8016bf2:	42a3      	cmp	r3, r4
 8016bf4:	d90c      	bls.n	8016c10 <_free_r+0x4c>
 8016bf6:	6821      	ldr	r1, [r4, #0]
 8016bf8:	1862      	adds	r2, r4, r1
 8016bfa:	4293      	cmp	r3, r2
 8016bfc:	bf04      	itt	eq
 8016bfe:	681a      	ldreq	r2, [r3, #0]
 8016c00:	685b      	ldreq	r3, [r3, #4]
 8016c02:	6063      	str	r3, [r4, #4]
 8016c04:	bf04      	itt	eq
 8016c06:	1852      	addeq	r2, r2, r1
 8016c08:	6022      	streq	r2, [r4, #0]
 8016c0a:	6004      	str	r4, [r0, #0]
 8016c0c:	e7ec      	b.n	8016be8 <_free_r+0x24>
 8016c0e:	4613      	mov	r3, r2
 8016c10:	685a      	ldr	r2, [r3, #4]
 8016c12:	b10a      	cbz	r2, 8016c18 <_free_r+0x54>
 8016c14:	42a2      	cmp	r2, r4
 8016c16:	d9fa      	bls.n	8016c0e <_free_r+0x4a>
 8016c18:	6819      	ldr	r1, [r3, #0]
 8016c1a:	1858      	adds	r0, r3, r1
 8016c1c:	42a0      	cmp	r0, r4
 8016c1e:	d10b      	bne.n	8016c38 <_free_r+0x74>
 8016c20:	6820      	ldr	r0, [r4, #0]
 8016c22:	4401      	add	r1, r0
 8016c24:	1858      	adds	r0, r3, r1
 8016c26:	4282      	cmp	r2, r0
 8016c28:	6019      	str	r1, [r3, #0]
 8016c2a:	d1dd      	bne.n	8016be8 <_free_r+0x24>
 8016c2c:	6810      	ldr	r0, [r2, #0]
 8016c2e:	6852      	ldr	r2, [r2, #4]
 8016c30:	605a      	str	r2, [r3, #4]
 8016c32:	4401      	add	r1, r0
 8016c34:	6019      	str	r1, [r3, #0]
 8016c36:	e7d7      	b.n	8016be8 <_free_r+0x24>
 8016c38:	d902      	bls.n	8016c40 <_free_r+0x7c>
 8016c3a:	230c      	movs	r3, #12
 8016c3c:	602b      	str	r3, [r5, #0]
 8016c3e:	e7d3      	b.n	8016be8 <_free_r+0x24>
 8016c40:	6820      	ldr	r0, [r4, #0]
 8016c42:	1821      	adds	r1, r4, r0
 8016c44:	428a      	cmp	r2, r1
 8016c46:	bf04      	itt	eq
 8016c48:	6811      	ldreq	r1, [r2, #0]
 8016c4a:	6852      	ldreq	r2, [r2, #4]
 8016c4c:	6062      	str	r2, [r4, #4]
 8016c4e:	bf04      	itt	eq
 8016c50:	1809      	addeq	r1, r1, r0
 8016c52:	6021      	streq	r1, [r4, #0]
 8016c54:	605c      	str	r4, [r3, #4]
 8016c56:	e7c7      	b.n	8016be8 <_free_r+0x24>
 8016c58:	bd38      	pop	{r3, r4, r5, pc}
 8016c5a:	bf00      	nop
 8016c5c:	20002138 	.word	0x20002138

08016c60 <_malloc_r>:
 8016c60:	b570      	push	{r4, r5, r6, lr}
 8016c62:	1ccd      	adds	r5, r1, #3
 8016c64:	f025 0503 	bic.w	r5, r5, #3
 8016c68:	3508      	adds	r5, #8
 8016c6a:	2d0c      	cmp	r5, #12
 8016c6c:	bf38      	it	cc
 8016c6e:	250c      	movcc	r5, #12
 8016c70:	2d00      	cmp	r5, #0
 8016c72:	4606      	mov	r6, r0
 8016c74:	db01      	blt.n	8016c7a <_malloc_r+0x1a>
 8016c76:	42a9      	cmp	r1, r5
 8016c78:	d903      	bls.n	8016c82 <_malloc_r+0x22>
 8016c7a:	230c      	movs	r3, #12
 8016c7c:	6033      	str	r3, [r6, #0]
 8016c7e:	2000      	movs	r0, #0
 8016c80:	bd70      	pop	{r4, r5, r6, pc}
 8016c82:	f000 fdda 	bl	801783a <__malloc_lock>
 8016c86:	4a21      	ldr	r2, [pc, #132]	; (8016d0c <_malloc_r+0xac>)
 8016c88:	6814      	ldr	r4, [r2, #0]
 8016c8a:	4621      	mov	r1, r4
 8016c8c:	b991      	cbnz	r1, 8016cb4 <_malloc_r+0x54>
 8016c8e:	4c20      	ldr	r4, [pc, #128]	; (8016d10 <_malloc_r+0xb0>)
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	b91b      	cbnz	r3, 8016c9c <_malloc_r+0x3c>
 8016c94:	4630      	mov	r0, r6
 8016c96:	f000 fb81 	bl	801739c <_sbrk_r>
 8016c9a:	6020      	str	r0, [r4, #0]
 8016c9c:	4629      	mov	r1, r5
 8016c9e:	4630      	mov	r0, r6
 8016ca0:	f000 fb7c 	bl	801739c <_sbrk_r>
 8016ca4:	1c43      	adds	r3, r0, #1
 8016ca6:	d124      	bne.n	8016cf2 <_malloc_r+0x92>
 8016ca8:	230c      	movs	r3, #12
 8016caa:	6033      	str	r3, [r6, #0]
 8016cac:	4630      	mov	r0, r6
 8016cae:	f000 fdc5 	bl	801783c <__malloc_unlock>
 8016cb2:	e7e4      	b.n	8016c7e <_malloc_r+0x1e>
 8016cb4:	680b      	ldr	r3, [r1, #0]
 8016cb6:	1b5b      	subs	r3, r3, r5
 8016cb8:	d418      	bmi.n	8016cec <_malloc_r+0x8c>
 8016cba:	2b0b      	cmp	r3, #11
 8016cbc:	d90f      	bls.n	8016cde <_malloc_r+0x7e>
 8016cbe:	600b      	str	r3, [r1, #0]
 8016cc0:	50cd      	str	r5, [r1, r3]
 8016cc2:	18cc      	adds	r4, r1, r3
 8016cc4:	4630      	mov	r0, r6
 8016cc6:	f000 fdb9 	bl	801783c <__malloc_unlock>
 8016cca:	f104 000b 	add.w	r0, r4, #11
 8016cce:	1d23      	adds	r3, r4, #4
 8016cd0:	f020 0007 	bic.w	r0, r0, #7
 8016cd4:	1ac3      	subs	r3, r0, r3
 8016cd6:	d0d3      	beq.n	8016c80 <_malloc_r+0x20>
 8016cd8:	425a      	negs	r2, r3
 8016cda:	50e2      	str	r2, [r4, r3]
 8016cdc:	e7d0      	b.n	8016c80 <_malloc_r+0x20>
 8016cde:	428c      	cmp	r4, r1
 8016ce0:	684b      	ldr	r3, [r1, #4]
 8016ce2:	bf16      	itet	ne
 8016ce4:	6063      	strne	r3, [r4, #4]
 8016ce6:	6013      	streq	r3, [r2, #0]
 8016ce8:	460c      	movne	r4, r1
 8016cea:	e7eb      	b.n	8016cc4 <_malloc_r+0x64>
 8016cec:	460c      	mov	r4, r1
 8016cee:	6849      	ldr	r1, [r1, #4]
 8016cf0:	e7cc      	b.n	8016c8c <_malloc_r+0x2c>
 8016cf2:	1cc4      	adds	r4, r0, #3
 8016cf4:	f024 0403 	bic.w	r4, r4, #3
 8016cf8:	42a0      	cmp	r0, r4
 8016cfa:	d005      	beq.n	8016d08 <_malloc_r+0xa8>
 8016cfc:	1a21      	subs	r1, r4, r0
 8016cfe:	4630      	mov	r0, r6
 8016d00:	f000 fb4c 	bl	801739c <_sbrk_r>
 8016d04:	3001      	adds	r0, #1
 8016d06:	d0cf      	beq.n	8016ca8 <_malloc_r+0x48>
 8016d08:	6025      	str	r5, [r4, #0]
 8016d0a:	e7db      	b.n	8016cc4 <_malloc_r+0x64>
 8016d0c:	20002138 	.word	0x20002138
 8016d10:	2000213c 	.word	0x2000213c

08016d14 <__sfputc_r>:
 8016d14:	6893      	ldr	r3, [r2, #8]
 8016d16:	3b01      	subs	r3, #1
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	b410      	push	{r4}
 8016d1c:	6093      	str	r3, [r2, #8]
 8016d1e:	da08      	bge.n	8016d32 <__sfputc_r+0x1e>
 8016d20:	6994      	ldr	r4, [r2, #24]
 8016d22:	42a3      	cmp	r3, r4
 8016d24:	db01      	blt.n	8016d2a <__sfputc_r+0x16>
 8016d26:	290a      	cmp	r1, #10
 8016d28:	d103      	bne.n	8016d32 <__sfputc_r+0x1e>
 8016d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d2e:	f000 bc47 	b.w	80175c0 <__swbuf_r>
 8016d32:	6813      	ldr	r3, [r2, #0]
 8016d34:	1c58      	adds	r0, r3, #1
 8016d36:	6010      	str	r0, [r2, #0]
 8016d38:	7019      	strb	r1, [r3, #0]
 8016d3a:	4608      	mov	r0, r1
 8016d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d40:	4770      	bx	lr

08016d42 <__sfputs_r>:
 8016d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d44:	4606      	mov	r6, r0
 8016d46:	460f      	mov	r7, r1
 8016d48:	4614      	mov	r4, r2
 8016d4a:	18d5      	adds	r5, r2, r3
 8016d4c:	42ac      	cmp	r4, r5
 8016d4e:	d101      	bne.n	8016d54 <__sfputs_r+0x12>
 8016d50:	2000      	movs	r0, #0
 8016d52:	e007      	b.n	8016d64 <__sfputs_r+0x22>
 8016d54:	463a      	mov	r2, r7
 8016d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d5a:	4630      	mov	r0, r6
 8016d5c:	f7ff ffda 	bl	8016d14 <__sfputc_r>
 8016d60:	1c43      	adds	r3, r0, #1
 8016d62:	d1f3      	bne.n	8016d4c <__sfputs_r+0xa>
 8016d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d68 <_vfiprintf_r>:
 8016d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d6c:	460c      	mov	r4, r1
 8016d6e:	b09d      	sub	sp, #116	; 0x74
 8016d70:	4617      	mov	r7, r2
 8016d72:	461d      	mov	r5, r3
 8016d74:	4606      	mov	r6, r0
 8016d76:	b118      	cbz	r0, 8016d80 <_vfiprintf_r+0x18>
 8016d78:	6983      	ldr	r3, [r0, #24]
 8016d7a:	b90b      	cbnz	r3, 8016d80 <_vfiprintf_r+0x18>
 8016d7c:	f7ff fdc8 	bl	8016910 <__sinit>
 8016d80:	4b7c      	ldr	r3, [pc, #496]	; (8016f74 <_vfiprintf_r+0x20c>)
 8016d82:	429c      	cmp	r4, r3
 8016d84:	d158      	bne.n	8016e38 <_vfiprintf_r+0xd0>
 8016d86:	6874      	ldr	r4, [r6, #4]
 8016d88:	89a3      	ldrh	r3, [r4, #12]
 8016d8a:	0718      	lsls	r0, r3, #28
 8016d8c:	d55e      	bpl.n	8016e4c <_vfiprintf_r+0xe4>
 8016d8e:	6923      	ldr	r3, [r4, #16]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d05b      	beq.n	8016e4c <_vfiprintf_r+0xe4>
 8016d94:	2300      	movs	r3, #0
 8016d96:	9309      	str	r3, [sp, #36]	; 0x24
 8016d98:	2320      	movs	r3, #32
 8016d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d9e:	2330      	movs	r3, #48	; 0x30
 8016da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016da4:	9503      	str	r5, [sp, #12]
 8016da6:	f04f 0b01 	mov.w	fp, #1
 8016daa:	46b8      	mov	r8, r7
 8016dac:	4645      	mov	r5, r8
 8016dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016db2:	b10b      	cbz	r3, 8016db8 <_vfiprintf_r+0x50>
 8016db4:	2b25      	cmp	r3, #37	; 0x25
 8016db6:	d154      	bne.n	8016e62 <_vfiprintf_r+0xfa>
 8016db8:	ebb8 0a07 	subs.w	sl, r8, r7
 8016dbc:	d00b      	beq.n	8016dd6 <_vfiprintf_r+0x6e>
 8016dbe:	4653      	mov	r3, sl
 8016dc0:	463a      	mov	r2, r7
 8016dc2:	4621      	mov	r1, r4
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	f7ff ffbc 	bl	8016d42 <__sfputs_r>
 8016dca:	3001      	adds	r0, #1
 8016dcc:	f000 80c2 	beq.w	8016f54 <_vfiprintf_r+0x1ec>
 8016dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dd2:	4453      	add	r3, sl
 8016dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8016dd6:	f898 3000 	ldrb.w	r3, [r8]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	f000 80ba 	beq.w	8016f54 <_vfiprintf_r+0x1ec>
 8016de0:	2300      	movs	r3, #0
 8016de2:	f04f 32ff 	mov.w	r2, #4294967295
 8016de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016dea:	9304      	str	r3, [sp, #16]
 8016dec:	9307      	str	r3, [sp, #28]
 8016dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016df2:	931a      	str	r3, [sp, #104]	; 0x68
 8016df4:	46a8      	mov	r8, r5
 8016df6:	2205      	movs	r2, #5
 8016df8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016dfc:	485e      	ldr	r0, [pc, #376]	; (8016f78 <_vfiprintf_r+0x210>)
 8016dfe:	f7e9 fa07 	bl	8000210 <memchr>
 8016e02:	9b04      	ldr	r3, [sp, #16]
 8016e04:	bb78      	cbnz	r0, 8016e66 <_vfiprintf_r+0xfe>
 8016e06:	06d9      	lsls	r1, r3, #27
 8016e08:	bf44      	itt	mi
 8016e0a:	2220      	movmi	r2, #32
 8016e0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e10:	071a      	lsls	r2, r3, #28
 8016e12:	bf44      	itt	mi
 8016e14:	222b      	movmi	r2, #43	; 0x2b
 8016e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e1a:	782a      	ldrb	r2, [r5, #0]
 8016e1c:	2a2a      	cmp	r2, #42	; 0x2a
 8016e1e:	d02a      	beq.n	8016e76 <_vfiprintf_r+0x10e>
 8016e20:	9a07      	ldr	r2, [sp, #28]
 8016e22:	46a8      	mov	r8, r5
 8016e24:	2000      	movs	r0, #0
 8016e26:	250a      	movs	r5, #10
 8016e28:	4641      	mov	r1, r8
 8016e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e2e:	3b30      	subs	r3, #48	; 0x30
 8016e30:	2b09      	cmp	r3, #9
 8016e32:	d969      	bls.n	8016f08 <_vfiprintf_r+0x1a0>
 8016e34:	b360      	cbz	r0, 8016e90 <_vfiprintf_r+0x128>
 8016e36:	e024      	b.n	8016e82 <_vfiprintf_r+0x11a>
 8016e38:	4b50      	ldr	r3, [pc, #320]	; (8016f7c <_vfiprintf_r+0x214>)
 8016e3a:	429c      	cmp	r4, r3
 8016e3c:	d101      	bne.n	8016e42 <_vfiprintf_r+0xda>
 8016e3e:	68b4      	ldr	r4, [r6, #8]
 8016e40:	e7a2      	b.n	8016d88 <_vfiprintf_r+0x20>
 8016e42:	4b4f      	ldr	r3, [pc, #316]	; (8016f80 <_vfiprintf_r+0x218>)
 8016e44:	429c      	cmp	r4, r3
 8016e46:	bf08      	it	eq
 8016e48:	68f4      	ldreq	r4, [r6, #12]
 8016e4a:	e79d      	b.n	8016d88 <_vfiprintf_r+0x20>
 8016e4c:	4621      	mov	r1, r4
 8016e4e:	4630      	mov	r0, r6
 8016e50:	f000 fc28 	bl	80176a4 <__swsetup_r>
 8016e54:	2800      	cmp	r0, #0
 8016e56:	d09d      	beq.n	8016d94 <_vfiprintf_r+0x2c>
 8016e58:	f04f 30ff 	mov.w	r0, #4294967295
 8016e5c:	b01d      	add	sp, #116	; 0x74
 8016e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e62:	46a8      	mov	r8, r5
 8016e64:	e7a2      	b.n	8016dac <_vfiprintf_r+0x44>
 8016e66:	4a44      	ldr	r2, [pc, #272]	; (8016f78 <_vfiprintf_r+0x210>)
 8016e68:	1a80      	subs	r0, r0, r2
 8016e6a:	fa0b f000 	lsl.w	r0, fp, r0
 8016e6e:	4318      	orrs	r0, r3
 8016e70:	9004      	str	r0, [sp, #16]
 8016e72:	4645      	mov	r5, r8
 8016e74:	e7be      	b.n	8016df4 <_vfiprintf_r+0x8c>
 8016e76:	9a03      	ldr	r2, [sp, #12]
 8016e78:	1d11      	adds	r1, r2, #4
 8016e7a:	6812      	ldr	r2, [r2, #0]
 8016e7c:	9103      	str	r1, [sp, #12]
 8016e7e:	2a00      	cmp	r2, #0
 8016e80:	db01      	blt.n	8016e86 <_vfiprintf_r+0x11e>
 8016e82:	9207      	str	r2, [sp, #28]
 8016e84:	e004      	b.n	8016e90 <_vfiprintf_r+0x128>
 8016e86:	4252      	negs	r2, r2
 8016e88:	f043 0302 	orr.w	r3, r3, #2
 8016e8c:	9207      	str	r2, [sp, #28]
 8016e8e:	9304      	str	r3, [sp, #16]
 8016e90:	f898 3000 	ldrb.w	r3, [r8]
 8016e94:	2b2e      	cmp	r3, #46	; 0x2e
 8016e96:	d10e      	bne.n	8016eb6 <_vfiprintf_r+0x14e>
 8016e98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8016e9e:	d138      	bne.n	8016f12 <_vfiprintf_r+0x1aa>
 8016ea0:	9b03      	ldr	r3, [sp, #12]
 8016ea2:	1d1a      	adds	r2, r3, #4
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	9203      	str	r2, [sp, #12]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	bfb8      	it	lt
 8016eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8016eb0:	f108 0802 	add.w	r8, r8, #2
 8016eb4:	9305      	str	r3, [sp, #20]
 8016eb6:	4d33      	ldr	r5, [pc, #204]	; (8016f84 <_vfiprintf_r+0x21c>)
 8016eb8:	f898 1000 	ldrb.w	r1, [r8]
 8016ebc:	2203      	movs	r2, #3
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	f7e9 f9a6 	bl	8000210 <memchr>
 8016ec4:	b140      	cbz	r0, 8016ed8 <_vfiprintf_r+0x170>
 8016ec6:	2340      	movs	r3, #64	; 0x40
 8016ec8:	1b40      	subs	r0, r0, r5
 8016eca:	fa03 f000 	lsl.w	r0, r3, r0
 8016ece:	9b04      	ldr	r3, [sp, #16]
 8016ed0:	4303      	orrs	r3, r0
 8016ed2:	f108 0801 	add.w	r8, r8, #1
 8016ed6:	9304      	str	r3, [sp, #16]
 8016ed8:	f898 1000 	ldrb.w	r1, [r8]
 8016edc:	482a      	ldr	r0, [pc, #168]	; (8016f88 <_vfiprintf_r+0x220>)
 8016ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ee2:	2206      	movs	r2, #6
 8016ee4:	f108 0701 	add.w	r7, r8, #1
 8016ee8:	f7e9 f992 	bl	8000210 <memchr>
 8016eec:	2800      	cmp	r0, #0
 8016eee:	d037      	beq.n	8016f60 <_vfiprintf_r+0x1f8>
 8016ef0:	4b26      	ldr	r3, [pc, #152]	; (8016f8c <_vfiprintf_r+0x224>)
 8016ef2:	bb1b      	cbnz	r3, 8016f3c <_vfiprintf_r+0x1d4>
 8016ef4:	9b03      	ldr	r3, [sp, #12]
 8016ef6:	3307      	adds	r3, #7
 8016ef8:	f023 0307 	bic.w	r3, r3, #7
 8016efc:	3308      	adds	r3, #8
 8016efe:	9303      	str	r3, [sp, #12]
 8016f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f02:	444b      	add	r3, r9
 8016f04:	9309      	str	r3, [sp, #36]	; 0x24
 8016f06:	e750      	b.n	8016daa <_vfiprintf_r+0x42>
 8016f08:	fb05 3202 	mla	r2, r5, r2, r3
 8016f0c:	2001      	movs	r0, #1
 8016f0e:	4688      	mov	r8, r1
 8016f10:	e78a      	b.n	8016e28 <_vfiprintf_r+0xc0>
 8016f12:	2300      	movs	r3, #0
 8016f14:	f108 0801 	add.w	r8, r8, #1
 8016f18:	9305      	str	r3, [sp, #20]
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	250a      	movs	r5, #10
 8016f1e:	4640      	mov	r0, r8
 8016f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f24:	3a30      	subs	r2, #48	; 0x30
 8016f26:	2a09      	cmp	r2, #9
 8016f28:	d903      	bls.n	8016f32 <_vfiprintf_r+0x1ca>
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d0c3      	beq.n	8016eb6 <_vfiprintf_r+0x14e>
 8016f2e:	9105      	str	r1, [sp, #20]
 8016f30:	e7c1      	b.n	8016eb6 <_vfiprintf_r+0x14e>
 8016f32:	fb05 2101 	mla	r1, r5, r1, r2
 8016f36:	2301      	movs	r3, #1
 8016f38:	4680      	mov	r8, r0
 8016f3a:	e7f0      	b.n	8016f1e <_vfiprintf_r+0x1b6>
 8016f3c:	ab03      	add	r3, sp, #12
 8016f3e:	9300      	str	r3, [sp, #0]
 8016f40:	4622      	mov	r2, r4
 8016f42:	4b13      	ldr	r3, [pc, #76]	; (8016f90 <_vfiprintf_r+0x228>)
 8016f44:	a904      	add	r1, sp, #16
 8016f46:	4630      	mov	r0, r6
 8016f48:	f3af 8000 	nop.w
 8016f4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f50:	4681      	mov	r9, r0
 8016f52:	d1d5      	bne.n	8016f00 <_vfiprintf_r+0x198>
 8016f54:	89a3      	ldrh	r3, [r4, #12]
 8016f56:	065b      	lsls	r3, r3, #25
 8016f58:	f53f af7e 	bmi.w	8016e58 <_vfiprintf_r+0xf0>
 8016f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f5e:	e77d      	b.n	8016e5c <_vfiprintf_r+0xf4>
 8016f60:	ab03      	add	r3, sp, #12
 8016f62:	9300      	str	r3, [sp, #0]
 8016f64:	4622      	mov	r2, r4
 8016f66:	4b0a      	ldr	r3, [pc, #40]	; (8016f90 <_vfiprintf_r+0x228>)
 8016f68:	a904      	add	r1, sp, #16
 8016f6a:	4630      	mov	r0, r6
 8016f6c:	f000 f888 	bl	8017080 <_printf_i>
 8016f70:	e7ec      	b.n	8016f4c <_vfiprintf_r+0x1e4>
 8016f72:	bf00      	nop
 8016f74:	080534dc 	.word	0x080534dc
 8016f78:	0805352a 	.word	0x0805352a
 8016f7c:	080534fc 	.word	0x080534fc
 8016f80:	080534bc 	.word	0x080534bc
 8016f84:	08053530 	.word	0x08053530
 8016f88:	08053534 	.word	0x08053534
 8016f8c:	00000000 	.word	0x00000000
 8016f90:	08016d43 	.word	0x08016d43

08016f94 <_printf_common>:
 8016f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f98:	4691      	mov	r9, r2
 8016f9a:	461f      	mov	r7, r3
 8016f9c:	688a      	ldr	r2, [r1, #8]
 8016f9e:	690b      	ldr	r3, [r1, #16]
 8016fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016fa4:	4293      	cmp	r3, r2
 8016fa6:	bfb8      	it	lt
 8016fa8:	4613      	movlt	r3, r2
 8016faa:	f8c9 3000 	str.w	r3, [r9]
 8016fae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016fb2:	4606      	mov	r6, r0
 8016fb4:	460c      	mov	r4, r1
 8016fb6:	b112      	cbz	r2, 8016fbe <_printf_common+0x2a>
 8016fb8:	3301      	adds	r3, #1
 8016fba:	f8c9 3000 	str.w	r3, [r9]
 8016fbe:	6823      	ldr	r3, [r4, #0]
 8016fc0:	0699      	lsls	r1, r3, #26
 8016fc2:	bf42      	ittt	mi
 8016fc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016fc8:	3302      	addmi	r3, #2
 8016fca:	f8c9 3000 	strmi.w	r3, [r9]
 8016fce:	6825      	ldr	r5, [r4, #0]
 8016fd0:	f015 0506 	ands.w	r5, r5, #6
 8016fd4:	d107      	bne.n	8016fe6 <_printf_common+0x52>
 8016fd6:	f104 0a19 	add.w	sl, r4, #25
 8016fda:	68e3      	ldr	r3, [r4, #12]
 8016fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8016fe0:	1a9b      	subs	r3, r3, r2
 8016fe2:	42ab      	cmp	r3, r5
 8016fe4:	dc28      	bgt.n	8017038 <_printf_common+0xa4>
 8016fe6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016fea:	6822      	ldr	r2, [r4, #0]
 8016fec:	3300      	adds	r3, #0
 8016fee:	bf18      	it	ne
 8016ff0:	2301      	movne	r3, #1
 8016ff2:	0692      	lsls	r2, r2, #26
 8016ff4:	d42d      	bmi.n	8017052 <_printf_common+0xbe>
 8016ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016ffa:	4639      	mov	r1, r7
 8016ffc:	4630      	mov	r0, r6
 8016ffe:	47c0      	blx	r8
 8017000:	3001      	adds	r0, #1
 8017002:	d020      	beq.n	8017046 <_printf_common+0xb2>
 8017004:	6823      	ldr	r3, [r4, #0]
 8017006:	68e5      	ldr	r5, [r4, #12]
 8017008:	f8d9 2000 	ldr.w	r2, [r9]
 801700c:	f003 0306 	and.w	r3, r3, #6
 8017010:	2b04      	cmp	r3, #4
 8017012:	bf08      	it	eq
 8017014:	1aad      	subeq	r5, r5, r2
 8017016:	68a3      	ldr	r3, [r4, #8]
 8017018:	6922      	ldr	r2, [r4, #16]
 801701a:	bf0c      	ite	eq
 801701c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017020:	2500      	movne	r5, #0
 8017022:	4293      	cmp	r3, r2
 8017024:	bfc4      	itt	gt
 8017026:	1a9b      	subgt	r3, r3, r2
 8017028:	18ed      	addgt	r5, r5, r3
 801702a:	f04f 0900 	mov.w	r9, #0
 801702e:	341a      	adds	r4, #26
 8017030:	454d      	cmp	r5, r9
 8017032:	d11a      	bne.n	801706a <_printf_common+0xd6>
 8017034:	2000      	movs	r0, #0
 8017036:	e008      	b.n	801704a <_printf_common+0xb6>
 8017038:	2301      	movs	r3, #1
 801703a:	4652      	mov	r2, sl
 801703c:	4639      	mov	r1, r7
 801703e:	4630      	mov	r0, r6
 8017040:	47c0      	blx	r8
 8017042:	3001      	adds	r0, #1
 8017044:	d103      	bne.n	801704e <_printf_common+0xba>
 8017046:	f04f 30ff 	mov.w	r0, #4294967295
 801704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801704e:	3501      	adds	r5, #1
 8017050:	e7c3      	b.n	8016fda <_printf_common+0x46>
 8017052:	18e1      	adds	r1, r4, r3
 8017054:	1c5a      	adds	r2, r3, #1
 8017056:	2030      	movs	r0, #48	; 0x30
 8017058:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801705c:	4422      	add	r2, r4
 801705e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017062:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017066:	3302      	adds	r3, #2
 8017068:	e7c5      	b.n	8016ff6 <_printf_common+0x62>
 801706a:	2301      	movs	r3, #1
 801706c:	4622      	mov	r2, r4
 801706e:	4639      	mov	r1, r7
 8017070:	4630      	mov	r0, r6
 8017072:	47c0      	blx	r8
 8017074:	3001      	adds	r0, #1
 8017076:	d0e6      	beq.n	8017046 <_printf_common+0xb2>
 8017078:	f109 0901 	add.w	r9, r9, #1
 801707c:	e7d8      	b.n	8017030 <_printf_common+0x9c>
	...

08017080 <_printf_i>:
 8017080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017084:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017088:	460c      	mov	r4, r1
 801708a:	7e09      	ldrb	r1, [r1, #24]
 801708c:	b085      	sub	sp, #20
 801708e:	296e      	cmp	r1, #110	; 0x6e
 8017090:	4617      	mov	r7, r2
 8017092:	4606      	mov	r6, r0
 8017094:	4698      	mov	r8, r3
 8017096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017098:	f000 80b3 	beq.w	8017202 <_printf_i+0x182>
 801709c:	d822      	bhi.n	80170e4 <_printf_i+0x64>
 801709e:	2963      	cmp	r1, #99	; 0x63
 80170a0:	d036      	beq.n	8017110 <_printf_i+0x90>
 80170a2:	d80a      	bhi.n	80170ba <_printf_i+0x3a>
 80170a4:	2900      	cmp	r1, #0
 80170a6:	f000 80b9 	beq.w	801721c <_printf_i+0x19c>
 80170aa:	2958      	cmp	r1, #88	; 0x58
 80170ac:	f000 8083 	beq.w	80171b6 <_printf_i+0x136>
 80170b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80170b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80170b8:	e032      	b.n	8017120 <_printf_i+0xa0>
 80170ba:	2964      	cmp	r1, #100	; 0x64
 80170bc:	d001      	beq.n	80170c2 <_printf_i+0x42>
 80170be:	2969      	cmp	r1, #105	; 0x69
 80170c0:	d1f6      	bne.n	80170b0 <_printf_i+0x30>
 80170c2:	6820      	ldr	r0, [r4, #0]
 80170c4:	6813      	ldr	r3, [r2, #0]
 80170c6:	0605      	lsls	r5, r0, #24
 80170c8:	f103 0104 	add.w	r1, r3, #4
 80170cc:	d52a      	bpl.n	8017124 <_printf_i+0xa4>
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	6011      	str	r1, [r2, #0]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	da03      	bge.n	80170de <_printf_i+0x5e>
 80170d6:	222d      	movs	r2, #45	; 0x2d
 80170d8:	425b      	negs	r3, r3
 80170da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80170de:	486f      	ldr	r0, [pc, #444]	; (801729c <_printf_i+0x21c>)
 80170e0:	220a      	movs	r2, #10
 80170e2:	e039      	b.n	8017158 <_printf_i+0xd8>
 80170e4:	2973      	cmp	r1, #115	; 0x73
 80170e6:	f000 809d 	beq.w	8017224 <_printf_i+0x1a4>
 80170ea:	d808      	bhi.n	80170fe <_printf_i+0x7e>
 80170ec:	296f      	cmp	r1, #111	; 0x6f
 80170ee:	d020      	beq.n	8017132 <_printf_i+0xb2>
 80170f0:	2970      	cmp	r1, #112	; 0x70
 80170f2:	d1dd      	bne.n	80170b0 <_printf_i+0x30>
 80170f4:	6823      	ldr	r3, [r4, #0]
 80170f6:	f043 0320 	orr.w	r3, r3, #32
 80170fa:	6023      	str	r3, [r4, #0]
 80170fc:	e003      	b.n	8017106 <_printf_i+0x86>
 80170fe:	2975      	cmp	r1, #117	; 0x75
 8017100:	d017      	beq.n	8017132 <_printf_i+0xb2>
 8017102:	2978      	cmp	r1, #120	; 0x78
 8017104:	d1d4      	bne.n	80170b0 <_printf_i+0x30>
 8017106:	2378      	movs	r3, #120	; 0x78
 8017108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801710c:	4864      	ldr	r0, [pc, #400]	; (80172a0 <_printf_i+0x220>)
 801710e:	e055      	b.n	80171bc <_printf_i+0x13c>
 8017110:	6813      	ldr	r3, [r2, #0]
 8017112:	1d19      	adds	r1, r3, #4
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	6011      	str	r1, [r2, #0]
 8017118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801711c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017120:	2301      	movs	r3, #1
 8017122:	e08c      	b.n	801723e <_printf_i+0x1be>
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	6011      	str	r1, [r2, #0]
 8017128:	f010 0f40 	tst.w	r0, #64	; 0x40
 801712c:	bf18      	it	ne
 801712e:	b21b      	sxthne	r3, r3
 8017130:	e7cf      	b.n	80170d2 <_printf_i+0x52>
 8017132:	6813      	ldr	r3, [r2, #0]
 8017134:	6825      	ldr	r5, [r4, #0]
 8017136:	1d18      	adds	r0, r3, #4
 8017138:	6010      	str	r0, [r2, #0]
 801713a:	0628      	lsls	r0, r5, #24
 801713c:	d501      	bpl.n	8017142 <_printf_i+0xc2>
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	e002      	b.n	8017148 <_printf_i+0xc8>
 8017142:	0668      	lsls	r0, r5, #25
 8017144:	d5fb      	bpl.n	801713e <_printf_i+0xbe>
 8017146:	881b      	ldrh	r3, [r3, #0]
 8017148:	4854      	ldr	r0, [pc, #336]	; (801729c <_printf_i+0x21c>)
 801714a:	296f      	cmp	r1, #111	; 0x6f
 801714c:	bf14      	ite	ne
 801714e:	220a      	movne	r2, #10
 8017150:	2208      	moveq	r2, #8
 8017152:	2100      	movs	r1, #0
 8017154:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017158:	6865      	ldr	r5, [r4, #4]
 801715a:	60a5      	str	r5, [r4, #8]
 801715c:	2d00      	cmp	r5, #0
 801715e:	f2c0 8095 	blt.w	801728c <_printf_i+0x20c>
 8017162:	6821      	ldr	r1, [r4, #0]
 8017164:	f021 0104 	bic.w	r1, r1, #4
 8017168:	6021      	str	r1, [r4, #0]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d13d      	bne.n	80171ea <_printf_i+0x16a>
 801716e:	2d00      	cmp	r5, #0
 8017170:	f040 808e 	bne.w	8017290 <_printf_i+0x210>
 8017174:	4665      	mov	r5, ip
 8017176:	2a08      	cmp	r2, #8
 8017178:	d10b      	bne.n	8017192 <_printf_i+0x112>
 801717a:	6823      	ldr	r3, [r4, #0]
 801717c:	07db      	lsls	r3, r3, #31
 801717e:	d508      	bpl.n	8017192 <_printf_i+0x112>
 8017180:	6923      	ldr	r3, [r4, #16]
 8017182:	6862      	ldr	r2, [r4, #4]
 8017184:	429a      	cmp	r2, r3
 8017186:	bfde      	ittt	le
 8017188:	2330      	movle	r3, #48	; 0x30
 801718a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801718e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017192:	ebac 0305 	sub.w	r3, ip, r5
 8017196:	6123      	str	r3, [r4, #16]
 8017198:	f8cd 8000 	str.w	r8, [sp]
 801719c:	463b      	mov	r3, r7
 801719e:	aa03      	add	r2, sp, #12
 80171a0:	4621      	mov	r1, r4
 80171a2:	4630      	mov	r0, r6
 80171a4:	f7ff fef6 	bl	8016f94 <_printf_common>
 80171a8:	3001      	adds	r0, #1
 80171aa:	d14d      	bne.n	8017248 <_printf_i+0x1c8>
 80171ac:	f04f 30ff 	mov.w	r0, #4294967295
 80171b0:	b005      	add	sp, #20
 80171b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171b6:	4839      	ldr	r0, [pc, #228]	; (801729c <_printf_i+0x21c>)
 80171b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80171bc:	6813      	ldr	r3, [r2, #0]
 80171be:	6821      	ldr	r1, [r4, #0]
 80171c0:	1d1d      	adds	r5, r3, #4
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	6015      	str	r5, [r2, #0]
 80171c6:	060a      	lsls	r2, r1, #24
 80171c8:	d50b      	bpl.n	80171e2 <_printf_i+0x162>
 80171ca:	07ca      	lsls	r2, r1, #31
 80171cc:	bf44      	itt	mi
 80171ce:	f041 0120 	orrmi.w	r1, r1, #32
 80171d2:	6021      	strmi	r1, [r4, #0]
 80171d4:	b91b      	cbnz	r3, 80171de <_printf_i+0x15e>
 80171d6:	6822      	ldr	r2, [r4, #0]
 80171d8:	f022 0220 	bic.w	r2, r2, #32
 80171dc:	6022      	str	r2, [r4, #0]
 80171de:	2210      	movs	r2, #16
 80171e0:	e7b7      	b.n	8017152 <_printf_i+0xd2>
 80171e2:	064d      	lsls	r5, r1, #25
 80171e4:	bf48      	it	mi
 80171e6:	b29b      	uxthmi	r3, r3
 80171e8:	e7ef      	b.n	80171ca <_printf_i+0x14a>
 80171ea:	4665      	mov	r5, ip
 80171ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80171f0:	fb02 3311 	mls	r3, r2, r1, r3
 80171f4:	5cc3      	ldrb	r3, [r0, r3]
 80171f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80171fa:	460b      	mov	r3, r1
 80171fc:	2900      	cmp	r1, #0
 80171fe:	d1f5      	bne.n	80171ec <_printf_i+0x16c>
 8017200:	e7b9      	b.n	8017176 <_printf_i+0xf6>
 8017202:	6813      	ldr	r3, [r2, #0]
 8017204:	6825      	ldr	r5, [r4, #0]
 8017206:	6961      	ldr	r1, [r4, #20]
 8017208:	1d18      	adds	r0, r3, #4
 801720a:	6010      	str	r0, [r2, #0]
 801720c:	0628      	lsls	r0, r5, #24
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	d501      	bpl.n	8017216 <_printf_i+0x196>
 8017212:	6019      	str	r1, [r3, #0]
 8017214:	e002      	b.n	801721c <_printf_i+0x19c>
 8017216:	066a      	lsls	r2, r5, #25
 8017218:	d5fb      	bpl.n	8017212 <_printf_i+0x192>
 801721a:	8019      	strh	r1, [r3, #0]
 801721c:	2300      	movs	r3, #0
 801721e:	6123      	str	r3, [r4, #16]
 8017220:	4665      	mov	r5, ip
 8017222:	e7b9      	b.n	8017198 <_printf_i+0x118>
 8017224:	6813      	ldr	r3, [r2, #0]
 8017226:	1d19      	adds	r1, r3, #4
 8017228:	6011      	str	r1, [r2, #0]
 801722a:	681d      	ldr	r5, [r3, #0]
 801722c:	6862      	ldr	r2, [r4, #4]
 801722e:	2100      	movs	r1, #0
 8017230:	4628      	mov	r0, r5
 8017232:	f7e8 ffed 	bl	8000210 <memchr>
 8017236:	b108      	cbz	r0, 801723c <_printf_i+0x1bc>
 8017238:	1b40      	subs	r0, r0, r5
 801723a:	6060      	str	r0, [r4, #4]
 801723c:	6863      	ldr	r3, [r4, #4]
 801723e:	6123      	str	r3, [r4, #16]
 8017240:	2300      	movs	r3, #0
 8017242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017246:	e7a7      	b.n	8017198 <_printf_i+0x118>
 8017248:	6923      	ldr	r3, [r4, #16]
 801724a:	462a      	mov	r2, r5
 801724c:	4639      	mov	r1, r7
 801724e:	4630      	mov	r0, r6
 8017250:	47c0      	blx	r8
 8017252:	3001      	adds	r0, #1
 8017254:	d0aa      	beq.n	80171ac <_printf_i+0x12c>
 8017256:	6823      	ldr	r3, [r4, #0]
 8017258:	079b      	lsls	r3, r3, #30
 801725a:	d413      	bmi.n	8017284 <_printf_i+0x204>
 801725c:	68e0      	ldr	r0, [r4, #12]
 801725e:	9b03      	ldr	r3, [sp, #12]
 8017260:	4298      	cmp	r0, r3
 8017262:	bfb8      	it	lt
 8017264:	4618      	movlt	r0, r3
 8017266:	e7a3      	b.n	80171b0 <_printf_i+0x130>
 8017268:	2301      	movs	r3, #1
 801726a:	464a      	mov	r2, r9
 801726c:	4639      	mov	r1, r7
 801726e:	4630      	mov	r0, r6
 8017270:	47c0      	blx	r8
 8017272:	3001      	adds	r0, #1
 8017274:	d09a      	beq.n	80171ac <_printf_i+0x12c>
 8017276:	3501      	adds	r5, #1
 8017278:	68e3      	ldr	r3, [r4, #12]
 801727a:	9a03      	ldr	r2, [sp, #12]
 801727c:	1a9b      	subs	r3, r3, r2
 801727e:	42ab      	cmp	r3, r5
 8017280:	dcf2      	bgt.n	8017268 <_printf_i+0x1e8>
 8017282:	e7eb      	b.n	801725c <_printf_i+0x1dc>
 8017284:	2500      	movs	r5, #0
 8017286:	f104 0919 	add.w	r9, r4, #25
 801728a:	e7f5      	b.n	8017278 <_printf_i+0x1f8>
 801728c:	2b00      	cmp	r3, #0
 801728e:	d1ac      	bne.n	80171ea <_printf_i+0x16a>
 8017290:	7803      	ldrb	r3, [r0, #0]
 8017292:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017296:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801729a:	e76c      	b.n	8017176 <_printf_i+0xf6>
 801729c:	0805353b 	.word	0x0805353b
 80172a0:	0805354c 	.word	0x0805354c

080172a4 <iprintf>:
 80172a4:	b40f      	push	{r0, r1, r2, r3}
 80172a6:	4b0a      	ldr	r3, [pc, #40]	; (80172d0 <iprintf+0x2c>)
 80172a8:	b513      	push	{r0, r1, r4, lr}
 80172aa:	681c      	ldr	r4, [r3, #0]
 80172ac:	b124      	cbz	r4, 80172b8 <iprintf+0x14>
 80172ae:	69a3      	ldr	r3, [r4, #24]
 80172b0:	b913      	cbnz	r3, 80172b8 <iprintf+0x14>
 80172b2:	4620      	mov	r0, r4
 80172b4:	f7ff fb2c 	bl	8016910 <__sinit>
 80172b8:	ab05      	add	r3, sp, #20
 80172ba:	9a04      	ldr	r2, [sp, #16]
 80172bc:	68a1      	ldr	r1, [r4, #8]
 80172be:	9301      	str	r3, [sp, #4]
 80172c0:	4620      	mov	r0, r4
 80172c2:	f7ff fd51 	bl	8016d68 <_vfiprintf_r>
 80172c6:	b002      	add	sp, #8
 80172c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172cc:	b004      	add	sp, #16
 80172ce:	4770      	bx	lr
 80172d0:	20000174 	.word	0x20000174

080172d4 <_puts_r>:
 80172d4:	b570      	push	{r4, r5, r6, lr}
 80172d6:	460e      	mov	r6, r1
 80172d8:	4605      	mov	r5, r0
 80172da:	b118      	cbz	r0, 80172e4 <_puts_r+0x10>
 80172dc:	6983      	ldr	r3, [r0, #24]
 80172de:	b90b      	cbnz	r3, 80172e4 <_puts_r+0x10>
 80172e0:	f7ff fb16 	bl	8016910 <__sinit>
 80172e4:	69ab      	ldr	r3, [r5, #24]
 80172e6:	68ac      	ldr	r4, [r5, #8]
 80172e8:	b913      	cbnz	r3, 80172f0 <_puts_r+0x1c>
 80172ea:	4628      	mov	r0, r5
 80172ec:	f7ff fb10 	bl	8016910 <__sinit>
 80172f0:	4b23      	ldr	r3, [pc, #140]	; (8017380 <_puts_r+0xac>)
 80172f2:	429c      	cmp	r4, r3
 80172f4:	d117      	bne.n	8017326 <_puts_r+0x52>
 80172f6:	686c      	ldr	r4, [r5, #4]
 80172f8:	89a3      	ldrh	r3, [r4, #12]
 80172fa:	071b      	lsls	r3, r3, #28
 80172fc:	d51d      	bpl.n	801733a <_puts_r+0x66>
 80172fe:	6923      	ldr	r3, [r4, #16]
 8017300:	b1db      	cbz	r3, 801733a <_puts_r+0x66>
 8017302:	3e01      	subs	r6, #1
 8017304:	68a3      	ldr	r3, [r4, #8]
 8017306:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801730a:	3b01      	subs	r3, #1
 801730c:	60a3      	str	r3, [r4, #8]
 801730e:	b9e9      	cbnz	r1, 801734c <_puts_r+0x78>
 8017310:	2b00      	cmp	r3, #0
 8017312:	da2e      	bge.n	8017372 <_puts_r+0x9e>
 8017314:	4622      	mov	r2, r4
 8017316:	210a      	movs	r1, #10
 8017318:	4628      	mov	r0, r5
 801731a:	f000 f951 	bl	80175c0 <__swbuf_r>
 801731e:	3001      	adds	r0, #1
 8017320:	d011      	beq.n	8017346 <_puts_r+0x72>
 8017322:	200a      	movs	r0, #10
 8017324:	e011      	b.n	801734a <_puts_r+0x76>
 8017326:	4b17      	ldr	r3, [pc, #92]	; (8017384 <_puts_r+0xb0>)
 8017328:	429c      	cmp	r4, r3
 801732a:	d101      	bne.n	8017330 <_puts_r+0x5c>
 801732c:	68ac      	ldr	r4, [r5, #8]
 801732e:	e7e3      	b.n	80172f8 <_puts_r+0x24>
 8017330:	4b15      	ldr	r3, [pc, #84]	; (8017388 <_puts_r+0xb4>)
 8017332:	429c      	cmp	r4, r3
 8017334:	bf08      	it	eq
 8017336:	68ec      	ldreq	r4, [r5, #12]
 8017338:	e7de      	b.n	80172f8 <_puts_r+0x24>
 801733a:	4621      	mov	r1, r4
 801733c:	4628      	mov	r0, r5
 801733e:	f000 f9b1 	bl	80176a4 <__swsetup_r>
 8017342:	2800      	cmp	r0, #0
 8017344:	d0dd      	beq.n	8017302 <_puts_r+0x2e>
 8017346:	f04f 30ff 	mov.w	r0, #4294967295
 801734a:	bd70      	pop	{r4, r5, r6, pc}
 801734c:	2b00      	cmp	r3, #0
 801734e:	da04      	bge.n	801735a <_puts_r+0x86>
 8017350:	69a2      	ldr	r2, [r4, #24]
 8017352:	429a      	cmp	r2, r3
 8017354:	dc06      	bgt.n	8017364 <_puts_r+0x90>
 8017356:	290a      	cmp	r1, #10
 8017358:	d004      	beq.n	8017364 <_puts_r+0x90>
 801735a:	6823      	ldr	r3, [r4, #0]
 801735c:	1c5a      	adds	r2, r3, #1
 801735e:	6022      	str	r2, [r4, #0]
 8017360:	7019      	strb	r1, [r3, #0]
 8017362:	e7cf      	b.n	8017304 <_puts_r+0x30>
 8017364:	4622      	mov	r2, r4
 8017366:	4628      	mov	r0, r5
 8017368:	f000 f92a 	bl	80175c0 <__swbuf_r>
 801736c:	3001      	adds	r0, #1
 801736e:	d1c9      	bne.n	8017304 <_puts_r+0x30>
 8017370:	e7e9      	b.n	8017346 <_puts_r+0x72>
 8017372:	6823      	ldr	r3, [r4, #0]
 8017374:	200a      	movs	r0, #10
 8017376:	1c5a      	adds	r2, r3, #1
 8017378:	6022      	str	r2, [r4, #0]
 801737a:	7018      	strb	r0, [r3, #0]
 801737c:	e7e5      	b.n	801734a <_puts_r+0x76>
 801737e:	bf00      	nop
 8017380:	080534dc 	.word	0x080534dc
 8017384:	080534fc 	.word	0x080534fc
 8017388:	080534bc 	.word	0x080534bc

0801738c <puts>:
 801738c:	4b02      	ldr	r3, [pc, #8]	; (8017398 <puts+0xc>)
 801738e:	4601      	mov	r1, r0
 8017390:	6818      	ldr	r0, [r3, #0]
 8017392:	f7ff bf9f 	b.w	80172d4 <_puts_r>
 8017396:	bf00      	nop
 8017398:	20000174 	.word	0x20000174

0801739c <_sbrk_r>:
 801739c:	b538      	push	{r3, r4, r5, lr}
 801739e:	4c06      	ldr	r4, [pc, #24]	; (80173b8 <_sbrk_r+0x1c>)
 80173a0:	2300      	movs	r3, #0
 80173a2:	4605      	mov	r5, r0
 80173a4:	4608      	mov	r0, r1
 80173a6:	6023      	str	r3, [r4, #0]
 80173a8:	f7ec fdda 	bl	8003f60 <_sbrk>
 80173ac:	1c43      	adds	r3, r0, #1
 80173ae:	d102      	bne.n	80173b6 <_sbrk_r+0x1a>
 80173b0:	6823      	ldr	r3, [r4, #0]
 80173b2:	b103      	cbz	r3, 80173b6 <_sbrk_r+0x1a>
 80173b4:	602b      	str	r3, [r5, #0]
 80173b6:	bd38      	pop	{r3, r4, r5, pc}
 80173b8:	2000ba88 	.word	0x2000ba88

080173bc <siprintf>:
 80173bc:	b40e      	push	{r1, r2, r3}
 80173be:	b500      	push	{lr}
 80173c0:	b09c      	sub	sp, #112	; 0x70
 80173c2:	ab1d      	add	r3, sp, #116	; 0x74
 80173c4:	9002      	str	r0, [sp, #8]
 80173c6:	9006      	str	r0, [sp, #24]
 80173c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80173cc:	4809      	ldr	r0, [pc, #36]	; (80173f4 <siprintf+0x38>)
 80173ce:	9107      	str	r1, [sp, #28]
 80173d0:	9104      	str	r1, [sp, #16]
 80173d2:	4909      	ldr	r1, [pc, #36]	; (80173f8 <siprintf+0x3c>)
 80173d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80173d8:	9105      	str	r1, [sp, #20]
 80173da:	6800      	ldr	r0, [r0, #0]
 80173dc:	9301      	str	r3, [sp, #4]
 80173de:	a902      	add	r1, sp, #8
 80173e0:	f000 faae 	bl	8017940 <_svfiprintf_r>
 80173e4:	9b02      	ldr	r3, [sp, #8]
 80173e6:	2200      	movs	r2, #0
 80173e8:	701a      	strb	r2, [r3, #0]
 80173ea:	b01c      	add	sp, #112	; 0x70
 80173ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80173f0:	b003      	add	sp, #12
 80173f2:	4770      	bx	lr
 80173f4:	20000174 	.word	0x20000174
 80173f8:	ffff0208 	.word	0xffff0208

080173fc <__sread>:
 80173fc:	b510      	push	{r4, lr}
 80173fe:	460c      	mov	r4, r1
 8017400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017404:	f000 fb94 	bl	8017b30 <_read_r>
 8017408:	2800      	cmp	r0, #0
 801740a:	bfab      	itete	ge
 801740c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801740e:	89a3      	ldrhlt	r3, [r4, #12]
 8017410:	181b      	addge	r3, r3, r0
 8017412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017416:	bfac      	ite	ge
 8017418:	6563      	strge	r3, [r4, #84]	; 0x54
 801741a:	81a3      	strhlt	r3, [r4, #12]
 801741c:	bd10      	pop	{r4, pc}

0801741e <__swrite>:
 801741e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017422:	461f      	mov	r7, r3
 8017424:	898b      	ldrh	r3, [r1, #12]
 8017426:	05db      	lsls	r3, r3, #23
 8017428:	4605      	mov	r5, r0
 801742a:	460c      	mov	r4, r1
 801742c:	4616      	mov	r6, r2
 801742e:	d505      	bpl.n	801743c <__swrite+0x1e>
 8017430:	2302      	movs	r3, #2
 8017432:	2200      	movs	r2, #0
 8017434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017438:	f000 f9d4 	bl	80177e4 <_lseek_r>
 801743c:	89a3      	ldrh	r3, [r4, #12]
 801743e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017446:	81a3      	strh	r3, [r4, #12]
 8017448:	4632      	mov	r2, r6
 801744a:	463b      	mov	r3, r7
 801744c:	4628      	mov	r0, r5
 801744e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017452:	f000 b915 	b.w	8017680 <_write_r>

08017456 <__sseek>:
 8017456:	b510      	push	{r4, lr}
 8017458:	460c      	mov	r4, r1
 801745a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801745e:	f000 f9c1 	bl	80177e4 <_lseek_r>
 8017462:	1c43      	adds	r3, r0, #1
 8017464:	89a3      	ldrh	r3, [r4, #12]
 8017466:	bf15      	itete	ne
 8017468:	6560      	strne	r0, [r4, #84]	; 0x54
 801746a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801746e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017472:	81a3      	strheq	r3, [r4, #12]
 8017474:	bf18      	it	ne
 8017476:	81a3      	strhne	r3, [r4, #12]
 8017478:	bd10      	pop	{r4, pc}

0801747a <__sclose>:
 801747a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801747e:	f000 b97f 	b.w	8017780 <_close_r>

08017482 <strchr>:
 8017482:	b2c9      	uxtb	r1, r1
 8017484:	4603      	mov	r3, r0
 8017486:	f810 2b01 	ldrb.w	r2, [r0], #1
 801748a:	b11a      	cbz	r2, 8017494 <strchr+0x12>
 801748c:	428a      	cmp	r2, r1
 801748e:	d1f9      	bne.n	8017484 <strchr+0x2>
 8017490:	4618      	mov	r0, r3
 8017492:	4770      	bx	lr
 8017494:	2900      	cmp	r1, #0
 8017496:	bf18      	it	ne
 8017498:	2300      	movne	r3, #0
 801749a:	e7f9      	b.n	8017490 <strchr+0xe>

0801749c <_strtol_l.isra.0>:
 801749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174a0:	4680      	mov	r8, r0
 80174a2:	4689      	mov	r9, r1
 80174a4:	4692      	mov	sl, r2
 80174a6:	461e      	mov	r6, r3
 80174a8:	460f      	mov	r7, r1
 80174aa:	463d      	mov	r5, r7
 80174ac:	9808      	ldr	r0, [sp, #32]
 80174ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80174b2:	f7ff fadb 	bl	8016a6c <__locale_ctype_ptr_l>
 80174b6:	4420      	add	r0, r4
 80174b8:	7843      	ldrb	r3, [r0, #1]
 80174ba:	f013 0308 	ands.w	r3, r3, #8
 80174be:	d132      	bne.n	8017526 <_strtol_l.isra.0+0x8a>
 80174c0:	2c2d      	cmp	r4, #45	; 0x2d
 80174c2:	d132      	bne.n	801752a <_strtol_l.isra.0+0x8e>
 80174c4:	787c      	ldrb	r4, [r7, #1]
 80174c6:	1cbd      	adds	r5, r7, #2
 80174c8:	2201      	movs	r2, #1
 80174ca:	2e00      	cmp	r6, #0
 80174cc:	d05d      	beq.n	801758a <_strtol_l.isra.0+0xee>
 80174ce:	2e10      	cmp	r6, #16
 80174d0:	d109      	bne.n	80174e6 <_strtol_l.isra.0+0x4a>
 80174d2:	2c30      	cmp	r4, #48	; 0x30
 80174d4:	d107      	bne.n	80174e6 <_strtol_l.isra.0+0x4a>
 80174d6:	782b      	ldrb	r3, [r5, #0]
 80174d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80174dc:	2b58      	cmp	r3, #88	; 0x58
 80174de:	d14f      	bne.n	8017580 <_strtol_l.isra.0+0xe4>
 80174e0:	786c      	ldrb	r4, [r5, #1]
 80174e2:	2610      	movs	r6, #16
 80174e4:	3502      	adds	r5, #2
 80174e6:	2a00      	cmp	r2, #0
 80174e8:	bf14      	ite	ne
 80174ea:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80174ee:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80174f2:	2700      	movs	r7, #0
 80174f4:	fbb1 fcf6 	udiv	ip, r1, r6
 80174f8:	4638      	mov	r0, r7
 80174fa:	fb06 1e1c 	mls	lr, r6, ip, r1
 80174fe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017502:	2b09      	cmp	r3, #9
 8017504:	d817      	bhi.n	8017536 <_strtol_l.isra.0+0x9a>
 8017506:	461c      	mov	r4, r3
 8017508:	42a6      	cmp	r6, r4
 801750a:	dd23      	ble.n	8017554 <_strtol_l.isra.0+0xb8>
 801750c:	1c7b      	adds	r3, r7, #1
 801750e:	d007      	beq.n	8017520 <_strtol_l.isra.0+0x84>
 8017510:	4584      	cmp	ip, r0
 8017512:	d31c      	bcc.n	801754e <_strtol_l.isra.0+0xb2>
 8017514:	d101      	bne.n	801751a <_strtol_l.isra.0+0x7e>
 8017516:	45a6      	cmp	lr, r4
 8017518:	db19      	blt.n	801754e <_strtol_l.isra.0+0xb2>
 801751a:	fb00 4006 	mla	r0, r0, r6, r4
 801751e:	2701      	movs	r7, #1
 8017520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017524:	e7eb      	b.n	80174fe <_strtol_l.isra.0+0x62>
 8017526:	462f      	mov	r7, r5
 8017528:	e7bf      	b.n	80174aa <_strtol_l.isra.0+0xe>
 801752a:	2c2b      	cmp	r4, #43	; 0x2b
 801752c:	bf04      	itt	eq
 801752e:	1cbd      	addeq	r5, r7, #2
 8017530:	787c      	ldrbeq	r4, [r7, #1]
 8017532:	461a      	mov	r2, r3
 8017534:	e7c9      	b.n	80174ca <_strtol_l.isra.0+0x2e>
 8017536:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801753a:	2b19      	cmp	r3, #25
 801753c:	d801      	bhi.n	8017542 <_strtol_l.isra.0+0xa6>
 801753e:	3c37      	subs	r4, #55	; 0x37
 8017540:	e7e2      	b.n	8017508 <_strtol_l.isra.0+0x6c>
 8017542:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017546:	2b19      	cmp	r3, #25
 8017548:	d804      	bhi.n	8017554 <_strtol_l.isra.0+0xb8>
 801754a:	3c57      	subs	r4, #87	; 0x57
 801754c:	e7dc      	b.n	8017508 <_strtol_l.isra.0+0x6c>
 801754e:	f04f 37ff 	mov.w	r7, #4294967295
 8017552:	e7e5      	b.n	8017520 <_strtol_l.isra.0+0x84>
 8017554:	1c7b      	adds	r3, r7, #1
 8017556:	d108      	bne.n	801756a <_strtol_l.isra.0+0xce>
 8017558:	2322      	movs	r3, #34	; 0x22
 801755a:	f8c8 3000 	str.w	r3, [r8]
 801755e:	4608      	mov	r0, r1
 8017560:	f1ba 0f00 	cmp.w	sl, #0
 8017564:	d107      	bne.n	8017576 <_strtol_l.isra.0+0xda>
 8017566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801756a:	b102      	cbz	r2, 801756e <_strtol_l.isra.0+0xd2>
 801756c:	4240      	negs	r0, r0
 801756e:	f1ba 0f00 	cmp.w	sl, #0
 8017572:	d0f8      	beq.n	8017566 <_strtol_l.isra.0+0xca>
 8017574:	b10f      	cbz	r7, 801757a <_strtol_l.isra.0+0xde>
 8017576:	f105 39ff 	add.w	r9, r5, #4294967295
 801757a:	f8ca 9000 	str.w	r9, [sl]
 801757e:	e7f2      	b.n	8017566 <_strtol_l.isra.0+0xca>
 8017580:	2430      	movs	r4, #48	; 0x30
 8017582:	2e00      	cmp	r6, #0
 8017584:	d1af      	bne.n	80174e6 <_strtol_l.isra.0+0x4a>
 8017586:	2608      	movs	r6, #8
 8017588:	e7ad      	b.n	80174e6 <_strtol_l.isra.0+0x4a>
 801758a:	2c30      	cmp	r4, #48	; 0x30
 801758c:	d0a3      	beq.n	80174d6 <_strtol_l.isra.0+0x3a>
 801758e:	260a      	movs	r6, #10
 8017590:	e7a9      	b.n	80174e6 <_strtol_l.isra.0+0x4a>
	...

08017594 <strtol>:
 8017594:	4b08      	ldr	r3, [pc, #32]	; (80175b8 <strtol+0x24>)
 8017596:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017598:	681c      	ldr	r4, [r3, #0]
 801759a:	4d08      	ldr	r5, [pc, #32]	; (80175bc <strtol+0x28>)
 801759c:	6a23      	ldr	r3, [r4, #32]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	bf08      	it	eq
 80175a2:	462b      	moveq	r3, r5
 80175a4:	9300      	str	r3, [sp, #0]
 80175a6:	4613      	mov	r3, r2
 80175a8:	460a      	mov	r2, r1
 80175aa:	4601      	mov	r1, r0
 80175ac:	4620      	mov	r0, r4
 80175ae:	f7ff ff75 	bl	801749c <_strtol_l.isra.0>
 80175b2:	b003      	add	sp, #12
 80175b4:	bd30      	pop	{r4, r5, pc}
 80175b6:	bf00      	nop
 80175b8:	20000174 	.word	0x20000174
 80175bc:	200001d8 	.word	0x200001d8

080175c0 <__swbuf_r>:
 80175c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175c2:	460e      	mov	r6, r1
 80175c4:	4614      	mov	r4, r2
 80175c6:	4605      	mov	r5, r0
 80175c8:	b118      	cbz	r0, 80175d2 <__swbuf_r+0x12>
 80175ca:	6983      	ldr	r3, [r0, #24]
 80175cc:	b90b      	cbnz	r3, 80175d2 <__swbuf_r+0x12>
 80175ce:	f7ff f99f 	bl	8016910 <__sinit>
 80175d2:	4b21      	ldr	r3, [pc, #132]	; (8017658 <__swbuf_r+0x98>)
 80175d4:	429c      	cmp	r4, r3
 80175d6:	d12a      	bne.n	801762e <__swbuf_r+0x6e>
 80175d8:	686c      	ldr	r4, [r5, #4]
 80175da:	69a3      	ldr	r3, [r4, #24]
 80175dc:	60a3      	str	r3, [r4, #8]
 80175de:	89a3      	ldrh	r3, [r4, #12]
 80175e0:	071a      	lsls	r2, r3, #28
 80175e2:	d52e      	bpl.n	8017642 <__swbuf_r+0x82>
 80175e4:	6923      	ldr	r3, [r4, #16]
 80175e6:	b363      	cbz	r3, 8017642 <__swbuf_r+0x82>
 80175e8:	6923      	ldr	r3, [r4, #16]
 80175ea:	6820      	ldr	r0, [r4, #0]
 80175ec:	1ac0      	subs	r0, r0, r3
 80175ee:	6963      	ldr	r3, [r4, #20]
 80175f0:	b2f6      	uxtb	r6, r6
 80175f2:	4283      	cmp	r3, r0
 80175f4:	4637      	mov	r7, r6
 80175f6:	dc04      	bgt.n	8017602 <__swbuf_r+0x42>
 80175f8:	4621      	mov	r1, r4
 80175fa:	4628      	mov	r0, r5
 80175fc:	f7ff f91e 	bl	801683c <_fflush_r>
 8017600:	bb28      	cbnz	r0, 801764e <__swbuf_r+0x8e>
 8017602:	68a3      	ldr	r3, [r4, #8]
 8017604:	3b01      	subs	r3, #1
 8017606:	60a3      	str	r3, [r4, #8]
 8017608:	6823      	ldr	r3, [r4, #0]
 801760a:	1c5a      	adds	r2, r3, #1
 801760c:	6022      	str	r2, [r4, #0]
 801760e:	701e      	strb	r6, [r3, #0]
 8017610:	6963      	ldr	r3, [r4, #20]
 8017612:	3001      	adds	r0, #1
 8017614:	4283      	cmp	r3, r0
 8017616:	d004      	beq.n	8017622 <__swbuf_r+0x62>
 8017618:	89a3      	ldrh	r3, [r4, #12]
 801761a:	07db      	lsls	r3, r3, #31
 801761c:	d519      	bpl.n	8017652 <__swbuf_r+0x92>
 801761e:	2e0a      	cmp	r6, #10
 8017620:	d117      	bne.n	8017652 <__swbuf_r+0x92>
 8017622:	4621      	mov	r1, r4
 8017624:	4628      	mov	r0, r5
 8017626:	f7ff f909 	bl	801683c <_fflush_r>
 801762a:	b190      	cbz	r0, 8017652 <__swbuf_r+0x92>
 801762c:	e00f      	b.n	801764e <__swbuf_r+0x8e>
 801762e:	4b0b      	ldr	r3, [pc, #44]	; (801765c <__swbuf_r+0x9c>)
 8017630:	429c      	cmp	r4, r3
 8017632:	d101      	bne.n	8017638 <__swbuf_r+0x78>
 8017634:	68ac      	ldr	r4, [r5, #8]
 8017636:	e7d0      	b.n	80175da <__swbuf_r+0x1a>
 8017638:	4b09      	ldr	r3, [pc, #36]	; (8017660 <__swbuf_r+0xa0>)
 801763a:	429c      	cmp	r4, r3
 801763c:	bf08      	it	eq
 801763e:	68ec      	ldreq	r4, [r5, #12]
 8017640:	e7cb      	b.n	80175da <__swbuf_r+0x1a>
 8017642:	4621      	mov	r1, r4
 8017644:	4628      	mov	r0, r5
 8017646:	f000 f82d 	bl	80176a4 <__swsetup_r>
 801764a:	2800      	cmp	r0, #0
 801764c:	d0cc      	beq.n	80175e8 <__swbuf_r+0x28>
 801764e:	f04f 37ff 	mov.w	r7, #4294967295
 8017652:	4638      	mov	r0, r7
 8017654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017656:	bf00      	nop
 8017658:	080534dc 	.word	0x080534dc
 801765c:	080534fc 	.word	0x080534fc
 8017660:	080534bc 	.word	0x080534bc

08017664 <__ascii_wctomb>:
 8017664:	b149      	cbz	r1, 801767a <__ascii_wctomb+0x16>
 8017666:	2aff      	cmp	r2, #255	; 0xff
 8017668:	bf85      	ittet	hi
 801766a:	238a      	movhi	r3, #138	; 0x8a
 801766c:	6003      	strhi	r3, [r0, #0]
 801766e:	700a      	strbls	r2, [r1, #0]
 8017670:	f04f 30ff 	movhi.w	r0, #4294967295
 8017674:	bf98      	it	ls
 8017676:	2001      	movls	r0, #1
 8017678:	4770      	bx	lr
 801767a:	4608      	mov	r0, r1
 801767c:	4770      	bx	lr
	...

08017680 <_write_r>:
 8017680:	b538      	push	{r3, r4, r5, lr}
 8017682:	4c07      	ldr	r4, [pc, #28]	; (80176a0 <_write_r+0x20>)
 8017684:	4605      	mov	r5, r0
 8017686:	4608      	mov	r0, r1
 8017688:	4611      	mov	r1, r2
 801768a:	2200      	movs	r2, #0
 801768c:	6022      	str	r2, [r4, #0]
 801768e:	461a      	mov	r2, r3
 8017690:	f7ea fad9 	bl	8001c46 <_write>
 8017694:	1c43      	adds	r3, r0, #1
 8017696:	d102      	bne.n	801769e <_write_r+0x1e>
 8017698:	6823      	ldr	r3, [r4, #0]
 801769a:	b103      	cbz	r3, 801769e <_write_r+0x1e>
 801769c:	602b      	str	r3, [r5, #0]
 801769e:	bd38      	pop	{r3, r4, r5, pc}
 80176a0:	2000ba88 	.word	0x2000ba88

080176a4 <__swsetup_r>:
 80176a4:	4b32      	ldr	r3, [pc, #200]	; (8017770 <__swsetup_r+0xcc>)
 80176a6:	b570      	push	{r4, r5, r6, lr}
 80176a8:	681d      	ldr	r5, [r3, #0]
 80176aa:	4606      	mov	r6, r0
 80176ac:	460c      	mov	r4, r1
 80176ae:	b125      	cbz	r5, 80176ba <__swsetup_r+0x16>
 80176b0:	69ab      	ldr	r3, [r5, #24]
 80176b2:	b913      	cbnz	r3, 80176ba <__swsetup_r+0x16>
 80176b4:	4628      	mov	r0, r5
 80176b6:	f7ff f92b 	bl	8016910 <__sinit>
 80176ba:	4b2e      	ldr	r3, [pc, #184]	; (8017774 <__swsetup_r+0xd0>)
 80176bc:	429c      	cmp	r4, r3
 80176be:	d10f      	bne.n	80176e0 <__swsetup_r+0x3c>
 80176c0:	686c      	ldr	r4, [r5, #4]
 80176c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176c6:	b29a      	uxth	r2, r3
 80176c8:	0715      	lsls	r5, r2, #28
 80176ca:	d42c      	bmi.n	8017726 <__swsetup_r+0x82>
 80176cc:	06d0      	lsls	r0, r2, #27
 80176ce:	d411      	bmi.n	80176f4 <__swsetup_r+0x50>
 80176d0:	2209      	movs	r2, #9
 80176d2:	6032      	str	r2, [r6, #0]
 80176d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176d8:	81a3      	strh	r3, [r4, #12]
 80176da:	f04f 30ff 	mov.w	r0, #4294967295
 80176de:	e03e      	b.n	801775e <__swsetup_r+0xba>
 80176e0:	4b25      	ldr	r3, [pc, #148]	; (8017778 <__swsetup_r+0xd4>)
 80176e2:	429c      	cmp	r4, r3
 80176e4:	d101      	bne.n	80176ea <__swsetup_r+0x46>
 80176e6:	68ac      	ldr	r4, [r5, #8]
 80176e8:	e7eb      	b.n	80176c2 <__swsetup_r+0x1e>
 80176ea:	4b24      	ldr	r3, [pc, #144]	; (801777c <__swsetup_r+0xd8>)
 80176ec:	429c      	cmp	r4, r3
 80176ee:	bf08      	it	eq
 80176f0:	68ec      	ldreq	r4, [r5, #12]
 80176f2:	e7e6      	b.n	80176c2 <__swsetup_r+0x1e>
 80176f4:	0751      	lsls	r1, r2, #29
 80176f6:	d512      	bpl.n	801771e <__swsetup_r+0x7a>
 80176f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176fa:	b141      	cbz	r1, 801770e <__swsetup_r+0x6a>
 80176fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017700:	4299      	cmp	r1, r3
 8017702:	d002      	beq.n	801770a <__swsetup_r+0x66>
 8017704:	4630      	mov	r0, r6
 8017706:	f7ff fa5d 	bl	8016bc4 <_free_r>
 801770a:	2300      	movs	r3, #0
 801770c:	6363      	str	r3, [r4, #52]	; 0x34
 801770e:	89a3      	ldrh	r3, [r4, #12]
 8017710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017714:	81a3      	strh	r3, [r4, #12]
 8017716:	2300      	movs	r3, #0
 8017718:	6063      	str	r3, [r4, #4]
 801771a:	6923      	ldr	r3, [r4, #16]
 801771c:	6023      	str	r3, [r4, #0]
 801771e:	89a3      	ldrh	r3, [r4, #12]
 8017720:	f043 0308 	orr.w	r3, r3, #8
 8017724:	81a3      	strh	r3, [r4, #12]
 8017726:	6923      	ldr	r3, [r4, #16]
 8017728:	b94b      	cbnz	r3, 801773e <__swsetup_r+0x9a>
 801772a:	89a3      	ldrh	r3, [r4, #12]
 801772c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017734:	d003      	beq.n	801773e <__swsetup_r+0x9a>
 8017736:	4621      	mov	r1, r4
 8017738:	4630      	mov	r0, r6
 801773a:	f7ff f9cd 	bl	8016ad8 <__smakebuf_r>
 801773e:	89a2      	ldrh	r2, [r4, #12]
 8017740:	f012 0301 	ands.w	r3, r2, #1
 8017744:	d00c      	beq.n	8017760 <__swsetup_r+0xbc>
 8017746:	2300      	movs	r3, #0
 8017748:	60a3      	str	r3, [r4, #8]
 801774a:	6963      	ldr	r3, [r4, #20]
 801774c:	425b      	negs	r3, r3
 801774e:	61a3      	str	r3, [r4, #24]
 8017750:	6923      	ldr	r3, [r4, #16]
 8017752:	b953      	cbnz	r3, 801776a <__swsetup_r+0xc6>
 8017754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017758:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801775c:	d1ba      	bne.n	80176d4 <__swsetup_r+0x30>
 801775e:	bd70      	pop	{r4, r5, r6, pc}
 8017760:	0792      	lsls	r2, r2, #30
 8017762:	bf58      	it	pl
 8017764:	6963      	ldrpl	r3, [r4, #20]
 8017766:	60a3      	str	r3, [r4, #8]
 8017768:	e7f2      	b.n	8017750 <__swsetup_r+0xac>
 801776a:	2000      	movs	r0, #0
 801776c:	e7f7      	b.n	801775e <__swsetup_r+0xba>
 801776e:	bf00      	nop
 8017770:	20000174 	.word	0x20000174
 8017774:	080534dc 	.word	0x080534dc
 8017778:	080534fc 	.word	0x080534fc
 801777c:	080534bc 	.word	0x080534bc

08017780 <_close_r>:
 8017780:	b538      	push	{r3, r4, r5, lr}
 8017782:	4c06      	ldr	r4, [pc, #24]	; (801779c <_close_r+0x1c>)
 8017784:	2300      	movs	r3, #0
 8017786:	4605      	mov	r5, r0
 8017788:	4608      	mov	r0, r1
 801778a:	6023      	str	r3, [r4, #0]
 801778c:	f7ec fbb3 	bl	8003ef6 <_close>
 8017790:	1c43      	adds	r3, r0, #1
 8017792:	d102      	bne.n	801779a <_close_r+0x1a>
 8017794:	6823      	ldr	r3, [r4, #0]
 8017796:	b103      	cbz	r3, 801779a <_close_r+0x1a>
 8017798:	602b      	str	r3, [r5, #0]
 801779a:	bd38      	pop	{r3, r4, r5, pc}
 801779c:	2000ba88 	.word	0x2000ba88

080177a0 <_fstat_r>:
 80177a0:	b538      	push	{r3, r4, r5, lr}
 80177a2:	4c07      	ldr	r4, [pc, #28]	; (80177c0 <_fstat_r+0x20>)
 80177a4:	2300      	movs	r3, #0
 80177a6:	4605      	mov	r5, r0
 80177a8:	4608      	mov	r0, r1
 80177aa:	4611      	mov	r1, r2
 80177ac:	6023      	str	r3, [r4, #0]
 80177ae:	f7ec fbae 	bl	8003f0e <_fstat>
 80177b2:	1c43      	adds	r3, r0, #1
 80177b4:	d102      	bne.n	80177bc <_fstat_r+0x1c>
 80177b6:	6823      	ldr	r3, [r4, #0]
 80177b8:	b103      	cbz	r3, 80177bc <_fstat_r+0x1c>
 80177ba:	602b      	str	r3, [r5, #0]
 80177bc:	bd38      	pop	{r3, r4, r5, pc}
 80177be:	bf00      	nop
 80177c0:	2000ba88 	.word	0x2000ba88

080177c4 <_isatty_r>:
 80177c4:	b538      	push	{r3, r4, r5, lr}
 80177c6:	4c06      	ldr	r4, [pc, #24]	; (80177e0 <_isatty_r+0x1c>)
 80177c8:	2300      	movs	r3, #0
 80177ca:	4605      	mov	r5, r0
 80177cc:	4608      	mov	r0, r1
 80177ce:	6023      	str	r3, [r4, #0]
 80177d0:	f7ec fbad 	bl	8003f2e <_isatty>
 80177d4:	1c43      	adds	r3, r0, #1
 80177d6:	d102      	bne.n	80177de <_isatty_r+0x1a>
 80177d8:	6823      	ldr	r3, [r4, #0]
 80177da:	b103      	cbz	r3, 80177de <_isatty_r+0x1a>
 80177dc:	602b      	str	r3, [r5, #0]
 80177de:	bd38      	pop	{r3, r4, r5, pc}
 80177e0:	2000ba88 	.word	0x2000ba88

080177e4 <_lseek_r>:
 80177e4:	b538      	push	{r3, r4, r5, lr}
 80177e6:	4c07      	ldr	r4, [pc, #28]	; (8017804 <_lseek_r+0x20>)
 80177e8:	4605      	mov	r5, r0
 80177ea:	4608      	mov	r0, r1
 80177ec:	4611      	mov	r1, r2
 80177ee:	2200      	movs	r2, #0
 80177f0:	6022      	str	r2, [r4, #0]
 80177f2:	461a      	mov	r2, r3
 80177f4:	f7ec fba6 	bl	8003f44 <_lseek>
 80177f8:	1c43      	adds	r3, r0, #1
 80177fa:	d102      	bne.n	8017802 <_lseek_r+0x1e>
 80177fc:	6823      	ldr	r3, [r4, #0]
 80177fe:	b103      	cbz	r3, 8017802 <_lseek_r+0x1e>
 8017800:	602b      	str	r3, [r5, #0]
 8017802:	bd38      	pop	{r3, r4, r5, pc}
 8017804:	2000ba88 	.word	0x2000ba88

08017808 <memmove>:
 8017808:	4288      	cmp	r0, r1
 801780a:	b510      	push	{r4, lr}
 801780c:	eb01 0302 	add.w	r3, r1, r2
 8017810:	d807      	bhi.n	8017822 <memmove+0x1a>
 8017812:	1e42      	subs	r2, r0, #1
 8017814:	4299      	cmp	r1, r3
 8017816:	d00a      	beq.n	801782e <memmove+0x26>
 8017818:	f811 4b01 	ldrb.w	r4, [r1], #1
 801781c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017820:	e7f8      	b.n	8017814 <memmove+0xc>
 8017822:	4283      	cmp	r3, r0
 8017824:	d9f5      	bls.n	8017812 <memmove+0xa>
 8017826:	1881      	adds	r1, r0, r2
 8017828:	1ad2      	subs	r2, r2, r3
 801782a:	42d3      	cmn	r3, r2
 801782c:	d100      	bne.n	8017830 <memmove+0x28>
 801782e:	bd10      	pop	{r4, pc}
 8017830:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017834:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017838:	e7f7      	b.n	801782a <memmove+0x22>

0801783a <__malloc_lock>:
 801783a:	4770      	bx	lr

0801783c <__malloc_unlock>:
 801783c:	4770      	bx	lr

0801783e <_realloc_r>:
 801783e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017840:	4607      	mov	r7, r0
 8017842:	4614      	mov	r4, r2
 8017844:	460e      	mov	r6, r1
 8017846:	b921      	cbnz	r1, 8017852 <_realloc_r+0x14>
 8017848:	4611      	mov	r1, r2
 801784a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801784e:	f7ff ba07 	b.w	8016c60 <_malloc_r>
 8017852:	b922      	cbnz	r2, 801785e <_realloc_r+0x20>
 8017854:	f7ff f9b6 	bl	8016bc4 <_free_r>
 8017858:	4625      	mov	r5, r4
 801785a:	4628      	mov	r0, r5
 801785c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801785e:	f000 f979 	bl	8017b54 <_malloc_usable_size_r>
 8017862:	42a0      	cmp	r0, r4
 8017864:	d20f      	bcs.n	8017886 <_realloc_r+0x48>
 8017866:	4621      	mov	r1, r4
 8017868:	4638      	mov	r0, r7
 801786a:	f7ff f9f9 	bl	8016c60 <_malloc_r>
 801786e:	4605      	mov	r5, r0
 8017870:	2800      	cmp	r0, #0
 8017872:	d0f2      	beq.n	801785a <_realloc_r+0x1c>
 8017874:	4631      	mov	r1, r6
 8017876:	4622      	mov	r2, r4
 8017878:	f7ff f990 	bl	8016b9c <memcpy>
 801787c:	4631      	mov	r1, r6
 801787e:	4638      	mov	r0, r7
 8017880:	f7ff f9a0 	bl	8016bc4 <_free_r>
 8017884:	e7e9      	b.n	801785a <_realloc_r+0x1c>
 8017886:	4635      	mov	r5, r6
 8017888:	e7e7      	b.n	801785a <_realloc_r+0x1c>

0801788a <__ssputs_r>:
 801788a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801788e:	688e      	ldr	r6, [r1, #8]
 8017890:	429e      	cmp	r6, r3
 8017892:	4682      	mov	sl, r0
 8017894:	460c      	mov	r4, r1
 8017896:	4690      	mov	r8, r2
 8017898:	4699      	mov	r9, r3
 801789a:	d837      	bhi.n	801790c <__ssputs_r+0x82>
 801789c:	898a      	ldrh	r2, [r1, #12]
 801789e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80178a2:	d031      	beq.n	8017908 <__ssputs_r+0x7e>
 80178a4:	6825      	ldr	r5, [r4, #0]
 80178a6:	6909      	ldr	r1, [r1, #16]
 80178a8:	1a6f      	subs	r7, r5, r1
 80178aa:	6965      	ldr	r5, [r4, #20]
 80178ac:	2302      	movs	r3, #2
 80178ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178b2:	fb95 f5f3 	sdiv	r5, r5, r3
 80178b6:	f109 0301 	add.w	r3, r9, #1
 80178ba:	443b      	add	r3, r7
 80178bc:	429d      	cmp	r5, r3
 80178be:	bf38      	it	cc
 80178c0:	461d      	movcc	r5, r3
 80178c2:	0553      	lsls	r3, r2, #21
 80178c4:	d530      	bpl.n	8017928 <__ssputs_r+0x9e>
 80178c6:	4629      	mov	r1, r5
 80178c8:	f7ff f9ca 	bl	8016c60 <_malloc_r>
 80178cc:	4606      	mov	r6, r0
 80178ce:	b950      	cbnz	r0, 80178e6 <__ssputs_r+0x5c>
 80178d0:	230c      	movs	r3, #12
 80178d2:	f8ca 3000 	str.w	r3, [sl]
 80178d6:	89a3      	ldrh	r3, [r4, #12]
 80178d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178dc:	81a3      	strh	r3, [r4, #12]
 80178de:	f04f 30ff 	mov.w	r0, #4294967295
 80178e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178e6:	463a      	mov	r2, r7
 80178e8:	6921      	ldr	r1, [r4, #16]
 80178ea:	f7ff f957 	bl	8016b9c <memcpy>
 80178ee:	89a3      	ldrh	r3, [r4, #12]
 80178f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80178f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178f8:	81a3      	strh	r3, [r4, #12]
 80178fa:	6126      	str	r6, [r4, #16]
 80178fc:	6165      	str	r5, [r4, #20]
 80178fe:	443e      	add	r6, r7
 8017900:	1bed      	subs	r5, r5, r7
 8017902:	6026      	str	r6, [r4, #0]
 8017904:	60a5      	str	r5, [r4, #8]
 8017906:	464e      	mov	r6, r9
 8017908:	454e      	cmp	r6, r9
 801790a:	d900      	bls.n	801790e <__ssputs_r+0x84>
 801790c:	464e      	mov	r6, r9
 801790e:	4632      	mov	r2, r6
 8017910:	4641      	mov	r1, r8
 8017912:	6820      	ldr	r0, [r4, #0]
 8017914:	f7ff ff78 	bl	8017808 <memmove>
 8017918:	68a3      	ldr	r3, [r4, #8]
 801791a:	1b9b      	subs	r3, r3, r6
 801791c:	60a3      	str	r3, [r4, #8]
 801791e:	6823      	ldr	r3, [r4, #0]
 8017920:	441e      	add	r6, r3
 8017922:	6026      	str	r6, [r4, #0]
 8017924:	2000      	movs	r0, #0
 8017926:	e7dc      	b.n	80178e2 <__ssputs_r+0x58>
 8017928:	462a      	mov	r2, r5
 801792a:	f7ff ff88 	bl	801783e <_realloc_r>
 801792e:	4606      	mov	r6, r0
 8017930:	2800      	cmp	r0, #0
 8017932:	d1e2      	bne.n	80178fa <__ssputs_r+0x70>
 8017934:	6921      	ldr	r1, [r4, #16]
 8017936:	4650      	mov	r0, sl
 8017938:	f7ff f944 	bl	8016bc4 <_free_r>
 801793c:	e7c8      	b.n	80178d0 <__ssputs_r+0x46>
	...

08017940 <_svfiprintf_r>:
 8017940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017944:	461d      	mov	r5, r3
 8017946:	898b      	ldrh	r3, [r1, #12]
 8017948:	061f      	lsls	r7, r3, #24
 801794a:	b09d      	sub	sp, #116	; 0x74
 801794c:	4680      	mov	r8, r0
 801794e:	460c      	mov	r4, r1
 8017950:	4616      	mov	r6, r2
 8017952:	d50f      	bpl.n	8017974 <_svfiprintf_r+0x34>
 8017954:	690b      	ldr	r3, [r1, #16]
 8017956:	b96b      	cbnz	r3, 8017974 <_svfiprintf_r+0x34>
 8017958:	2140      	movs	r1, #64	; 0x40
 801795a:	f7ff f981 	bl	8016c60 <_malloc_r>
 801795e:	6020      	str	r0, [r4, #0]
 8017960:	6120      	str	r0, [r4, #16]
 8017962:	b928      	cbnz	r0, 8017970 <_svfiprintf_r+0x30>
 8017964:	230c      	movs	r3, #12
 8017966:	f8c8 3000 	str.w	r3, [r8]
 801796a:	f04f 30ff 	mov.w	r0, #4294967295
 801796e:	e0c8      	b.n	8017b02 <_svfiprintf_r+0x1c2>
 8017970:	2340      	movs	r3, #64	; 0x40
 8017972:	6163      	str	r3, [r4, #20]
 8017974:	2300      	movs	r3, #0
 8017976:	9309      	str	r3, [sp, #36]	; 0x24
 8017978:	2320      	movs	r3, #32
 801797a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801797e:	2330      	movs	r3, #48	; 0x30
 8017980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017984:	9503      	str	r5, [sp, #12]
 8017986:	f04f 0b01 	mov.w	fp, #1
 801798a:	4637      	mov	r7, r6
 801798c:	463d      	mov	r5, r7
 801798e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017992:	b10b      	cbz	r3, 8017998 <_svfiprintf_r+0x58>
 8017994:	2b25      	cmp	r3, #37	; 0x25
 8017996:	d13e      	bne.n	8017a16 <_svfiprintf_r+0xd6>
 8017998:	ebb7 0a06 	subs.w	sl, r7, r6
 801799c:	d00b      	beq.n	80179b6 <_svfiprintf_r+0x76>
 801799e:	4653      	mov	r3, sl
 80179a0:	4632      	mov	r2, r6
 80179a2:	4621      	mov	r1, r4
 80179a4:	4640      	mov	r0, r8
 80179a6:	f7ff ff70 	bl	801788a <__ssputs_r>
 80179aa:	3001      	adds	r0, #1
 80179ac:	f000 80a4 	beq.w	8017af8 <_svfiprintf_r+0x1b8>
 80179b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179b2:	4453      	add	r3, sl
 80179b4:	9309      	str	r3, [sp, #36]	; 0x24
 80179b6:	783b      	ldrb	r3, [r7, #0]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	f000 809d 	beq.w	8017af8 <_svfiprintf_r+0x1b8>
 80179be:	2300      	movs	r3, #0
 80179c0:	f04f 32ff 	mov.w	r2, #4294967295
 80179c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80179c8:	9304      	str	r3, [sp, #16]
 80179ca:	9307      	str	r3, [sp, #28]
 80179cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80179d0:	931a      	str	r3, [sp, #104]	; 0x68
 80179d2:	462f      	mov	r7, r5
 80179d4:	2205      	movs	r2, #5
 80179d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80179da:	4850      	ldr	r0, [pc, #320]	; (8017b1c <_svfiprintf_r+0x1dc>)
 80179dc:	f7e8 fc18 	bl	8000210 <memchr>
 80179e0:	9b04      	ldr	r3, [sp, #16]
 80179e2:	b9d0      	cbnz	r0, 8017a1a <_svfiprintf_r+0xda>
 80179e4:	06d9      	lsls	r1, r3, #27
 80179e6:	bf44      	itt	mi
 80179e8:	2220      	movmi	r2, #32
 80179ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80179ee:	071a      	lsls	r2, r3, #28
 80179f0:	bf44      	itt	mi
 80179f2:	222b      	movmi	r2, #43	; 0x2b
 80179f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80179f8:	782a      	ldrb	r2, [r5, #0]
 80179fa:	2a2a      	cmp	r2, #42	; 0x2a
 80179fc:	d015      	beq.n	8017a2a <_svfiprintf_r+0xea>
 80179fe:	9a07      	ldr	r2, [sp, #28]
 8017a00:	462f      	mov	r7, r5
 8017a02:	2000      	movs	r0, #0
 8017a04:	250a      	movs	r5, #10
 8017a06:	4639      	mov	r1, r7
 8017a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a0c:	3b30      	subs	r3, #48	; 0x30
 8017a0e:	2b09      	cmp	r3, #9
 8017a10:	d94d      	bls.n	8017aae <_svfiprintf_r+0x16e>
 8017a12:	b1b8      	cbz	r0, 8017a44 <_svfiprintf_r+0x104>
 8017a14:	e00f      	b.n	8017a36 <_svfiprintf_r+0xf6>
 8017a16:	462f      	mov	r7, r5
 8017a18:	e7b8      	b.n	801798c <_svfiprintf_r+0x4c>
 8017a1a:	4a40      	ldr	r2, [pc, #256]	; (8017b1c <_svfiprintf_r+0x1dc>)
 8017a1c:	1a80      	subs	r0, r0, r2
 8017a1e:	fa0b f000 	lsl.w	r0, fp, r0
 8017a22:	4318      	orrs	r0, r3
 8017a24:	9004      	str	r0, [sp, #16]
 8017a26:	463d      	mov	r5, r7
 8017a28:	e7d3      	b.n	80179d2 <_svfiprintf_r+0x92>
 8017a2a:	9a03      	ldr	r2, [sp, #12]
 8017a2c:	1d11      	adds	r1, r2, #4
 8017a2e:	6812      	ldr	r2, [r2, #0]
 8017a30:	9103      	str	r1, [sp, #12]
 8017a32:	2a00      	cmp	r2, #0
 8017a34:	db01      	blt.n	8017a3a <_svfiprintf_r+0xfa>
 8017a36:	9207      	str	r2, [sp, #28]
 8017a38:	e004      	b.n	8017a44 <_svfiprintf_r+0x104>
 8017a3a:	4252      	negs	r2, r2
 8017a3c:	f043 0302 	orr.w	r3, r3, #2
 8017a40:	9207      	str	r2, [sp, #28]
 8017a42:	9304      	str	r3, [sp, #16]
 8017a44:	783b      	ldrb	r3, [r7, #0]
 8017a46:	2b2e      	cmp	r3, #46	; 0x2e
 8017a48:	d10c      	bne.n	8017a64 <_svfiprintf_r+0x124>
 8017a4a:	787b      	ldrb	r3, [r7, #1]
 8017a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8017a4e:	d133      	bne.n	8017ab8 <_svfiprintf_r+0x178>
 8017a50:	9b03      	ldr	r3, [sp, #12]
 8017a52:	1d1a      	adds	r2, r3, #4
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	9203      	str	r2, [sp, #12]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	bfb8      	it	lt
 8017a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a60:	3702      	adds	r7, #2
 8017a62:	9305      	str	r3, [sp, #20]
 8017a64:	4d2e      	ldr	r5, [pc, #184]	; (8017b20 <_svfiprintf_r+0x1e0>)
 8017a66:	7839      	ldrb	r1, [r7, #0]
 8017a68:	2203      	movs	r2, #3
 8017a6a:	4628      	mov	r0, r5
 8017a6c:	f7e8 fbd0 	bl	8000210 <memchr>
 8017a70:	b138      	cbz	r0, 8017a82 <_svfiprintf_r+0x142>
 8017a72:	2340      	movs	r3, #64	; 0x40
 8017a74:	1b40      	subs	r0, r0, r5
 8017a76:	fa03 f000 	lsl.w	r0, r3, r0
 8017a7a:	9b04      	ldr	r3, [sp, #16]
 8017a7c:	4303      	orrs	r3, r0
 8017a7e:	3701      	adds	r7, #1
 8017a80:	9304      	str	r3, [sp, #16]
 8017a82:	7839      	ldrb	r1, [r7, #0]
 8017a84:	4827      	ldr	r0, [pc, #156]	; (8017b24 <_svfiprintf_r+0x1e4>)
 8017a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a8a:	2206      	movs	r2, #6
 8017a8c:	1c7e      	adds	r6, r7, #1
 8017a8e:	f7e8 fbbf 	bl	8000210 <memchr>
 8017a92:	2800      	cmp	r0, #0
 8017a94:	d038      	beq.n	8017b08 <_svfiprintf_r+0x1c8>
 8017a96:	4b24      	ldr	r3, [pc, #144]	; (8017b28 <_svfiprintf_r+0x1e8>)
 8017a98:	bb13      	cbnz	r3, 8017ae0 <_svfiprintf_r+0x1a0>
 8017a9a:	9b03      	ldr	r3, [sp, #12]
 8017a9c:	3307      	adds	r3, #7
 8017a9e:	f023 0307 	bic.w	r3, r3, #7
 8017aa2:	3308      	adds	r3, #8
 8017aa4:	9303      	str	r3, [sp, #12]
 8017aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017aa8:	444b      	add	r3, r9
 8017aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8017aac:	e76d      	b.n	801798a <_svfiprintf_r+0x4a>
 8017aae:	fb05 3202 	mla	r2, r5, r2, r3
 8017ab2:	2001      	movs	r0, #1
 8017ab4:	460f      	mov	r7, r1
 8017ab6:	e7a6      	b.n	8017a06 <_svfiprintf_r+0xc6>
 8017ab8:	2300      	movs	r3, #0
 8017aba:	3701      	adds	r7, #1
 8017abc:	9305      	str	r3, [sp, #20]
 8017abe:	4619      	mov	r1, r3
 8017ac0:	250a      	movs	r5, #10
 8017ac2:	4638      	mov	r0, r7
 8017ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ac8:	3a30      	subs	r2, #48	; 0x30
 8017aca:	2a09      	cmp	r2, #9
 8017acc:	d903      	bls.n	8017ad6 <_svfiprintf_r+0x196>
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d0c8      	beq.n	8017a64 <_svfiprintf_r+0x124>
 8017ad2:	9105      	str	r1, [sp, #20]
 8017ad4:	e7c6      	b.n	8017a64 <_svfiprintf_r+0x124>
 8017ad6:	fb05 2101 	mla	r1, r5, r1, r2
 8017ada:	2301      	movs	r3, #1
 8017adc:	4607      	mov	r7, r0
 8017ade:	e7f0      	b.n	8017ac2 <_svfiprintf_r+0x182>
 8017ae0:	ab03      	add	r3, sp, #12
 8017ae2:	9300      	str	r3, [sp, #0]
 8017ae4:	4622      	mov	r2, r4
 8017ae6:	4b11      	ldr	r3, [pc, #68]	; (8017b2c <_svfiprintf_r+0x1ec>)
 8017ae8:	a904      	add	r1, sp, #16
 8017aea:	4640      	mov	r0, r8
 8017aec:	f3af 8000 	nop.w
 8017af0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017af4:	4681      	mov	r9, r0
 8017af6:	d1d6      	bne.n	8017aa6 <_svfiprintf_r+0x166>
 8017af8:	89a3      	ldrh	r3, [r4, #12]
 8017afa:	065b      	lsls	r3, r3, #25
 8017afc:	f53f af35 	bmi.w	801796a <_svfiprintf_r+0x2a>
 8017b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b02:	b01d      	add	sp, #116	; 0x74
 8017b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b08:	ab03      	add	r3, sp, #12
 8017b0a:	9300      	str	r3, [sp, #0]
 8017b0c:	4622      	mov	r2, r4
 8017b0e:	4b07      	ldr	r3, [pc, #28]	; (8017b2c <_svfiprintf_r+0x1ec>)
 8017b10:	a904      	add	r1, sp, #16
 8017b12:	4640      	mov	r0, r8
 8017b14:	f7ff fab4 	bl	8017080 <_printf_i>
 8017b18:	e7ea      	b.n	8017af0 <_svfiprintf_r+0x1b0>
 8017b1a:	bf00      	nop
 8017b1c:	0805352a 	.word	0x0805352a
 8017b20:	08053530 	.word	0x08053530
 8017b24:	08053534 	.word	0x08053534
 8017b28:	00000000 	.word	0x00000000
 8017b2c:	0801788b 	.word	0x0801788b

08017b30 <_read_r>:
 8017b30:	b538      	push	{r3, r4, r5, lr}
 8017b32:	4c07      	ldr	r4, [pc, #28]	; (8017b50 <_read_r+0x20>)
 8017b34:	4605      	mov	r5, r0
 8017b36:	4608      	mov	r0, r1
 8017b38:	4611      	mov	r1, r2
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	6022      	str	r2, [r4, #0]
 8017b3e:	461a      	mov	r2, r3
 8017b40:	f7ec f9bc 	bl	8003ebc <_read>
 8017b44:	1c43      	adds	r3, r0, #1
 8017b46:	d102      	bne.n	8017b4e <_read_r+0x1e>
 8017b48:	6823      	ldr	r3, [r4, #0]
 8017b4a:	b103      	cbz	r3, 8017b4e <_read_r+0x1e>
 8017b4c:	602b      	str	r3, [r5, #0]
 8017b4e:	bd38      	pop	{r3, r4, r5, pc}
 8017b50:	2000ba88 	.word	0x2000ba88

08017b54 <_malloc_usable_size_r>:
 8017b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b58:	1f18      	subs	r0, r3, #4
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	bfbc      	itt	lt
 8017b5e:	580b      	ldrlt	r3, [r1, r0]
 8017b60:	18c0      	addlt	r0, r0, r3
 8017b62:	4770      	bx	lr
 8017b64:	0000      	movs	r0, r0
	...

08017b68 <sin>:
 8017b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b6a:	ec51 0b10 	vmov	r0, r1, d0
 8017b6e:	4a20      	ldr	r2, [pc, #128]	; (8017bf0 <sin+0x88>)
 8017b70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017b74:	4293      	cmp	r3, r2
 8017b76:	dc07      	bgt.n	8017b88 <sin+0x20>
 8017b78:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8017be8 <sin+0x80>
 8017b7c:	2000      	movs	r0, #0
 8017b7e:	f000 fe37 	bl	80187f0 <__kernel_sin>
 8017b82:	ec51 0b10 	vmov	r0, r1, d0
 8017b86:	e007      	b.n	8017b98 <sin+0x30>
 8017b88:	4a1a      	ldr	r2, [pc, #104]	; (8017bf4 <sin+0x8c>)
 8017b8a:	4293      	cmp	r3, r2
 8017b8c:	dd09      	ble.n	8017ba2 <sin+0x3a>
 8017b8e:	ee10 2a10 	vmov	r2, s0
 8017b92:	460b      	mov	r3, r1
 8017b94:	f7e8 fba2 	bl	80002dc <__aeabi_dsub>
 8017b98:	ec41 0b10 	vmov	d0, r0, r1
 8017b9c:	b005      	add	sp, #20
 8017b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ba2:	4668      	mov	r0, sp
 8017ba4:	f000 f828 	bl	8017bf8 <__ieee754_rem_pio2>
 8017ba8:	f000 0003 	and.w	r0, r0, #3
 8017bac:	2801      	cmp	r0, #1
 8017bae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017bb2:	ed9d 0b00 	vldr	d0, [sp]
 8017bb6:	d004      	beq.n	8017bc2 <sin+0x5a>
 8017bb8:	2802      	cmp	r0, #2
 8017bba:	d005      	beq.n	8017bc8 <sin+0x60>
 8017bbc:	b970      	cbnz	r0, 8017bdc <sin+0x74>
 8017bbe:	2001      	movs	r0, #1
 8017bc0:	e7dd      	b.n	8017b7e <sin+0x16>
 8017bc2:	f000 fa0d 	bl	8017fe0 <__kernel_cos>
 8017bc6:	e7dc      	b.n	8017b82 <sin+0x1a>
 8017bc8:	2001      	movs	r0, #1
 8017bca:	f000 fe11 	bl	80187f0 <__kernel_sin>
 8017bce:	ec53 2b10 	vmov	r2, r3, d0
 8017bd2:	ee10 0a10 	vmov	r0, s0
 8017bd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017bda:	e7dd      	b.n	8017b98 <sin+0x30>
 8017bdc:	f000 fa00 	bl	8017fe0 <__kernel_cos>
 8017be0:	e7f5      	b.n	8017bce <sin+0x66>
 8017be2:	bf00      	nop
 8017be4:	f3af 8000 	nop.w
	...
 8017bf0:	3fe921fb 	.word	0x3fe921fb
 8017bf4:	7fefffff 	.word	0x7fefffff

08017bf8 <__ieee754_rem_pio2>:
 8017bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bfc:	ec57 6b10 	vmov	r6, r7, d0
 8017c00:	4bc3      	ldr	r3, [pc, #780]	; (8017f10 <__ieee754_rem_pio2+0x318>)
 8017c02:	b08d      	sub	sp, #52	; 0x34
 8017c04:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017c08:	4598      	cmp	r8, r3
 8017c0a:	4604      	mov	r4, r0
 8017c0c:	9704      	str	r7, [sp, #16]
 8017c0e:	dc07      	bgt.n	8017c20 <__ieee754_rem_pio2+0x28>
 8017c10:	2200      	movs	r2, #0
 8017c12:	2300      	movs	r3, #0
 8017c14:	ed84 0b00 	vstr	d0, [r4]
 8017c18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017c1c:	2500      	movs	r5, #0
 8017c1e:	e027      	b.n	8017c70 <__ieee754_rem_pio2+0x78>
 8017c20:	4bbc      	ldr	r3, [pc, #752]	; (8017f14 <__ieee754_rem_pio2+0x31c>)
 8017c22:	4598      	cmp	r8, r3
 8017c24:	dc75      	bgt.n	8017d12 <__ieee754_rem_pio2+0x11a>
 8017c26:	9b04      	ldr	r3, [sp, #16]
 8017c28:	4dbb      	ldr	r5, [pc, #748]	; (8017f18 <__ieee754_rem_pio2+0x320>)
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	ee10 0a10 	vmov	r0, s0
 8017c30:	a3a9      	add	r3, pc, #676	; (adr r3, 8017ed8 <__ieee754_rem_pio2+0x2e0>)
 8017c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c36:	4639      	mov	r1, r7
 8017c38:	dd36      	ble.n	8017ca8 <__ieee754_rem_pio2+0xb0>
 8017c3a:	f7e8 fb4f 	bl	80002dc <__aeabi_dsub>
 8017c3e:	45a8      	cmp	r8, r5
 8017c40:	4606      	mov	r6, r0
 8017c42:	460f      	mov	r7, r1
 8017c44:	d018      	beq.n	8017c78 <__ieee754_rem_pio2+0x80>
 8017c46:	a3a6      	add	r3, pc, #664	; (adr r3, 8017ee0 <__ieee754_rem_pio2+0x2e8>)
 8017c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c4c:	f7e8 fb46 	bl	80002dc <__aeabi_dsub>
 8017c50:	4602      	mov	r2, r0
 8017c52:	460b      	mov	r3, r1
 8017c54:	e9c4 2300 	strd	r2, r3, [r4]
 8017c58:	4630      	mov	r0, r6
 8017c5a:	4639      	mov	r1, r7
 8017c5c:	f7e8 fb3e 	bl	80002dc <__aeabi_dsub>
 8017c60:	a39f      	add	r3, pc, #636	; (adr r3, 8017ee0 <__ieee754_rem_pio2+0x2e8>)
 8017c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c66:	f7e8 fb39 	bl	80002dc <__aeabi_dsub>
 8017c6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017c6e:	2501      	movs	r5, #1
 8017c70:	4628      	mov	r0, r5
 8017c72:	b00d      	add	sp, #52	; 0x34
 8017c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c78:	a39b      	add	r3, pc, #620	; (adr r3, 8017ee8 <__ieee754_rem_pio2+0x2f0>)
 8017c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c7e:	f7e8 fb2d 	bl	80002dc <__aeabi_dsub>
 8017c82:	a39b      	add	r3, pc, #620	; (adr r3, 8017ef0 <__ieee754_rem_pio2+0x2f8>)
 8017c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c88:	4606      	mov	r6, r0
 8017c8a:	460f      	mov	r7, r1
 8017c8c:	f7e8 fb26 	bl	80002dc <__aeabi_dsub>
 8017c90:	4602      	mov	r2, r0
 8017c92:	460b      	mov	r3, r1
 8017c94:	e9c4 2300 	strd	r2, r3, [r4]
 8017c98:	4630      	mov	r0, r6
 8017c9a:	4639      	mov	r1, r7
 8017c9c:	f7e8 fb1e 	bl	80002dc <__aeabi_dsub>
 8017ca0:	a393      	add	r3, pc, #588	; (adr r3, 8017ef0 <__ieee754_rem_pio2+0x2f8>)
 8017ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ca6:	e7de      	b.n	8017c66 <__ieee754_rem_pio2+0x6e>
 8017ca8:	f7e8 fb1a 	bl	80002e0 <__adddf3>
 8017cac:	45a8      	cmp	r8, r5
 8017cae:	4606      	mov	r6, r0
 8017cb0:	460f      	mov	r7, r1
 8017cb2:	d016      	beq.n	8017ce2 <__ieee754_rem_pio2+0xea>
 8017cb4:	a38a      	add	r3, pc, #552	; (adr r3, 8017ee0 <__ieee754_rem_pio2+0x2e8>)
 8017cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cba:	f7e8 fb11 	bl	80002e0 <__adddf3>
 8017cbe:	4602      	mov	r2, r0
 8017cc0:	460b      	mov	r3, r1
 8017cc2:	e9c4 2300 	strd	r2, r3, [r4]
 8017cc6:	4630      	mov	r0, r6
 8017cc8:	4639      	mov	r1, r7
 8017cca:	f7e8 fb07 	bl	80002dc <__aeabi_dsub>
 8017cce:	a384      	add	r3, pc, #528	; (adr r3, 8017ee0 <__ieee754_rem_pio2+0x2e8>)
 8017cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cd4:	f7e8 fb04 	bl	80002e0 <__adddf3>
 8017cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8017cdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017ce0:	e7c6      	b.n	8017c70 <__ieee754_rem_pio2+0x78>
 8017ce2:	a381      	add	r3, pc, #516	; (adr r3, 8017ee8 <__ieee754_rem_pio2+0x2f0>)
 8017ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce8:	f7e8 fafa 	bl	80002e0 <__adddf3>
 8017cec:	a380      	add	r3, pc, #512	; (adr r3, 8017ef0 <__ieee754_rem_pio2+0x2f8>)
 8017cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cf2:	4606      	mov	r6, r0
 8017cf4:	460f      	mov	r7, r1
 8017cf6:	f7e8 faf3 	bl	80002e0 <__adddf3>
 8017cfa:	4602      	mov	r2, r0
 8017cfc:	460b      	mov	r3, r1
 8017cfe:	e9c4 2300 	strd	r2, r3, [r4]
 8017d02:	4630      	mov	r0, r6
 8017d04:	4639      	mov	r1, r7
 8017d06:	f7e8 fae9 	bl	80002dc <__aeabi_dsub>
 8017d0a:	a379      	add	r3, pc, #484	; (adr r3, 8017ef0 <__ieee754_rem_pio2+0x2f8>)
 8017d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d10:	e7e0      	b.n	8017cd4 <__ieee754_rem_pio2+0xdc>
 8017d12:	4b82      	ldr	r3, [pc, #520]	; (8017f1c <__ieee754_rem_pio2+0x324>)
 8017d14:	4598      	cmp	r8, r3
 8017d16:	f300 80d0 	bgt.w	8017eba <__ieee754_rem_pio2+0x2c2>
 8017d1a:	f000 fe23 	bl	8018964 <fabs>
 8017d1e:	ec57 6b10 	vmov	r6, r7, d0
 8017d22:	ee10 0a10 	vmov	r0, s0
 8017d26:	a374      	add	r3, pc, #464	; (adr r3, 8017ef8 <__ieee754_rem_pio2+0x300>)
 8017d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d2c:	4639      	mov	r1, r7
 8017d2e:	f7e8 fc8d 	bl	800064c <__aeabi_dmul>
 8017d32:	2200      	movs	r2, #0
 8017d34:	4b7a      	ldr	r3, [pc, #488]	; (8017f20 <__ieee754_rem_pio2+0x328>)
 8017d36:	f7e8 fad3 	bl	80002e0 <__adddf3>
 8017d3a:	f7e8 ff21 	bl	8000b80 <__aeabi_d2iz>
 8017d3e:	4605      	mov	r5, r0
 8017d40:	f7e8 fc1a 	bl	8000578 <__aeabi_i2d>
 8017d44:	a364      	add	r3, pc, #400	; (adr r3, 8017ed8 <__ieee754_rem_pio2+0x2e0>)
 8017d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d4e:	f7e8 fc7d 	bl	800064c <__aeabi_dmul>
 8017d52:	4602      	mov	r2, r0
 8017d54:	460b      	mov	r3, r1
 8017d56:	4630      	mov	r0, r6
 8017d58:	4639      	mov	r1, r7
 8017d5a:	f7e8 fabf 	bl	80002dc <__aeabi_dsub>
 8017d5e:	a360      	add	r3, pc, #384	; (adr r3, 8017ee0 <__ieee754_rem_pio2+0x2e8>)
 8017d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d64:	4682      	mov	sl, r0
 8017d66:	468b      	mov	fp, r1
 8017d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017d6c:	f7e8 fc6e 	bl	800064c <__aeabi_dmul>
 8017d70:	2d1f      	cmp	r5, #31
 8017d72:	4606      	mov	r6, r0
 8017d74:	460f      	mov	r7, r1
 8017d76:	dc0c      	bgt.n	8017d92 <__ieee754_rem_pio2+0x19a>
 8017d78:	1e6a      	subs	r2, r5, #1
 8017d7a:	4b6a      	ldr	r3, [pc, #424]	; (8017f24 <__ieee754_rem_pio2+0x32c>)
 8017d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d80:	4543      	cmp	r3, r8
 8017d82:	d006      	beq.n	8017d92 <__ieee754_rem_pio2+0x19a>
 8017d84:	4632      	mov	r2, r6
 8017d86:	463b      	mov	r3, r7
 8017d88:	4650      	mov	r0, sl
 8017d8a:	4659      	mov	r1, fp
 8017d8c:	f7e8 faa6 	bl	80002dc <__aeabi_dsub>
 8017d90:	e00e      	b.n	8017db0 <__ieee754_rem_pio2+0x1b8>
 8017d92:	4632      	mov	r2, r6
 8017d94:	463b      	mov	r3, r7
 8017d96:	4650      	mov	r0, sl
 8017d98:	4659      	mov	r1, fp
 8017d9a:	f7e8 fa9f 	bl	80002dc <__aeabi_dsub>
 8017d9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017da2:	9305      	str	r3, [sp, #20]
 8017da4:	9a05      	ldr	r2, [sp, #20]
 8017da6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017daa:	1ad3      	subs	r3, r2, r3
 8017dac:	2b10      	cmp	r3, #16
 8017dae:	dc02      	bgt.n	8017db6 <__ieee754_rem_pio2+0x1be>
 8017db0:	e9c4 0100 	strd	r0, r1, [r4]
 8017db4:	e039      	b.n	8017e2a <__ieee754_rem_pio2+0x232>
 8017db6:	a34c      	add	r3, pc, #304	; (adr r3, 8017ee8 <__ieee754_rem_pio2+0x2f0>)
 8017db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017dc0:	f7e8 fc44 	bl	800064c <__aeabi_dmul>
 8017dc4:	4606      	mov	r6, r0
 8017dc6:	460f      	mov	r7, r1
 8017dc8:	4602      	mov	r2, r0
 8017dca:	460b      	mov	r3, r1
 8017dcc:	4650      	mov	r0, sl
 8017dce:	4659      	mov	r1, fp
 8017dd0:	f7e8 fa84 	bl	80002dc <__aeabi_dsub>
 8017dd4:	4602      	mov	r2, r0
 8017dd6:	460b      	mov	r3, r1
 8017dd8:	4680      	mov	r8, r0
 8017dda:	4689      	mov	r9, r1
 8017ddc:	4650      	mov	r0, sl
 8017dde:	4659      	mov	r1, fp
 8017de0:	f7e8 fa7c 	bl	80002dc <__aeabi_dsub>
 8017de4:	4632      	mov	r2, r6
 8017de6:	463b      	mov	r3, r7
 8017de8:	f7e8 fa78 	bl	80002dc <__aeabi_dsub>
 8017dec:	a340      	add	r3, pc, #256	; (adr r3, 8017ef0 <__ieee754_rem_pio2+0x2f8>)
 8017dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017df2:	4606      	mov	r6, r0
 8017df4:	460f      	mov	r7, r1
 8017df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017dfa:	f7e8 fc27 	bl	800064c <__aeabi_dmul>
 8017dfe:	4632      	mov	r2, r6
 8017e00:	463b      	mov	r3, r7
 8017e02:	f7e8 fa6b 	bl	80002dc <__aeabi_dsub>
 8017e06:	4602      	mov	r2, r0
 8017e08:	460b      	mov	r3, r1
 8017e0a:	4606      	mov	r6, r0
 8017e0c:	460f      	mov	r7, r1
 8017e0e:	4640      	mov	r0, r8
 8017e10:	4649      	mov	r1, r9
 8017e12:	f7e8 fa63 	bl	80002dc <__aeabi_dsub>
 8017e16:	9a05      	ldr	r2, [sp, #20]
 8017e18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017e1c:	1ad3      	subs	r3, r2, r3
 8017e1e:	2b31      	cmp	r3, #49	; 0x31
 8017e20:	dc20      	bgt.n	8017e64 <__ieee754_rem_pio2+0x26c>
 8017e22:	e9c4 0100 	strd	r0, r1, [r4]
 8017e26:	46c2      	mov	sl, r8
 8017e28:	46cb      	mov	fp, r9
 8017e2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8017e2e:	4650      	mov	r0, sl
 8017e30:	4642      	mov	r2, r8
 8017e32:	464b      	mov	r3, r9
 8017e34:	4659      	mov	r1, fp
 8017e36:	f7e8 fa51 	bl	80002dc <__aeabi_dsub>
 8017e3a:	463b      	mov	r3, r7
 8017e3c:	4632      	mov	r2, r6
 8017e3e:	f7e8 fa4d 	bl	80002dc <__aeabi_dsub>
 8017e42:	9b04      	ldr	r3, [sp, #16]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017e4a:	f6bf af11 	bge.w	8017c70 <__ieee754_rem_pio2+0x78>
 8017e4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017e52:	6063      	str	r3, [r4, #4]
 8017e54:	f8c4 8000 	str.w	r8, [r4]
 8017e58:	60a0      	str	r0, [r4, #8]
 8017e5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017e5e:	60e3      	str	r3, [r4, #12]
 8017e60:	426d      	negs	r5, r5
 8017e62:	e705      	b.n	8017c70 <__ieee754_rem_pio2+0x78>
 8017e64:	a326      	add	r3, pc, #152	; (adr r3, 8017f00 <__ieee754_rem_pio2+0x308>)
 8017e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e6e:	f7e8 fbed 	bl	800064c <__aeabi_dmul>
 8017e72:	4606      	mov	r6, r0
 8017e74:	460f      	mov	r7, r1
 8017e76:	4602      	mov	r2, r0
 8017e78:	460b      	mov	r3, r1
 8017e7a:	4640      	mov	r0, r8
 8017e7c:	4649      	mov	r1, r9
 8017e7e:	f7e8 fa2d 	bl	80002dc <__aeabi_dsub>
 8017e82:	4602      	mov	r2, r0
 8017e84:	460b      	mov	r3, r1
 8017e86:	4682      	mov	sl, r0
 8017e88:	468b      	mov	fp, r1
 8017e8a:	4640      	mov	r0, r8
 8017e8c:	4649      	mov	r1, r9
 8017e8e:	f7e8 fa25 	bl	80002dc <__aeabi_dsub>
 8017e92:	4632      	mov	r2, r6
 8017e94:	463b      	mov	r3, r7
 8017e96:	f7e8 fa21 	bl	80002dc <__aeabi_dsub>
 8017e9a:	a31b      	add	r3, pc, #108	; (adr r3, 8017f08 <__ieee754_rem_pio2+0x310>)
 8017e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ea0:	4606      	mov	r6, r0
 8017ea2:	460f      	mov	r7, r1
 8017ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017ea8:	f7e8 fbd0 	bl	800064c <__aeabi_dmul>
 8017eac:	4632      	mov	r2, r6
 8017eae:	463b      	mov	r3, r7
 8017eb0:	f7e8 fa14 	bl	80002dc <__aeabi_dsub>
 8017eb4:	4606      	mov	r6, r0
 8017eb6:	460f      	mov	r7, r1
 8017eb8:	e764      	b.n	8017d84 <__ieee754_rem_pio2+0x18c>
 8017eba:	4b1b      	ldr	r3, [pc, #108]	; (8017f28 <__ieee754_rem_pio2+0x330>)
 8017ebc:	4598      	cmp	r8, r3
 8017ebe:	dd35      	ble.n	8017f2c <__ieee754_rem_pio2+0x334>
 8017ec0:	ee10 2a10 	vmov	r2, s0
 8017ec4:	463b      	mov	r3, r7
 8017ec6:	4630      	mov	r0, r6
 8017ec8:	4639      	mov	r1, r7
 8017eca:	f7e8 fa07 	bl	80002dc <__aeabi_dsub>
 8017ece:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017ed2:	e9c4 0100 	strd	r0, r1, [r4]
 8017ed6:	e6a1      	b.n	8017c1c <__ieee754_rem_pio2+0x24>
 8017ed8:	54400000 	.word	0x54400000
 8017edc:	3ff921fb 	.word	0x3ff921fb
 8017ee0:	1a626331 	.word	0x1a626331
 8017ee4:	3dd0b461 	.word	0x3dd0b461
 8017ee8:	1a600000 	.word	0x1a600000
 8017eec:	3dd0b461 	.word	0x3dd0b461
 8017ef0:	2e037073 	.word	0x2e037073
 8017ef4:	3ba3198a 	.word	0x3ba3198a
 8017ef8:	6dc9c883 	.word	0x6dc9c883
 8017efc:	3fe45f30 	.word	0x3fe45f30
 8017f00:	2e000000 	.word	0x2e000000
 8017f04:	3ba3198a 	.word	0x3ba3198a
 8017f08:	252049c1 	.word	0x252049c1
 8017f0c:	397b839a 	.word	0x397b839a
 8017f10:	3fe921fb 	.word	0x3fe921fb
 8017f14:	4002d97b 	.word	0x4002d97b
 8017f18:	3ff921fb 	.word	0x3ff921fb
 8017f1c:	413921fb 	.word	0x413921fb
 8017f20:	3fe00000 	.word	0x3fe00000
 8017f24:	08053660 	.word	0x08053660
 8017f28:	7fefffff 	.word	0x7fefffff
 8017f2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017f30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8017f34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8017f38:	4630      	mov	r0, r6
 8017f3a:	460f      	mov	r7, r1
 8017f3c:	f7e8 fe20 	bl	8000b80 <__aeabi_d2iz>
 8017f40:	f7e8 fb1a 	bl	8000578 <__aeabi_i2d>
 8017f44:	4602      	mov	r2, r0
 8017f46:	460b      	mov	r3, r1
 8017f48:	4630      	mov	r0, r6
 8017f4a:	4639      	mov	r1, r7
 8017f4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017f50:	f7e8 f9c4 	bl	80002dc <__aeabi_dsub>
 8017f54:	2200      	movs	r2, #0
 8017f56:	4b1f      	ldr	r3, [pc, #124]	; (8017fd4 <__ieee754_rem_pio2+0x3dc>)
 8017f58:	f7e8 fb78 	bl	800064c <__aeabi_dmul>
 8017f5c:	460f      	mov	r7, r1
 8017f5e:	4606      	mov	r6, r0
 8017f60:	f7e8 fe0e 	bl	8000b80 <__aeabi_d2iz>
 8017f64:	f7e8 fb08 	bl	8000578 <__aeabi_i2d>
 8017f68:	4602      	mov	r2, r0
 8017f6a:	460b      	mov	r3, r1
 8017f6c:	4630      	mov	r0, r6
 8017f6e:	4639      	mov	r1, r7
 8017f70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017f74:	f7e8 f9b2 	bl	80002dc <__aeabi_dsub>
 8017f78:	2200      	movs	r2, #0
 8017f7a:	4b16      	ldr	r3, [pc, #88]	; (8017fd4 <__ieee754_rem_pio2+0x3dc>)
 8017f7c:	f7e8 fb66 	bl	800064c <__aeabi_dmul>
 8017f80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017f84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8017f88:	f04f 0803 	mov.w	r8, #3
 8017f8c:	2600      	movs	r6, #0
 8017f8e:	2700      	movs	r7, #0
 8017f90:	4632      	mov	r2, r6
 8017f92:	463b      	mov	r3, r7
 8017f94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8017f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8017f9c:	f7e8 fdbe 	bl	8000b1c <__aeabi_dcmpeq>
 8017fa0:	b9b0      	cbnz	r0, 8017fd0 <__ieee754_rem_pio2+0x3d8>
 8017fa2:	4b0d      	ldr	r3, [pc, #52]	; (8017fd8 <__ieee754_rem_pio2+0x3e0>)
 8017fa4:	9301      	str	r3, [sp, #4]
 8017fa6:	2302      	movs	r3, #2
 8017fa8:	9300      	str	r3, [sp, #0]
 8017faa:	462a      	mov	r2, r5
 8017fac:	4643      	mov	r3, r8
 8017fae:	4621      	mov	r1, r4
 8017fb0:	a806      	add	r0, sp, #24
 8017fb2:	f000 f8dd 	bl	8018170 <__kernel_rem_pio2>
 8017fb6:	9b04      	ldr	r3, [sp, #16]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	4605      	mov	r5, r0
 8017fbc:	f6bf ae58 	bge.w	8017c70 <__ieee754_rem_pio2+0x78>
 8017fc0:	6863      	ldr	r3, [r4, #4]
 8017fc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017fc6:	6063      	str	r3, [r4, #4]
 8017fc8:	68e3      	ldr	r3, [r4, #12]
 8017fca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017fce:	e746      	b.n	8017e5e <__ieee754_rem_pio2+0x266>
 8017fd0:	46d0      	mov	r8, sl
 8017fd2:	e7dd      	b.n	8017f90 <__ieee754_rem_pio2+0x398>
 8017fd4:	41700000 	.word	0x41700000
 8017fd8:	080536e0 	.word	0x080536e0
 8017fdc:	00000000 	.word	0x00000000

08017fe0 <__kernel_cos>:
 8017fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fe4:	ec59 8b10 	vmov	r8, r9, d0
 8017fe8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8017fec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8017ff0:	ed2d 8b02 	vpush	{d8}
 8017ff4:	eeb0 8a41 	vmov.f32	s16, s2
 8017ff8:	eef0 8a61 	vmov.f32	s17, s3
 8017ffc:	da07      	bge.n	801800e <__kernel_cos+0x2e>
 8017ffe:	ee10 0a10 	vmov	r0, s0
 8018002:	4649      	mov	r1, r9
 8018004:	f7e8 fdbc 	bl	8000b80 <__aeabi_d2iz>
 8018008:	2800      	cmp	r0, #0
 801800a:	f000 8089 	beq.w	8018120 <__kernel_cos+0x140>
 801800e:	4642      	mov	r2, r8
 8018010:	464b      	mov	r3, r9
 8018012:	4640      	mov	r0, r8
 8018014:	4649      	mov	r1, r9
 8018016:	f7e8 fb19 	bl	800064c <__aeabi_dmul>
 801801a:	2200      	movs	r2, #0
 801801c:	4b4e      	ldr	r3, [pc, #312]	; (8018158 <__kernel_cos+0x178>)
 801801e:	4604      	mov	r4, r0
 8018020:	460d      	mov	r5, r1
 8018022:	f7e8 fb13 	bl	800064c <__aeabi_dmul>
 8018026:	a340      	add	r3, pc, #256	; (adr r3, 8018128 <__kernel_cos+0x148>)
 8018028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802c:	4682      	mov	sl, r0
 801802e:	468b      	mov	fp, r1
 8018030:	4620      	mov	r0, r4
 8018032:	4629      	mov	r1, r5
 8018034:	f7e8 fb0a 	bl	800064c <__aeabi_dmul>
 8018038:	a33d      	add	r3, pc, #244	; (adr r3, 8018130 <__kernel_cos+0x150>)
 801803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803e:	f7e8 f94f 	bl	80002e0 <__adddf3>
 8018042:	4622      	mov	r2, r4
 8018044:	462b      	mov	r3, r5
 8018046:	f7e8 fb01 	bl	800064c <__aeabi_dmul>
 801804a:	a33b      	add	r3, pc, #236	; (adr r3, 8018138 <__kernel_cos+0x158>)
 801804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018050:	f7e8 f944 	bl	80002dc <__aeabi_dsub>
 8018054:	4622      	mov	r2, r4
 8018056:	462b      	mov	r3, r5
 8018058:	f7e8 faf8 	bl	800064c <__aeabi_dmul>
 801805c:	a338      	add	r3, pc, #224	; (adr r3, 8018140 <__kernel_cos+0x160>)
 801805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018062:	f7e8 f93d 	bl	80002e0 <__adddf3>
 8018066:	4622      	mov	r2, r4
 8018068:	462b      	mov	r3, r5
 801806a:	f7e8 faef 	bl	800064c <__aeabi_dmul>
 801806e:	a336      	add	r3, pc, #216	; (adr r3, 8018148 <__kernel_cos+0x168>)
 8018070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018074:	f7e8 f932 	bl	80002dc <__aeabi_dsub>
 8018078:	4622      	mov	r2, r4
 801807a:	462b      	mov	r3, r5
 801807c:	f7e8 fae6 	bl	800064c <__aeabi_dmul>
 8018080:	a333      	add	r3, pc, #204	; (adr r3, 8018150 <__kernel_cos+0x170>)
 8018082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018086:	f7e8 f92b 	bl	80002e0 <__adddf3>
 801808a:	4622      	mov	r2, r4
 801808c:	462b      	mov	r3, r5
 801808e:	f7e8 fadd 	bl	800064c <__aeabi_dmul>
 8018092:	4622      	mov	r2, r4
 8018094:	462b      	mov	r3, r5
 8018096:	f7e8 fad9 	bl	800064c <__aeabi_dmul>
 801809a:	ec53 2b18 	vmov	r2, r3, d8
 801809e:	4604      	mov	r4, r0
 80180a0:	460d      	mov	r5, r1
 80180a2:	4640      	mov	r0, r8
 80180a4:	4649      	mov	r1, r9
 80180a6:	f7e8 fad1 	bl	800064c <__aeabi_dmul>
 80180aa:	460b      	mov	r3, r1
 80180ac:	4602      	mov	r2, r0
 80180ae:	4629      	mov	r1, r5
 80180b0:	4620      	mov	r0, r4
 80180b2:	f7e8 f913 	bl	80002dc <__aeabi_dsub>
 80180b6:	4b29      	ldr	r3, [pc, #164]	; (801815c <__kernel_cos+0x17c>)
 80180b8:	429e      	cmp	r6, r3
 80180ba:	4680      	mov	r8, r0
 80180bc:	4689      	mov	r9, r1
 80180be:	dc11      	bgt.n	80180e4 <__kernel_cos+0x104>
 80180c0:	4602      	mov	r2, r0
 80180c2:	460b      	mov	r3, r1
 80180c4:	4650      	mov	r0, sl
 80180c6:	4659      	mov	r1, fp
 80180c8:	f7e8 f908 	bl	80002dc <__aeabi_dsub>
 80180cc:	460b      	mov	r3, r1
 80180ce:	4924      	ldr	r1, [pc, #144]	; (8018160 <__kernel_cos+0x180>)
 80180d0:	4602      	mov	r2, r0
 80180d2:	2000      	movs	r0, #0
 80180d4:	f7e8 f902 	bl	80002dc <__aeabi_dsub>
 80180d8:	ecbd 8b02 	vpop	{d8}
 80180dc:	ec41 0b10 	vmov	d0, r0, r1
 80180e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180e4:	4b1f      	ldr	r3, [pc, #124]	; (8018164 <__kernel_cos+0x184>)
 80180e6:	491e      	ldr	r1, [pc, #120]	; (8018160 <__kernel_cos+0x180>)
 80180e8:	429e      	cmp	r6, r3
 80180ea:	bfcc      	ite	gt
 80180ec:	4d1e      	ldrgt	r5, [pc, #120]	; (8018168 <__kernel_cos+0x188>)
 80180ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80180f2:	2400      	movs	r4, #0
 80180f4:	4622      	mov	r2, r4
 80180f6:	462b      	mov	r3, r5
 80180f8:	2000      	movs	r0, #0
 80180fa:	f7e8 f8ef 	bl	80002dc <__aeabi_dsub>
 80180fe:	4622      	mov	r2, r4
 8018100:	4606      	mov	r6, r0
 8018102:	460f      	mov	r7, r1
 8018104:	462b      	mov	r3, r5
 8018106:	4650      	mov	r0, sl
 8018108:	4659      	mov	r1, fp
 801810a:	f7e8 f8e7 	bl	80002dc <__aeabi_dsub>
 801810e:	4642      	mov	r2, r8
 8018110:	464b      	mov	r3, r9
 8018112:	f7e8 f8e3 	bl	80002dc <__aeabi_dsub>
 8018116:	4602      	mov	r2, r0
 8018118:	460b      	mov	r3, r1
 801811a:	4630      	mov	r0, r6
 801811c:	4639      	mov	r1, r7
 801811e:	e7d9      	b.n	80180d4 <__kernel_cos+0xf4>
 8018120:	2000      	movs	r0, #0
 8018122:	490f      	ldr	r1, [pc, #60]	; (8018160 <__kernel_cos+0x180>)
 8018124:	e7d8      	b.n	80180d8 <__kernel_cos+0xf8>
 8018126:	bf00      	nop
 8018128:	be8838d4 	.word	0xbe8838d4
 801812c:	bda8fae9 	.word	0xbda8fae9
 8018130:	bdb4b1c4 	.word	0xbdb4b1c4
 8018134:	3e21ee9e 	.word	0x3e21ee9e
 8018138:	809c52ad 	.word	0x809c52ad
 801813c:	3e927e4f 	.word	0x3e927e4f
 8018140:	19cb1590 	.word	0x19cb1590
 8018144:	3efa01a0 	.word	0x3efa01a0
 8018148:	16c15177 	.word	0x16c15177
 801814c:	3f56c16c 	.word	0x3f56c16c
 8018150:	5555554c 	.word	0x5555554c
 8018154:	3fa55555 	.word	0x3fa55555
 8018158:	3fe00000 	.word	0x3fe00000
 801815c:	3fd33332 	.word	0x3fd33332
 8018160:	3ff00000 	.word	0x3ff00000
 8018164:	3fe90000 	.word	0x3fe90000
 8018168:	3fd20000 	.word	0x3fd20000
 801816c:	00000000 	.word	0x00000000

08018170 <__kernel_rem_pio2>:
 8018170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018174:	ed2d 8b02 	vpush	{d8}
 8018178:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801817c:	1ed4      	subs	r4, r2, #3
 801817e:	9308      	str	r3, [sp, #32]
 8018180:	9101      	str	r1, [sp, #4]
 8018182:	4bc5      	ldr	r3, [pc, #788]	; (8018498 <__kernel_rem_pio2+0x328>)
 8018184:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8018186:	9009      	str	r0, [sp, #36]	; 0x24
 8018188:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801818c:	9304      	str	r3, [sp, #16]
 801818e:	9b08      	ldr	r3, [sp, #32]
 8018190:	3b01      	subs	r3, #1
 8018192:	9307      	str	r3, [sp, #28]
 8018194:	2318      	movs	r3, #24
 8018196:	fb94 f4f3 	sdiv	r4, r4, r3
 801819a:	f06f 0317 	mvn.w	r3, #23
 801819e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80181a2:	fb04 3303 	mla	r3, r4, r3, r3
 80181a6:	eb03 0a02 	add.w	sl, r3, r2
 80181aa:	9b04      	ldr	r3, [sp, #16]
 80181ac:	9a07      	ldr	r2, [sp, #28]
 80181ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8018488 <__kernel_rem_pio2+0x318>
 80181b2:	eb03 0802 	add.w	r8, r3, r2
 80181b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80181b8:	1aa7      	subs	r7, r4, r2
 80181ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80181be:	ae22      	add	r6, sp, #136	; 0x88
 80181c0:	2500      	movs	r5, #0
 80181c2:	4545      	cmp	r5, r8
 80181c4:	dd13      	ble.n	80181ee <__kernel_rem_pio2+0x7e>
 80181c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8018488 <__kernel_rem_pio2+0x318>
 80181ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80181ce:	2600      	movs	r6, #0
 80181d0:	9b04      	ldr	r3, [sp, #16]
 80181d2:	429e      	cmp	r6, r3
 80181d4:	dc32      	bgt.n	801823c <__kernel_rem_pio2+0xcc>
 80181d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181d8:	9302      	str	r3, [sp, #8]
 80181da:	9b08      	ldr	r3, [sp, #32]
 80181dc:	199d      	adds	r5, r3, r6
 80181de:	ab22      	add	r3, sp, #136	; 0x88
 80181e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80181e4:	9306      	str	r3, [sp, #24]
 80181e6:	ec59 8b18 	vmov	r8, r9, d8
 80181ea:	2700      	movs	r7, #0
 80181ec:	e01f      	b.n	801822e <__kernel_rem_pio2+0xbe>
 80181ee:	42ef      	cmn	r7, r5
 80181f0:	d407      	bmi.n	8018202 <__kernel_rem_pio2+0x92>
 80181f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80181f6:	f7e8 f9bf 	bl	8000578 <__aeabi_i2d>
 80181fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80181fe:	3501      	adds	r5, #1
 8018200:	e7df      	b.n	80181c2 <__kernel_rem_pio2+0x52>
 8018202:	ec51 0b18 	vmov	r0, r1, d8
 8018206:	e7f8      	b.n	80181fa <__kernel_rem_pio2+0x8a>
 8018208:	9906      	ldr	r1, [sp, #24]
 801820a:	9d02      	ldr	r5, [sp, #8]
 801820c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8018210:	9106      	str	r1, [sp, #24]
 8018212:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8018216:	9502      	str	r5, [sp, #8]
 8018218:	f7e8 fa18 	bl	800064c <__aeabi_dmul>
 801821c:	4602      	mov	r2, r0
 801821e:	460b      	mov	r3, r1
 8018220:	4640      	mov	r0, r8
 8018222:	4649      	mov	r1, r9
 8018224:	f7e8 f85c 	bl	80002e0 <__adddf3>
 8018228:	3701      	adds	r7, #1
 801822a:	4680      	mov	r8, r0
 801822c:	4689      	mov	r9, r1
 801822e:	9b07      	ldr	r3, [sp, #28]
 8018230:	429f      	cmp	r7, r3
 8018232:	dde9      	ble.n	8018208 <__kernel_rem_pio2+0x98>
 8018234:	e8eb 8902 	strd	r8, r9, [fp], #8
 8018238:	3601      	adds	r6, #1
 801823a:	e7c9      	b.n	80181d0 <__kernel_rem_pio2+0x60>
 801823c:	9b04      	ldr	r3, [sp, #16]
 801823e:	aa0e      	add	r2, sp, #56	; 0x38
 8018240:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018244:	930c      	str	r3, [sp, #48]	; 0x30
 8018246:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018248:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801824c:	9c04      	ldr	r4, [sp, #16]
 801824e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018250:	ab9a      	add	r3, sp, #616	; 0x268
 8018252:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8018256:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801825a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801825e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8018262:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8018266:	ab9a      	add	r3, sp, #616	; 0x268
 8018268:	445b      	add	r3, fp
 801826a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801826e:	2500      	movs	r5, #0
 8018270:	1b63      	subs	r3, r4, r5
 8018272:	2b00      	cmp	r3, #0
 8018274:	dc78      	bgt.n	8018368 <__kernel_rem_pio2+0x1f8>
 8018276:	4650      	mov	r0, sl
 8018278:	ec49 8b10 	vmov	d0, r8, r9
 801827c:	f000 fc00 	bl	8018a80 <scalbn>
 8018280:	ec57 6b10 	vmov	r6, r7, d0
 8018284:	2200      	movs	r2, #0
 8018286:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801828a:	ee10 0a10 	vmov	r0, s0
 801828e:	4639      	mov	r1, r7
 8018290:	f7e8 f9dc 	bl	800064c <__aeabi_dmul>
 8018294:	ec41 0b10 	vmov	d0, r0, r1
 8018298:	f000 fb6e 	bl	8018978 <floor>
 801829c:	2200      	movs	r2, #0
 801829e:	ec51 0b10 	vmov	r0, r1, d0
 80182a2:	4b7e      	ldr	r3, [pc, #504]	; (801849c <__kernel_rem_pio2+0x32c>)
 80182a4:	f7e8 f9d2 	bl	800064c <__aeabi_dmul>
 80182a8:	4602      	mov	r2, r0
 80182aa:	460b      	mov	r3, r1
 80182ac:	4630      	mov	r0, r6
 80182ae:	4639      	mov	r1, r7
 80182b0:	f7e8 f814 	bl	80002dc <__aeabi_dsub>
 80182b4:	460f      	mov	r7, r1
 80182b6:	4606      	mov	r6, r0
 80182b8:	f7e8 fc62 	bl	8000b80 <__aeabi_d2iz>
 80182bc:	9006      	str	r0, [sp, #24]
 80182be:	f7e8 f95b 	bl	8000578 <__aeabi_i2d>
 80182c2:	4602      	mov	r2, r0
 80182c4:	460b      	mov	r3, r1
 80182c6:	4630      	mov	r0, r6
 80182c8:	4639      	mov	r1, r7
 80182ca:	f7e8 f807 	bl	80002dc <__aeabi_dsub>
 80182ce:	f1ba 0f00 	cmp.w	sl, #0
 80182d2:	4606      	mov	r6, r0
 80182d4:	460f      	mov	r7, r1
 80182d6:	dd6c      	ble.n	80183b2 <__kernel_rem_pio2+0x242>
 80182d8:	1e62      	subs	r2, r4, #1
 80182da:	ab0e      	add	r3, sp, #56	; 0x38
 80182dc:	f1ca 0118 	rsb	r1, sl, #24
 80182e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80182e4:	9d06      	ldr	r5, [sp, #24]
 80182e6:	fa40 f301 	asr.w	r3, r0, r1
 80182ea:	441d      	add	r5, r3
 80182ec:	408b      	lsls	r3, r1
 80182ee:	1ac0      	subs	r0, r0, r3
 80182f0:	ab0e      	add	r3, sp, #56	; 0x38
 80182f2:	9506      	str	r5, [sp, #24]
 80182f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80182f8:	f1ca 0317 	rsb	r3, sl, #23
 80182fc:	fa40 f303 	asr.w	r3, r0, r3
 8018300:	9302      	str	r3, [sp, #8]
 8018302:	9b02      	ldr	r3, [sp, #8]
 8018304:	2b00      	cmp	r3, #0
 8018306:	dd62      	ble.n	80183ce <__kernel_rem_pio2+0x25e>
 8018308:	9b06      	ldr	r3, [sp, #24]
 801830a:	2200      	movs	r2, #0
 801830c:	3301      	adds	r3, #1
 801830e:	9306      	str	r3, [sp, #24]
 8018310:	4615      	mov	r5, r2
 8018312:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8018316:	4294      	cmp	r4, r2
 8018318:	f300 8095 	bgt.w	8018446 <__kernel_rem_pio2+0x2d6>
 801831c:	f1ba 0f00 	cmp.w	sl, #0
 8018320:	dd07      	ble.n	8018332 <__kernel_rem_pio2+0x1c2>
 8018322:	f1ba 0f01 	cmp.w	sl, #1
 8018326:	f000 80a2 	beq.w	801846e <__kernel_rem_pio2+0x2fe>
 801832a:	f1ba 0f02 	cmp.w	sl, #2
 801832e:	f000 80c1 	beq.w	80184b4 <__kernel_rem_pio2+0x344>
 8018332:	9b02      	ldr	r3, [sp, #8]
 8018334:	2b02      	cmp	r3, #2
 8018336:	d14a      	bne.n	80183ce <__kernel_rem_pio2+0x25e>
 8018338:	4632      	mov	r2, r6
 801833a:	463b      	mov	r3, r7
 801833c:	2000      	movs	r0, #0
 801833e:	4958      	ldr	r1, [pc, #352]	; (80184a0 <__kernel_rem_pio2+0x330>)
 8018340:	f7e7 ffcc 	bl	80002dc <__aeabi_dsub>
 8018344:	4606      	mov	r6, r0
 8018346:	460f      	mov	r7, r1
 8018348:	2d00      	cmp	r5, #0
 801834a:	d040      	beq.n	80183ce <__kernel_rem_pio2+0x25e>
 801834c:	4650      	mov	r0, sl
 801834e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8018490 <__kernel_rem_pio2+0x320>
 8018352:	f000 fb95 	bl	8018a80 <scalbn>
 8018356:	4630      	mov	r0, r6
 8018358:	4639      	mov	r1, r7
 801835a:	ec53 2b10 	vmov	r2, r3, d0
 801835e:	f7e7 ffbd 	bl	80002dc <__aeabi_dsub>
 8018362:	4606      	mov	r6, r0
 8018364:	460f      	mov	r7, r1
 8018366:	e032      	b.n	80183ce <__kernel_rem_pio2+0x25e>
 8018368:	2200      	movs	r2, #0
 801836a:	4b4e      	ldr	r3, [pc, #312]	; (80184a4 <__kernel_rem_pio2+0x334>)
 801836c:	4640      	mov	r0, r8
 801836e:	4649      	mov	r1, r9
 8018370:	f7e8 f96c 	bl	800064c <__aeabi_dmul>
 8018374:	f7e8 fc04 	bl	8000b80 <__aeabi_d2iz>
 8018378:	f7e8 f8fe 	bl	8000578 <__aeabi_i2d>
 801837c:	2200      	movs	r2, #0
 801837e:	4b4a      	ldr	r3, [pc, #296]	; (80184a8 <__kernel_rem_pio2+0x338>)
 8018380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018384:	f7e8 f962 	bl	800064c <__aeabi_dmul>
 8018388:	4602      	mov	r2, r0
 801838a:	460b      	mov	r3, r1
 801838c:	4640      	mov	r0, r8
 801838e:	4649      	mov	r1, r9
 8018390:	f7e7 ffa4 	bl	80002dc <__aeabi_dsub>
 8018394:	f7e8 fbf4 	bl	8000b80 <__aeabi_d2iz>
 8018398:	ab0e      	add	r3, sp, #56	; 0x38
 801839a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801839e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80183a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80183a6:	f7e7 ff9b 	bl	80002e0 <__adddf3>
 80183aa:	3501      	adds	r5, #1
 80183ac:	4680      	mov	r8, r0
 80183ae:	4689      	mov	r9, r1
 80183b0:	e75e      	b.n	8018270 <__kernel_rem_pio2+0x100>
 80183b2:	d105      	bne.n	80183c0 <__kernel_rem_pio2+0x250>
 80183b4:	1e63      	subs	r3, r4, #1
 80183b6:	aa0e      	add	r2, sp, #56	; 0x38
 80183b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80183bc:	15c3      	asrs	r3, r0, #23
 80183be:	e79f      	b.n	8018300 <__kernel_rem_pio2+0x190>
 80183c0:	2200      	movs	r2, #0
 80183c2:	4b3a      	ldr	r3, [pc, #232]	; (80184ac <__kernel_rem_pio2+0x33c>)
 80183c4:	f7e8 fbc8 	bl	8000b58 <__aeabi_dcmpge>
 80183c8:	2800      	cmp	r0, #0
 80183ca:	d139      	bne.n	8018440 <__kernel_rem_pio2+0x2d0>
 80183cc:	9002      	str	r0, [sp, #8]
 80183ce:	2200      	movs	r2, #0
 80183d0:	2300      	movs	r3, #0
 80183d2:	4630      	mov	r0, r6
 80183d4:	4639      	mov	r1, r7
 80183d6:	f7e8 fba1 	bl	8000b1c <__aeabi_dcmpeq>
 80183da:	2800      	cmp	r0, #0
 80183dc:	f000 80c7 	beq.w	801856e <__kernel_rem_pio2+0x3fe>
 80183e0:	1e65      	subs	r5, r4, #1
 80183e2:	462b      	mov	r3, r5
 80183e4:	2200      	movs	r2, #0
 80183e6:	9904      	ldr	r1, [sp, #16]
 80183e8:	428b      	cmp	r3, r1
 80183ea:	da6a      	bge.n	80184c2 <__kernel_rem_pio2+0x352>
 80183ec:	2a00      	cmp	r2, #0
 80183ee:	f000 8088 	beq.w	8018502 <__kernel_rem_pio2+0x392>
 80183f2:	ab0e      	add	r3, sp, #56	; 0x38
 80183f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80183f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	f000 80b4 	beq.w	801856a <__kernel_rem_pio2+0x3fa>
 8018402:	4650      	mov	r0, sl
 8018404:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8018490 <__kernel_rem_pio2+0x320>
 8018408:	f000 fb3a 	bl	8018a80 <scalbn>
 801840c:	00ec      	lsls	r4, r5, #3
 801840e:	ab72      	add	r3, sp, #456	; 0x1c8
 8018410:	191e      	adds	r6, r3, r4
 8018412:	ec59 8b10 	vmov	r8, r9, d0
 8018416:	f106 0a08 	add.w	sl, r6, #8
 801841a:	462f      	mov	r7, r5
 801841c:	2f00      	cmp	r7, #0
 801841e:	f280 80df 	bge.w	80185e0 <__kernel_rem_pio2+0x470>
 8018422:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8018488 <__kernel_rem_pio2+0x318>
 8018426:	f04f 0a00 	mov.w	sl, #0
 801842a:	eba5 030a 	sub.w	r3, r5, sl
 801842e:	2b00      	cmp	r3, #0
 8018430:	f2c0 810a 	blt.w	8018648 <__kernel_rem_pio2+0x4d8>
 8018434:	f8df b078 	ldr.w	fp, [pc, #120]	; 80184b0 <__kernel_rem_pio2+0x340>
 8018438:	ec59 8b18 	vmov	r8, r9, d8
 801843c:	2700      	movs	r7, #0
 801843e:	e0f5      	b.n	801862c <__kernel_rem_pio2+0x4bc>
 8018440:	2302      	movs	r3, #2
 8018442:	9302      	str	r3, [sp, #8]
 8018444:	e760      	b.n	8018308 <__kernel_rem_pio2+0x198>
 8018446:	ab0e      	add	r3, sp, #56	; 0x38
 8018448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801844c:	b94d      	cbnz	r5, 8018462 <__kernel_rem_pio2+0x2f2>
 801844e:	b12b      	cbz	r3, 801845c <__kernel_rem_pio2+0x2ec>
 8018450:	a80e      	add	r0, sp, #56	; 0x38
 8018452:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018456:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801845a:	2301      	movs	r3, #1
 801845c:	3201      	adds	r2, #1
 801845e:	461d      	mov	r5, r3
 8018460:	e759      	b.n	8018316 <__kernel_rem_pio2+0x1a6>
 8018462:	a80e      	add	r0, sp, #56	; 0x38
 8018464:	1acb      	subs	r3, r1, r3
 8018466:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801846a:	462b      	mov	r3, r5
 801846c:	e7f6      	b.n	801845c <__kernel_rem_pio2+0x2ec>
 801846e:	1e62      	subs	r2, r4, #1
 8018470:	ab0e      	add	r3, sp, #56	; 0x38
 8018472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018476:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801847a:	a90e      	add	r1, sp, #56	; 0x38
 801847c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018480:	e757      	b.n	8018332 <__kernel_rem_pio2+0x1c2>
 8018482:	bf00      	nop
 8018484:	f3af 8000 	nop.w
	...
 8018494:	3ff00000 	.word	0x3ff00000
 8018498:	08053828 	.word	0x08053828
 801849c:	40200000 	.word	0x40200000
 80184a0:	3ff00000 	.word	0x3ff00000
 80184a4:	3e700000 	.word	0x3e700000
 80184a8:	41700000 	.word	0x41700000
 80184ac:	3fe00000 	.word	0x3fe00000
 80184b0:	080537e8 	.word	0x080537e8
 80184b4:	1e62      	subs	r2, r4, #1
 80184b6:	ab0e      	add	r3, sp, #56	; 0x38
 80184b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80184c0:	e7db      	b.n	801847a <__kernel_rem_pio2+0x30a>
 80184c2:	a90e      	add	r1, sp, #56	; 0x38
 80184c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80184c8:	3b01      	subs	r3, #1
 80184ca:	430a      	orrs	r2, r1
 80184cc:	e78b      	b.n	80183e6 <__kernel_rem_pio2+0x276>
 80184ce:	3301      	adds	r3, #1
 80184d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80184d4:	2900      	cmp	r1, #0
 80184d6:	d0fa      	beq.n	80184ce <__kernel_rem_pio2+0x35e>
 80184d8:	9a08      	ldr	r2, [sp, #32]
 80184da:	4422      	add	r2, r4
 80184dc:	00d2      	lsls	r2, r2, #3
 80184de:	a922      	add	r1, sp, #136	; 0x88
 80184e0:	18e3      	adds	r3, r4, r3
 80184e2:	9206      	str	r2, [sp, #24]
 80184e4:	440a      	add	r2, r1
 80184e6:	9302      	str	r3, [sp, #8]
 80184e8:	f10b 0108 	add.w	r1, fp, #8
 80184ec:	f102 0308 	add.w	r3, r2, #8
 80184f0:	1c66      	adds	r6, r4, #1
 80184f2:	910a      	str	r1, [sp, #40]	; 0x28
 80184f4:	2500      	movs	r5, #0
 80184f6:	930d      	str	r3, [sp, #52]	; 0x34
 80184f8:	9b02      	ldr	r3, [sp, #8]
 80184fa:	42b3      	cmp	r3, r6
 80184fc:	da04      	bge.n	8018508 <__kernel_rem_pio2+0x398>
 80184fe:	461c      	mov	r4, r3
 8018500:	e6a6      	b.n	8018250 <__kernel_rem_pio2+0xe0>
 8018502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018504:	2301      	movs	r3, #1
 8018506:	e7e3      	b.n	80184d0 <__kernel_rem_pio2+0x360>
 8018508:	9b06      	ldr	r3, [sp, #24]
 801850a:	18ef      	adds	r7, r5, r3
 801850c:	ab22      	add	r3, sp, #136	; 0x88
 801850e:	441f      	add	r7, r3
 8018510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018512:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018516:	f7e8 f82f 	bl	8000578 <__aeabi_i2d>
 801851a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801851c:	461c      	mov	r4, r3
 801851e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018520:	e9c7 0100 	strd	r0, r1, [r7]
 8018524:	eb03 0b05 	add.w	fp, r3, r5
 8018528:	2700      	movs	r7, #0
 801852a:	f04f 0800 	mov.w	r8, #0
 801852e:	f04f 0900 	mov.w	r9, #0
 8018532:	9b07      	ldr	r3, [sp, #28]
 8018534:	429f      	cmp	r7, r3
 8018536:	dd08      	ble.n	801854a <__kernel_rem_pio2+0x3da>
 8018538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801853a:	aa72      	add	r2, sp, #456	; 0x1c8
 801853c:	18eb      	adds	r3, r5, r3
 801853e:	4413      	add	r3, r2
 8018540:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8018544:	3601      	adds	r6, #1
 8018546:	3508      	adds	r5, #8
 8018548:	e7d6      	b.n	80184f8 <__kernel_rem_pio2+0x388>
 801854a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801854e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8018552:	f7e8 f87b 	bl	800064c <__aeabi_dmul>
 8018556:	4602      	mov	r2, r0
 8018558:	460b      	mov	r3, r1
 801855a:	4640      	mov	r0, r8
 801855c:	4649      	mov	r1, r9
 801855e:	f7e7 febf 	bl	80002e0 <__adddf3>
 8018562:	3701      	adds	r7, #1
 8018564:	4680      	mov	r8, r0
 8018566:	4689      	mov	r9, r1
 8018568:	e7e3      	b.n	8018532 <__kernel_rem_pio2+0x3c2>
 801856a:	3d01      	subs	r5, #1
 801856c:	e741      	b.n	80183f2 <__kernel_rem_pio2+0x282>
 801856e:	f1ca 0000 	rsb	r0, sl, #0
 8018572:	ec47 6b10 	vmov	d0, r6, r7
 8018576:	f000 fa83 	bl	8018a80 <scalbn>
 801857a:	ec57 6b10 	vmov	r6, r7, d0
 801857e:	2200      	movs	r2, #0
 8018580:	4b99      	ldr	r3, [pc, #612]	; (80187e8 <__kernel_rem_pio2+0x678>)
 8018582:	ee10 0a10 	vmov	r0, s0
 8018586:	4639      	mov	r1, r7
 8018588:	f7e8 fae6 	bl	8000b58 <__aeabi_dcmpge>
 801858c:	b1f8      	cbz	r0, 80185ce <__kernel_rem_pio2+0x45e>
 801858e:	2200      	movs	r2, #0
 8018590:	4b96      	ldr	r3, [pc, #600]	; (80187ec <__kernel_rem_pio2+0x67c>)
 8018592:	4630      	mov	r0, r6
 8018594:	4639      	mov	r1, r7
 8018596:	f7e8 f859 	bl	800064c <__aeabi_dmul>
 801859a:	f7e8 faf1 	bl	8000b80 <__aeabi_d2iz>
 801859e:	4680      	mov	r8, r0
 80185a0:	f7e7 ffea 	bl	8000578 <__aeabi_i2d>
 80185a4:	2200      	movs	r2, #0
 80185a6:	4b90      	ldr	r3, [pc, #576]	; (80187e8 <__kernel_rem_pio2+0x678>)
 80185a8:	f7e8 f850 	bl	800064c <__aeabi_dmul>
 80185ac:	460b      	mov	r3, r1
 80185ae:	4602      	mov	r2, r0
 80185b0:	4639      	mov	r1, r7
 80185b2:	4630      	mov	r0, r6
 80185b4:	f7e7 fe92 	bl	80002dc <__aeabi_dsub>
 80185b8:	f7e8 fae2 	bl	8000b80 <__aeabi_d2iz>
 80185bc:	1c65      	adds	r5, r4, #1
 80185be:	ab0e      	add	r3, sp, #56	; 0x38
 80185c0:	f10a 0a18 	add.w	sl, sl, #24
 80185c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80185c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80185cc:	e719      	b.n	8018402 <__kernel_rem_pio2+0x292>
 80185ce:	4630      	mov	r0, r6
 80185d0:	4639      	mov	r1, r7
 80185d2:	f7e8 fad5 	bl	8000b80 <__aeabi_d2iz>
 80185d6:	ab0e      	add	r3, sp, #56	; 0x38
 80185d8:	4625      	mov	r5, r4
 80185da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80185de:	e710      	b.n	8018402 <__kernel_rem_pio2+0x292>
 80185e0:	ab0e      	add	r3, sp, #56	; 0x38
 80185e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80185e6:	f7e7 ffc7 	bl	8000578 <__aeabi_i2d>
 80185ea:	4642      	mov	r2, r8
 80185ec:	464b      	mov	r3, r9
 80185ee:	f7e8 f82d 	bl	800064c <__aeabi_dmul>
 80185f2:	2200      	movs	r2, #0
 80185f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80185f8:	4b7c      	ldr	r3, [pc, #496]	; (80187ec <__kernel_rem_pio2+0x67c>)
 80185fa:	4640      	mov	r0, r8
 80185fc:	4649      	mov	r1, r9
 80185fe:	f7e8 f825 	bl	800064c <__aeabi_dmul>
 8018602:	3f01      	subs	r7, #1
 8018604:	4680      	mov	r8, r0
 8018606:	4689      	mov	r9, r1
 8018608:	e708      	b.n	801841c <__kernel_rem_pio2+0x2ac>
 801860a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018612:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8018616:	f7e8 f819 	bl	800064c <__aeabi_dmul>
 801861a:	4602      	mov	r2, r0
 801861c:	460b      	mov	r3, r1
 801861e:	4640      	mov	r0, r8
 8018620:	4649      	mov	r1, r9
 8018622:	f7e7 fe5d 	bl	80002e0 <__adddf3>
 8018626:	3701      	adds	r7, #1
 8018628:	4680      	mov	r8, r0
 801862a:	4689      	mov	r9, r1
 801862c:	9b04      	ldr	r3, [sp, #16]
 801862e:	429f      	cmp	r7, r3
 8018630:	dc01      	bgt.n	8018636 <__kernel_rem_pio2+0x4c6>
 8018632:	45ba      	cmp	sl, r7
 8018634:	dae9      	bge.n	801860a <__kernel_rem_pio2+0x49a>
 8018636:	ab4a      	add	r3, sp, #296	; 0x128
 8018638:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801863c:	e9c3 8900 	strd	r8, r9, [r3]
 8018640:	f10a 0a01 	add.w	sl, sl, #1
 8018644:	3e08      	subs	r6, #8
 8018646:	e6f0      	b.n	801842a <__kernel_rem_pio2+0x2ba>
 8018648:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801864a:	2b03      	cmp	r3, #3
 801864c:	d85b      	bhi.n	8018706 <__kernel_rem_pio2+0x596>
 801864e:	e8df f003 	tbb	[pc, r3]
 8018652:	264a      	.short	0x264a
 8018654:	0226      	.short	0x0226
 8018656:	ab9a      	add	r3, sp, #616	; 0x268
 8018658:	441c      	add	r4, r3
 801865a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801865e:	46a2      	mov	sl, r4
 8018660:	46ab      	mov	fp, r5
 8018662:	f1bb 0f00 	cmp.w	fp, #0
 8018666:	dc6c      	bgt.n	8018742 <__kernel_rem_pio2+0x5d2>
 8018668:	46a2      	mov	sl, r4
 801866a:	46ab      	mov	fp, r5
 801866c:	f1bb 0f01 	cmp.w	fp, #1
 8018670:	f300 8086 	bgt.w	8018780 <__kernel_rem_pio2+0x610>
 8018674:	2000      	movs	r0, #0
 8018676:	2100      	movs	r1, #0
 8018678:	2d01      	cmp	r5, #1
 801867a:	f300 80a0 	bgt.w	80187be <__kernel_rem_pio2+0x64e>
 801867e:	9b02      	ldr	r3, [sp, #8]
 8018680:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8018684:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8018688:	2b00      	cmp	r3, #0
 801868a:	f040 809e 	bne.w	80187ca <__kernel_rem_pio2+0x65a>
 801868e:	9b01      	ldr	r3, [sp, #4]
 8018690:	e9c3 7800 	strd	r7, r8, [r3]
 8018694:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8018698:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801869c:	e033      	b.n	8018706 <__kernel_rem_pio2+0x596>
 801869e:	3408      	adds	r4, #8
 80186a0:	ab4a      	add	r3, sp, #296	; 0x128
 80186a2:	441c      	add	r4, r3
 80186a4:	462e      	mov	r6, r5
 80186a6:	2000      	movs	r0, #0
 80186a8:	2100      	movs	r1, #0
 80186aa:	2e00      	cmp	r6, #0
 80186ac:	da3a      	bge.n	8018724 <__kernel_rem_pio2+0x5b4>
 80186ae:	9b02      	ldr	r3, [sp, #8]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d03d      	beq.n	8018730 <__kernel_rem_pio2+0x5c0>
 80186b4:	4602      	mov	r2, r0
 80186b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80186ba:	9c01      	ldr	r4, [sp, #4]
 80186bc:	e9c4 2300 	strd	r2, r3, [r4]
 80186c0:	4602      	mov	r2, r0
 80186c2:	460b      	mov	r3, r1
 80186c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80186c8:	f7e7 fe08 	bl	80002dc <__aeabi_dsub>
 80186cc:	ae4c      	add	r6, sp, #304	; 0x130
 80186ce:	2401      	movs	r4, #1
 80186d0:	42a5      	cmp	r5, r4
 80186d2:	da30      	bge.n	8018736 <__kernel_rem_pio2+0x5c6>
 80186d4:	9b02      	ldr	r3, [sp, #8]
 80186d6:	b113      	cbz	r3, 80186de <__kernel_rem_pio2+0x56e>
 80186d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80186dc:	4619      	mov	r1, r3
 80186de:	9b01      	ldr	r3, [sp, #4]
 80186e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80186e4:	e00f      	b.n	8018706 <__kernel_rem_pio2+0x596>
 80186e6:	ab9a      	add	r3, sp, #616	; 0x268
 80186e8:	441c      	add	r4, r3
 80186ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80186ee:	2000      	movs	r0, #0
 80186f0:	2100      	movs	r1, #0
 80186f2:	2d00      	cmp	r5, #0
 80186f4:	da10      	bge.n	8018718 <__kernel_rem_pio2+0x5a8>
 80186f6:	9b02      	ldr	r3, [sp, #8]
 80186f8:	b113      	cbz	r3, 8018700 <__kernel_rem_pio2+0x590>
 80186fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80186fe:	4619      	mov	r1, r3
 8018700:	9b01      	ldr	r3, [sp, #4]
 8018702:	e9c3 0100 	strd	r0, r1, [r3]
 8018706:	9b06      	ldr	r3, [sp, #24]
 8018708:	f003 0007 	and.w	r0, r3, #7
 801870c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8018710:	ecbd 8b02 	vpop	{d8}
 8018714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018718:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801871c:	f7e7 fde0 	bl	80002e0 <__adddf3>
 8018720:	3d01      	subs	r5, #1
 8018722:	e7e6      	b.n	80186f2 <__kernel_rem_pio2+0x582>
 8018724:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018728:	f7e7 fdda 	bl	80002e0 <__adddf3>
 801872c:	3e01      	subs	r6, #1
 801872e:	e7bc      	b.n	80186aa <__kernel_rem_pio2+0x53a>
 8018730:	4602      	mov	r2, r0
 8018732:	460b      	mov	r3, r1
 8018734:	e7c1      	b.n	80186ba <__kernel_rem_pio2+0x54a>
 8018736:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801873a:	f7e7 fdd1 	bl	80002e0 <__adddf3>
 801873e:	3401      	adds	r4, #1
 8018740:	e7c6      	b.n	80186d0 <__kernel_rem_pio2+0x560>
 8018742:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8018746:	ed3a 7b02 	vldmdb	sl!, {d7}
 801874a:	4640      	mov	r0, r8
 801874c:	ec53 2b17 	vmov	r2, r3, d7
 8018750:	4649      	mov	r1, r9
 8018752:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018756:	f7e7 fdc3 	bl	80002e0 <__adddf3>
 801875a:	4602      	mov	r2, r0
 801875c:	460b      	mov	r3, r1
 801875e:	4606      	mov	r6, r0
 8018760:	460f      	mov	r7, r1
 8018762:	4640      	mov	r0, r8
 8018764:	4649      	mov	r1, r9
 8018766:	f7e7 fdb9 	bl	80002dc <__aeabi_dsub>
 801876a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801876e:	f7e7 fdb7 	bl	80002e0 <__adddf3>
 8018772:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018776:	e9ca 0100 	strd	r0, r1, [sl]
 801877a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801877e:	e770      	b.n	8018662 <__kernel_rem_pio2+0x4f2>
 8018780:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8018784:	ed3a 7b02 	vldmdb	sl!, {d7}
 8018788:	4630      	mov	r0, r6
 801878a:	ec53 2b17 	vmov	r2, r3, d7
 801878e:	4639      	mov	r1, r7
 8018790:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018794:	f7e7 fda4 	bl	80002e0 <__adddf3>
 8018798:	4602      	mov	r2, r0
 801879a:	460b      	mov	r3, r1
 801879c:	4680      	mov	r8, r0
 801879e:	4689      	mov	r9, r1
 80187a0:	4630      	mov	r0, r6
 80187a2:	4639      	mov	r1, r7
 80187a4:	f7e7 fd9a 	bl	80002dc <__aeabi_dsub>
 80187a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80187ac:	f7e7 fd98 	bl	80002e0 <__adddf3>
 80187b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80187b4:	e9ca 0100 	strd	r0, r1, [sl]
 80187b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80187bc:	e756      	b.n	801866c <__kernel_rem_pio2+0x4fc>
 80187be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80187c2:	f7e7 fd8d 	bl	80002e0 <__adddf3>
 80187c6:	3d01      	subs	r5, #1
 80187c8:	e756      	b.n	8018678 <__kernel_rem_pio2+0x508>
 80187ca:	9b01      	ldr	r3, [sp, #4]
 80187cc:	9a01      	ldr	r2, [sp, #4]
 80187ce:	601f      	str	r7, [r3, #0]
 80187d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80187d4:	605c      	str	r4, [r3, #4]
 80187d6:	609d      	str	r5, [r3, #8]
 80187d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80187dc:	60d3      	str	r3, [r2, #12]
 80187de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80187e2:	6110      	str	r0, [r2, #16]
 80187e4:	6153      	str	r3, [r2, #20]
 80187e6:	e78e      	b.n	8018706 <__kernel_rem_pio2+0x596>
 80187e8:	41700000 	.word	0x41700000
 80187ec:	3e700000 	.word	0x3e700000

080187f0 <__kernel_sin>:
 80187f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f4:	ec55 4b10 	vmov	r4, r5, d0
 80187f8:	b085      	sub	sp, #20
 80187fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80187fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8018802:	ed8d 1b00 	vstr	d1, [sp]
 8018806:	9002      	str	r0, [sp, #8]
 8018808:	da06      	bge.n	8018818 <__kernel_sin+0x28>
 801880a:	ee10 0a10 	vmov	r0, s0
 801880e:	4629      	mov	r1, r5
 8018810:	f7e8 f9b6 	bl	8000b80 <__aeabi_d2iz>
 8018814:	2800      	cmp	r0, #0
 8018816:	d051      	beq.n	80188bc <__kernel_sin+0xcc>
 8018818:	4622      	mov	r2, r4
 801881a:	462b      	mov	r3, r5
 801881c:	4620      	mov	r0, r4
 801881e:	4629      	mov	r1, r5
 8018820:	f7e7 ff14 	bl	800064c <__aeabi_dmul>
 8018824:	4682      	mov	sl, r0
 8018826:	468b      	mov	fp, r1
 8018828:	4602      	mov	r2, r0
 801882a:	460b      	mov	r3, r1
 801882c:	4620      	mov	r0, r4
 801882e:	4629      	mov	r1, r5
 8018830:	f7e7 ff0c 	bl	800064c <__aeabi_dmul>
 8018834:	a341      	add	r3, pc, #260	; (adr r3, 801893c <__kernel_sin+0x14c>)
 8018836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801883a:	4680      	mov	r8, r0
 801883c:	4689      	mov	r9, r1
 801883e:	4650      	mov	r0, sl
 8018840:	4659      	mov	r1, fp
 8018842:	f7e7 ff03 	bl	800064c <__aeabi_dmul>
 8018846:	a33f      	add	r3, pc, #252	; (adr r3, 8018944 <__kernel_sin+0x154>)
 8018848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801884c:	f7e7 fd46 	bl	80002dc <__aeabi_dsub>
 8018850:	4652      	mov	r2, sl
 8018852:	465b      	mov	r3, fp
 8018854:	f7e7 fefa 	bl	800064c <__aeabi_dmul>
 8018858:	a33c      	add	r3, pc, #240	; (adr r3, 801894c <__kernel_sin+0x15c>)
 801885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801885e:	f7e7 fd3f 	bl	80002e0 <__adddf3>
 8018862:	4652      	mov	r2, sl
 8018864:	465b      	mov	r3, fp
 8018866:	f7e7 fef1 	bl	800064c <__aeabi_dmul>
 801886a:	a33a      	add	r3, pc, #232	; (adr r3, 8018954 <__kernel_sin+0x164>)
 801886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018870:	f7e7 fd34 	bl	80002dc <__aeabi_dsub>
 8018874:	4652      	mov	r2, sl
 8018876:	465b      	mov	r3, fp
 8018878:	f7e7 fee8 	bl	800064c <__aeabi_dmul>
 801887c:	a337      	add	r3, pc, #220	; (adr r3, 801895c <__kernel_sin+0x16c>)
 801887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018882:	f7e7 fd2d 	bl	80002e0 <__adddf3>
 8018886:	9b02      	ldr	r3, [sp, #8]
 8018888:	4606      	mov	r6, r0
 801888a:	460f      	mov	r7, r1
 801888c:	b9db      	cbnz	r3, 80188c6 <__kernel_sin+0xd6>
 801888e:	4602      	mov	r2, r0
 8018890:	460b      	mov	r3, r1
 8018892:	4650      	mov	r0, sl
 8018894:	4659      	mov	r1, fp
 8018896:	f7e7 fed9 	bl	800064c <__aeabi_dmul>
 801889a:	a325      	add	r3, pc, #148	; (adr r3, 8018930 <__kernel_sin+0x140>)
 801889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188a0:	f7e7 fd1c 	bl	80002dc <__aeabi_dsub>
 80188a4:	4642      	mov	r2, r8
 80188a6:	464b      	mov	r3, r9
 80188a8:	f7e7 fed0 	bl	800064c <__aeabi_dmul>
 80188ac:	4602      	mov	r2, r0
 80188ae:	460b      	mov	r3, r1
 80188b0:	4620      	mov	r0, r4
 80188b2:	4629      	mov	r1, r5
 80188b4:	f7e7 fd14 	bl	80002e0 <__adddf3>
 80188b8:	4604      	mov	r4, r0
 80188ba:	460d      	mov	r5, r1
 80188bc:	ec45 4b10 	vmov	d0, r4, r5
 80188c0:	b005      	add	sp, #20
 80188c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188c6:	2200      	movs	r2, #0
 80188c8:	4b1b      	ldr	r3, [pc, #108]	; (8018938 <__kernel_sin+0x148>)
 80188ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80188ce:	f7e7 febd 	bl	800064c <__aeabi_dmul>
 80188d2:	4632      	mov	r2, r6
 80188d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80188d8:	463b      	mov	r3, r7
 80188da:	4640      	mov	r0, r8
 80188dc:	4649      	mov	r1, r9
 80188de:	f7e7 feb5 	bl	800064c <__aeabi_dmul>
 80188e2:	4602      	mov	r2, r0
 80188e4:	460b      	mov	r3, r1
 80188e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80188ea:	f7e7 fcf7 	bl	80002dc <__aeabi_dsub>
 80188ee:	4652      	mov	r2, sl
 80188f0:	465b      	mov	r3, fp
 80188f2:	f7e7 feab 	bl	800064c <__aeabi_dmul>
 80188f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80188fa:	f7e7 fcef 	bl	80002dc <__aeabi_dsub>
 80188fe:	a30c      	add	r3, pc, #48	; (adr r3, 8018930 <__kernel_sin+0x140>)
 8018900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018904:	4606      	mov	r6, r0
 8018906:	460f      	mov	r7, r1
 8018908:	4640      	mov	r0, r8
 801890a:	4649      	mov	r1, r9
 801890c:	f7e7 fe9e 	bl	800064c <__aeabi_dmul>
 8018910:	4602      	mov	r2, r0
 8018912:	460b      	mov	r3, r1
 8018914:	4630      	mov	r0, r6
 8018916:	4639      	mov	r1, r7
 8018918:	f7e7 fce2 	bl	80002e0 <__adddf3>
 801891c:	4602      	mov	r2, r0
 801891e:	460b      	mov	r3, r1
 8018920:	4620      	mov	r0, r4
 8018922:	4629      	mov	r1, r5
 8018924:	f7e7 fcda 	bl	80002dc <__aeabi_dsub>
 8018928:	e7c6      	b.n	80188b8 <__kernel_sin+0xc8>
 801892a:	bf00      	nop
 801892c:	f3af 8000 	nop.w
 8018930:	55555549 	.word	0x55555549
 8018934:	3fc55555 	.word	0x3fc55555
 8018938:	3fe00000 	.word	0x3fe00000
 801893c:	5acfd57c 	.word	0x5acfd57c
 8018940:	3de5d93a 	.word	0x3de5d93a
 8018944:	8a2b9ceb 	.word	0x8a2b9ceb
 8018948:	3e5ae5e6 	.word	0x3e5ae5e6
 801894c:	57b1fe7d 	.word	0x57b1fe7d
 8018950:	3ec71de3 	.word	0x3ec71de3
 8018954:	19c161d5 	.word	0x19c161d5
 8018958:	3f2a01a0 	.word	0x3f2a01a0
 801895c:	1110f8a6 	.word	0x1110f8a6
 8018960:	3f811111 	.word	0x3f811111

08018964 <fabs>:
 8018964:	ec51 0b10 	vmov	r0, r1, d0
 8018968:	ee10 2a10 	vmov	r2, s0
 801896c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018970:	ec43 2b10 	vmov	d0, r2, r3
 8018974:	4770      	bx	lr
	...

08018978 <floor>:
 8018978:	ec51 0b10 	vmov	r0, r1, d0
 801897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018980:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018984:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018988:	2e13      	cmp	r6, #19
 801898a:	460c      	mov	r4, r1
 801898c:	ee10 5a10 	vmov	r5, s0
 8018990:	4680      	mov	r8, r0
 8018992:	dc34      	bgt.n	80189fe <floor+0x86>
 8018994:	2e00      	cmp	r6, #0
 8018996:	da16      	bge.n	80189c6 <floor+0x4e>
 8018998:	a335      	add	r3, pc, #212	; (adr r3, 8018a70 <floor+0xf8>)
 801899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801899e:	f7e7 fc9f 	bl	80002e0 <__adddf3>
 80189a2:	2200      	movs	r2, #0
 80189a4:	2300      	movs	r3, #0
 80189a6:	f7e8 f8e1 	bl	8000b6c <__aeabi_dcmpgt>
 80189aa:	b148      	cbz	r0, 80189c0 <floor+0x48>
 80189ac:	2c00      	cmp	r4, #0
 80189ae:	da59      	bge.n	8018a64 <floor+0xec>
 80189b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80189b4:	4a30      	ldr	r2, [pc, #192]	; (8018a78 <floor+0x100>)
 80189b6:	432b      	orrs	r3, r5
 80189b8:	2500      	movs	r5, #0
 80189ba:	42ab      	cmp	r3, r5
 80189bc:	bf18      	it	ne
 80189be:	4614      	movne	r4, r2
 80189c0:	4621      	mov	r1, r4
 80189c2:	4628      	mov	r0, r5
 80189c4:	e025      	b.n	8018a12 <floor+0x9a>
 80189c6:	4f2d      	ldr	r7, [pc, #180]	; (8018a7c <floor+0x104>)
 80189c8:	4137      	asrs	r7, r6
 80189ca:	ea01 0307 	and.w	r3, r1, r7
 80189ce:	4303      	orrs	r3, r0
 80189d0:	d01f      	beq.n	8018a12 <floor+0x9a>
 80189d2:	a327      	add	r3, pc, #156	; (adr r3, 8018a70 <floor+0xf8>)
 80189d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189d8:	f7e7 fc82 	bl	80002e0 <__adddf3>
 80189dc:	2200      	movs	r2, #0
 80189de:	2300      	movs	r3, #0
 80189e0:	f7e8 f8c4 	bl	8000b6c <__aeabi_dcmpgt>
 80189e4:	2800      	cmp	r0, #0
 80189e6:	d0eb      	beq.n	80189c0 <floor+0x48>
 80189e8:	2c00      	cmp	r4, #0
 80189ea:	bfbe      	ittt	lt
 80189ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80189f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80189f4:	19a4      	addlt	r4, r4, r6
 80189f6:	ea24 0407 	bic.w	r4, r4, r7
 80189fa:	2500      	movs	r5, #0
 80189fc:	e7e0      	b.n	80189c0 <floor+0x48>
 80189fe:	2e33      	cmp	r6, #51	; 0x33
 8018a00:	dd0b      	ble.n	8018a1a <floor+0xa2>
 8018a02:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018a06:	d104      	bne.n	8018a12 <floor+0x9a>
 8018a08:	ee10 2a10 	vmov	r2, s0
 8018a0c:	460b      	mov	r3, r1
 8018a0e:	f7e7 fc67 	bl	80002e0 <__adddf3>
 8018a12:	ec41 0b10 	vmov	d0, r0, r1
 8018a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a1a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8018a22:	fa23 f707 	lsr.w	r7, r3, r7
 8018a26:	4207      	tst	r7, r0
 8018a28:	d0f3      	beq.n	8018a12 <floor+0x9a>
 8018a2a:	a311      	add	r3, pc, #68	; (adr r3, 8018a70 <floor+0xf8>)
 8018a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a30:	f7e7 fc56 	bl	80002e0 <__adddf3>
 8018a34:	2200      	movs	r2, #0
 8018a36:	2300      	movs	r3, #0
 8018a38:	f7e8 f898 	bl	8000b6c <__aeabi_dcmpgt>
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	d0bf      	beq.n	80189c0 <floor+0x48>
 8018a40:	2c00      	cmp	r4, #0
 8018a42:	da02      	bge.n	8018a4a <floor+0xd2>
 8018a44:	2e14      	cmp	r6, #20
 8018a46:	d103      	bne.n	8018a50 <floor+0xd8>
 8018a48:	3401      	adds	r4, #1
 8018a4a:	ea25 0507 	bic.w	r5, r5, r7
 8018a4e:	e7b7      	b.n	80189c0 <floor+0x48>
 8018a50:	2301      	movs	r3, #1
 8018a52:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018a56:	fa03 f606 	lsl.w	r6, r3, r6
 8018a5a:	4435      	add	r5, r6
 8018a5c:	4545      	cmp	r5, r8
 8018a5e:	bf38      	it	cc
 8018a60:	18e4      	addcc	r4, r4, r3
 8018a62:	e7f2      	b.n	8018a4a <floor+0xd2>
 8018a64:	2500      	movs	r5, #0
 8018a66:	462c      	mov	r4, r5
 8018a68:	e7aa      	b.n	80189c0 <floor+0x48>
 8018a6a:	bf00      	nop
 8018a6c:	f3af 8000 	nop.w
 8018a70:	8800759c 	.word	0x8800759c
 8018a74:	7e37e43c 	.word	0x7e37e43c
 8018a78:	bff00000 	.word	0xbff00000
 8018a7c:	000fffff 	.word	0x000fffff

08018a80 <scalbn>:
 8018a80:	b570      	push	{r4, r5, r6, lr}
 8018a82:	ec55 4b10 	vmov	r4, r5, d0
 8018a86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018a8a:	4606      	mov	r6, r0
 8018a8c:	462b      	mov	r3, r5
 8018a8e:	b9aa      	cbnz	r2, 8018abc <scalbn+0x3c>
 8018a90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018a94:	4323      	orrs	r3, r4
 8018a96:	d03b      	beq.n	8018b10 <scalbn+0x90>
 8018a98:	4b31      	ldr	r3, [pc, #196]	; (8018b60 <scalbn+0xe0>)
 8018a9a:	4629      	mov	r1, r5
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	ee10 0a10 	vmov	r0, s0
 8018aa2:	f7e7 fdd3 	bl	800064c <__aeabi_dmul>
 8018aa6:	4b2f      	ldr	r3, [pc, #188]	; (8018b64 <scalbn+0xe4>)
 8018aa8:	429e      	cmp	r6, r3
 8018aaa:	4604      	mov	r4, r0
 8018aac:	460d      	mov	r5, r1
 8018aae:	da12      	bge.n	8018ad6 <scalbn+0x56>
 8018ab0:	a327      	add	r3, pc, #156	; (adr r3, 8018b50 <scalbn+0xd0>)
 8018ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ab6:	f7e7 fdc9 	bl	800064c <__aeabi_dmul>
 8018aba:	e009      	b.n	8018ad0 <scalbn+0x50>
 8018abc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018ac0:	428a      	cmp	r2, r1
 8018ac2:	d10c      	bne.n	8018ade <scalbn+0x5e>
 8018ac4:	ee10 2a10 	vmov	r2, s0
 8018ac8:	4620      	mov	r0, r4
 8018aca:	4629      	mov	r1, r5
 8018acc:	f7e7 fc08 	bl	80002e0 <__adddf3>
 8018ad0:	4604      	mov	r4, r0
 8018ad2:	460d      	mov	r5, r1
 8018ad4:	e01c      	b.n	8018b10 <scalbn+0x90>
 8018ad6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018ada:	460b      	mov	r3, r1
 8018adc:	3a36      	subs	r2, #54	; 0x36
 8018ade:	4432      	add	r2, r6
 8018ae0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018ae4:	428a      	cmp	r2, r1
 8018ae6:	dd0b      	ble.n	8018b00 <scalbn+0x80>
 8018ae8:	ec45 4b11 	vmov	d1, r4, r5
 8018aec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018b58 <scalbn+0xd8>
 8018af0:	f000 f83c 	bl	8018b6c <copysign>
 8018af4:	a318      	add	r3, pc, #96	; (adr r3, 8018b58 <scalbn+0xd8>)
 8018af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018afa:	ec51 0b10 	vmov	r0, r1, d0
 8018afe:	e7da      	b.n	8018ab6 <scalbn+0x36>
 8018b00:	2a00      	cmp	r2, #0
 8018b02:	dd08      	ble.n	8018b16 <scalbn+0x96>
 8018b04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018b08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018b0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018b10:	ec45 4b10 	vmov	d0, r4, r5
 8018b14:	bd70      	pop	{r4, r5, r6, pc}
 8018b16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018b1a:	da0d      	bge.n	8018b38 <scalbn+0xb8>
 8018b1c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018b20:	429e      	cmp	r6, r3
 8018b22:	ec45 4b11 	vmov	d1, r4, r5
 8018b26:	dce1      	bgt.n	8018aec <scalbn+0x6c>
 8018b28:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8018b50 <scalbn+0xd0>
 8018b2c:	f000 f81e 	bl	8018b6c <copysign>
 8018b30:	a307      	add	r3, pc, #28	; (adr r3, 8018b50 <scalbn+0xd0>)
 8018b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b36:	e7e0      	b.n	8018afa <scalbn+0x7a>
 8018b38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018b3c:	3236      	adds	r2, #54	; 0x36
 8018b3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018b42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018b46:	4620      	mov	r0, r4
 8018b48:	4629      	mov	r1, r5
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	4b06      	ldr	r3, [pc, #24]	; (8018b68 <scalbn+0xe8>)
 8018b4e:	e7b2      	b.n	8018ab6 <scalbn+0x36>
 8018b50:	c2f8f359 	.word	0xc2f8f359
 8018b54:	01a56e1f 	.word	0x01a56e1f
 8018b58:	8800759c 	.word	0x8800759c
 8018b5c:	7e37e43c 	.word	0x7e37e43c
 8018b60:	43500000 	.word	0x43500000
 8018b64:	ffff3cb0 	.word	0xffff3cb0
 8018b68:	3c900000 	.word	0x3c900000

08018b6c <copysign>:
 8018b6c:	ec51 0b10 	vmov	r0, r1, d0
 8018b70:	ee11 0a90 	vmov	r0, s3
 8018b74:	ee10 2a10 	vmov	r2, s0
 8018b78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018b7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8018b80:	ea41 0300 	orr.w	r3, r1, r0
 8018b84:	ec43 2b10 	vmov	d0, r2, r3
 8018b88:	4770      	bx	lr
	...

08018b8c <_init>:
 8018b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b8e:	bf00      	nop
 8018b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b92:	bc08      	pop	{r3}
 8018b94:	469e      	mov	lr, r3
 8018b96:	4770      	bx	lr

08018b98 <_fini>:
 8018b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b9a:	bf00      	nop
 8018b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b9e:	bc08      	pop	{r3}
 8018ba0:	469e      	mov	lr, r3
 8018ba2:	4770      	bx	lr
